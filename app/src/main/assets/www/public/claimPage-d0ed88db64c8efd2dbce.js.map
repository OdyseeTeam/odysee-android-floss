{"version":3,"file":"claimPage-d0ed88db64c8efd2dbce.js","mappings":"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","sources":["webpack://odysee.com/../ui/page/claim/internal/claimPageComponent/view.jsx","webpack://odysee.com/../ui/page/claim/internal/claimPageComponent/index.js","webpack://odysee.com/../ui/page/claim/view.jsx","webpack://odysee.com/../ui/page/claim/index.js"],"sourcesContent":["// @flow\nimport { DOMAIN } from 'config';\nimport { LINKED_COMMENT_QUERY_PARAM, THREAD_COMMENT_QUERY_PARAM } from 'constants/comment';\nimport React, { useEffect } from 'react';\nimport { lazyImport } from 'util/lazyImport';\nimport { Redirect } from 'react-router-dom';\nimport Spinner from 'component/spinner';\nimport { formatLbryUrlForWeb } from 'util/url';\nimport { parseURI } from 'util/lbryURI';\nimport * as COLLECTIONS_CONSTS from 'constants/collections';\nimport { COL_TYPES } from 'constants/collections';\nimport PAGES from 'constants/pages';\n\nconst ChannelPage = lazyImport(() => import('./internal/channelPage' /* webpackChunkName: \"channelPage\" */));\nconst StreamClaimPage = lazyImport(() =>\n  import('./internal/streamClaimPage' /* webpackChunkName: \"streamClaimPage\" */)\n);\nconst isDev = process.env.NODE_ENV !== 'production';\n\ntype Props = {\n  uri: string,\n  latestContentPath?: boolean,\n  liveContentPath?: boolean,\n  // -- redux --\n  claim: StreamClaim,\n  channelClaimId: ?string,\n  location: UrlLocation,\n  collectionId: string,\n  collection: Collection,\n  collectionFirstItemUri: ?string,\n  latestClaimUrl: ?string,\n  creatorSettings: { [string]: PerChannelSettings },\n  doFetchCreatorSettings: (channelId: string) => Promise<any>,\n  doFetchLatestClaimForChannel: (uri: string) => void,\n  doFetchChannelIsLiveForId: (channelId: string) => void,\n  doFetchItemsInCollection: (params: { collectionId: string }) => void,\n};\n\nconst ClaimPageComponent = (props: Props) => {\n  const {\n    uri,\n    latestContentPath,\n    liveContentPath,\n    // -- redux --\n    claim,\n    channelClaimId,\n    location,\n    collectionId,\n    collection,\n    collectionFirstItemUri,\n    latestClaimUrl,\n    creatorSettings,\n    doFetchCreatorSettings,\n    doFetchLatestClaimForChannel,\n    doFetchChannelIsLiveForId,\n    doFetchItemsInCollection,\n  } = props;\n\n  const { search, pathname, hash } = location;\n  const urlParams = new URLSearchParams(search);\n  const linkedCommentId = urlParams.get(LINKED_COMMENT_QUERY_PARAM);\n  const threadCommentId = urlParams.get(THREAD_COMMENT_QUERY_PARAM);\n\n  const canonicalUrl = claim && claim.canonical_url;\n  const claimId = claim && claim.claim_id;\n  const isNewestPath = latestContentPath || liveContentPath;\n\n  const isCollection = claim && claim.value_type === 'collection';\n\n  const { isChannel } = parseURI(uri);\n\n  useEffect(() => {\n    if (!latestClaimUrl && liveContentPath && claimId) {\n      doFetchChannelIsLiveForId(claimId);\n    }\n  }, [claimId, doFetchChannelIsLiveForId, latestClaimUrl, liveContentPath]);\n\n  useEffect(() => {\n    if (!latestClaimUrl && latestContentPath && canonicalUrl) {\n      doFetchLatestClaimForChannel(canonicalUrl);\n    }\n  }, [canonicalUrl, doFetchLatestClaimForChannel, latestClaimUrl, latestContentPath]);\n\n  useEffect(() => {\n    if (canonicalUrl) {\n      const statePos =\n        hash.indexOf('#state') > -1\n          ? hash.indexOf('#state')\n          : hash.indexOf('&state') > -1\n          ? hash.indexOf('&state')\n          : undefined;\n      const pageHash = statePos === undefined ? hash : hash.substring(0, statePos);\n      const urlPath = pathname + pageHash;\n      const path = urlPath.slice(1).replace(/:/g, '#');\n      // parseURI can parse queries and hashes when they are mixed with the uri\n      let queryString, pathHash;\n      try {\n        ({ queryString, pathHash } = parseURI(path));\n      } catch (e) {}\n      const canonicalUrlPath = '/' + canonicalUrl.replace(/^lbry:\\/\\//, '').replace(/#/g, ':');\n\n      // replaceState will fail if on a different domain (like webcache.googleusercontent.com)\n      const hostname = isDev ? 'localhost' : DOMAIN;\n\n      let replaceUrl = canonicalUrlPath;\n      if (canonicalUrlPath !== urlPath && hostname === window.location.hostname) {\n        const urlParams = new URLSearchParams(search || queryString);\n        if (urlParams.get(COLLECTIONS_CONSTS.COLLECTION_ID)) {\n          const listId = urlParams.get(COLLECTIONS_CONSTS.COLLECTION_ID) || '';\n          urlParams.set(COLLECTIONS_CONSTS.COLLECTION_ID, listId);\n        }\n\n        if (urlParams.toString()) replaceUrl += `?${urlParams.toString()}`;\n        if (pathHash || (!pathHash && !queryString && pageHash)) replaceUrl += String(pathHash || pageHash);\n\n        history.replaceState(history.state, '', replaceUrl);\n      }\n    }\n  }, [canonicalUrl, pathname, hash, search]);\n\n  React.useEffect(() => {\n    if (creatorSettings === undefined && channelClaimId) {\n      doFetchCreatorSettings(channelClaimId).catch(() => {});\n    }\n  }, [channelClaimId, creatorSettings, doFetchCreatorSettings]);\n\n  React.useEffect(() => {\n    if (claim && collectionId) {\n      doFetchItemsInCollection({ collectionId });\n    }\n  }, [claim, collectionFirstItemUri, collectionId, doFetchItemsInCollection, isCollection]);\n\n  // Wait for latest claim fetch\n  if (isNewestPath && latestClaimUrl === undefined) {\n    return (\n      <div className=\"main--empty\">\n        <Spinner delayed />\n      </div>\n    );\n  }\n\n  if (isNewestPath && latestClaimUrl) {\n    const params = urlParams.toString() !== '' ? `?${urlParams.toString()}` : '';\n    return <Redirect to={`${formatLbryUrlForWeb(latestClaimUrl)}${params}`} />;\n  }\n\n  // Don't navigate directly to repost urls\n  // Always redirect to the actual content\n  // Also redirect to channel page (uri) when on a non-existing latest path (live or content)\n  if (claim && (claim.repost_url === uri || (isNewestPath && latestClaimUrl === null))) {\n    const newUrl = formatLbryUrlForWeb(canonicalUrl);\n    return <Redirect to={newUrl} />;\n  }\n\n  if (claim && isCollection && collectionFirstItemUri) {\n    switch (collection?.type) {\n      case COL_TYPES.COLLECTION:\n      case COL_TYPES.PLAYLIST:\n        urlParams.set(COLLECTIONS_CONSTS.COLLECTION_ID, claim.claim_id);\n        const newUrl = formatLbryUrlForWeb(`${collectionFirstItemUri}?${urlParams.toString()}`);\n        return <Redirect to={newUrl} />;\n\n      case COL_TYPES.FEATURED_CHANNELS:\n        return <Redirect to={`/$/${PAGES.PLAYLIST}/${claim.claim_id}`} />;\n\n      default:\n        // Do nothing\n        break;\n    }\n  }\n\n  if (isChannel) {\n    return <ChannelPage uri={uri} location={location} />;\n  }\n\n  return (\n    <StreamClaimPage\n      uri={uri}\n      collectionId={collectionId}\n      linkedCommentId={linkedCommentId}\n      threadCommentId={threadCommentId}\n    />\n  );\n};\n\nexport default ClaimPageComponent;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport {\n  selectClaimForUri,\n  selectIsUriResolving,\n  selectClaimIsMine,\n  makeSelectClaimIsPending,\n  selectGeoRestrictionForUri,\n  selectLatestClaimForUri,\n  makeSelectTagInClaimOrChannelForUri,\n} from 'redux/selectors/claims';\nimport {\n  selectCollectionForId,\n  selectFirstItemUrlForCollection,\n  selectAreCollectionItemsFetchingForId,\n} from 'redux/selectors/collections';\nimport { selectHomepageFetched, selectUserVerifiedEmail } from 'redux/selectors/user';\nimport { doResolveUri, doResolveClaimId, doFetchLatestClaimForChannel } from 'redux/actions/claims';\nimport { doBeginPublish } from 'redux/actions/publish';\nimport { doOpenModal } from 'redux/actions/app';\nimport { getChannelIdFromClaim } from 'util/claim';\nimport * as COLLECTIONS_CONSTS from 'constants/collections';\nimport { selectIsSubscribedForUri } from 'redux/selectors/subscriptions';\nimport { selectBlacklistedOutpointMap, selectFilteredOutpointMap } from 'lbryinc';\nimport { selectLatestLiveClaimForChannel, selectLatestLiveUriForChannel } from 'redux/selectors/livestream';\nimport { doFetchChannelIsLiveForId } from 'redux/actions/livestream';\nimport { doFetchCreatorSettings } from 'redux/actions/comments';\nimport { selectSettingsForChannelId } from 'redux/selectors/comments';\nimport { doFetchItemsInCollection } from 'redux/actions/collections';\nimport { PREFERENCE_EMBED } from 'constants/tags';\n\nimport withResolvedClaimRender from 'hocs/withResolvedClaimRender';\n\nimport ClaimPageComponent from './view';\n\nconst select = (state, props) => {\n  const { uri, location, liveContentPath } = props;\n  const { search } = location;\n\n  const urlParams = new URLSearchParams(search);\n\n  const claim = selectClaimForUri(state, uri);\n  const channelClaimId = getChannelIdFromClaim(claim);\n  const collectionId =\n    urlParams.get(COLLECTIONS_CONSTS.COLLECTION_ID) ||\n    (claim && claim.value_type === 'collection' && claim.claim_id) ||\n    null;\n\n  const { canonical_url: canonicalUrl, claim_id: claimId } = claim || {};\n  const latestContentClaim = liveContentPath\n    ? selectLatestLiveClaimForChannel(state, claimId)\n    : selectLatestClaimForUri(state, canonicalUrl);\n  const latestClaimUrl = liveContentPath\n    ? selectLatestLiveUriForChannel(state, claimId)\n    : latestContentClaim && latestContentClaim.canonical_url;\n  const preferEmbed = makeSelectTagInClaimOrChannelForUri(uri, PREFERENCE_EMBED)(state);\n\n  return {\n    uri,\n    claim,\n    channelClaimId,\n    latestClaimUrl,\n    preferEmbed,\n    isResolvingUri: selectIsUriResolving(state, uri),\n    blackListedOutpointMap: selectBlacklistedOutpointMap(state),\n    filteredOutpointMap: selectFilteredOutpointMap(state),\n    isSubscribed: selectIsSubscribedForUri(state, uri),\n    claimIsMine: selectClaimIsMine(state, claim),\n    claimIsPending: makeSelectClaimIsPending(uri)(state),\n    collection: selectCollectionForId(state, collectionId),\n    collectionId,\n    collectionFirstItemUri: selectFirstItemUrlForCollection(state, collectionId),\n    isResolvingCollection: selectAreCollectionItemsFetchingForId(state, collectionId),\n    isAuthenticated: selectUserVerifiedEmail(state),\n    geoRestriction: selectGeoRestrictionForUri(state, uri),\n    homepageFetched: selectHomepageFetched(state),\n    creatorSettings: selectSettingsForChannelId(state, channelClaimId),\n  };\n};\n\nconst perform = {\n  doResolveUri,\n  doBeginPublish,\n  doResolveClaimId,\n  doOpenModal,\n  doFetchLatestClaimForChannel,\n  doFetchChannelIsLiveForId,\n  doFetchCreatorSettings,\n  doFetchItemsInCollection,\n};\n\nexport default withResolvedClaimRender(withRouter(connect(select, perform)(ClaimPageComponent)));\n","// @flow\nimport React from 'react';\n\nimport { useHistory } from 'react-router';\nimport { CHANNEL_PAGE } from 'constants/urlParams';\nimport { parseURI } from 'util/lbryURI';\n\nimport Page from 'component/page';\nimport ClaimPageComponent from './internal/claimPageComponent';\n\ntype Props = {\n  uri: string,\n  latestContentPath?: boolean,\n  liveContentPath?: boolean,\n  // -- redux --\n  isMarkdownPost: ?boolean,\n  isLivestreamClaim: ?boolean,\n  chatDisabled: ?boolean,\n};\n\nconst ClaimPage = (props: Props) => {\n  const { uri, latestContentPath, liveContentPath, isMarkdownPost, isLivestreamClaim, chatDisabled } = props;\n\n  const { isChannel } = parseURI(uri);\n\n  const {\n    location: { search },\n  } = useHistory();\n\n  const ClaimRenderWrapper = React.useMemo(\n    () =>\n      ({ children }: { children: any }) =>\n        (\n          <Page className=\"file-page\" filePage isMarkdown={!!isMarkdownPost}>\n            {children}\n          </Page>\n        ),\n    [isMarkdownPost]\n  );\n\n  const LivestreamPageWrapper = React.useMemo(\n    () =>\n      ({ children }: { children: any }) =>\n        (\n          <Page className=\"file-page\" noFooter livestream={!chatDisabled}>\n            {children}\n          </Page>\n        ),\n    [chatDisabled]\n  );\n\n  if (isChannel) {\n    const urlParams = new URLSearchParams(search);\n    const editing = urlParams.get(CHANNEL_PAGE.QUERIES.VIEW) === CHANNEL_PAGE.VIEWS.EDIT;\n\n    if (editing) {\n      return <ClaimPageComponent uri={uri} ClaimRenderWrapper={ChannelPageEditingWrapper} Wrapper={Page} />;\n    }\n\n    return (\n      <ClaimPageComponent\n        uri={uri}\n        ClaimRenderWrapper={ChannelPageWrapper}\n        Wrapper={Page}\n        latestContentPath={latestContentPath}\n        liveContentPath={liveContentPath}\n      />\n    );\n  }\n\n  if (isLivestreamClaim) {\n    return <ClaimPageComponent uri={uri} ClaimRenderWrapper={LivestreamPageWrapper} Wrapper={Page} />;\n  }\n\n  return (\n    <ClaimPageComponent\n      uri={uri}\n      ClaimRenderWrapper={ClaimRenderWrapper}\n      Wrapper={Page}\n      latestContentPath={latestContentPath}\n      liveContentPath={liveContentPath}\n    />\n  );\n};\n\nconst ChannelPageWrapper = ({ children }: { children: any }) => (\n  <Page className=\"channelPage-wrapper\" noFooter fullWidthPage>\n    {children}\n  </Page>\n);\n\nconst ChannelPageEditingWrapper = ({ children }: { children: any }) => (\n  <Page className=\"channelPage-wrapper channelPage-edit-wrapper\" noFooter fullWidthPage>\n    {children}\n  </Page>\n);\n\nexport default ClaimPage;\n","import { connect } from 'react-redux';\n\nimport { selectIsMarkdownPostForUri } from 'redux/selectors/content';\nimport { selectIsStreamPlaceholderForUri, selectChannelClaimIdForUri } from 'redux/selectors/claims';\nimport { selectCommentsDisabledSettingForChannelId } from 'redux/selectors/comments';\n\nimport ClaimPage from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  return {\n    isMarkdownPost: selectIsMarkdownPostForUri(state, uri),\n    isLivestreamClaim: selectIsStreamPlaceholderForUri(state, uri),\n    chatDisabled: selectCommentsDisabledSettingForChannelId(state, selectChannelClaimIdForUri(state, uri)),\n  };\n};\n\nexport default connect(select)(ClaimPage);\n"],"names":["ChannelPage","lazyImport","StreamClaimPage","props","uri","latestContentPath","liveContentPath","claim","channelClaimId","location","collectionId","collection","collectionFirstItemUri","latestClaimUrl","creatorSettings","doFetchCreatorSettings","doFetchLatestClaimForChannel","doFetchChannelIsLiveForId","doFetchItemsInCollection","search","pathname","hash","urlParams","URLSearchParams","linkedCommentId","get","LINKED_COMMENT_QUERY_PARAM","threadCommentId","THREAD_COMMENT_QUERY_PARAM","canonicalUrl","canonical_url","claimId","claim_id","isNewestPath","isCollection","value_type","isChannel","parseURI","useEffect","queryString","pathHash","statePos","indexOf","undefined","pageHash","substring","urlPath","path","slice","replace","_parseURI2","e","canonicalUrlPath","hostname","DOMAIN","replaceUrl","window","_urlParams","COLLECTIONS_CONSTS","listId","set","toString","concat","String","history","replaceState","state","React","className","Spinner","delayed","_params","Redirect","to","formatLbryUrlForWeb","repost_url","newUrl","type","COL_TYPES","_newUrl","PAGES","perform","doResolveUri","doBeginPublish","doResolveClaimId","doOpenModal","withResolvedClaimRender","withRouter","connect","selectClaimForUri","getChannelIdFromClaim","_ref","latestContentClaim","selectLatestLiveClaimForChannel","selectLatestClaimForUri","selectLatestLiveUriForChannel","preferEmbed","makeSelectTagInClaimOrChannelForUri","PREFERENCE_EMBED","isResolvingUri","selectIsUriResolving","blackListedOutpointMap","selectBlacklistedOutpointMap","filteredOutpointMap","selectFilteredOutpointMap","isSubscribed","selectIsSubscribedForUri","claimIsMine","selectClaimIsMine","claimIsPending","makeSelectClaimIsPending","selectCollectionForId","selectFirstItemUrlForCollection","isResolvingCollection","selectAreCollectionItemsFetchingForId","isAuthenticated","selectUserVerifiedEmail","geoRestriction","selectGeoRestrictionForUri","homepageFetched","selectHomepageFetched","selectSettingsForChannelId","ClaimPageComponent","ChannelPageWrapper","_ref3","children","Page","noFooter","fullWidthPage","ChannelPageEditingWrapper","_ref4","isMarkdownPost","isLivestreamClaim","chatDisabled","useHistory","ClaimRenderWrapper","filePage","isMarkdown","LivestreamPageWrapper","_ref2","livestream","CHANNEL_PAGE","Wrapper","selectIsMarkdownPostForUri","selectIsStreamPlaceholderForUri","selectCommentsDisabledSettingForChannelId","selectChannelClaimIdForUri","ClaimPage"],"sourceRoot":""}