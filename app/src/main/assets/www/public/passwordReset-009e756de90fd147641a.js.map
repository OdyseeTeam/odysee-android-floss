{"version":3,"file":"passwordReset-009e756de90fd147641a.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/userPasswordReset/view.jsx","webpack://odysee.com/../ui/component/userPasswordReset/index.js","webpack://odysee.com/../ui/constants/email.js","webpack://odysee.com/../ui/page/passwordReset/index.js","webpack://odysee.com/../ui/page/passwordReset/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Card from 'component/common/card';\nimport Spinner from 'component/spinner';\nimport { Form, FormField } from 'component/common/form';\nimport { EMAIL_REGEX } from 'constants/email';\nimport ErrorText from 'component/common/error-text';\nimport Button from 'component/button';\nimport Nag from 'component/nag';\n\ntype Props = {\n  user: ?User,\n  doToast: ({ message: string }) => void,\n  doUserPasswordReset: (string) => void,\n  doClearPasswordEntry: () => void,\n  doClearEmailEntry: () => void,\n  passwordResetPending: boolean,\n  passwordResetSuccess: boolean,\n  passwordResetError: ?string,\n  emailToVerify: ?string,\n};\n\nfunction UserPasswordReset(props: Props) {\n  const {\n    doUserPasswordReset,\n    passwordResetPending,\n    passwordResetError,\n    passwordResetSuccess,\n    doToast,\n    doClearPasswordEntry,\n    doClearEmailEntry,\n    emailToVerify,\n  } = props;\n  const { location, push, goBack } = useHistory();\n  const [email, setEmail] = React.useState(emailToVerify || '');\n  const valid = email.match(EMAIL_REGEX);\n  const restartAtSignInPage = location.pathname === `/$/${PAGES.AUTH_SIGNIN}`;\n\n  function handleSubmit() {\n    if (email) {\n      doUserPasswordReset(email);\n    }\n  }\n\n  function handleRestart() {\n    setEmail('');\n    doClearPasswordEntry();\n    doClearEmailEntry();\n    if (restartAtSignInPage) {\n      push(`/$/${PAGES.AUTH_SIGNIN}`);\n    } else {\n      goBack();\n    }\n  }\n\n  React.useEffect(() => {\n    if (passwordResetSuccess) {\n      doToast({\n        message: __('Email sent!'),\n      });\n    }\n  }, [passwordResetSuccess, doToast]);\n\n  return (\n    <section className=\"main__sign-in\">\n      <Card\n        title={__('Reset your password')}\n        actions={\n          <div>\n            <Form onSubmit={handleSubmit} className=\"section\">\n              <FormField\n                autoFocus\n                disabled={passwordResetSuccess}\n                placeholder={__('yourstruly@example.com')}\n                type=\"email\"\n                name=\"sign_in_email\"\n                id=\"username\"\n                autoComplete=\"on\"\n                label={__('Email')}\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n\n              <div className=\"section__actions\">\n                <Button\n                  button=\"primary\"\n                  type=\"submit\"\n                  label={passwordResetPending ? __('Resetting') : __('Reset Password')}\n                  disabled={!email || !valid || passwordResetPending || passwordResetSuccess}\n                />\n                <Button button=\"link\" label={__('Cancel')} onClick={handleRestart} />\n                {passwordResetPending && <Spinner type=\"small\" />}\n              </div>\n            </Form>\n          </div>\n        }\n        nag={\n          <React.Fragment>\n            {passwordResetError && <Nag type=\"error\" relative message={<ErrorText>{passwordResetError}</ErrorText>} />}\n            {passwordResetSuccess && (\n              <Nag type=\"helpful\" relative message={__('Check your email for a link to reset your password.')} />\n            )}\n          </React.Fragment>\n        }\n      />\n    </section>\n  );\n}\n\nexport default UserPasswordReset;\n","import { connect } from 'react-redux';\nimport {\n  selectPasswordResetSuccess,\n  selectPasswordResetIsPending,\n  selectPasswordResetError,\n  selectEmailToVerify,\n} from 'redux/selectors/user';\nimport { doUserPasswordReset, doClearPasswordEntry, doClearEmailEntry } from 'redux/actions/user';\nimport { doToast } from 'redux/actions/notifications';\nimport UserSignIn from './view';\n\nconst select = state => ({\n  passwordResetSuccess: selectPasswordResetSuccess(state),\n  passwordResetIsPending: selectPasswordResetIsPending(state),\n  passwordResetError: selectPasswordResetError(state),\n  emailToVerify: selectEmailToVerify(state),\n});\n\nexport default connect(select, {\n  doUserPasswordReset,\n  doToast,\n  doClearPasswordEntry,\n  doClearEmailEntry,\n})(UserSignIn);\n","export const EMAIL_REGEX = /^[^@]+@[^@]+$/;\n","import PasswordResetPage from './view';\n\nexport default PasswordResetPage;\n","// @flow\nimport React from 'react';\nimport UserPasswordReset from 'component/userPasswordReset';\nimport Page from 'component/page';\n\nexport default function PasswordResetPage() {\n  return (\n    <Page authPage>\n      <UserPasswordReset />\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","doUserPasswordReset","passwordResetPending","passwordResetError","passwordResetSuccess","doToast","doClearPasswordEntry","doClearEmailEntry","emailToVerify","_useHistory","useHistory","location","push","goBack","_React$useState2","email","setEmail","valid","match","EMAIL_REGEX","restartAtSignInPage","pathname","concat","PAGES","message","Card","Form","onSubmit","FormField","autoFocus","disabled","placeholder","type","name","autoComplete","label","value","onChange","target","Spinner","Nag","relative","ErrorText","connect","state","selectPasswordResetSuccess","passwordResetIsPending","selectPasswordResetIsPending","selectPasswordResetError","selectEmailToVerify","UserSignIn","Page","authPage","UserPasswordReset"],"sourceRoot":""}