{"version":3,"file":"supportersTab-692b0753972b94c33241.js","mappings":"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","sources":["webpack://odysee.com/../ui/page/creatorMemberships/creatorArea/internal/supportersTab/view.jsx","webpack://odysee.com/../ui/page/creatorMemberships/creatorArea/internal/supportersTab/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport moment from 'moment';\n\nimport { buildURI } from 'util/lbryURI';\n\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport Yrbl from 'component/yrbl';\nimport Button from 'component/button';\nimport ErrorBubble from 'component/common/error-bubble';\nimport UriIndicator from 'component/uriIndicator';\n\ntype Props = {\n  channelsToList: ?Array<ChannelClaim>,\n  switchToTiersTab: () => void,\n  // -- redux --\n  supportersList: ?SupportersList,\n  channelMembershipTiers: ?CreatorMemberships,\n  doResolveClaimIds: (claimIds: Array<string>) => void,\n};\n\nconst SupportersTab = (props: Props) => {\n  const {\n    channelsToList,\n    switchToTiersTab,\n    // -- redux --\n    supportersList,\n    channelMembershipTiers,\n    doResolveClaimIds,\n  } = props;\n\n  const hasAnySupporters = React.useMemo(() => {\n    return Boolean(\n      channelsToList &&\n        channelsToList.some((channel) => {\n          const channelHasSupporters =\n            supportersList && supportersList.some((supporter) => channel.name === supporter.ChannelBeingSupported);\n\n          return channelHasSupporters;\n        })\n    );\n  }, [channelsToList, supportersList]);\n\n  const isViewingSingleChannel = channelsToList && channelsToList.length === 1;\n\n  React.useEffect(() => {\n    if (supportersList) {\n      const supportersClaimIds = supportersList.map((channel) => channel.ChannelID);\n      doResolveClaimIds(supportersClaimIds);\n    }\n  }, [supportersList, doResolveClaimIds]);\n\n  if (isViewingSingleChannel && !channelMembershipTiers) {\n    return (\n      <ErrorBubble\n        title={__(`This channel doesn't have any Tiers`)}\n        subtitle={__('To be able to begin receiving payments you have to add at least 1 Tier to your channel.')}\n        action={<Button button=\"primary\" label={__('Add a Tier')} onClick={switchToTiersTab} />}\n      />\n    );\n  }\n\n  if (!hasAnySupporters) {\n    return (\n      <Yrbl\n        title={isViewingSingleChannel ? __('This channel has no supporters yet') : __('No supporters yet')}\n        subtitle={__('Once you have supporters, they will appear here.')}\n      />\n    );\n  }\n\n  return (\n    <>\n      <div className=\"membership-table__wrapper\">\n        {channelsToList &&\n          channelsToList.map((listedChannelClaim) => {\n            const supportersForChannel =\n              supportersList &&\n              supportersList.filter((supporter) => listedChannelClaim.name === supporter.ChannelBeingSupported);\n\n            return (\n              supportersForChannel &&\n              supportersForChannel.length > 0 && (\n                <React.Fragment key={listedChannelClaim.claim_id}>\n                  <div className=\"table-channel-header\">\n                    {(!isViewingSingleChannel || !channelMembershipTiers) && (\n                      <ChannelThumbnail xsmall uri={listedChannelClaim.canonical_url} />\n                    )}\n                    {(!isViewingSingleChannel || !channelMembershipTiers) &&\n                      (listedChannelClaim.value.title || listedChannelClaim.name)}\n                  </div>\n\n                  <div className=\"membership-table__wrapper\">\n                    <table className=\"table\">\n                      <thead>\n                        <tr>\n                          <th className=\"channelName-header\" colSpan=\"2\">\n                            {__('Channel Name')}\n                          </th>\n                          <th>{__('Tier')}</th>\n                          <th>{__('Amount')}</th>\n                          <th>{__('Joined On')}</th>\n                          <th>{__('Months Supporting')}</th>\n                        </tr>\n                      </thead>\n\n                      <tbody>\n                        {supportersForChannel.map((supporter, i) => {\n                          const supporterUri =\n                            supporter.ChannelName === ''\n                              ? undefined\n                              : buildURI({\n                                  channelName: supporter.ChannelName,\n                                  channelClaimId: supporter.ChannelID,\n                                });\n\n                          return (\n                            <tr key={i}>\n                              <td className=\"channelThumbnail\">\n                                {supporterUri ? (\n                                  <UriIndicator focusable={false} uri={supporterUri} link>\n                                    <ChannelThumbnail xsmall link uri={supporterUri} />\n                                  </UriIndicator>\n                                ) : (\n                                  <ChannelThumbnail xsmall uri={supporterUri} />\n                                )}\n                              </td>\n                              <td>\n                                <span dir=\"auto\" className=\"button__label\">\n                                  {supporter.ChannelName === '' ? (\n                                    __('Anonymous')\n                                  ) : (\n                                    <UriIndicator link uri={supporterUri} />\n                                  )}\n                                </span>\n                              </td>\n                              <td>{supporter.MembershipName}</td>\n                              <td>${supporter.Price / 100} USD / Month</td>\n                              <td>{moment(new Date(supporter.JoinedAtTime)).format('LL')}</td>\n                              <td>\n                                {Math.ceil(moment(new Date()).diff(new Date(supporter.JoinedAtTime), 'months', true))}\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </React.Fragment>\n              )\n            );\n          })}\n      </div>\n    </>\n  );\n};\n\nexport default SupportersTab;\n","import { connect } from 'react-redux';\n\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport { selectMySupportersList, selectMembershipTiersForCreatorId } from 'redux/selectors/memberships';\nimport { doResolveClaimIds } from 'redux/actions/claims';\n\nimport SupportersTab from './view';\n\nconst select = (state) => {\n  const activeChannelClaim = selectActiveChannelClaim(state);\n\n  return {\n    channelMembershipTiers: activeChannelClaim && selectMembershipTiersForCreatorId(state, activeChannelClaim.claim_id),\n    supportersList: selectMySupportersList(state),\n  };\n};\n\nconst perform = {\n  doResolveClaimIds,\n};\n\nexport default connect(select, perform)(SupportersTab);\n"],"names":["props","channelsToList","switchToTiersTab","supportersList","channelMembershipTiers","doResolveClaimIds","hasAnySupporters","React","Boolean","some","channel","supporter","name","ChannelBeingSupported","isViewingSingleChannel","length","supportersClaimIds","map","ChannelID","ErrorBubble","title","__","subtitle","action","Button","button","label","onClick","className","listedChannelClaim","supportersForChannel","filter","key","claim_id","ChannelThumbnail","xsmall","uri","canonical_url","value","colSpan","i","supporterUri","ChannelName","undefined","buildURI","channelName","channelClaimId","UriIndicator","focusable","link","dir","MembershipName","Price","moment","Date","JoinedAtTime","format","Math","ceil","diff","Yrbl","perform","connect","state","activeChannelClaim","selectActiveChannelClaim","selectMembershipTiersForCreatorId","selectMySupportersList","SupportersTab"],"sourceRoot":""}