{"version":3,"file":"modalClaimCollectionAdd-35a345a8ea6d771f2544.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/formNewCollection/view.jsx","webpack://odysee.com/../ui/component/formNewCollection/index.js","webpack://odysee.com/../ui/modal/modalClaimCollectionAdd/internal/claimCollectionAdd/internal/collectionSelectItem/view.jsx","webpack://odysee.com/../ui/modal/modalClaimCollectionAdd/internal/claimCollectionAdd/internal/collectionSelectItem/index.js","webpack://odysee.com/../ui/modal/modalClaimCollectionAdd/internal/claimCollectionAdd/view.jsx","webpack://odysee.com/../ui/modal/modalClaimCollectionAdd/internal/claimCollectionAdd/index.js","webpack://odysee.com/../ui/modal/modalClaimCollectionAdd/view.jsx","webpack://odysee.com/../ui/modal/modalClaimCollectionAdd/index.js"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport React from 'react';\nimport type { ElementRef } from 'react';\nimport * as ICONS from 'constants/icons';\nimport * as KEYCODES from 'constants/keycodes';\nimport * as COLLECTIONS_CONSTS from 'constants/collections';\nimport { FormField } from 'component/common/form';\nimport Button from 'component/button';\n\ntype Props = {\n  uri?: string,\n  sourceId?: string,\n  onlyCreate?: boolean,\n  closeForm: (newCollectionName?: string, newCollectionId?: string) => void,\n  // -- redux --\n  sourceCollectionName?: string,\n  doPlaylistAddAndAllowPlaying: (params: { uri?: string, collectionName: string, createNew: boolean }) => void,\n};\n\nfunction FormNewCollection(props: Props) {\n  const { uri, sourceId, onlyCreate, closeForm, sourceCollectionName, doPlaylistAddAndAllowPlaying } = props;\n\n  const buttonref: ElementRef<any> = React.useRef();\n\n  const [newCollectionName, setCollectionName] = React.useState(\n    sourceCollectionName ? __('%copied_playlist_name% (copy)', { copied_playlist_name: sourceCollectionName }) : ''\n  );\n\n  function handleNameInput(e) {\n    const { value } = e.target;\n    setCollectionName(value);\n  }\n\n  function handleAddCollection() {\n    const name = newCollectionName;\n    let id;\n\n    doPlaylistAddAndAllowPlaying({\n      uri,\n      collectionName: name,\n      sourceId,\n      createNew: true,\n      createCb: !sourceId\n        ? undefined\n        : (newId) => {\n            id = newId;\n          },\n    });\n\n    closeForm(name, id);\n  }\n\n  function altEnterListener(e: SyntheticKeyboardEvent<*>) {\n    if (e.keyCode === KEYCODES.ENTER) {\n      e.preventDefault();\n      buttonref.current.click();\n    }\n  }\n\n  function onTextareaFocus() {\n    window.addEventListener('keydown', altEnterListener);\n  }\n\n  function onTextareaBlur() {\n    window.removeEventListener('keydown', altEnterListener);\n  }\n\n  function handleClearNew() {\n    closeForm();\n  }\n\n  return (\n    <FormField\n      autoFocus\n      type=\"text\"\n      name=\"new_collection\"\n      label={__('New Playlist Title')}\n      placeholder={__(COLLECTIONS_CONSTS.PLACEHOLDER)}\n      onFocus={onTextareaFocus}\n      onBlur={onTextareaBlur}\n      inputButton={\n        <>\n          <Button\n            button=\"alt\"\n            icon={ICONS.COMPLETED}\n            title={__('Confirm')}\n            className=\"button-toggle\"\n            disabled={newCollectionName.length === 0}\n            onClick={handleAddCollection}\n            ref={buttonref}\n          />\n          {!onlyCreate && (\n            <Button\n              button=\"alt\"\n              className=\"button-toggle\"\n              icon={ICONS.REMOVE}\n              title={__('Cancel')}\n              onClick={handleClearNew}\n            />\n          )}\n        </>\n      }\n      onChange={handleNameInput}\n      value={newCollectionName}\n    />\n  );\n}\n\nexport default FormNewCollection;\n","import { connect } from 'react-redux';\nimport FormNewCollection from './view';\nimport { doPlaylistAddAndAllowPlaying } from 'redux/actions/content';\nimport { selectCollectionForId } from 'redux/selectors/collections';\n\nconst select = (state, props) => {\n  const { sourceId } = props;\n\n  return {\n    sourceCollectionName: sourceId && selectCollectionForId(state, sourceId).name,\n  };\n};\n\nconst perform = {\n  doPlaylistAddAndAllowPlaying,\n};\n\nexport default connect(select, perform)(FormNewCollection);\n","// @flow\nimport React from 'react';\nimport { FormField } from 'component/common/form';\nimport { COL_TYPES } from 'constants/collections';\nimport { getLocalizedNameForCollectionId } from 'util/collections';\nimport Icon from 'component/common/icon';\n\ntype Props = {\n  icon: string,\n  uri: string,\n  // -- redux --\n  collection: Collection,\n  collectionHasClaim: boolean,\n  collectionPending: Collection,\n  doPlaylistAddAndAllowPlaying: (params: { uri: string, collectionName: string, collectionId: string }) => void,\n};\n\nfunction CollectionSelectItem(props: Props) {\n  const { icon, uri, collection, collectionHasClaim, collectionPending, doPlaylistAddAndAllowPlaying } = props;\n  const id = collection.id;\n  const name = getLocalizedNameForCollectionId(id) || collection.name;\n\n  const [checked, setChecked] = React.useState(collectionHasClaim);\n\n  function handleChange() {\n    setChecked((prevChecked) => !prevChecked);\n\n    doPlaylistAddAndAllowPlaying({ uri, collectionId: id, collectionName: name });\n  }\n\n  if (collection?.type === COL_TYPES.FEATURED_CHANNELS) {\n    return null;\n  }\n\n  return (\n    <li className=\"collection-select__item\">\n      <FormField\n        checked={checked}\n        disabled={collectionPending}\n        icon={icon}\n        type=\"checkbox\"\n        name={`select-${id}`}\n        onChange={handleChange}\n        label={\n          <span>\n            <Icon icon={icon} className={'icon-collection-select'} />\n            {`${name}`}\n          </span>\n        }\n      />\n    </li>\n  );\n}\n\nexport default CollectionSelectItem;\n","import { connect } from 'react-redux';\nimport { selectCollectionForId, selectCollectionForIdHasClaimUrl } from 'redux/selectors/collections';\nimport { makeSelectClaimIsPending } from 'redux/selectors/claims';\nimport { doPlaylistAddAndAllowPlaying } from 'redux/actions/content';\nimport CollectionSelectItem from './view';\n\nconst select = (state, props) => {\n  const { collectionId, uri } = props;\n\n  return {\n    collection: selectCollectionForId(state, collectionId),\n    collectionHasClaim: selectCollectionForIdHasClaimUrl(state, collectionId, uri),\n    collectionPending: makeSelectClaimIsPending(collectionId)(state),\n  };\n};\n\nconst perform = {\n  doPlaylistAddAndAllowPlaying,\n};\n\nexport default connect(select, perform)(CollectionSelectItem);\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport CollectionSelectItem from './internal/collectionSelectItem';\nimport FormNewCollection from 'component/formNewCollection';\nimport * as COLS from 'constants/collections';\nimport * as ICONS from 'constants/icons';\nimport Spinner from 'component/spinner';\n\ntype Props = {\n  uri: string,\n  closeModal: () => void,\n  // -- redux --\n  published: CollectionList,\n  unpublished: CollectionList,\n  fetchingMine: ?boolean,\n  doFetchCollectionListMine: () => void,\n};\n\nconst ClaimCollectionAdd = (props: Props) => {\n  const { uri, closeModal, published, unpublished, fetchingMine, doFetchCollectionListMine } = props;\n\n  const [addNewCollection, setAddNewCollection] = React.useState(false);\n\n  React.useEffect(() => {\n    doFetchCollectionListMine();\n  }, [doFetchCollectionListMine]);\n\n  if (fetchingMine !== false) {\n    return (\n      <Card\n        title={__('Save to...')}\n        singlePane\n        body={\n          <div className=\"main--empty\">\n            <Spinner />\n          </div>\n        }\n      />\n    );\n  }\n\n  return (\n    <Card\n      title={__('Save to...')}\n      className=\"card--background\"\n      singlePane\n      body={\n        <ul className=\"ul--no-style card__body-scrollable\">\n          {COLS.BUILTIN_PLAYLISTS.map((id) => (\n            <CollectionSelectItem collectionId={id} uri={uri} key={id} icon={COLS.PLAYLIST_ICONS[id]} />\n          ))}\n          {Object.values(unpublished)\n            // $FlowFixMe\n            .sort((a, b) => a.name?.localeCompare(b.name))\n            // $FlowFixMe\n            .map(({ id }) => (\n              <CollectionSelectItem collectionId={id} uri={uri} key={id} icon={ICONS.LOCK} />\n            ))}\n          {published &&\n            Object.values(published)\n              // $FlowFixMe\n              .sort((a, b) => a.name?.localeCompare(b.name))\n              // $FlowFixMe\n              .map(({ id }) => <CollectionSelectItem collectionId={id} uri={uri} key={id} icon={ICONS.PLAYLIST} />)}\n        </ul>\n      }\n      actions={\n        addNewCollection ? (\n          <FormNewCollection uri={uri} closeForm={() => setAddNewCollection(false)} />\n        ) : (\n          <div className=\"section__actions\">\n            <Button button=\"primary\" label={__('Done')} disabled={addNewCollection} onClick={closeModal} />\n            <Button button=\"link\" label={__('New Playlist')} onClick={() => setAddNewCollection(true)} />\n          </div>\n        )\n      }\n    />\n  );\n};\n\nexport default ClaimCollectionAdd;\n","import { connect } from 'react-redux';\n\nimport {\n  selectMyPublishedCollections,\n  selectMyUnpublishedCollections,\n  selectIsFetchingMyCollections,\n} from 'redux/selectors/collections';\nimport { doFetchCollectionListMine } from 'redux/actions/collections';\n\nimport ClaimCollectionAdd from './view';\n\nconst select = (state, props) => ({\n  published: selectMyPublishedCollections(state),\n  unpublished: selectMyUnpublishedCollections(state),\n  fetchingMine: selectIsFetchingMyCollections(state),\n});\n\nconst perform = {\n  doFetchCollectionListMine,\n};\n\nexport default connect(select, perform)(ClaimCollectionAdd);\n","// @flow\nimport React from 'react';\nimport ClaimCollectionAdd from './internal/claimCollectionAdd';\nimport { Modal } from 'modal/modal';\n\ntype Props = {\n  uri: string,\n  // -- redux --\n  doHideModal: () => void,\n};\n\nconst ModalClaimCollectionAdd = (props: Props) => {\n  const { uri, doHideModal } = props;\n\n  return (\n    <Modal isOpen type=\"card\" onAborted={doHideModal}>\n      <ClaimCollectionAdd uri={uri} closeModal={doHideModal} />\n    </Modal>\n  );\n};\n\nexport default ModalClaimCollectionAdd;\n","import { connect } from 'react-redux';\nimport { doHideModal } from 'redux/actions/app';\nimport ModalClaimCollectionAdd from './view';\n\nconst perform = {\n  doHideModal,\n};\n\nexport default connect(null, perform)(ModalClaimCollectionAdd);\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","uri","sourceId","onlyCreate","closeForm","sourceCollectionName","doPlaylistAddAndAllowPlaying","buttonref","_React$useState2","copied_playlist_name","newCollectionName","setCollectionName","altEnterListener","keyCode","KEYCODES","preventDefault","current","click","FormField","autoFocus","type","name","label","placeholder","COLLECTIONS_CONSTS","onFocus","window","addEventListener","onBlur","removeEventListener","inputButton","disabled","length","collectionName","createNew","createCb","newId","ref","onChange","value","target","perform","connect","state","selectCollectionForId","FormNewCollection","collection","collectionHasClaim","collectionPending","getLocalizedNameForCollectionId","checked","setChecked","COL_TYPES","concat","prevChecked","collectionId","selectCollectionForIdHasClaimUrl","makeSelectClaimIsPending","CollectionSelectItem","closeModal","published","unpublished","fetchingMine","doFetchCollectionListMine","addNewCollection","setAddNewCollection","Card","Spinner","COLS","key","Object","values","sort","a","b","_a$name","localeCompare","map","_ref","_a$name2","_ref2","selectMyPublishedCollections","selectMyUnpublishedCollections","selectIsFetchingMyCollections","ClaimCollectionAdd","doHideModal","Modal","isOpen","onAborted","ModalClaimCollectionAdd"],"sourceRoot":""}