{"version":3,"file":"youtubeTransferStatus-929ffd49cc8b207d13eb.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/youtubeTransferStatus/index.js","webpack://odysee.com/../ui/component/youtubeTransferStatus/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","import { connect } from 'react-redux';\nimport { doClaimYoutubeChannels, doUserFetch, doCheckYoutubeTransfer } from 'redux/actions/user';\nimport {\n  selectYoutubeChannels,\n  selectYouTubeImportVideosComplete,\n  selectYouTubeImportPending,\n  selectUserIsPending,\n} from 'redux/selectors/user';\nimport { doResolveUris } from 'redux/actions/claims';\nimport YoutubeChannelList from './view';\n\nconst select = (state) => ({\n  youtubeChannels: selectYoutubeChannels(state),\n  youtubeImportPending: selectYouTubeImportPending(state),\n  userFetchPending: selectUserIsPending(state),\n  videosImported: selectYouTubeImportVideosComplete(state),\n});\n\nconst perform = (dispatch) => ({\n  claimChannels: () => dispatch(doClaimYoutubeChannels()),\n  updateUser: () => dispatch(doUserFetch()),\n  checkYoutubeTransfer: () => dispatch(doCheckYoutubeTransfer()),\n  doResolveUris: (uris) => dispatch(doResolveUris(uris)),\n});\n\nexport default connect(select, perform)(YoutubeChannelList);\n","// @flow\nimport { SITE_NAME, SITE_HELP_EMAIL } from 'config';\nimport * as ICONS from 'constants/icons';\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport Button from 'component/button';\nimport ClaimPreview from 'component/claimPreview';\nimport Card from 'component/common/card';\nimport { YOUTUBE_STATUSES } from 'lbryinc';\nimport { buildURI } from 'util/lbryURI';\nimport Spinner from 'component/spinner';\nimport Icon from 'component/common/icon';\nimport I18nMessage from 'component/i18nMessage';\nimport './style.lazy.scss';\n\ntype Props = {\n  youtubeChannels: Array<any>,\n  youtubeImportPending: boolean,\n  claimChannels: () => void,\n  updateUser: () => void,\n  checkYoutubeTransfer: () => void,\n  videosImported: ?Array<number>, // [currentAmountImported, totalAmountToImport]\n  alwaysShow: boolean,\n  addNewChannel?: boolean,\n  doResolveUris: (uris: Array<string>) => void,\n};\n\nexport default function YoutubeTransferStatus(props: Props) {\n  const {\n    youtubeChannels,\n    youtubeImportPending,\n    claimChannels,\n    videosImported,\n    checkYoutubeTransfer,\n    updateUser,\n    alwaysShow = false,\n    addNewChannel,\n    doResolveUris,\n  } = props;\n  const hasChannels = youtubeChannels && youtubeChannels.length > 0;\n  const transferEnabled = youtubeChannels.some((status) => status.transferable);\n  const hasPendingTransfers = youtubeChannels.some(\n    (status) => status.transfer_state === YOUTUBE_STATUSES.YOUTUBE_SYNC_PENDING_TRANSFER\n  );\n  const isYoutubeTransferComplete =\n    hasChannels &&\n    youtubeChannels.every(\n      (channel) =>\n        channel.transfer_state === YOUTUBE_STATUSES.YOUTUBE_SYNC_COMPLETED_TRANSFER ||\n        channel.sync_status === YOUTUBE_STATUSES.YOUTUBE_SYNC_ABANDONDED\n    );\n\n  const isNotElligible =\n    hasChannels && youtubeChannels.every((channel) => channel.sync_status === YOUTUBE_STATUSES.YOUTUBE_SYNC_ABANDONDED);\n\n  let total;\n  let complete;\n  if (hasPendingTransfers && videosImported) {\n    complete = videosImported[0];\n    total = videosImported[1];\n  }\n\n  function getMessage(channel) {\n    const { transferable, transfer_state: transferState, sync_status: syncStatus } = channel;\n    if (!transferable) {\n      switch (transferState) {\n        case YOUTUBE_STATUSES.YOUTUBE_SYNC_NOT_TRANSFERRED:\n          return syncStatus[0].toUpperCase() + syncStatus.slice(1);\n        case YOUTUBE_STATUSES.YOUTUBE_SYNC_PENDING_TRANSFER:\n          return __('Transfer in progress');\n        case YOUTUBE_STATUSES.YOUTUBE_SYNC_COMPLETED_TRANSFER:\n          return __('Completed transfer');\n        case YOUTUBE_STATUSES.YOUTUBE_SYNC_ABANDONDED:\n          return __('This channel not eligible to by synced');\n      }\n    } else {\n      return __('Ready to transfer');\n    }\n  }\n\n  React.useEffect(() => {\n    // If a channel is transferable, there's nothing to check\n    if (hasPendingTransfers) {\n      checkYoutubeTransfer();\n\n      let interval = setInterval(() => {\n        checkYoutubeTransfer();\n        updateUser();\n      }, 60 * 1000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [hasPendingTransfers, checkYoutubeTransfer, updateUser]);\n\n  return (\n    (alwaysShow || (hasChannels && !isYoutubeTransferComplete)) && (\n      <Card\n        title={\n          isNotElligible\n            ? __('Process complete')\n            : isYoutubeTransferComplete\n            ? __('Transfer complete')\n            : youtubeChannels.length > 1\n            ? __('Your YouTube channels')\n            : __('Your YouTube channel')\n        }\n        subtitle={\n          <span>\n            {hasPendingTransfers &&\n              __('Your videos are currently being transferred. There is nothing else for you to do.')}\n            {transferEnabled && !hasPendingTransfers && __('Your videos are ready to be transferred.')}\n            {!transferEnabled &&\n              !hasPendingTransfers &&\n              !isYoutubeTransferComplete &&\n              !isNotElligible &&\n              __('Please check back later, this may take a few hours.')}\n\n            {isYoutubeTransferComplete && !isNotElligible && __('View your channel or choose a new channel to sync.')}\n            {isNotElligible && (\n              <I18nMessage\n                tokens={{\n                  here: <Button button=\"link\" href=\"https://help.odysee.tv/category-syncprogram/\" label={__('here')} />,\n                  email: SITE_HELP_EMAIL,\n                }}\n              >\n                Email %email% if you think there has been a mistake. Make sure your channel qualifies %here%.\n              </I18nMessage>\n            )}\n          </span>\n        }\n        body={\n          <section>\n            {youtubeChannels.map((channel, index) => {\n              const {\n                lbry_channel_name: channelName,\n                channel_claim_id: claimId,\n                sync_status: syncStatus,\n                total_subs: totalSubs,\n                total_videos: totalVideos,\n              } = channel;\n              const url = buildURI({ channelName, channelClaimId: claimId });\n              doResolveUris([url]);\n              const transferState = getMessage(channel);\n              const isWaitingForSync =\n                syncStatus === YOUTUBE_STATUSES.YOUTUBE_SYNC_QUEUED ||\n                syncStatus === YOUTUBE_STATUSES.YOUTUBE_SYNC_PENDING ||\n                syncStatus === YOUTUBE_STATUSES.YOUTUBE_SYNC_PENDING_EMAIL ||\n                syncStatus === YOUTUBE_STATUSES.YOUTUBE_SYNC_PENDINGUPGRADE ||\n                syncStatus === YOUTUBE_STATUSES.YOUTUBE_SYNC_SYNCING;\n\n              const isNotEligible = syncStatus === YOUTUBE_STATUSES.YOUTUBE_SYNC_ABANDONDED;\n\n              return (\n                <div key={url} className=\"card--inline sync-state\">\n                  {claimId ? (\n                    <ClaimPreview\n                      uri={url}\n                      actions={<span className=\"help\">{transferState}</span>}\n                      properties={false}\n                      hideJoin\n                    />\n                  ) : (\n                    <div className=\"error\">\n                      {isNotEligible ? (\n                        <div>{__('%channelName% is not eligible to be synced', { channelName })}</div>\n                      ) : (\n                        <div className=\"progress\">\n                          <div className=\"progress__item\">\n                            {__('Claim your handle %handle%', { handle: channelName })}\n                            <Icon icon={ICONS.COMPLETED} className=\"progress__complete-icon--completed\" />\n                          </div>\n                          <div className=\"progress__item\">\n                            {__('Agree to sync')}{' '}\n                            <Icon icon={ICONS.COMPLETED} className=\"progress__complete-icon--completed\" />\n                          </div>\n                          <div className=\"progress__item\">\n                            {__('Wait for your videos to be synced')}\n                            {isWaitingForSync ? (\n                              <Spinner type=\"small\" />\n                            ) : (\n                              <Icon icon={ICONS.COMPLETED} className=\"progress__complete-icon--completed\" />\n                            )}\n                          </div>\n                          <div className=\"help--inline\">\n                            {__('Syncing %total_videos% videos from your channel with %total_subs% subscriptions.', {\n                              total_videos: totalVideos,\n                              total_subs: totalSubs,\n                            })}\n                          </div>\n                          <div className=\"help--inline\">\n                            {' '}\n                            {__(\n                              '*Not all content may be processed. Click Learn More at the bottom to understand sync limitations '\n                            )}{' '}\n                          </div>\n\n                          <div className=\"progress__item\">\n                            {__('Claim your channel')}\n                            <Icon icon={ICONS.NOT_COMPLETED} className={classnames('progress__complete-icon')} />\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n            {videosImported && (\n              <div className=\"section help\">{__('%complete% / %total% videos transferred', { complete, total })}</div>\n            )}\n          </section>\n        }\n        actions={\n          <>\n            <div className=\"section__actions\">\n              {!isYoutubeTransferComplete && (\n                <Button\n                  button=\"primary\"\n                  disabled={youtubeImportPending || !transferEnabled}\n                  onClick={claimChannels}\n                  label={youtubeChannels.length > 1 ? __('Claim Channels') : __('Claim Channel')}\n                />\n              )}\n              {addNewChannel && <Button button=\"link\" label={__('Add Another Channel')} onClick={addNewChannel} />}\n              <Button\n                button={isYoutubeTransferComplete ? 'primary' : 'link'}\n                label={__('Explore %SITE_NAME%', { SITE_NAME })}\n                navigate=\"/\"\n              />\n            </div>\n\n            <p className=\"help\">\n              {youtubeChannels.length > 1\n                ? __('You will be able to claim your channels once they finish syncing.')\n                : __('You will be able to claim your channel once it has finished syncing.')}{' '}\n              {youtubeImportPending &&\n                __('You will not be able to edit the channel or content until the transfer process completes.')}{' '}\n              <Button button=\"link\" label={__('Learn More')} href=\"https://help.odysee.tv/category-syncprogram/\" />\n            </p>\n          </>\n        }\n      />\n    )\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","connect","state","youtubeChannels","selectYoutubeChannels","youtubeImportPending","selectYouTubeImportPending","userFetchPending","selectUserIsPending","videosImported","selectYouTubeImportVideosComplete","dispatch","claimChannels","doClaimYoutubeChannels","updateUser","doUserFetch","checkYoutubeTransfer","doCheckYoutubeTransfer","doResolveUris","uris","_doResolveUris","total","complete","_props$alwaysShow","alwaysShow","addNewChannel","hasChannels","length","transferEnabled","some","transferable","hasPendingTransfers","transfer_state","YOUTUBE_STATUSES","isYoutubeTransferComplete","every","channel","sync_status","isNotElligible","interval","setInterval","clearInterval","Card","I18nMessage","tokens","here","href","label","email","SITE_HELP_EMAIL","map","index","channelName","lbry_channel_name","claimId","channel_claim_id","syncStatus","totalSubs","total_subs","totalVideos","total_videos","url","buildURI","channelClaimId","transferState","toUpperCase","slice","getMessage","isWaitingForSync","isNotEligible","key","ClaimPreview","uri","properties","hideJoin","handle","Spinner","type","disabled","SITE_NAME","navigate"],"sourceRoot":""}