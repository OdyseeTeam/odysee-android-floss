{"version":3,"file":"settingsStripeAccount-363d77e8665d3120fb18.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/buttonStripeConnectAccount/view.jsx","webpack://odysee.com/../ui/component/buttonStripeConnectAccount/index.js","webpack://odysee.com/../ui/component/common/busy-indicator.jsx","webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/page/settingsStripeAccount/style.scss?fdf3","webpack://odysee.com/../ui/page/settingsStripeAccount/view.jsx","webpack://odysee.com/../ui/page/settingsStripeAccount/index.js","webpack://odysee.com/../ui/page/settingsStripeAccount/style.scss"],"sourcesContent":["// @flow\nimport React from 'react';\n\nimport * as ICONS from 'constants/icons';\n\nimport Button from 'component/button';\nimport BusyIndicator from 'component/common/busy-indicator';\n\ntype Props = {\n  // -- redux --\n  chargesEnabled: ?boolean,\n  accountRequiresVerification: ?boolean,\n  accountLinkResponse: StripeAccountLink,\n  accountStatusFetching: boolean,\n  doTipAccountStatus: () => Promise<StripeAccountStatus>,\n  doGetAndSetAccountLink: () => Promise<StripeAccountLink>,\n};\n\nconst ButtonStripeConnectAccount = (props: Props) => {\n  const {\n    // -- redux --\n    chargesEnabled,\n    accountRequiresVerification,\n    accountLinkResponse,\n    accountStatusFetching,\n    doTipAccountStatus,\n    doGetAndSetAccountLink,\n  } = props;\n\n  const [accountLinkFetching, setAccountLinkFetching] = React.useState(false);\n\n  const bankAccountNotFetched = chargesEnabled === undefined;\n  const stripeConnectionUrl = accountLinkResponse?.url;\n  const accountStatusFailed = chargesEnabled === null;\n\n  function confirmAddBankAccount() {\n    setAccountLinkFetching(true);\n    doGetAndSetAccountLink()\n      .then(() => setAccountLinkFetching(false))\n      .catch(() => setAccountLinkFetching(false));\n  }\n\n  React.useEffect(() => {\n    if (bankAccountNotFetched) {\n      doTipAccountStatus();\n    }\n  }, [bankAccountNotFetched, doTipAccountStatus]);\n\n  if (bankAccountNotFetched || accountStatusFetching || accountLinkFetching) {\n    return (\n      <Button\n        disabled\n        button=\"primary\"\n        label={\n          <BusyIndicator\n            message={accountLinkFetching ? __('Confirming...') : __('Getting your bank account connection status...')}\n          />\n        }\n        icon={ICONS.FINANCE}\n      />\n    );\n  }\n\n  if (accountRequiresVerification) {\n    return (\n      <Button\n        button=\"primary\"\n        label={__('Complete Verification')}\n        icon={ICONS.SETTINGS}\n        navigate={stripeConnectionUrl}\n        className=\"stripe__complete-verification-button\"\n      />\n    );\n  }\n\n  if (stripeConnectionUrl) {\n    return <Button button=\"link\" label={__('Click here to connect a bank account')} navigate={stripeConnectionUrl} />;\n  }\n\n  return (\n    <Button\n      button=\"primary\"\n      label={accountStatusFailed ? __('Retry') : __('Connect a bank account')}\n      icon={ICONS.FINANCE}\n      onClick={accountStatusFailed ? doTipAccountStatus : confirmAddBankAccount}\n    />\n  );\n};\n\nexport default ButtonStripeConnectAccount;\n","import { connect } from 'react-redux';\n\nimport {\n  selectAccountChargesEnabled,\n  selectAccountRequiresVerification,\n  selectAccountLinkResponse,\n  selectAccountStatusFetching,\n} from 'redux/selectors/stripe';\n\nimport { doTipAccountStatus, doGetAndSetAccountLink } from 'redux/actions/stripe';\n\nimport ButtonStripeConnectAccount from './view';\n\nconst select = (state) => ({\n  chargesEnabled: selectAccountChargesEnabled(state),\n  accountRequiresVerification: selectAccountRequiresVerification(state),\n  accountLinkResponse: selectAccountLinkResponse(state),\n  accountStatusFetching: selectAccountStatusFetching(state),\n});\n\nconst perform = {\n  doTipAccountStatus,\n  doGetAndSetAccountLink,\n};\n\nexport default connect(select, perform)(ButtonStripeConnectAccount);\n","// @flow\nimport React from 'react';\n\ntype Props = {\n  message: ?string,\n};\n\nclass BusyIndicator extends React.PureComponent<Props> {\n  static defaultProps = {\n    message: '',\n  };\n\n  render() {\n    const { message } = this.props;\n\n    return (\n      <span className=\"busy-indicator\">\n        {message} <span className=\"busy-indicator__loader\" />\n      </span>\n    );\n  }\n}\n\nexport default BusyIndicator;\n","// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./style.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./style.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport Page from 'component/page';\nimport I18nMessage from 'component/i18nMessage';\nimport Spinner from 'component/spinner';\nimport ButtonStripeConnectAccount from 'component/buttonStripeConnectAccount';\n\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport * as STRIPE from 'constants/stripe';\n\nimport './style.scss';\n\ntype Props = {\n  // -- redux --\n  accountInfo: ?StripeAccountInfo,\n  unpaidBalance: number,\n  chargesEnabled: ?boolean,\n  accountRequiresVerification: ?boolean,\n  doTipAccountStatus: () => Promise<StripeAccountStatus>,\n};\n\nconst StripeAccountConnection = (props: Props) => {\n  const { accountInfo, unpaidBalance, chargesEnabled, accountRequiresVerification, doTipAccountStatus } = props;\n\n  const { email, id: accountId } = accountInfo || {};\n  const bankAccountNotFetched = chargesEnabled === undefined;\n\n  React.useEffect(() => {\n    if (bankAccountNotFetched) {\n      doTipAccountStatus();\n    }\n  }, [bankAccountNotFetched, doTipAccountStatus]);\n\n  if (bankAccountNotFetched) {\n    return (\n      <Page\n        noFooter\n        noSideNavigation\n        settingsPage\n        className=\"card-stack\"\n        backout={{ title: __('Your Payout Method'), backLabel: __('Back') }}\n      >\n        <div className=\"main--empty\">\n          <Spinner />\n        </div>\n      </Page>\n    );\n  }\n\n  return (\n    <Page\n      noFooter\n      noSideNavigation\n      settingsPage\n      className=\"card-stack\"\n      backout={{\n        title: !chargesEnabled ? __('Add Payout Method') : __('Your Payout Method'),\n        backLabel: __('Back'),\n      }}\n    >\n      <Card\n        title={\n          <div className=\"table__header-text\">\n            {chargesEnabled ? __('Bank account connected') : __('Connect a bank account')}\n          </div>\n        }\n        background\n        isBodyList\n        body={\n          chargesEnabled ? (\n            <div className=\"card__body-actions connected-account-information\">\n              <h3>{__('Congratulations! Your account has been connected with Odysee.')}</h3>\n              <h3>\n                <I18nMessage tokens={{ email: <span className=\"bolded-email\">{email}</span> }}>\n                  The email you registered with Stripe is %email%\n                </I18nMessage>\n              </h3>\n\n              {accountRequiresVerification && (\n                <>\n                  <h3 style={{ marginTop: '10px' }}>\n                    {__('Although your account is connected it still requires verification to begin receiving tips.')}\n                  </h3>\n                  <h3 style={{ marginTop: '10px' }}>\n                    {__(\n                      'Please use the button below to complete your verification process and enable tipping for ' +\n                        'your account.'\n                    )}\n                  </h3>\n                </>\n              )}\n            </div>\n          ) : unpaidBalance > 0 ? (\n            // TODO: hopefully we won't be using this anymore and can remove it\n            <div className=\"card__body-actions\">\n              <h3>{__('Congratulations, you have already begun receiving tips on Odysee!')}</h3>\n              <div>\n                <br />\n                <h3>{__('Your pending account balance is $%balance% USD.', { balance: unpaidBalance / 100 })}</h3>\n              </div>\n              <br />\n              <div>\n                <h3>{__('Connect your bank account to be able to cash your pending balance out to your account.')}</h3>\n              </div>\n            </div>\n          ) : (\n            <div className=\"card__body-actions\">\n              <h3>{__('Connect your bank account to Odysee to receive donations directly from users')}</h3>\n            </div>\n          )\n        }\n        actions={\n          chargesEnabled && !accountRequiresVerification ? (\n            <>\n              <Button\n                button=\"secondary\"\n                label={__('View Tips')}\n                icon={ICONS.SETTINGS}\n                navigate={`/$/${PAGES.WALLET}?fiatType=incoming&tab=fiat-payment-history&currency=fiat`}\n              />\n              {accountId && (\n                <Button\n                  button=\"secondary\"\n                  icon={ICONS.SETTINGS}\n                  label={__('View Account On Stripe')}\n                  navigate={`${STRIPE.STRIPE_ACCOUNT_DASHBOARD_URL}/${accountId}`}\n                  className=\"stripe__view-account-button\"\n                />\n              )}\n            </>\n          ) : (\n            <ButtonStripeConnectAccount />\n          )\n        }\n      />\n    </Page>\n  );\n};\n\nexport default StripeAccountConnection;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { doTipAccountStatus } from 'redux/actions/stripe';\nimport {\n  selectAccountUnpaidBalance,\n  selectAccountChargesEnabled,\n  selectAccountRequiresVerification,\n  selectAccountInfo,\n} from 'redux/selectors/stripe';\n\nimport StripeAccountConnection from './view';\n\nconst select = (state) => ({\n  unpaidBalance: selectAccountUnpaidBalance(state),\n  chargesEnabled: selectAccountChargesEnabled(state),\n  accountRequiresVerification: selectAccountRequiresVerification(state),\n  accountInfo: selectAccountInfo(state),\n});\n\nconst perform = {\n  doTipAccountStatus,\n};\n\nexport default withRouter(connect(select, perform)(StripeAccountConnection));\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"[dir] .connected-account-information h3:first-of-type{margin-bottom:var(--spacing-xs)}.connected-account-information .bolded-email{font-weight:var(--font-weight-bold)}.stripe__view-account-button{max-width:241px}[dir=ltr] .stripe__view-account-button{margin-left:var(--spacing-s)}[dir=rtl] .stripe__view-account-button{margin-right:var(--spacing-s)}@media(max-width:900px){.stripe__view-account-button{display:block}[dir] .stripe__view-account-button{margin-top:var(--spacing-s)}[dir=ltr] .stripe__view-account-button{margin-left:0}[dir=rtl] .stripe__view-account-button{margin-right:0}}\", \"\",{\"version\":3,\"sources\":[\"webpack://./../ui/page/settingsStripeAccount/style.scss\"],\"names\":[],\"mappings\":\"AAGE,sDACE,+BAAA,CAGF,6CACE,mCAAA,CAIJ,6BACE,eACA,CAFF,uCAEE,4BAAA,CAFF,uCAEE,6BAAA,CAEA,wBAJF,6BAOI,aAAA,CAPJ,mCAMI,2BACA,CAPJ,uCAKI,aAEA,CAPJ,uCAKI,cAEA,CAAA\",\"sourcesContent\":[\"@import '~ui/scss/init/breakpoints';\\n\\n.connected-account-information {\\n  h3:nth-of-type(1) {\\n    margin-bottom: var(--spacing-xs);\\n  }\\n\\n  .bolded-email {\\n    font-weight: var(--font-weight-bold);\\n  }\\n}\\n\\n.stripe__view-account-button {\\n  max-width: 241px;\\n  margin-left: var(--spacing-s);\\n\\n  @media (max-width: $breakpoint-small) {\\n    margin-left: 0;\\n    margin-top: var(--spacing-s);\\n    display: block;\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["props","chargesEnabled","accountRequiresVerification","accountLinkResponse","accountStatusFetching","doTipAccountStatus","doGetAndSetAccountLink","_React$useState2","_slicedToArray","React","accountLinkFetching","setAccountLinkFetching","bankAccountNotFetched","undefined","stripeConnectionUrl","url","accountStatusFailed","Button","disabled","button","label","BusyIndicator","message","__","icon","ICONS","navigate","className","onClick","then","perform","connect","state","selectAccountChargesEnabled","selectAccountRequiresVerification","selectAccountLinkResponse","selectAccountStatusFetching","ButtonStripeConnectAccount","_React$PureComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","key","value","this","FirstPaneWrapper","singlePane","children","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","classnames","locked","status","unlocked","purchased","Icon","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","useState","expanded","setExpanded","expandable","role","Boolean","e","stopPropagation","style","sectionIcon","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","accountInfo","unpaidBalance","_ref","email","accountId","Page","noFooter","noSideNavigation","settingsPage","backout","backLabel","Spinner","Card","I18nMessage","tokens","marginTop","balance","concat","PAGES","STRIPE","withRouter","selectAccountUnpaidBalance","selectAccountInfo","StripeAccountConnection","___CSS_LOADER_EXPORT___","push","module"],"sourceRoot":""}