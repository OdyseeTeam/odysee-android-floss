{"version":3,"file":"livestreamScheduledInfo-3be4f8c731aadecada8a.js","mappings":"uxCAUA,IAAMA,EAAwB,ICM9B,SAAeC,EAAAA,EAAAA,KAVA,SAACC,EAAOC,GACrB,IAAQC,EAAQD,EAARC,IAEFC,GAAcC,EAAAA,EAAAA,IAA8BJ,EAAOE,GAEzD,MAAO,CACLG,cAAeF,EAAmC,IAArBA,EAAYG,OAAgB,EAE7D,GAEA,EDCe,SAAiCL,GAC9C,IAAQI,EAAkBJ,EAAlBI,cAEwDE,EAAAC,EAAhBC,EAAAA,WAAgB,GAAzDC,EAAgBH,EAAA,GAAEI,EAAmBJ,EAAA,GACAK,EAAAJ,EAAhBC,EAAAA,WAAgB,GAArCI,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAElBG,EAAYN,EAAAA,SAAc,kBAAMO,IAAOX,GAAeY,OAAO,MAAM,GAAE,CAACZ,IAuB5E,OArBAI,EAAAA,WAAgB,WACd,IAAMS,EAAW,WACf,IACMC,GAAaC,EAAAA,EAAAA,IAAcf,GAAe,GAAM,EAD9B,eAEDc,EAGrBL,GAAU,IAEVH,EAAoBQ,GACpBL,EAAUT,EAAgBgB,KAAKC,OAEnC,EAEAJ,IAEA,IAAMK,EAAaC,YAAYN,EAAUpB,GAEzC,OAAO,kBAAM2B,cAAcF,EAAW,CACxC,GAAG,CAAClB,IAECK,EAGHD,EAAAA,cAAA,OAAKiB,UAAU,wBACbjB,EAAAA,cAACkB,EAAAA,QAAI,CAACC,KAAMC,EAAAA,iBAAwBC,KAAM,KAC1CrB,EAAAA,cAAA,KAAGiB,UAAU,8BACXjB,EAAAA,cAAA,YACII,EAOAkB,EAAG,iBANHtB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACuB,EAAAA,EAAW,CAACC,OAAQ,CAAEC,UAAWxB,IAAoB,oBACtDD,EAAAA,cAAA,WACAA,EAAAA,cAAA,QAAMiB,UAAU,8BAA8BX,OAX5B,IAoBhC,G","sources":["webpack://odysee.com/../ui/component/livestreamScheduledInfo/view.jsx","webpack://odysee.com/../ui/component/livestreamScheduledInfo/index.js"],"sourcesContent":["// @flow\n\nimport React from 'react';\nimport * as ICONS from 'constants/icons';\nimport Icon from 'component/common/icon';\nimport moment from 'moment';\nimport I18nMessage from 'component/i18nMessage';\nimport { getTimeAgoStr } from 'util/time';\nimport './style.lazy.scss';\n\nconst CALC_TIME_INTERVAL_MS = 1000;\n\ntype Props = {\n  // -- redux --\n  releaseTimeMs: number,\n};\n\nexport default function LivestreamScheduledInfo(props: Props) {\n  const { releaseTimeMs } = props;\n\n  const [startDateFromNow, setStartDateFromNow] = React.useState();\n  const [inPast, setInPast] = React.useState();\n\n  const startDate = React.useMemo(() => moment(releaseTimeMs).format('LLL'), [releaseTimeMs]);\n\n  React.useEffect(() => {\n    const calcTime = () => {\n      const zeroDurationStr = '---';\n      const timeAgoStr = getTimeAgoStr(releaseTimeMs, true, true, zeroDurationStr);\n      const isZeroDuration = timeAgoStr === zeroDurationStr;\n\n      if (isZeroDuration) {\n        setInPast(true);\n      } else {\n        setStartDateFromNow(timeAgoStr);\n        setInPast(releaseTimeMs < Date.now());\n      }\n    };\n\n    calcTime();\n\n    const intervalId = setInterval(calcTime, CALC_TIME_INTERVAL_MS);\n\n    return () => clearInterval(intervalId);\n  }, [releaseTimeMs]);\n\n  if (!startDateFromNow) return null;\n\n  return (\n    <div className=\"livestream-scheduled\">\n      <Icon icon={ICONS.LIVESTREAM_SOLID} size={32} />\n      <p className=\"livestream-scheduled__time\">\n        <span>\n          {!inPast ? (\n            <>\n              <I18nMessage tokens={{ time_date: startDateFromNow }}>Live %time_date%</I18nMessage>\n              <br />\n              <span className=\"livestream-scheduled__date\">{startDate}</span>\n            </>\n          ) : (\n            __('Starting Soon')\n          )}\n        </span>\n      </p>\n    </div>\n  );\n}\n","import { connect } from 'react-redux';\n\nimport { selectMomentReleaseTimeForUri } from 'redux/selectors/claims';\n\nimport LivestreamScheduledInfo from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const releaseTime = selectMomentReleaseTimeForUri(state, uri);\n\n  return {\n    releaseTimeMs: releaseTime ? releaseTime.unix() * 1000 : 0,\n  };\n};\n\nexport default connect(select)(LivestreamScheduledInfo);\n"],"names":["CALC_TIME_INTERVAL_MS","connect","state","props","uri","releaseTime","selectMomentReleaseTimeForUri","releaseTimeMs","unix","_React$useState2","_slicedToArray","React","startDateFromNow","setStartDateFromNow","_React$useState4","inPast","setInPast","startDate","moment","format","calcTime","timeAgoStr","getTimeAgoStr","Date","now","intervalId","setInterval","clearInterval","className","Icon","icon","ICONS","size","__","I18nMessage","tokens","time_date"],"sourceRoot":""}