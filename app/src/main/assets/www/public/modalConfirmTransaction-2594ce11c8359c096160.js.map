{"version":3,"file":"modalConfirmTransaction-2594ce11c8359c096160.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/modal/modalConfirmTransaction/view.jsx","webpack://odysee.com/../ui/modal/modalConfirmTransaction/index.js"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport { Form } from 'component/common/form';\nimport { Modal } from 'modal/modal';\nimport Card from 'component/common/card';\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport ClaimPreview from 'component/claimPreview';\n\ntype TipParams = { amount: number, claim_id: string, channel_id?: string };\n\ntype Props = {\n  destination: string,\n  amount: number,\n  closeModal: () => void,\n  sendToAddress: (string, number) => void,\n  sendTip: (TipParams, boolean) => void,\n  isAddress: boolean,\n  claim: StreamClaim,\n  activeChannelClaim: ?ChannelClaim,\n  incognito: boolean,\n  setConfirmed: (boolean) => void,\n};\n\nclass ModalConfirmTransaction extends React.PureComponent<Props> {\n  onConfirmed() {\n    const {\n      closeModal,\n      sendToAddress,\n      sendTip,\n      amount,\n      destination,\n      isAddress,\n      claim,\n      activeChannelClaim,\n      incognito,\n      setConfirmed,\n    } = this.props;\n\n    if (!isAddress) {\n      const claimId = claim && claim.claim_id;\n      const tipParams: TipParams = {\n        amount: amount,\n        claim_id: claimId,\n        channel_id: (!incognito && activeChannelClaim && activeChannelClaim.claim_id) || undefined,\n      };\n      sendTip(tipParams, false);\n    } else {\n      sendToAddress(destination, amount);\n    }\n    setConfirmed(true);\n    closeModal();\n  }\n\n  render() {\n    const { amount, destination, closeModal, isAddress, incognito, activeChannelClaim } = this.props;\n    const activeChannelUrl = activeChannelClaim && activeChannelClaim.canonical_url;\n    const title = __('Confirm Transaction');\n    return (\n      <Modal isOpen contentLabel={title} type=\"card\" onAborted={closeModal}>\n        <Form onSubmit={() => this.onConfirmed()}>\n          <Card\n            title={title}\n            body={\n              <div className=\"section card--inline confirm__wrapper\">\n                <div className=\"section\">\n                  <div className=\"confirm__label\">{__('Sending')}</div>\n                  <div className=\"confirm__value\">{<LbcSymbol postfix={amount} size={22} />}</div>\n\n                  {!isAddress && <div className=\"confirm__label\">{__('From --[the tip sender]--')}</div>}\n                  {!isAddress && (\n                    <div className=\"confirm__value\">\n                      {incognito ? (\n                        'Anonymous'\n                      ) : (\n                        <ClaimPreview\n                          key={activeChannelUrl}\n                          uri={activeChannelUrl}\n                          actions={''}\n                          type={'small'}\n                          hideMenu\n                          hideRepostLabel\n                        />\n                      )}\n                    </div>\n                  )}\n\n                  <div className=\"confirm__label\">{__('To --[the tip recipient]--')}</div>\n                  <div className=\"confirm__value\">\n                    {!isAddress ? (\n                      <ClaimPreview\n                        key={destination}\n                        uri={destination}\n                        actions={''}\n                        type={'small'}\n                        hideMenu\n                        hideRepostLabel\n                      />\n                    ) : (\n                      destination\n                    )}\n                  </div>\n                </div>\n              </div>\n            }\n            actions={\n              <>\n                <div className=\"section__actions\">\n                  <Button autoFocus button=\"primary\" label={__('Send')} onClick={() => this.onConfirmed()} />\n                  <Button button=\"link\" label={__('Cancel')} onClick={closeModal} />\n                </div>\n                <p className=\"help\">{__('Once the transaction is sent, it cannot be reversed.')}</p>\n              </>\n            }\n          />\n        </Form>\n      </Modal>\n    );\n  }\n}\n\nexport default ModalConfirmTransaction;\n","import { connect } from 'react-redux';\nimport { doSendDraftTransaction, doSendTip } from 'redux/actions/wallet';\nimport { makeSelectClaimForUri } from 'redux/selectors/claims';\nimport { doHideModal } from 'redux/actions/app';\nimport ModalConfirmTransaction from './view';\nimport { selectActiveChannelClaim, selectIncognito } from 'redux/selectors/app';\n\nconst select = (state, props) => ({\n  claim: makeSelectClaimForUri(props.destination)(state),\n  activeChannelClaim: selectActiveChannelClaim(state),\n  incognito: selectIncognito(state),\n});\n\nconst perform = (dispatch) => ({\n  closeModal: () => dispatch(doHideModal()),\n  sendToAddress: (address, amount) => dispatch(doSendDraftTransaction(address, amount)),\n  sendTip: (params, isSupport) => dispatch(doSendTip(params, isSupport)),\n});\n\nexport default connect(select, perform)(ModalConfirmTransaction);\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","_React$PureComponent","_inherits","ModalConfirmTransaction","_super","_createSuper","_classCallCheck","apply","arguments","key","value","_this$props","this","closeModal","sendToAddress","sendTip","amount","destination","isAddress","claim","activeChannelClaim","incognito","setConfirmed","claim_id","channel_id","_this","_this$props2","activeChannelUrl","canonical_url","Modal","isOpen","contentLabel","type","onAborted","Form","onSubmit","onConfirmed","Card","LbcSymbol","postfix","size","ClaimPreview","uri","hideMenu","hideRepostLabel","autoFocus","label","connect","state","makeSelectClaimForUri","selectActiveChannelClaim","selectIncognito","dispatch","doHideModal","address","doSendDraftTransaction","params","isSupport","doSendTip"],"sourceRoot":""}