{"version":3,"file":"pledgesTab-118ea72daec33a167dd6.js","mappings":"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","sources":["webpack://odysee.com/../ui/page/creatorMemberships/supporterArea/pledgesTab/view.jsx","webpack://odysee.com/../ui/page/creatorMemberships/supporterArea/pledgesTab/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport moment from 'moment';\n\nimport { formatLbryUrlForWeb } from 'util/url';\nimport { toCapitalCase } from 'util/string';\nimport { buildURI } from 'util/lbryURI';\n\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport * as ICONS from 'constants/icons';\nimport Yrbl from 'component/yrbl';\nimport Spinner from 'component/spinner';\nimport UriIndicator from 'component/uriIndicator';\n\ntype Props = {\n  // -- redux --\n  myPurchasedCreatorMemberships: Array<MembershipTiers>,\n  doMembershipMine: () => Promise<MembershipTiers>,\n};\n\nfunction PledgesTab(props: Props) {\n  const { myPurchasedCreatorMemberships, doMembershipMine } = props;\n\n  React.useEffect(() => {\n    if (myPurchasedCreatorMemberships === undefined) {\n      doMembershipMine();\n    }\n  }, [doMembershipMine, myPurchasedCreatorMemberships]);\n\n  if (myPurchasedCreatorMemberships === undefined) {\n    return (\n      <div className=\"main--empty\">\n        <Spinner />\n      </div>\n    );\n  }\n\n  if (!myPurchasedCreatorMemberships || myPurchasedCreatorMemberships.length === 0) {\n    return (\n      <div className=\"membership__mypledges-wrapper\">\n        <div className=\"membership__mypledges-content\">\n          <Yrbl\n            type=\"happy\"\n            subtitle={__('Find creators that you like and support them. Your pledges will show up on this page.')}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"membership__mypledges-wrapper\">\n      <div className=\"membership__mypledges-content\">\n        <div className=\"membership-table__wrapper\">\n          <table className=\"table table--pledges\">\n            <thead>\n              <tr>\n                <th className=\"channelName-header\" colSpan=\"2\">\n                  {__('Channel Name')}\n                </th>\n                <th>{__('Tier')}</th>\n                <th>{__('Total Supporting Time')}</th>\n                <th>{__('Amount')}</th>\n                <th>{__('Status')}</th>\n                <th className=\"membership-table__page\">{__('Page')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {myPurchasedCreatorMemberships.map((memberships) =>\n                memberships.map((membership) => {\n                  const memberChannelName = membership.Membership.channel_name;\n                  const memberChannelUri =\n                    memberChannelName === ''\n                      ? ''\n                      : buildURI({ channelName: memberChannelName, channelClaimId: membership.Membership.channel_id });\n\n                  const creatorChannelId = membership.MembershipDetails.channel_id;\n                  const creatorChannelUri = buildURI({\n                    channelName: membership.MembershipDetails.channel_name,\n                    channelClaimId: creatorChannelId,\n                  });\n                  const creatorChannelPath = formatLbryUrlForWeb(creatorChannelUri);\n\n                  const currency = membership.Subscription.plan.currency.toUpperCase();\n                  const supportAmount = membership.Subscription.plan.amount; // in cents or 1/100th EUR\n                  const interval = membership.Subscription.plan.interval;\n\n                  const startDate = membership.Subscription.current_period_start * 1000;\n                  const endDate = membership.Subscription.current_period_end * 1000;\n                  const amountOfMonths = Math.ceil(moment(endDate).diff(moment(startDate), 'months', true));\n                  const timeAgoInMonths =\n                    amountOfMonths === 1 ? __('1 Month') : __('%time_ago% Months', { time_ago: amountOfMonths });\n\n                  return (\n                    <tr key={membership.Membership.id}>\n                      <td className=\"channelThumbnail\">\n                        <ChannelThumbnail xsmall uri={creatorChannelUri} />\n                        <ChannelThumbnail\n                          xxsmall\n                          uri={memberChannelUri === '' ? undefined : memberChannelUri}\n                          tooltipTitle={memberChannelName === '' ? __('Anonymous') : memberChannelName}\n                        />\n                      </td>\n\n                      <td>\n                        <UriIndicator uri={creatorChannelUri} link />\n                      </td>\n\n                      <td>{membership.MembershipDetails.name}</td>\n\n                      <td>{timeAgoInMonths}</td>\n\n                      <td>\n                        ${supportAmount / 100} {currency} / {__(toCapitalCase(interval))}\n                      </td>\n\n                      <td>{membership.Subscription.status === 'active' ? __('Active') : __('Cancelled')}</td>\n\n                      <td>\n                        <span dir=\"auto\" className=\"button__label\">\n                          <Button\n                            button=\"primary\"\n                            icon={ICONS.MEMBERSHIP}\n                            navigate={creatorChannelPath + '?view=membership'}\n                          />\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default PledgesTab;\n","import { connect } from 'react-redux';\n\nimport { selectMyPurchasedMembershipsFromCreators } from 'redux/selectors/memberships';\nimport { doMembershipMine } from 'redux/actions/memberships';\n\nimport PledgesTab from './view';\n\nconst select = (state) => ({\n  myPurchasedCreatorMemberships: selectMyPurchasedMembershipsFromCreators(state),\n});\n\nconst perform = {\n  doMembershipMine,\n};\n\nexport default connect(select, perform)(PledgesTab);\n"],"names":["props","myPurchasedCreatorMemberships","doMembershipMine","React","undefined","className","Spinner","length","colSpan","__","map","memberships","membership","memberChannelName","Membership","channel_name","memberChannelUri","buildURI","channelName","channelClaimId","channel_id","creatorChannelId","MembershipDetails","creatorChannelUri","creatorChannelPath","formatLbryUrlForWeb","currency","Subscription","plan","toUpperCase","supportAmount","amount","interval","startDate","current_period_start","endDate","current_period_end","amountOfMonths","Math","ceil","moment","diff","timeAgoInMonths","time_ago","key","id","ChannelThumbnail","xsmall","uri","xxsmall","tooltipTitle","UriIndicator","link","name","toCapitalCase","status","dir","Button","button","icon","ICONS","navigate","Yrbl","type","subtitle","perform","connect","state","selectMyPurchasedMembershipsFromCreators","PledgesTab"],"sourceRoot":""}