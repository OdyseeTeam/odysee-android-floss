{"version":3,"file":"search-3616f96206d6d6390c84.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/claimEffectiveAmount/view.jsx","webpack://odysee.com/../ui/component/claimEffectiveAmount/index.js","webpack://odysee.com/../ui/component/langFilterIndicator/index.js","webpack://odysee.com/../ui/component/langFilterIndicator/view.jsx","webpack://odysee.com/../ui/component/searchTopClaim/index.js","webpack://odysee.com/../ui/component/searchTopClaim/view.jsx","webpack://odysee.com/../ui/constants/hashes.js","webpack://odysee.com/../ui/component/searchOptions/view.jsx","webpack://odysee.com/../ui/component/searchOptions/index.js","webpack://odysee.com/../ui/page/search/index.js","webpack://odysee.com/../ui/page/search/view.jsx"],"sourcesContent":["// @flow\nimport React from 'react';\nimport CreditAmount from 'component/common/credit-amount';\n\ntype Props = {\n  uri: string,\n  claim: ?Claim,\n};\n\nfunction ClaimEffectiveAmount(props: Props) {\n  const { claim } = props;\n\n  if (!claim) {\n    return null;\n  }\n\n  return <CreditAmount amount={Number(claim.repost_bid_amount || claim.meta.effective_amount || claim.amount)} />;\n}\n\nexport default ClaimEffectiveAmount;\n","import { connect } from 'react-redux';\nimport { selectClaimForUri } from 'redux/selectors/claims';\nimport ClaimEffectiveAmount from './view';\n\nconst select = (state, props) => ({\n  claim: selectClaimForUri(state, props.uri, true),\n});\n\nexport default connect(select)(ClaimEffectiveAmount);\n","import LangFilterIndicator from './view';\nexport default LangFilterIndicator;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport { SEARCH_IN_LANGUAGE } from 'constants/hashes';\n\nexport default function LangFilterIndicator() {\n  return (\n    <Button\n      className=\"icon--langFilter\"\n      icon={ICONS.FILTERED_BY_LANG}\n      iconSize={20}\n      description={__('Search results are being filtered by language. Click here to change the setting.')}\n      navigate={`/$/${PAGES.SETTINGS}#${SEARCH_IN_LANGUAGE}`}\n    />\n  );\n}\n","import { connect } from 'react-redux';\nimport { doBeginPublish } from 'redux/actions/publish';\nimport { doResolveUris } from 'redux/actions/claims';\nimport { doOpenModal } from 'redux/actions/app';\nimport { selectPendingIds, makeSelectClaimForUri } from 'redux/selectors/claims';\nimport { makeSelectWinningUriForQuery, selectIsResolvingWinningUri } from 'redux/selectors/search';\nimport SearchTopClaim from './view';\n\nconst select = (state, props) => {\n  const winningUri = makeSelectWinningUriForQuery(props.query)(state);\n\n  return {\n    winningUri,\n    winningClaim: winningUri ? makeSelectClaimForUri(winningUri)(state) : undefined,\n    isResolvingWinningUri: props.query ? selectIsResolvingWinningUri(state, props.query) : false,\n    pendingIds: selectPendingIds(state),\n  };\n};\n\nconst perform = (dispatch) => ({\n  beginPublish: (a, b, c) => dispatch(doBeginPublish(a, b, c)),\n  doResolveUris: (uris) => dispatch(doResolveUris(uris)),\n  doOpenModal: (id, props) => dispatch(doOpenModal(id, props)),\n});\n\nexport default connect(select, perform)(SearchTopClaim);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport * as MODALS from 'constants/modal_types';\nimport React from 'react';\nimport { parseURI } from 'util/lbryURI';\nimport ClaimPreview from 'component/claimPreview';\nimport Button from 'component/button';\nimport ClaimEffectiveAmount from 'component/claimEffectiveAmount';\nimport ClaimRepostAuthor from 'component/claimRepostAuthor';\nimport I18nMessage from 'component/i18nMessage';\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport { DOMAIN } from 'config';\n\ntype Props = {\n  doOpenModal: (string, {}) => void,\n  query: string,\n  winningUri: ?string,\n  doResolveUris: (Array<string>) => void,\n  hideLink?: boolean,\n  setChannelActive: (boolean) => void,\n  beginPublish: (PublishType, ?string) => void,\n  pendingIds: Array<string>,\n  isResolvingWinningUri: boolean,\n  winningClaim: ?Claim,\n  isSearching: boolean,\n};\n\nexport default function SearchTopClaim(props: Props) {\n  const {\n    doResolveUris,\n    doOpenModal,\n    query = '',\n    winningUri,\n    winningClaim,\n    hideLink = false,\n    setChannelActive,\n    beginPublish,\n    isResolvingWinningUri,\n    isSearching,\n  } = props;\n  const uriFromQuery = `lbry://${query}`;\n  let name;\n  let channelUriFromQuery;\n  let winningUriIsChannel;\n  try {\n    const { isChannel, streamName, channelName } = parseURI(uriFromQuery);\n    if (!isChannel) {\n      channelUriFromQuery = `lbry://@${query}`;\n      name = streamName;\n    } else {\n      name = channelName;\n    }\n  } catch (e) {}\n\n  if (winningUri) {\n    try {\n      const { isChannel: winnerIsChannel } = parseURI(winningUri);\n      winningUriIsChannel = winnerIsChannel;\n    } catch (e) {}\n  }\n\n  React.useEffect(() => {\n    setChannelActive && winningUriIsChannel && setChannelActive(true);\n  }, [setChannelActive, winningUriIsChannel]);\n\n  React.useEffect(() => {\n    let urisToResolve = [];\n    if (uriFromQuery) {\n      urisToResolve.push(uriFromQuery);\n    }\n\n    if (channelUriFromQuery) {\n      urisToResolve.push(channelUriFromQuery);\n    }\n\n    if (urisToResolve.length > 0) {\n      doResolveUris(urisToResolve);\n    }\n  }, [doResolveUris, uriFromQuery, channelUriFromQuery]);\n\n  return (\n    <div className=\"search__header\">\n      {winningUri && (\n        <div className=\"claim-preview__actions--header\">\n          <a\n            className=\"media__uri\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://help.odysee.tv/category-blockchain/category-staking/increase/\"\n            title={__('Learn more about Credits on %DOMAIN%', { DOMAIN })}\n          >\n            <LbcSymbol prefix={__('Most supported')} />\n          </a>\n        </div>\n      )}\n      {winningUri && winningClaim && (\n        <div className=\"card\">\n          <ClaimPreview\n            hideRepostLabel\n            showNullPlaceholder\n            uri={winningUri}\n            properties={(claim) => (\n              <span className=\"claim-preview__custom-properties\">\n                <ClaimRepostAuthor short uri={winningUri} />\n                <ClaimEffectiveAmount uri={winningUri} />\n              </span>\n            )}\n          />\n        </div>\n      )}\n      {!winningUri && (isSearching || isResolvingWinningUri) && (\n        <div className=\"card\">\n          <ClaimPreview placeholder={'loading'} />\n        </div>\n      )}\n      {!winningUri && !isSearching && !isResolvingWinningUri && uriFromQuery && (\n        <div className=\"card card--section help--inline\">\n          <I18nMessage\n            tokens={{\n              repost: <Button button=\"link\" onClick={() => doOpenModal(MODALS.REPOST, {})} label={__('Repost')} />,\n              publish: (\n                <span>\n                  <Button button=\"link\" onClick={() => beginPublish('file', name)} label={__('publish')} />\n                </span>\n              ),\n            }}\n          >\n            You have found the edge of the internet. %repost% or %publish% your stuff here to claim this spot.\n          </I18nMessage>\n        </div>\n      )}\n      {!hideLink && winningUri && (\n        <div className=\"section__actions--between section__actions--no-margin\">\n          <span />\n          <Button\n            button=\"link\"\n            className=\"search__top-link\"\n            label={\n              <I18nMessage tokens={{ name: <strong>{query}</strong> }}>View competing uploads for %name%</I18nMessage>\n            }\n            navigate={`/$/${PAGES.TOP}?name=${query}`}\n            iconRight={ICONS.ARROW_RIGHT}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","export const SEARCH_IN_LANGUAGE = 'searchInLanguage';\n","// @flow\nimport { SEARCH_OPTIONS, SEARCH_PAGE_SIZE } from 'constants/search';\nimport * as ICONS from 'constants/icons';\nimport React, { useMemo } from 'react';\nimport { Form, FormField } from 'component/common/form';\nimport Button from 'component/button';\nimport Icon from 'component/common/icon';\nimport classnames from 'classnames';\nimport LangFilterIndicator from 'component/langFilterIndicator';\n\nconst CLAIM_TYPES = {\n  [SEARCH_OPTIONS.INCLUDE_FILES]: 'Files',\n  [SEARCH_OPTIONS.INCLUDE_CHANNELS]: 'Channels',\n  [SEARCH_OPTIONS.INCLUDE_FILES_AND_CHANNELS]: 'Everything',\n};\n\nconst TYPES_ADVANCED = {\n  [SEARCH_OPTIONS.MEDIA_VIDEO]: 'Video',\n  [SEARCH_OPTIONS.MEDIA_AUDIO]: 'Audio',\n  [SEARCH_OPTIONS.MEDIA_IMAGE]: 'Image',\n  [SEARCH_OPTIONS.MEDIA_TEXT]: 'Text',\n  [SEARCH_OPTIONS.MEDIA_APPLICATION]: 'Other',\n};\n\nconst TIME_FILTER = {\n  '': 'All',\n  // [SEARCH_OPTIONS.TIME_FILTER_LAST_HOUR]: 'Last Hour', -- disable (doesn't work)\n  [SEARCH_OPTIONS.TIME_FILTER_TODAY]: 'Last 24 Hours',\n  [SEARCH_OPTIONS.TIME_FILTER_THIS_WEEK]: 'This Week',\n  [SEARCH_OPTIONS.TIME_FILTER_THIS_MONTH]: 'This Month',\n  [SEARCH_OPTIONS.TIME_FILTER_THIS_YEAR]: 'This Year',\n};\n\nconst SORT_BY = {\n  '': 'Relevance',\n  [SEARCH_OPTIONS.SORT_DESCENDING]: 'Newest first',\n  [SEARCH_OPTIONS.SORT_ASCENDING]: 'Oldest first',\n};\n\ntype Props = {\n  setSearchOption: (string, boolean | string | number) => void,\n  options: {},\n  simple: boolean,\n  expanded: boolean,\n  searchInLanguage: boolean,\n  toggleSearchExpanded: () => void,\n  onSearchOptionsChanged: (string) => void,\n};\n\nconst SearchOptions = (props: Props) => {\n  const { options, simple, setSearchOption, expanded, searchInLanguage, toggleSearchExpanded, onSearchOptionsChanged } =\n    props;\n\n  const stringifiedOptions = JSON.stringify(options);\n\n  const isFilteringByChannel = useMemo(() => {\n    const jsonOptions = JSON.parse(stringifiedOptions);\n    const claimType = String(jsonOptions[SEARCH_OPTIONS.CLAIM_TYPE] || '');\n    return claimType.includes(SEARCH_OPTIONS.INCLUDE_CHANNELS);\n  }, [stringifiedOptions]);\n\n  if (simple) {\n    delete TYPES_ADVANCED[SEARCH_OPTIONS.MEDIA_APPLICATION];\n    delete TYPES_ADVANCED[SEARCH_OPTIONS.MEDIA_IMAGE];\n  }\n\n  React.useEffect(() => {\n    // We no longer let the user set the search results count, but the value\n    // will be in local storage for existing users. Override that.\n    if (options[SEARCH_OPTIONS.RESULT_COUNT] !== SEARCH_PAGE_SIZE) {\n      setSearchOption(SEARCH_OPTIONS.RESULT_COUNT, SEARCH_PAGE_SIZE);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- on mount only\n  }, []);\n\n  function updateSearchOptions(option, value) {\n    setSearchOption(option, value);\n    if (onSearchOptionsChanged) {\n      onSearchOptionsChanged(option);\n    }\n  }\n\n  function addRow(label: string, value: any) {\n    return (\n      <tr>\n        <td>\n          <legend className=\"search__legend\">{label}</legend>\n        </td>\n        <td>{value}</td>\n      </tr>\n    );\n  }\n\n  const OBJ_TO_OPTION_ELEM = (obj) => {\n    return Object.entries(obj).map((x) => {\n      return (\n        <option key={x[0]} value={x[0]}>\n          {__(String(x[1]))}\n        </option>\n      );\n    });\n  };\n\n  const typeElem = (\n    <>\n      <div className=\"filter-values\">\n        <div>\n          {Object.entries(CLAIM_TYPES).map((t) => {\n            const option = t[0];\n            if (option === SEARCH_OPTIONS.INCLUDE_FILES_AND_CHANNELS) {\n              return null;\n            }\n            return (\n              <Button\n                key={option}\n                button=\"alt\"\n                // $FlowFixMe https://github.com/facebook/flow/issues/2221\n                label={__(t[1])}\n                className={classnames(`button-toggle`, {\n                  'button-toggle--active': options[SEARCH_OPTIONS.CLAIM_TYPE] === option,\n                })}\n                onClick={() => setSearchOption(SEARCH_OPTIONS.CLAIM_TYPE, option)}\n              />\n            );\n          })}\n        </div>\n        <Button\n          button=\"close\"\n          className={classnames('close-button', {\n            'close-button--visible': options[SEARCH_OPTIONS.CLAIM_TYPE] !== SEARCH_OPTIONS.INCLUDE_FILES_AND_CHANNELS,\n          })}\n          icon={ICONS.REMOVE}\n          onClick={() => updateSearchOptions(SEARCH_OPTIONS.CLAIM_TYPE, SEARCH_OPTIONS.INCLUDE_FILES_AND_CHANNELS)}\n        />\n      </div>\n      {options[SEARCH_OPTIONS.CLAIM_TYPE] === SEARCH_OPTIONS.INCLUDE_FILES && (\n        <div className=\"media-types\">\n          {Object.entries(TYPES_ADVANCED).map((t) => {\n            const option = t[0];\n            return (\n              <FormField\n                key={option}\n                name={option}\n                type=\"checkbox\"\n                blockWrap={false}\n                disabled={options[SEARCH_OPTIONS.CLAIM_TYPE] !== SEARCH_OPTIONS.INCLUDE_FILES}\n                // $FlowFixMe https://github.com/facebook/flow/issues/2221\n                label={__(t[1])}\n                checked={!isFilteringByChannel && options[option]}\n                onChange={() => updateSearchOptions(option, !options[option])}\n              />\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n\n  const otherOptionsElem = (\n    <>\n      <div className=\"filter-values\">\n        <FormField\n          type=\"checkbox\"\n          name=\"exact-match\"\n          checked={options[SEARCH_OPTIONS.EXACT]}\n          onChange={() => updateSearchOptions(SEARCH_OPTIONS.EXACT, !options[SEARCH_OPTIONS.EXACT])}\n          label={__('Exact match')}\n        />\n        <Icon\n          className=\"icon--help\"\n          icon={ICONS.HELP}\n          tooltip\n          size={16}\n          customTooltipText={__(\n            'Find results that include all the given words in the exact order.\\nThis can also be done by surrounding the search query with quotation marks (e.g. \"hello world\").'\n          )}\n        />\n      </div>\n    </>\n  );\n\n  const uploadDateElem = (\n    <div className=\"filter-values\">\n      <FormField\n        type=\"select\"\n        name=\"upload-date\"\n        value={options[SEARCH_OPTIONS.TIME_FILTER]}\n        onChange={(e) => updateSearchOptions(SEARCH_OPTIONS.TIME_FILTER, e.target.value)}\n        blockWrap={false}\n      >\n        {OBJ_TO_OPTION_ELEM(TIME_FILTER)}\n      </FormField>\n      <Button\n        button=\"close\"\n        className={classnames('close-button', {\n          'close-button--visible': options[SEARCH_OPTIONS.TIME_FILTER],\n        })}\n        icon={ICONS.REMOVE}\n        onClick={() => updateSearchOptions(SEARCH_OPTIONS.TIME_FILTER, '')}\n      />\n    </div>\n  );\n\n  const sortByElem = (\n    <div className=\"filter-values\">\n      <FormField\n        type=\"select\"\n        name=\"sort-by\"\n        blockWrap={false}\n        value={options[SEARCH_OPTIONS.SORT]}\n        onChange={(e) => updateSearchOptions(SEARCH_OPTIONS.SORT, e.target.value)}\n      >\n        {OBJ_TO_OPTION_ELEM(SORT_BY)}\n      </FormField>\n    </div>\n  );\n\n  const uploadDateLabel =\n    options[SEARCH_OPTIONS.CLAIM_TYPE] === SEARCH_OPTIONS.INCLUDE_CHANNELS ? __('Creation Date') : __('Upload Date');\n\n  return (\n    <div>\n      <div>\n        <Button\n          button=\"alt\"\n          label={__('Filter')}\n          icon={ICONS.FILTER}\n          iconRight={expanded ? ICONS.UP : ICONS.DOWN}\n          onClick={toggleSearchExpanded}\n        />\n        {searchInLanguage && <LangFilterIndicator />}\n      </div>\n      <Form\n        className={classnames('search__options', {\n          'search__options--expanded': expanded,\n        })}\n      >\n        <table className=\"table table--condensed\">\n          <tbody>\n            {addRow(__('Type'), typeElem)}\n            {addRow(uploadDateLabel, uploadDateElem)}\n            {addRow(__('Sort By'), sortByElem)}\n            {addRow(__('Other Options'), otherOptionsElem)}\n          </tbody>\n        </table>\n      </Form>\n    </div>\n  );\n};\n\nexport default SearchOptions;\n","import { connect } from 'react-redux';\nimport { doUpdateSearchOptions } from 'redux/actions/search';\nimport { selectSearchOptions } from 'redux/selectors/search';\nimport { doToggleSearchExpanded } from 'redux/actions/app';\nimport { selectSearchOptionsExpanded } from 'redux/selectors/app';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport * as SETTINGS from 'constants/settings';\nimport SearchOptions from './view';\n\nconst select = (state) => ({\n  options: selectSearchOptions(state),\n  expanded: selectSearchOptionsExpanded(state),\n  searchInLanguage: selectClientSetting(state, SETTINGS.SEARCH_IN_LANGUAGE),\n});\n\nconst perform = (dispatch, ownProps) => {\n  const additionalOptions = ownProps.additionalOptions || {};\n  return {\n    setSearchOption: (option, value) => dispatch(doUpdateSearchOptions({ [option]: value }, additionalOptions)),\n    toggleSearchExpanded: () => dispatch(doToggleSearchExpanded()),\n  };\n};\n\nexport default connect(select, perform)(SearchOptions);\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { doSearch } from 'redux/actions/search';\nimport {\n  selectIsSearching,\n  makeSelectSearchUrisForQuery,\n  selectSearchOptions,\n  makeSelectHasReachedMaxResultsLength,\n} from 'redux/selectors/search';\nimport { selectClientSetting, selectLanguage, selectShowMatureContent } from 'redux/selectors/settings';\nimport { getSearchQueryString } from 'util/query-params';\n// import { selectUserHasOdyseePremiumPlus } from 'redux/selectors/memberships';\nimport SearchPage from './view';\nimport * as SETTINGS from 'constants/settings';\n\nconst select = (state, props) => {\n  const showMature = selectShowMatureContent(state);\n  const urlParams = new URLSearchParams(props.location.search);\n  // const hasPremiumPlus = selectUserHasOdyseePremiumPlus(state);\n  const languageSetting = selectLanguage(state);\n  const searchInLanguage = selectClientSetting(state, SETTINGS.SEARCH_IN_LANGUAGE);\n\n  let urlQuery = urlParams.get('q') || null;\n  if (urlQuery) {\n    urlQuery = urlQuery.replace(/^lbry:\\/\\//i, '').replace(/\\//, ' ');\n  }\n\n  const searchOptions = {\n    ...selectSearchOptions(state),\n    isBackgroundSearch: false,\n    nsfw: showMature,\n    ...(searchInLanguage ? { language: languageSetting } : {}),\n  };\n\n  const query = getSearchQueryString(urlQuery, searchOptions);\n  const uris = makeSelectSearchUrisForQuery(query)(state);\n  const hasReachedMaxResultsLength = makeSelectHasReachedMaxResultsLength(query)(state);\n\n  return {\n    urlQuery,\n    searchOptions,\n    isSearching: selectIsSearching(state),\n    uris: uris,\n    hasReachedMaxResultsLength: hasReachedMaxResultsLength,\n  };\n};\n\nconst perform = (dispatch) => ({\n  search: (query, options) => dispatch(doSearch(query, options)),\n});\n\nexport default withRouter(connect(select, perform)(SearchPage));\n","// @flow\nimport { SIMPLE_SITE } from 'config';\nimport React, { useEffect } from 'react';\nimport Lbry from 'lbry';\nimport { parseURI, isNameValid } from 'util/lbryURI';\nimport ClaimList from 'component/claimList';\nimport Page from 'component/page';\nimport SearchOptions from 'component/searchOptions';\nimport SearchTopClaim from 'component/searchTopClaim';\nimport { formatLbryUrlForWeb } from 'util/url';\nimport { useHistory } from 'react-router';\nimport { SEARCH_PAGE_SIZE } from 'constants/search';\n\ntype Props = {\n  urlQuery: string,\n  searchOptions: SearchOptions,\n  search: (string, SearchOptions) => void,\n  isSearching: boolean,\n  uris: Array<string>,\n  isAuthenticated: boolean,\n  hasReachedMaxResultsLength: boolean,\n};\n\nexport default function SearchPage(props: Props) {\n  const { urlQuery, searchOptions, search, uris, isSearching, hasReachedMaxResultsLength } = props;\n  const { push } = useHistory();\n  const [from, setFrom] = React.useState(0);\n\n  const modifiedUrlQuery = urlQuery && urlQuery.trim().replace(/\\s+/g, '').replace(/:/g, '#');\n  const uriFromQuery = `lbry://${modifiedUrlQuery}`;\n\n  let streamName;\n  let channelName;\n  let isValid = true;\n  try {\n    ({ streamName, channelName } = parseURI(uriFromQuery));\n    if (\n      (!streamName && !channelName) ||\n      (streamName && !isNameValid(streamName)) ||\n      (channelName && !isNameValid(channelName))\n    ) {\n      isValid = false;\n    }\n  } catch (e) {\n    isValid = false;\n  }\n\n  let claimId;\n  // Navigate directly to a claim if a claim_id is pasted into the search bar\n  if (!/\\s/.test(urlQuery) && urlQuery?.length === 40) {\n    try {\n      const dummyUrlForClaimId = `x#${urlQuery}`;\n      ({ claimId } = parseURI(dummyUrlForClaimId));\n      Lbry.claim_search({ claim_id: claimId }).then((res) => {\n        if (res.items && res.items.length) {\n          const claim = res.items[0];\n          const url = formatLbryUrlForWeb(claim.canonical_url);\n          push(url);\n        }\n      });\n    } catch (e) {}\n  }\n\n  const stringifiedSearchOptions = JSON.stringify(searchOptions);\n\n  useEffect(() => {\n    if (urlQuery) {\n      const searchOptions = JSON.parse(stringifiedSearchOptions);\n      search(urlQuery, { ...searchOptions, from: from });\n    }\n  }, [search, urlQuery, stringifiedSearchOptions, from]);\n\n  function loadMore() {\n    if (!isSearching && !hasReachedMaxResultsLength) {\n      setFrom(from + SEARCH_PAGE_SIZE);\n    }\n  }\n\n  function resetPage() {\n    setFrom(0);\n  }\n\n  return (\n    <Page className=\"searchPage-wrapper\">\n      <section className=\"search\">\n        {urlQuery && isValid && <SearchTopClaim query={modifiedUrlQuery} isSearching={isSearching} />}\n        <ClaimList\n          uris={uris || []}\n          loading={isSearching}\n          useLoadingSpinner\n          onScrollBottom={loadMore}\n          // 'page' is 1-indexed; It's not the same as 'from', but it just\n          // needs to be unique to indicate when a fetch is needed.\n          page={from + 1}\n          pageSize={SEARCH_PAGE_SIZE}\n          header={\n            <SearchOptions simple={SIMPLE_SITE} additionalOptions={searchOptions} onSearchOptionsChanged={resetPage} />\n          }\n        />\n        <div className=\"main--empty help\">{__('These search results are provided by Odysee.')}</div>\n      </section>\n    </Page>\n  );\n}\n"],"names":["props","claim","React","CreditAmount","amount","Number","repost_bid_amount","meta","effective_amount","connect","state","selectClaimForUri","uri","ClaimEffectiveAmount","Button","className","icon","ICONS","iconSize","description","__","navigate","concat","PAGES","SEARCH_IN_LANGUAGE","winningUri","makeSelectWinningUriForQuery","query","winningClaim","makeSelectClaimForUri","undefined","isResolvingWinningUri","selectIsResolvingWinningUri","pendingIds","selectPendingIds","dispatch","beginPublish","a","b","c","doBeginPublish","doResolveUris","uris","_doResolveUris","doOpenModal","id","_doOpenModal","name","channelUriFromQuery","winningUriIsChannel","_props$query","_props$hideLink","hideLink","setChannelActive","isSearching","uriFromQuery","_parseURI","parseURI","isChannel","streamName","channelName","e","winnerIsChannel","urisToResolve","push","length","target","rel","href","title","DOMAIN","LbcSymbol","prefix","ClaimPreview","hideRepostLabel","showNullPlaceholder","properties","ClaimRepostAuthor","short","placeholder","I18nMessage","tokens","repost","button","onClick","MODALS","label","publish","iconRight","CLAIM_TYPES","_defineProperty","_CLAIM_TYPES","SEARCH_OPTIONS","TYPES_ADVANCED","_TYPES_ADVANCED","TIME_FILTER","_TIME_FILTER","SORT_BY","_SORT_BY","options","simple","setSearchOption","expanded","searchInLanguage","toggleSearchExpanded","onSearchOptionsChanged","stringifiedOptions","JSON","stringify","isFilteringByChannel","useMemo","jsonOptions","parse","String","includes","updateSearchOptions","option","value","addRow","SEARCH_PAGE_SIZE","OBJ_TO_OPTION_ELEM","obj","Object","entries","map","x","key","typeElem","t","classnames","FormField","type","blockWrap","disabled","checked","onChange","otherOptionsElem","Icon","tooltip","size","customTooltipText","uploadDateElem","sortByElem","uploadDateLabel","LangFilterIndicator","Form","selectSearchOptions","selectSearchOptionsExpanded","selectClientSetting","SETTINGS","ownProps","additionalOptions","doUpdateSearchOptions","doToggleSearchExpanded","SearchOptions","withRouter","showMature","selectShowMatureContent","urlParams","URLSearchParams","location","search","languageSetting","selectLanguage","urlQuery","get","replace","searchOptions","_objectSpread","isBackgroundSearch","nsfw","language","getSearchQueryString","makeSelectSearchUrisForQuery","hasReachedMaxResultsLength","makeSelectHasReachedMaxResultsLength","selectIsSearching","doSearch","claimId","useHistory","_React$useState2","_slicedToArray","from","setFrom","modifiedUrlQuery","trim","isValid","isNameValid","test","dummyUrlForClaimId","Lbry","claim_id","then","res","items","url","formatLbryUrlForWeb","canonical_url","stringifiedSearchOptions","useEffect","_searchOptions","Page","SearchTopClaim","ClaimList","loading","useLoadingSpinner","onScrollBottom","page","pageSize","header","SIMPLE_SITE"],"sourceRoot":""}