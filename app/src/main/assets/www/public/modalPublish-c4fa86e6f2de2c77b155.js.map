{"version":3,"file":"modalPublish-c4fa86e6f2de2c77b155.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/modal/modalPublish/view.jsx","webpack://odysee.com/../ui/modal/modalPublish/index.js"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport { Modal } from 'modal/modal';\nimport ClaimPreview from 'component/claimPreview';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport Nag from 'component/nag';\n\ntype Props = {\n  closeModal: () => void,\n  navigate: (string) => void,\n  uri: string,\n  isEdit: boolean,\n  filePath: ?string | ?File,\n  lbryFirstError: ?string,\n  claim: Claim,\n};\n\nclass ModalPublishSuccess extends React.PureComponent<Props> {\n  render() {\n    const { closeModal, navigate, uri, isEdit, filePath, lbryFirstError, claim } = this.props;\n    //   $FlowFixMe\n    const livestream = claim && claim.value && claim.value_type === 'stream' && !claim.value.source;\n    let contentLabel;\n    if (livestream) {\n      contentLabel = __('Livestream Created');\n    } else if (isEdit) {\n      contentLabel = __('Update published');\n    } else {\n      contentLabel = __('File published');\n    }\n\n    let publishMessage;\n    if (isEdit) {\n      publishMessage = __('Your update is now pending. It will take a few minutes to appear for other users.');\n    } else if (livestream) {\n      publishMessage = __(\n        'Your livestream is now pending. You will be able to start shortly at the streaming dashboard.'\n      );\n    } else {\n      publishMessage = __('Your content will be live shortly.');\n    }\n\n    function handleClose() {\n      closeModal();\n    }\n\n    return (\n      <Modal isOpen type=\"card\" contentLabel={__(contentLabel)} onAborted={handleClose}>\n        <Card\n          title={livestream ? __('Livestream Created') : __('Success')}\n          subtitle={publishMessage}\n          body={\n            <React.Fragment>\n              <div className=\"card--inline\">\n                <ClaimPreview type=\"small\" uri={uri} />\n              </div>\n              {filePath && !IS_WEB && (\n                <p className=\"help\">\n                  <React.Fragment>\n                    {__(\n                      `Upload will continue in the background, please do not shut down immediately. Leaving the app running helps the network, thank you!`\n                    )}{' '}\n                    <Button button=\"link\" href=\"https://lbry.com/faq/host-content\" label={__('Learn More')} />\n                  </React.Fragment>\n                </p>\n              )}\n            </React.Fragment>\n          }\n          actions={\n            <div className=\"section__actions\">\n              {!livestream && (\n                <Button\n                  button=\"primary\"\n                  label={__('View My Uploads')}\n                  onClick={() => {\n                    navigate(`/$/${PAGES.UPLOADS}`);\n                    closeModal();\n                  }}\n                />\n              )}\n              {livestream && (\n                <Button\n                  button=\"primary\"\n                  label={__('View Livestream Settings')}\n                  onClick={() => {\n                    navigate(`/$/${PAGES.LIVESTREAM}?t=Setup`);\n                    closeModal();\n                  }}\n                />\n              )}\n              <Button button=\"link\" label={__('Close')} onClick={handleClose} />\n            </div>\n          }\n          nag={\n            lbryFirstError && (\n              <Nag\n                relative\n                type=\"error\"\n                message={\n                  <span>\n                    {__('Your file was published to LBRY, but the YouTube upload failed.')}\n                    <br />\n                    {lbryFirstError}\n                  </span>\n                }\n              />\n            )\n          }\n        />\n      </Modal>\n    );\n  }\n}\n\nexport default ModalPublishSuccess;\n","import { connect } from 'react-redux';\nimport { doHideModal } from 'redux/actions/app';\nimport ModalPublishSuccess from './view';\nimport { makeSelectClaimForUri } from 'redux/selectors/claims';\nimport { push } from 'connected-react-router';\n\nconst select = (state, props) => ({\n  claim: makeSelectClaimForUri(props.uri)(state),\n});\n\nconst perform = (dispatch) => ({\n  closeModal: () => dispatch(doHideModal()),\n  navigate: (path) => dispatch(push(path)),\n});\n\nexport default connect(select, perform)(ModalPublishSuccess);\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","_React$PureComponent","_inherits","ModalPublishSuccess","_super","_createSuper","_classCallCheck","apply","arguments","key","value","contentLabel","publishMessage","_this$props","this","closeModal","navigate","uri","isEdit","filePath","lbryFirstError","claim","livestream","value_type","source","handleClose","Modal","isOpen","type","onAborted","Card","ClaimPreview","label","concat","PAGES","Nag","relative","message","connect","state","makeSelectClaimForUri","dispatch","doHideModal","path","push"],"sourceRoot":""}