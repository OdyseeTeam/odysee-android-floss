{"version":3,"file":"9434-a2d317040fcb3a509e72.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/publish/shared/publishAdditionalOptions/license-type.jsx","webpack://odysee.com/../ui/component/publish/shared/publishBid/view.jsx","webpack://odysee.com/../ui/component/publish/shared/publishBid/index.js","webpack://odysee.com/../ui/component/publish/shared/publishAdditionalOptions/view.jsx","webpack://odysee.com/../ui/component/publish/shared/publishAdditionalOptions/index.js","webpack://odysee.com/../ui/component/publish/shared/publishBid/bid-help-text.jsx","webpack://odysee.com/../ui/component/publish/shared/publishFormErrors/view.jsx","webpack://odysee.com/../ui/component/publish/shared/publishFormErrors/index.js","webpack://odysee.com/../ui/component/publish/shared/publishName/name-help-text.jsx","webpack://odysee.com/../ui/component/publish/shared/publishName/view.jsx","webpack://odysee.com/../ui/component/publish/shared/publishName/index.js","webpack://odysee.com/../ui/component/publish/shared/publishReleaseDate/view.jsx","webpack://odysee.com/../ui/component/publish/shared/publishReleaseDate/index.js","webpack://odysee.com/../ui/component/publishProtectedContent/style.scss?0a57","webpack://odysee.com/../ui/component/publishProtectedContent/view.jsx","webpack://odysee.com/../ui/component/publishProtectedContent/index.js","webpack://odysee.com/../ui/component/walletSpendableBalanceHelp/view.jsx","webpack://odysee.com/../ui/component/walletSpendableBalanceHelp/index.js","webpack://odysee.com/../ui/component/yrblWalletEmpty/index.js","webpack://odysee.com/../ui/component/yrblWalletEmpty/view.jsx","webpack://odysee.com/../ui/effects/use-throttle.js","webpack://odysee.com/../ui/component/publishProtectedContent/style.scss"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormField } from 'component/common/form';\nimport { CC_LICENSES, LEGACY_CC_LICENSES, COPYRIGHT, OTHER, PUBLIC_DOMAIN, NONE } from 'constants/licenses';\n\ntype Props = {\n  licenseType: ?string,\n  licenseUrl: ?string,\n  otherLicenseDescription: ?string,\n  handleLicenseChange: (string, string) => void,\n  handleLicenseDescriptionChange: (SyntheticInputEvent<*>) => void,\n  handleLicenseUrlChange: (SyntheticInputEvent<*>) => void,\n};\n\nclass LicenseType extends React.PureComponent<Props> {\n  constructor() {\n    super();\n\n    (this: any).handleLicenseOnChange = this.handleLicenseOnChange.bind(this);\n  }\n\n  handleLicenseOnChange(event: SyntheticInputEvent<*>) {\n    const { handleLicenseChange } = this.props;\n    // $FlowFixMe\n    const { options, selectedIndex } = event.target;\n    const selectedOption = options[selectedIndex];\n    const licenseType = selectedOption.value;\n    const licenseUrl = selectedOption.getAttribute('data-url');\n\n    handleLicenseChange(licenseType, licenseUrl);\n  }\n\n  render() {\n    const {\n      licenseType,\n      otherLicenseDescription,\n      licenseUrl,\n      handleLicenseDescriptionChange,\n      handleLicenseUrlChange,\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        <FormField\n          name=\"license\"\n          label={__('License (Optional)')}\n          type=\"select\"\n          value={licenseType}\n          onChange={this.handleLicenseOnChange}\n        >\n          <option value={NONE}>{__('None')}</option>\n          <option value={PUBLIC_DOMAIN}>{__('Public Domain')}</option>\n          {CC_LICENSES.map(({ value, url }) => (\n            <option key={value} value={value} data-url={url}>\n              {value}\n            </option>\n          ))}\n\n          <option value={COPYRIGHT}>{__('Copyrighted...')}</option>\n          <option value={OTHER}>{__('Other...')}</option>\n          <option disabled>{__('Legacy Licences')}</option>\n          {LEGACY_CC_LICENSES.map(({ value, url }) => (\n            <option key={value} value={value} data-url={url}>\n              {value}\n            </option>\n          ))}\n        </FormField>\n\n        {licenseType === COPYRIGHT && (\n          <FormField\n            label={__('Copyright notice')}\n            type=\"text\"\n            name=\"copyright-notice\"\n            value={otherLicenseDescription}\n            onChange={handleLicenseDescriptionChange}\n          />\n        )}\n\n        {licenseType === OTHER && (\n          <fieldset>\n            <div className=\"form-field__help\">{__('Provide a description and link to your license')}</div>\n            <fieldset-group>\n              <FormField\n                label={__('License description')}\n                placeholder={__(\"The 'cool' license - TM\")}\n                type=\"text\"\n                name=\"other-license-description\"\n                value={otherLicenseDescription}\n                onChange={handleLicenseDescriptionChange}\n              />\n\n              <FormField\n                label={__('License URL')}\n                placeholder={__('mywebsite.com/license')}\n                type=\"text\"\n                name=\"other-license-url\"\n                value={licenseUrl}\n                onChange={handleLicenseUrlChange}\n              />\n            </fieldset-group>\n          </fieldset>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LicenseType;\n","// @flow\nimport { MINIMUM_PUBLISH_BID, ESTIMATED_FEE } from 'constants/claim';\nimport React, { useState, useEffect } from 'react';\nimport { FormField } from 'component/common/form';\nimport BidHelpText from './bid-help-text';\nimport Card from 'component/common/card';\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport WalletSpendableBalanceHelp from 'component/walletSpendableBalanceHelp';\n\ntype Props = {\n  name: string,\n  bid: number,\n  balance: number,\n  myClaimForUri: ?StreamClaim,\n  isResolvingUri: boolean,\n  amountNeededForTakeover: number,\n  updatePublishForm: (UpdatePublishState) => void,\n};\n\nfunction PublishBid(props: Props) {\n  const { name, myClaimForUri, bid, isResolvingUri, amountNeededForTakeover, updatePublishForm, balance } = props;\n  const [bidError, setBidError] = useState(undefined);\n  const previousBidAmount = myClaimForUri && Number(myClaimForUri.amount);\n\n  useEffect(() => {\n    const totalAvailableBidAmount = previousBidAmount ? previousBidAmount + balance : balance;\n\n    let bidError;\n    if (bid === 0) {\n      bidError = __('Deposit cannot be 0');\n    } else if (bid < MINIMUM_PUBLISH_BID) {\n      bidError = __('Your deposit must be higher');\n    } else if (totalAvailableBidAmount < bid) {\n      bidError = __('Deposit cannot be higher than your available balance: %balance%', {\n        balance: totalAvailableBidAmount,\n      });\n    } else if (totalAvailableBidAmount - bid < ESTIMATED_FEE) {\n      bidError = __('Please decrease your deposit to account for transaction fees');\n    }\n\n    setBidError(bidError);\n    updatePublishForm({ bidError: bidError });\n  }, [bid, previousBidAmount, balance, updatePublishForm]);\n\n  return (\n    <Card\n      className={!name ? 'disabled' : ''}\n      actions={\n        <FormField\n          type=\"number\"\n          name=\"content_bid\"\n          min=\"0\"\n          step=\"any\"\n          placeholder=\"0.123\"\n          className=\"form-field--price-amount\"\n          label={<LbcSymbol disabled={!name} postfix={__('Deposit')} size={12} />}\n          value={bid}\n          error={bidError}\n          onChange={(event) => updatePublishForm({ bid: parseFloat(event.target.value) })}\n          onWheel={(e) => e.stopPropagation()}\n          helper={\n            <>\n              <BidHelpText\n                uri={'lbry://' + name}\n                amountNeededForTakeover={amountNeededForTakeover}\n                isResolvingUri={isResolvingUri}\n              />\n              <WalletSpendableBalanceHelp inline />\n            </>\n          }\n        />\n      }\n    />\n  );\n}\n\nexport default PublishBid;\n","import { connect } from 'react-redux';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport {\n  selectPublishFormValue,\n  selectMyClaimForUri,\n  selectIsResolvingPublishUris,\n  selectTakeOverAmount,\n} from 'redux/selectors/publish';\nimport { doUpdatePublishForm } from 'redux/actions/publish';\nimport PublishBid from './view';\n\nconst select = (state) => ({\n  name: selectPublishFormValue(state, 'name'),\n  bid: selectPublishFormValue(state, 'bid'),\n  isResolvingUri: selectIsResolvingPublishUris(state),\n  balance: selectBalance(state),\n  myClaimForUri: selectMyClaimForUri(state),\n  amountNeededForTakeover: selectTakeOverAmount(state),\n});\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n});\n\nexport default connect(select, perform)(PublishBid);\n","// @flow\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\n// import usePersistedState from 'effects/use-persisted-state';\nimport { FormField } from 'component/common/form';\nimport Button from 'component/button';\nimport PublishReleaseDate from '../publishReleaseDate';\nimport LicenseType from './license-type';\nimport Card from 'component/common/card';\nimport SUPPORTED_LANGUAGES from 'constants/supported_languages';\nimport { sortLanguageMap } from 'util/default-languages';\nimport PublishBid from '../publishBid';\n\n\ntype Props = {\n  user: ?User,\n  language: ?string,\n  name: ?string,\n  licenseType: ?string,\n  otherLicenseDescription: ?string,\n  licenseUrl: ?string,\n  disabled: boolean,\n  updatePublishForm: (UpdatePublishState) => void,\n  useLBRYUploader: boolean,\n  needsYTAuth: boolean,\n  showSchedulingOptions: boolean,\n  visibility: Visibility,\n};\n\nfunction PublishAdditionalOptions(props: Props) {\n  const {\n    language,\n    name,\n    licenseType,\n    otherLicenseDescription,\n    licenseUrl,\n    updatePublishForm,\n    showSchedulingOptions,\n    disabled,\n    visibility,\n  } = props;\n\n  const [hideSection, setHideSection] = useState(disabled);\n  const showReleaseDate = !showSchedulingOptions && (visibility === 'public' || visibility === 'unlisted');\n\n  function toggleHideSection() {\n    setHideSection(!hideSection);\n  }\n\n  return (\n    <>\n      <Card\n        background\n        className=\"card--enable-overflow\"\n        title={__('Additional Options')}\n        body={\n          <React.Fragment>\n            {!hideSection && !disabled && (\n              <div className=\"settings-row\">\n                <div className={classnames({ 'card--disabled': !name })}>\n                  <div className=\"section\">\n                    {showReleaseDate && <PublishReleaseDate />}\n                    <FormField\n                      className={!showReleaseDate && 'publish-row--no-margin-select'}\n                      label={__('Language')}\n                      type=\"select\"\n                      name=\"content_language\"\n                      value={language}\n                      // $FlowFixMe @see FIX_LANGUAGE_STATE\n                      onChange={(event) => updatePublishForm({ languages: [event.target.value] })}\n                    >\n                      {sortLanguageMap(SUPPORTED_LANGUAGES).map(([langKey, langName]) => (\n                        <option key={langKey} value={langKey}>\n                          {langName}\n                        </option>\n                      ))}\n                    </FormField>\n\n                    <LicenseType\n                      licenseType={licenseType}\n                      otherLicenseDescription={otherLicenseDescription}\n                      licenseUrl={licenseUrl}\n                      handleLicenseChange={(newLicenseType, newLicenseUrl) =>\n                        updatePublishForm({\n                          licenseType: newLicenseType,\n                          licenseUrl: newLicenseUrl,\n                        })\n                      }\n                      handleLicenseDescriptionChange={(event) =>\n                        updatePublishForm({\n                          otherLicenseDescription: event.target.value,\n                        })\n                      }\n                      handleLicenseUrlChange={(event) => updatePublishForm({ licenseUrl: event.target.value })}\n                    />\n                  </div>\n                </div>\n                <PublishBid />\n              </div>\n            )}\n\n            <div className=\"publish-row publish-row--more\">\n              <Button label={hideSection ? __('Show') : __('Hide')} button=\"link\" onClick={toggleHideSection} />\n            </div>\n          </React.Fragment>\n        }\n      />\n    </>\n  );\n}\n\nexport default PublishAdditionalOptions;\n","import { connect } from 'react-redux';\nimport { selectPublishFormValues } from 'redux/selectors/publish';\nimport { doUpdatePublishForm } from 'redux/actions/publish';\nimport PublishAdditionalOptions from './view';\nimport { selectUser } from 'redux/selectors/user';\n\nconst select = (state) => ({\n  ...selectPublishFormValues(state),\n  user: selectUser(state),\n});\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n});\n\nexport default connect(select, perform)(PublishAdditionalOptions);\n","// @flow\ntype Props = {\n  uri: ?string,\n  isResolvingUri: boolean,\n  amountNeededForTakeover: number,\n};\n\nfunction BidHelpText(props: Props) {\n  const { uri, isResolvingUri, amountNeededForTakeover } = props;\n\n  let bidHelpText;\n\n  if (uri) {\n    if (isResolvingUri) {\n      bidHelpText = __('Checking the winning claim amount...');\n    } else if (amountNeededForTakeover === 0) {\n      bidHelpText = __('You currently have the highest bid for this name.');\n    } else if (!amountNeededForTakeover) {\n      bidHelpText = __(\n        'Any amount will give you the highest bid, but larger amounts help your content be trusted and discovered.'\n      );\n    } else {\n      bidHelpText = __(\n        'If you bid more than %amount% LBRY Credits, when someone navigates to %uri%, it will load your published content. However, you can get a longer version of this URL for any bid.',\n        {\n          amount: amountNeededForTakeover,\n          uri: uri,\n        }\n      );\n    }\n  } else {\n    bidHelpText = __('These LBRY Credits remain yours and the deposit can be undone at any time.');\n  }\n\n  return bidHelpText;\n}\n\nexport default BidHelpText;\n","// @flow\nimport React from 'react';\nimport * as THUMBNAIL_STATUSES from 'constants/thumbnail_upload_statuses';\nimport { isNameValid } from 'util/lbryURI';\nimport { INVALID_NAME_ERROR } from 'constants/claim';\nimport { BITRATE } from 'constants/publish';\n\ntype Props = {\n  waitForFile: boolean,\n  // --- redux ---\n  title: ?string,\n  name: ?string,\n  bid: ?string,\n  bidError: ?string,\n  editingURI: ?string,\n  filePath: ?string | WebFile,\n  fileBitrate: number,\n  isStillEditing: boolean,\n  uploadThumbnailStatus: string,\n  thumbnail: string,\n  thumbnailError: boolean,\n  releaseTimeError: ?string,\n  memberRestrictionStatus: MemberRestrictionStatus,\n};\n\nfunction PublishFormErrors(props: Props) {\n  const {\n    name,\n    title,\n    bid,\n    bidError,\n    editingURI,\n    filePath,\n    isStillEditing,\n    uploadThumbnailStatus,\n    thumbnail,\n    thumbnailError,\n    releaseTimeError,\n    memberRestrictionStatus,\n    waitForFile,\n    fileBitrate,\n  } = props;\n  // These are extra help\n  // If there is an error it will be presented as an inline error as well\n\n  const isUploadingThumbnail = uploadThumbnailStatus === THUMBNAIL_STATUSES.IN_PROGRESS;\n  const thumbnailUploaded = uploadThumbnailStatus === THUMBNAIL_STATUSES.COMPLETE && thumbnail;\n  const missingTiers = memberRestrictionStatus.isApplicable && !memberRestrictionStatus.isSelectionValid;\n\n  return (\n    <div className=\"error__text\">\n      {waitForFile && <div>{__('Choose a replay file, or select None')}</div>}\n      {missingTiers && <div>{__(HELP.NO_TIERS_SELECTED)}</div>}\n      {fileBitrate > BITRATE.MAX && (\n        <div>{__('Bitrate is over the max, please transcode or choose another file.')}</div>\n      )}\n      {!title && <div>{__('A title is required')}</div>}\n      {!name && <div>{__('A URL is required')}</div>}\n      {name && !isNameValid(name) && INVALID_NAME_ERROR}\n      {!bid && <div>{__('A deposit amount is required')}</div>}\n      {bidError && <div>{__('Please check your deposit amount.')}</div>}\n      {isUploadingThumbnail && <div>{__('Please wait for thumbnail to finish uploading')}</div>}\n      {!isUploadingThumbnail && !thumbnail ? (\n        <div>{__('A thumbnail is required. Please upload or provide an image URL above.')}</div>\n      ) : (\n        thumbnailError && !thumbnailUploaded && <div>{__('Thumbnail is invalid.')}</div>\n      )}\n      {editingURI && !isStillEditing && !filePath && <div>{__('Please reselect a file after changing the URL')}</div>}\n      {releaseTimeError && <div>{__(releaseTimeError)}</div>}\n    </div>\n  );\n}\n\n// prettier-ignore\nconst HELP = {\n  NO_TIERS_SELECTED: \"You selected to restrict this content but didn't choose any memberships, please choose a membership tier to restrict, or uncheck the restriction box\",\n};\n\nexport default PublishFormErrors;\n","import { connect } from 'react-redux';\nimport { selectPublishFormValue, selectIsStillEditing, selectMemberRestrictionStatus } from 'redux/selectors/publish';\nimport PublishFormErrors from './view';\n\nconst select = (state) => ({\n  bid: selectPublishFormValue(state, 'bid'),\n  name: selectPublishFormValue(state, 'name'),\n  title: selectPublishFormValue(state, 'title'),\n  bidError: selectPublishFormValue(state, 'bidError'),\n  fileBitrate: selectPublishFormValue(state, 'fileBitrate'),\n  editingURI: selectPublishFormValue(state, 'editingURI'),\n  uploadThumbnailStatus: selectPublishFormValue(state, 'uploadThumbnailStatus'),\n  thumbnail: selectPublishFormValue(state, 'thumbnail'),\n  thumbnailError: selectPublishFormValue(state, 'thumbnailError'),\n  releaseTimeError: selectPublishFormValue(state, 'releaseTimeError'),\n  memberRestrictionStatus: selectMemberRestrictionStatus(state),\n  isStillEditing: selectIsStillEditing(state),\n});\n\nexport default connect(select)(PublishFormErrors);\n","// @flow\nimport * as React from 'react';\nimport Button from 'component/button';\nimport { buildURI } from 'util/lbryURI';\nimport I18nMessage from 'component/i18nMessage';\n\nfunction isUriPendingUpload(uri: ?string, currentUploadNames: Array<string>) {\n  const protocol = 'lbry://';\n  const uriName = uri && uri.startsWith(protocol) ? uri.substring(protocol.length) : uri;\n  return currentUploadNames.includes(uriName);\n}\n\ntype Props = {\n  uri: ?string,\n  myClaimForUri: ?StreamClaim,\n  myClaimForUriCaseInsensitive: ?StreamClaim,\n  currentUploads: { [guid: string]: FileUploadItem },\n  isStillEditing: boolean,\n  onEditMyClaim: (any, string) => void,\n};\n\nfunction NameHelpText(props: Props) {\n  const { uri, myClaimForUri, myClaimForUriCaseInsensitive, currentUploads, onEditMyClaim, isStillEditing } = props;\n\n  const currentUploadNames: Array<string> = React.useMemo(() => {\n    // $FlowFixMe - unable to resolve mixed\n    return Object.values(currentUploads).map((x) => (x.params && !x.params.preview ? x.params.name : ''));\n  }, [currentUploads]);\n\n  let nameHelpText;\n\n  if (isStillEditing) {\n    nameHelpText = __('You are currently editing this claim.');\n  } else if (isUriPendingUpload(uri, currentUploadNames)) {\n    nameHelpText = (\n      <div className=\"error__text\">\n        {/* prettier-ignore */}\n        <I18nMessage tokens={{ existing_uri: (<u><em>{uri}</em></u>) }}>\n          You already have a pending upload at %existing_uri%.\n        </I18nMessage>\n      </div>\n    );\n  } else if (uri && myClaimForUri) {\n    const editUri = buildURI({\n      streamName: myClaimForUri.name,\n      streamClaimId: myClaimForUri.claim_id,\n    });\n\n    nameHelpText = (\n      <React.Fragment>\n        <div className=\"error__text\">\n          <I18nMessage\n            tokens={{\n              existing_uri: (\n                <u>\n                  <em>{uri}</em>\n                </u>\n              ),\n            }}\n          >\n            You already have a claim at %existing_uri%. Publishing will update (overwrite) your existing claim.\n          </I18nMessage>\n        </div>\n        <Button\n          button=\"link\"\n          label={__('Edit existing claim instead')}\n          onClick={() => onEditMyClaim(myClaimForUri, editUri)}\n        />\n      </React.Fragment>\n    );\n  } else if (uri && myClaimForUriCaseInsensitive) {\n    nameHelpText = <div className=\"error__text\">{__('You already have a claim with this name.')}</div>;\n  }\n\n  return <React.Fragment>{nameHelpText && nameHelpText}</React.Fragment>;\n}\n\nexport default NameHelpText;\n","// @flow\nimport { DOMAIN } from 'config';\nimport { INVALID_NAME_ERROR } from 'constants/claim';\nimport React, { useState, useEffect } from 'react';\nimport { isNameValid } from 'util/lbryURI';\nimport { FormField } from 'component/common/form';\nimport NameHelpText from './name-help-text';\nimport { useIsMobile } from 'effects/use-screensize';\nimport useThrottle from 'effects/use-throttle';\n\ntype Props = {\n  name: string,\n  // TODO: unclear whether 'uri' comes from client or redux. It's currently both.\n  uri: string,\n  isStillEditing: boolean,\n  myClaimForUri: ?StreamClaim,\n  myClaimForUriCaseInsensitive: ?StreamClaim,\n  amountNeededForTakeover: number,\n  prepareEdit: ({}, string) => void,\n  updatePublishForm: (UpdatePublishState) => void,\n  activeChannelClaim: ?ChannelClaim,\n  incognito: boolean,\n  currentUploads: { [guid: string]: FileUploadItem },\n};\n\nfunction PublishName(props: Props) {\n  const {\n    name: publishFormName,\n    uri,\n    isStillEditing,\n    myClaimForUri,\n    myClaimForUriCaseInsensitive,\n    prepareEdit,\n    updatePublishForm,\n    activeChannelClaim,\n    incognito,\n    currentUploads,\n  } = props;\n\n  const [name, setName] = useState(publishFormName);\n  const nameThrottled = useThrottle(name, 750);\n\n  const [nameError, setNameError] = useState(undefined);\n  const [blurred, setBlurred] = React.useState(false);\n  const activeChannelName = activeChannelClaim && activeChannelClaim.name;\n  const isMobile = useIsMobile();\n\n  let prefix = IS_WEB ? (isMobile ? '' : `${DOMAIN}/`) : 'lbry://';\n  if (activeChannelName && !incognito) {\n    prefix += `${activeChannelName}/`;\n  }\n\n  function editExistingClaim() {\n    if (myClaimForUri) {\n      prepareEdit(myClaimForUri, uri);\n    }\n  }\n\n  function handleNameChange(event) {\n    setName(event.target.value);\n  }\n\n  useEffect(() => {\n    // Cases: Form was cleared; Sanitized; New file selected\n    if (publishFormName !== name) {\n      setName(publishFormName);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- one way update only\n  }, [publishFormName]);\n\n  useEffect(() => {\n    updatePublishForm({ name: nameThrottled || '' });\n  }, [nameThrottled, updatePublishForm]);\n\n  useEffect(() => {\n    if (!blurred && !name) {\n      return;\n    }\n\n    let nameError;\n    if (!name) {\n      nameError = __('A name is required');\n    } else if (!isNameValid(name)) {\n      nameError = INVALID_NAME_ERROR;\n    }\n\n    setNameError(nameError);\n  }, [name, blurred]);\n\n  return (\n    <>\n      <fieldset-group class=\"fieldset-group--smushed fieldset-group--disabled-prefix\">\n        <fieldset-section>\n          <label>{__('URL')}</label>\n          <div className=\"form-field__prefix\">{prefix}</div>\n        </fieldset-section>\n        <FormField\n          type=\"text\"\n          name=\"content_name\"\n          value={name}\n          error={nameError}\n          disabled={isStillEditing}\n          onChange={handleNameChange}\n          onBlur={() => setBlurred(true)}\n          autoComplete=\"off\"\n        />\n      </fieldset-group>\n\n      <div className=\"form-field__help\">\n        <NameHelpText\n          uri={uri}\n          isStillEditing={isStillEditing}\n          myClaimForUri={myClaimForUri}\n          myClaimForUriCaseInsensitive={myClaimForUriCaseInsensitive}\n          currentUploads={currentUploads}\n          onEditMyClaim={editExistingClaim}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default PublishName;\n","import { connect } from 'react-redux';\nimport { doUpdatePublishForm, doPrepareEdit } from 'redux/actions/publish';\nimport {\n  selectPublishFormValue,\n  selectIsStillEditing,\n  selectMyClaimForUri,\n  selectTakeOverAmount,\n  selectCurrentUploads,\n} from 'redux/selectors/publish';\nimport { selectActiveChannelClaim, selectIncognito } from 'redux/selectors/app';\nimport PublishName from './view';\n\nconst select = (state) => ({\n  name: selectPublishFormValue(state, 'name'),\n  uri: selectPublishFormValue(state, 'uri'),\n  isStillEditing: selectIsStillEditing(state),\n  myClaimForUri: selectMyClaimForUri(state),\n  myClaimForUriCaseInsensitive: selectMyClaimForUri(state, false),\n  currentUploads: selectCurrentUploads(state),\n  activeChannelClaim: selectActiveChannelClaim(state),\n  incognito: selectIncognito(state),\n  amountNeededForTakeover: selectTakeOverAmount(state),\n});\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n  prepareEdit: (claim, uri) => dispatch(doPrepareEdit(claim, uri)),\n});\n\nexport default connect(select, perform)(PublishName);\n","// @flow\nimport React from 'react';\nimport classnames from 'classnames';\n\nimport Button from 'component/button';\nimport DateTimePicker from 'react-datetime-picker';\n\nfunction linuxTimestampToDate(linuxTimestamp: number) {\n  return new Date(linuxTimestamp * 1000);\n}\n\nfunction dateToLinuxTimestamp(date: Date) {\n  return Number(Math.round(date.getTime() / 1000));\n}\n\nconst NOW = 'now';\nconst DEFAULT = 'default';\nconst RESET_TO_ORIGINAL = 'reset-to-original';\n\nexport type Props = {|\n  minDate?: Date,\n|};\n\ntype StateProps = {|\n  claimToEdit: ?StreamClaim,\n  releaseTime: ?number,\n  releaseTimeDisabled: boolean,\n  releaseTimeError: ?string,\n  clock24h: boolean,\n  appLanguage: ?string,\n|};\n\ntype DispatchProps = {|\n  updatePublishForm: (UpdatePublishState) => void,\n|};\n\nconst PublishReleaseDate = (props: Props & StateProps & DispatchProps) => {\n  const {\n    minDate,\n    claimToEdit,\n    releaseTime,\n    releaseTimeDisabled,\n    releaseTimeError,\n    clock24h,\n    appLanguage,\n    updatePublishForm,\n  } = props;\n\n  const showDefaultBtn = releaseTime !== undefined;\n  const showDatePicker = true;\n  const isEdit = Boolean(claimToEdit);\n\n  const [forceRender, setForceRender] = React.useState(0);\n\n  let claimDateStr;\n  if (isEdit) {\n    const date = new Date((claimToEdit?.value?.release_time || claimToEdit?.timestamp || 0) * 1000);\n    claimDateStr = date.toLocaleString(appLanguage || 'en');\n  }\n\n  const onDateTimePickerChanged = (value) => {\n    if (value instanceof Date) {\n      updatePublishForm({ releaseTime: dateToLinuxTimestamp(value) });\n    }\n  };\n\n  function newDate(value: string | Date) {\n    switch (value) {\n      case NOW:\n        let newDate = new Date();\n        if (minDate && newDate < minDate) {\n          newDate = new Date(minDate.getTime());\n        }\n        updatePublishForm({ releaseTime: dateToLinuxTimestamp(newDate) });\n        break;\n\n      case DEFAULT:\n      case RESET_TO_ORIGINAL:\n        // PAYLOAD.releaseTime() will do the right thing based on various scenarios.\n        updatePublishForm({ releaseTime: undefined });\n        break;\n\n      default:\n        console.assert(false, 'unhandled case'); // eslint-disable-line no-console\n        updatePublishForm({ releaseTime: undefined });\n        break;\n    }\n  }\n\n  function handleBlur(event) {\n    if (event.target.name === 'minute' || event.target.name === 'day') {\n      const validity = event?.target?.validity;\n      if (validity.rangeOverflow || validity.rangeUnderflow) {\n        setForceRender(Date.now());\n      } else if (releaseTimeError === event.target.name) {\n        setForceRender(Date.now());\n      }\n    }\n  }\n\n  return (\n    <div\n      className={classnames('form-field-date-picker', {\n        'form-field-date-picker--disabled': releaseTimeDisabled,\n      })}\n    >\n      <label>{__('Release date')}</label>\n      <div className=\"form-field-date-picker__controls\">\n        {showDatePicker && (\n          <DateTimePicker\n            key={forceRender}\n            locale={appLanguage}\n            className=\"date-picker-input\"\n            calendarClassName=\"form-field-calendar\"\n            onBlur={handleBlur}\n            onChange={onDateTimePickerChanged}\n            value={releaseTime ? linuxTimestampToDate(releaseTime) : undefined}\n            format={clock24h ? 'y-MM-dd HH:mm' : 'y-MM-dd h:mm a'}\n            disableClock\n            clearIcon={null}\n            minDate={minDate}\n          />\n        )}\n        {showDatePicker && (\n          <Button\n            button=\"link\"\n            label={__('Now')}\n            aria-label={__('Set to current date and time')}\n            onClick={() => newDate(NOW)}\n          />\n        )}\n        {showDefaultBtn && (\n          <Button\n            button=\"link\"\n            label={isEdit ? __('Reset') : __('Default')}\n            aria-label={isEdit ? __('Reset to original (previous) publish date') : __('Remove custom release date')}\n            onClick={() => newDate(DEFAULT)}\n          />\n        )}\n        {releaseTimeError && <span className=\"form-field-date-picker__error\">{releaseTimeError}</span>}\n      </div>\n      {claimDateStr && (\n        <div className=\"form-field-date-picker__past-value\">{__('Previous:  %date%', { date: claimDateStr })}</div>\n      )}\n    </div>\n  );\n};\n\nexport default PublishReleaseDate;\n","// @flow\nimport { connect } from 'react-redux';\nimport type { Props } from './view';\nimport PublishReleaseDate from './view';\n\nimport * as SETTINGS from 'constants/settings';\nimport { selectMyClaimForUri, selectPublishFormValue } from 'redux/selectors/publish';\nimport { doUpdatePublishForm } from 'redux/actions/publish';\nimport { selectClientSetting, selectLanguage } from 'redux/selectors/settings';\n\nconst select = (state) => ({\n  claimToEdit: selectMyClaimForUri(state),\n  releaseTime: selectPublishFormValue(state, 'releaseTime'),\n  releaseTimeDisabled: selectPublishFormValue(state, 'releaseTimeDisabled'),\n  releaseTimeError: selectPublishFormValue(state, 'releaseTimeError'),\n  clock24h: selectClientSetting(state, SETTINGS.CLOCK_24H),\n  appLanguage: selectLanguage(state),\n});\n\nconst perform = {\n  updatePublishForm: doUpdatePublishForm,\n};\n\nexport default connect<_, Props, _, _, _, _>(select, perform)(PublishReleaseDate);\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./style.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./style.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","// @flow\nimport React, { useEffect } from 'react';\n\nimport './style.scss';\nimport { FormField } from 'component/common/form';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\nimport Button from 'component/button';\nimport * as PAGES from 'constants/pages';\nimport { PAYWALL } from 'constants/publish';\n\ntype Props = {\n  updatePublishForm: (UpdatePublishState) => void,\n  getMembershipTiersForContentClaimId: (type: string) => void,\n  claim: Claim,\n  activeChannel: ChannelClaim,\n  incognito: boolean,\n  getExistingTiers: ({ channel_name: string, channel_id: string }) => Promise<CreatorMemberships>,\n  myMembershipTiers: Array<MembershipTier>,\n  isStillEditing: boolean,\n  memberRestrictionOn: boolean,\n  memberRestrictionTierIds: Array<number>,\n  validTierIds: ?Array<number>,\n  paywall: Paywall,\n  visibility: Visibility,\n};\n\nfunction PublishProtectedContent(props: Props) {\n  const {\n    activeChannel,\n    incognito,\n    updatePublishForm,\n    getMembershipTiersForContentClaimId,\n    claim,\n    getExistingTiers,\n    myMembershipTiers,\n    memberRestrictionOn,\n    memberRestrictionTierIds,\n    validTierIds,\n    paywall,\n    visibility,\n  } = props;\n\n  const claimId = claim?.claim_id;\n\n  // Fetch tiers for current claim\n  React.useEffect(() => {\n    if (claimId) {\n      getMembershipTiersForContentClaimId(claimId);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [claimId]);\n\n  // Remove previous selections that are no longer valid.\n  React.useEffect(() => {\n    if (validTierIds) {\n      const filteredTierIds = memberRestrictionTierIds.filter((id) => validTierIds.includes(id));\n      if (filteredTierIds.length < memberRestrictionTierIds.length) {\n        updatePublishForm({ memberRestrictionTierIds: filteredTierIds });\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only re-filter when validTierIds changes.\n  }, [validTierIds]);\n\n  function toggleMemberRestrictionOn() {\n    updatePublishForm({ memberRestrictionOn: !memberRestrictionOn });\n  }\n\n  function toggleMemberRestrictionTierId(id: number) {\n    if (memberRestrictionTierIds.includes(id)) {\n      updatePublishForm({\n        memberRestrictionTierIds: memberRestrictionTierIds.filter((x) => x !== id),\n      });\n    } else {\n      updatePublishForm({\n        memberRestrictionTierIds: memberRestrictionTierIds.concat(id),\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (activeChannel) {\n      getExistingTiers({\n        channel_name: activeChannel.normalized_name,\n        channel_id: activeChannel.claim_id,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [activeChannel]);\n\n  if (incognito) return null;\n\n  if (!myMembershipTiers || (myMembershipTiers && myMembershipTiers.length === 0)) {\n    return (\n      <>\n        <Card\n          background\n          isBodyList\n          title={__('Restrict Content')}\n          body={\n            <div className=\"settings-row publish-row--locked\">\n              <I18nMessage\n                tokens={{\n                  activate_your_memberships: (\n                    <Button\n                      navigate={`/$/${PAGES.CREATOR_MEMBERSHIPS}`}\n                      label={__('activate your memberships')}\n                      button=\"link\"\n                    />\n                  ),\n                }}\n              >\n                Please %activate_your_memberships% first to to use this functionality.\n              </I18nMessage>\n            </div>\n          }\n        />\n      </>\n    );\n  }\n\n  if (validTierIds && validTierIds.length === 0) {\n    return (\n      <Card\n        background\n        isBodyList\n        title={__('Restrict Content')}\n        body={\n          <div className=\"publish-row publish-row-tiers\">\n            <div className=\"publish-row__reason\">\n              {__('The selected channel has no membership tiers with exclusive-content perks for the current setup.')}\n            </div>\n          </div>\n        }\n      />\n    );\n  }\n\n  if (validTierIds && validTierIds.length > 0) {\n    if (visibility === 'unlisted') {\n      return (\n        <Card\n          background\n          isBodyList\n          title={__('Restrict Content')}\n          body={\n            <div className=\"publish-row publish-row-tiers\">\n              <div className=\"publish-row__reason\">\n                {__('Membership restrictions are not available for Unlisted content.')}\n              </div>\n            </div>\n          }\n        />\n      );\n    }\n\n    return (\n      <>\n        <Card\n          background\n          isBodyList\n          title={__('Restrict Content')}\n          body={\n            <div className=\"publish-row publish-row-tiers\">\n              <FormField\n                type=\"checkbox\"\n                disabled={paywall !== PAYWALL.FREE}\n                checked={memberRestrictionOn}\n                label={__('Restrict content to only allow subscribers to certain memberships to view it')}\n                name={'toggleRestrictedContent'}\n                className=\"restrict-content__checkbox\"\n                onChange={toggleMemberRestrictionOn}\n              />\n\n              {memberRestrictionOn && (\n                <div className=\"tier-list\">\n                  {myMembershipTiers.map((tier: MembershipTier) => {\n                    const show = validTierIds && validTierIds.includes(tier.Membership.id);\n                    return show ? (\n                      <FormField\n                        disabled={paywall !== PAYWALL.FREE}\n                        key={tier.Membership.id}\n                        type=\"checkbox\"\n                        checked={memberRestrictionTierIds.includes(tier.Membership.id)}\n                        label={tier.Membership.name}\n                        name={tier.Membership.id}\n                        onChange={() => toggleMemberRestrictionTierId(tier.Membership.id)}\n                      />\n                    ) : (\n                      <div key={tier.Membership.id} className=\"dummy-tier\" />\n                    );\n                  })}\n                </div>\n              )}\n\n              {paywall !== PAYWALL.FREE && (\n                <div className=\"error__text\">\n                  {__('This file has an attached price, disable it in order to add content restrictions.')}\n                </div>\n              )}\n            </div>\n          }\n        />\n      </>\n    );\n  }\n\n  return null;\n}\n\nexport default PublishProtectedContent;\n","import { connect } from 'react-redux';\nimport { doUpdatePublishForm } from 'redux/actions/publish';\nimport { selectActiveChannelClaim, selectIncognito } from 'redux/selectors/app';\nimport { selectMembershipTiersForCreatorId } from 'redux/selectors/memberships';\nimport { selectPublishFormValue, selectValidTierIdsForCurrentForm } from 'redux/selectors/publish';\nimport { doMembershipContentforStreamClaimId, doMembershipList } from 'redux/actions/memberships';\nimport PublishProtectedContent from './view';\n\nconst select = (state, props) => {\n  const incognito = selectIncognito(state);\n  const activeChannel = !incognito && selectActiveChannelClaim(state);\n\n  return {\n    activeChannel,\n    incognito,\n    myMembershipTiers: selectMembershipTiersForCreatorId(state, activeChannel?.claim_id),\n    memberRestrictionOn: selectPublishFormValue(state, 'memberRestrictionOn'),\n    memberRestrictionTierIds: selectPublishFormValue(state, 'memberRestrictionTierIds'),\n    validTierIds: selectValidTierIdsForCurrentForm(state),\n    paywall: selectPublishFormValue(state, 'paywall'),\n    visibility: selectPublishFormValue(state, 'visibility'),\n  };\n};\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n  getMembershipTiersForContentClaimId: (claimId) => dispatch(doMembershipContentforStreamClaimId(claimId)),\n  getExistingTiers: (doMembershipListParams) => dispatch(doMembershipList(doMembershipListParams)),\n});\n\nexport default connect(select, perform)(PublishProtectedContent);\n","// @flow\nimport CreditAmount from 'component/common/credit-amount';\nimport I18nMessage from 'component/i18nMessage';\nimport React from 'react';\n\ntype Props = { balance: number, inline?: boolean };\n\nfunction WalletSpendableBalanceHelp(props: Props) {\n  const { balance, inline } = props;\n\n  const getMessage = (text: string) => (\n    <I18nMessage tokens={{ balance: <CreditAmount amount={balance} precision={4} /> }}>{text}</I18nMessage>\n  );\n\n  return !balance ? null : inline ? (\n    <span className=\"help--spendable\">{getMessage('%balance% available.')}</span>\n  ) : (\n    <div className=\"help\">{getMessage('Your immediately spendable balance is %balance%.')}</div>\n  );\n}\n\nexport default WalletSpendableBalanceHelp;\n","import { connect } from 'react-redux';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport WalletSpendableBalanceHelp from './view';\n\nconst select = (state) => ({ balance: selectBalance(state) });\n\nexport default connect(select)(WalletSpendableBalanceHelp);\n","import { connect } from 'react-redux';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport YrblWalletEmpty from './view';\n\nconst select = (state) => ({\n  balance: selectBalance(state),\n});\n\nexport default connect(select)(YrblWalletEmpty);\n","// @flow\nimport type { Node } from 'react';\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport Button from 'component/button';\nimport Yrbl from 'component/yrbl';\nimport I18nMessage from 'component/i18nMessage';\nimport LbcSymbol from 'component/common/lbc-symbol';\n\ntype Props = {\n  includeWalletLink: boolean,\n  type?: string,\n  actions?: Node,\n};\nexport default function YrblWalletEmpty(props: Props) {\n  const { includeWalletLink = false, type = 'sad' } = props;\n\n  return (\n    <div className=\"main--empty\">\n      <Yrbl\n        type={type}\n        title={__('Your wallet is empty')}\n        subtitle={\n          <div>\n            <p>\n              <I18nMessage tokens={{ lbc: <LbcSymbol /> }}>\n                You need %lbc% to create a channel and upload content.\n              </I18nMessage>\n            </p>\n            <p>\n              <I18nMessage tokens={{ lbc: <LbcSymbol /> }}>\n                Never fear though, there are tons of ways to earn %lbc%. You can earn or purchase %lbc%, or you can have\n                your friends send you some.\n              </I18nMessage>\n            </p>\n          </div>\n        }\n        actions={\n          <div className=\"section__actions\">\n            <Button button=\"primary\" icon={ICONS.REWARDS} label={__('Earn Rewards')} navigate={`/$/${PAGES.REWARDS}`} />\n            <Button button=\"secondary\" icon={ICONS.BUY} label={'Buy/Swap Credits'} navigate={`/$/${PAGES.BUY}`} />\n            {includeWalletLink && (\n              <Button\n                icon={ICONS.RECEIVE}\n                button=\"secondary\"\n                label={__('Your Address')}\n                navigate={`/$/${PAGES.RECEIVE}`}\n              />\n            )}\n          </div>\n        }\n      />\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\n\nconst useEffectOnce = (effect) => {\n  React.useEffect(effect, []);\n};\n\nfunction useUnmount(fn: () => any): void {\n  const fnRef = React.useRef(fn);\n\n  // update the ref each render so if it change the newest callback will be invoked\n  fnRef.current = fn;\n\n  useEffectOnce(() => () => fnRef.current());\n}\n\nexport default function useThrottle(value: string, ms: number = 200) {\n  const [state, setState] = React.useState(value);\n  const timeout = React.useRef();\n  const nextValue = React.useRef(null);\n  const hasNextValue = React.useRef(0);\n\n  React.useEffect(() => {\n    if (!timeout.current) {\n      setState(value);\n      const timeoutCallback = () => {\n        if (hasNextValue.current) {\n          hasNextValue.current = false;\n          setState(nextValue.current);\n          timeout.current = setTimeout(timeoutCallback, ms);\n        } else {\n          timeout.current = undefined;\n        }\n      };\n      timeout.current = setTimeout(timeoutCallback, ms);\n    } else {\n      nextValue.current = value;\n      hasNextValue.current = true;\n    }\n  }, [ms, value]);\n\n  useUnmount(() => {\n    timeout.current && clearTimeout(timeout.current);\n  });\n\n  return state;\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".publish-row__reason{color:var(--color-text-warning);font-size:var(--font-small)}[dir] .publish-row__reason{padding:var(--spacing-xxs) var(--spacing-xs)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./../ui/component/publishProtectedContent/style.scss\"],\"names\":[],\"mappings\":\"AAAA,qBAGE,+BAAA,CADA,2BACA,CAHF,2BACE,4CAEA\",\"sourcesContent\":[\".publish-row__reason {\\n  padding: var(--spacing-xxs) var(--spacing-xs);\\n  font-size: var(--font-small);\\n  color: var(--color-text-warning);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["_React$PureComponent","_inherits","LicenseType","_super","_createSuper","_this","_classCallCheck","_assertThisInitialized","call","handleLicenseOnChange","bind","key","value","event","handleLicenseChange","this","props","_event$target","target","selectedOption","options","selectedIndex","getAttribute","_this$props","licenseType","otherLicenseDescription","licenseUrl","handleLicenseDescriptionChange","handleLicenseUrlChange","React","FormField","name","label","__","type","onChange","NONE","PUBLIC_DOMAIN","CC_LICENSES","_ref","url","COPYRIGHT","OTHER","disabled","LEGACY_CC_LICENSES","_ref2","className","placeholder","myClaimForUri","bid","isResolvingUri","amountNeededForTakeover","updatePublishForm","balance","_useState2","_slicedToArray","useState","undefined","bidError","setBidError","previousBidAmount","Number","amount","useEffect","totalAvailableBidAmount","MINIMUM_PUBLISH_BID","ESTIMATED_FEE","Card","actions","min","step","LbcSymbol","postfix","size","error","parseFloat","onWheel","e","stopPropagation","helper","BidHelpText","uri","WalletSpendableBalanceHelp","inline","connect","state","selectPublishFormValue","selectIsResolvingPublishUris","selectBalance","selectMyClaimForUri","selectTakeOverAmount","dispatch","doUpdatePublishForm","PublishBid","language","showSchedulingOptions","visibility","hideSection","setHideSection","showReleaseDate","background","title","body","classnames","PublishReleaseDate","languages","sortLanguageMap","SUPPORTED_LANGUAGES","map","langKey","langName","newLicenseType","newLicenseUrl","Button","button","onClick","_objectSpread","selectPublishFormValues","user","selectUser","PublishAdditionalOptions","HELP","NO_TIERS_SELECTED","editingURI","filePath","isStillEditing","uploadThumbnailStatus","thumbnail","thumbnailError","releaseTimeError","memberRestrictionStatus","waitForFile","fileBitrate","isUploadingThumbnail","THUMBNAIL_STATUSES","thumbnailUploaded","missingTiers","isApplicable","isSelectionValid","BITRATE","isNameValid","INVALID_NAME_ERROR","selectMemberRestrictionStatus","selectIsStillEditing","PublishFormErrors","nameHelpText","myClaimForUriCaseInsensitive","currentUploads","onEditMyClaim","currentUploadNames","Object","values","x","params","preview","protocol","uriName","startsWith","substring","length","includes","isUriPendingUpload","I18nMessage","tokens","existing_uri","editUri","buildURI","streamName","streamClaimId","claim_id","publishFormName","prepareEdit","activeChannelClaim","incognito","setName","nameThrottled","useThrottle","_useState4","nameError","setNameError","_React$useState2","blurred","setBlurred","activeChannelName","prefix","useIsMobile","concat","DOMAIN","class","onBlur","autoComplete","NameHelpText","selectCurrentUploads","selectActiveChannelClaim","selectIncognito","claim","doPrepareEdit","PublishName","dateToLinuxTimestamp","date","Math","round","getTime","NOW","DEFAULT","RESET_TO_ORIGINAL","claimDateStr","_claimToEdit$value","minDate","claimToEdit","releaseTime","releaseTimeDisabled","clock24h","appLanguage","showDefaultBtn","isEdit","Boolean","forceRender","setForceRender","Date","release_time","timestamp","toLocaleString","linuxTimestamp","newDate","_newDate","console","assert","DateTimePicker","locale","calendarClassName","validity","rangeOverflow","rangeUnderflow","now","format","disableClock","clearIcon","perform","selectClientSetting","SETTINGS","selectLanguage","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","activeChannel","getMembershipTiersForContentClaimId","getExistingTiers","myMembershipTiers","memberRestrictionOn","memberRestrictionTierIds","validTierIds","paywall","claimId","filteredTierIds","filter","id","channel_name","normalized_name","channel_id","isBodyList","activate_your_memberships","navigate","PAGES","PAYWALL","checked","tier","Membership","selectMembershipTiersForCreatorId","selectValidTierIdsForCurrentForm","doMembershipContentforStreamClaimId","doMembershipListParams","doMembershipList","PublishProtectedContent","getMessage","text","CreditAmount","precision","_props$includeWalletL","includeWalletLink","_props$type","Yrbl","subtitle","lbc","icon","ICONS","useEffectOnce","effect","fn","fnRef","ms","arguments","setState","timeout","nextValue","hasNextValue","current","setTimeout","timeoutCallback","clearTimeout","___CSS_LOADER_EXPORT___","push","module"],"sourceRoot":""}