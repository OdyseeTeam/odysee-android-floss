{"version":3,"file":"abandonedChannelPreview-bf3c2c8b0d0e00fc2516.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/abandonedChannelPreview/view.jsx","webpack://odysee.com/../ui/component/abandonedChannelPreview/index.js","webpack://odysee.com/../ui/component/channelBlockButton/view.jsx","webpack://odysee.com/../ui/component/channelBlockButton/index.js","webpack://odysee.com/../ui/component/channelMuteButton/view.jsx","webpack://odysee.com/../ui/component/channelMuteButton/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport classnames from 'classnames';\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport { parseURI } from 'util/lbryURI';\nimport ChannelBlockButton from 'component/channelBlockButton';\nimport ChannelMuteButton from 'component/channelMuteButton';\nimport SubscribeButton from 'component/subscribeButton';\n\ntype Props = {\n  uri: string,\n  type: string,\n};\n\nfunction AbandonedChannelPreview(props: Props) {\n  const { uri, type } = props;\n  const { channelName } = parseURI(uri);\n\n  return (\n    <li className={classnames('claim-preview__wrapper', 'claim-preview__wrapper--notice')}>\n      <div className={classnames('claim-preview', { 'claim-preview--large': type === 'large' })}>\n        <ChannelThumbnail uri={uri} />\n        <div className=\"claim-preview__text\">\n          <div className=\"claim-preview-metadata\">\n            <div className=\"claim-preview-info\">\n              <div className=\"claim-preview__title\">{channelName}</div>\n            </div>\n            <div className=\"media__subtitle\">{__(`This channel may have been unpublished.`)}</div>\n          </div>\n          <div className=\"claim-preview__actions\">\n            <div className=\"section__actions\">\n              <ChannelBlockButton uri={uri} />\n              <ChannelMuteButton uri={uri} />\n              <SubscribeButton uri={uri} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n}\n\nexport default AbandonedChannelPreview;\n","import AbandonedChannelPreview from './view';\n\nexport default AbandonedChannelPreview;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport { BLOCK_LEVEL } from 'constants/comment';\n\ntype Props = {\n  uri: string,\n  blockLevel?: string,\n  creatorUri?: string,\n  isBlocked: boolean,\n  isBlockingOrUnBlocking: boolean,\n  isToggling: boolean,\n  doCommentModUnBlock: (string, boolean) => void,\n  doCommentModBlock: (string, ?string, ?Number, boolean) => void,\n  doCommentModUnBlockAsAdmin: (string, string) => void,\n  doCommentModBlockAsAdmin: (string, ?string, ?string) => void,\n  doCommentModUnBlockAsModerator: (string, string, string) => void,\n  doCommentModBlockAsModerator: (string, ?string, string, ?string) => void,\n};\n\nfunction ChannelBlockButton(props: Props) {\n  const {\n    uri,\n    blockLevel,\n    creatorUri,\n    doCommentModUnBlock,\n    doCommentModBlock,\n    doCommentModUnBlockAsAdmin,\n    doCommentModBlockAsAdmin,\n    doCommentModUnBlockAsModerator,\n    doCommentModBlockAsModerator,\n    isBlocked,\n    isBlockingOrUnBlocking,\n    isToggling,\n  } = props;\n\n  function handleClick() {\n    switch (blockLevel) {\n      default:\n      case BLOCK_LEVEL.SELF:\n        if (isBlocked) {\n          doCommentModUnBlock(uri, false);\n        } else {\n          doCommentModBlock(uri, undefined, undefined, false);\n        }\n        break;\n\n      case BLOCK_LEVEL.MODERATOR:\n        if (creatorUri) {\n          if (isBlocked) {\n            doCommentModUnBlockAsModerator(uri, creatorUri, '');\n          } else {\n            doCommentModBlockAsModerator(uri, undefined, creatorUri, undefined);\n          }\n        }\n        break;\n\n      case BLOCK_LEVEL.ADMIN:\n        if (isBlocked) {\n          doCommentModUnBlockAsAdmin(uri, '');\n        } else {\n          doCommentModBlockAsAdmin(uri, undefined, undefined);\n        }\n        break;\n    }\n  }\n\n  function getButtonText(blockLevel) {\n    switch (blockLevel) {\n      default:\n      case BLOCK_LEVEL.SELF:\n      case BLOCK_LEVEL.ADMIN:\n        return isBlocked\n          ? isBlockingOrUnBlocking\n            ? __('Unblocking...')\n            : __('Unblock')\n          : isBlockingOrUnBlocking\n          ? __('Blocking...')\n          : __('Block');\n\n      case BLOCK_LEVEL.MODERATOR:\n        if (isToggling) {\n          return isBlocked ? __('Unblocking...') : __('Blocking...');\n        } else {\n          return isBlocked ? __('Unblock') : __('Block');\n        }\n    }\n  }\n\n  return <Button button=\"alt\" label={getButtonText(blockLevel)} onClick={handleClick} />;\n}\n\nexport default ChannelBlockButton;\n","import { connect } from 'react-redux';\nimport { selectClaimIdForUri } from 'redux/selectors/claims';\nimport {\n  doCommentModUnBlock,\n  doCommentModBlock,\n  doCommentModBlockAsAdmin,\n  doCommentModUnBlockAsAdmin,\n  doCommentModUnBlockAsModerator,\n  doCommentModBlockAsModerator,\n} from 'redux/actions/comments';\nimport {\n  makeSelectChannelIsBlocked,\n  makeSelectChannelIsAdminBlocked,\n  makeSelectChannelIsModeratorBlockedForCreator,\n  makeSelectUriIsBlockingOrUnBlocking,\n  makeSelectIsTogglingForDelegator,\n} from 'redux/selectors/comments';\n\nimport { BLOCK_LEVEL } from 'constants/comment';\nimport ChannelBlockButton from './view';\n\nconst select = (state, props) => {\n  let isBlocked;\n  let isToggling;\n\n  switch (props.blockLevel) {\n    default:\n    case BLOCK_LEVEL.SELF:\n      isBlocked = makeSelectChannelIsBlocked(props.uri)(state);\n      break;\n\n    case BLOCK_LEVEL.MODERATOR:\n      isBlocked = makeSelectChannelIsModeratorBlockedForCreator(props.uri, props.creatorUri)(state);\n      isToggling = makeSelectIsTogglingForDelegator(props.uri, props.creatorUri)(state);\n      break;\n\n    case BLOCK_LEVEL.ADMIN:\n      isBlocked = makeSelectChannelIsAdminBlocked(props.uri)(state);\n      break;\n  }\n\n  return {\n    isBlocked,\n    isToggling,\n    isBlockingOrUnBlocking: makeSelectUriIsBlockingOrUnBlocking(props.uri)(state),\n    creatorId: selectClaimIdForUri(state, props.creatorUri),\n  };\n};\n\nexport default connect(select, {\n  doCommentModUnBlock,\n  doCommentModBlock,\n  doCommentModUnBlockAsAdmin,\n  doCommentModBlockAsAdmin,\n  doCommentModUnBlockAsModerator,\n  doCommentModBlockAsModerator,\n})(ChannelBlockButton);\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\n\ntype Props = {\n  uri: string,\n  isMuted: boolean,\n  channelClaim: ?ChannelClaim,\n  doChannelMute: (string, boolean) => void,\n  doChannelUnmute: (string, boolean) => void,\n};\n\nfunction ChannelMuteButton(props: Props) {\n  const { uri, doChannelMute, doChannelUnmute, isMuted } = props;\n\n  function handleClick() {\n    if (isMuted) {\n      doChannelUnmute(uri, false);\n    } else {\n      doChannelMute(uri, false);\n    }\n  }\n\n  return <Button button=\"alt\" label={isMuted ? __('Unmute') : __('Mute')} onClick={handleClick} />;\n}\n\nexport default ChannelMuteButton;\n","import { connect } from 'react-redux';\nimport { doChannelMute, doChannelUnmute } from 'redux/actions/blocked';\nimport { makeSelectChannelIsMuted } from 'redux/selectors/blocked';\nimport ChannelMuteButton from './view';\n\nconst select = (state, props) => ({\n  isMuted: makeSelectChannelIsMuted(props.uri)(state),\n});\n\nexport default connect(select, {\n  doChannelMute,\n  doChannelUnmute,\n})(ChannelMuteButton);\n"],"names":["props","uri","type","channelName","parseURI","React","className","classnames","ChannelThumbnail","__","ChannelBlockButton","ChannelMuteButton","SubscribeButton","blockLevel","creatorUri","doCommentModUnBlock","doCommentModBlock","doCommentModUnBlockAsAdmin","doCommentModBlockAsAdmin","doCommentModUnBlockAsModerator","doCommentModBlockAsModerator","isBlocked","isBlockingOrUnBlocking","isToggling","Button","button","label","BLOCK_LEVEL","getButtonText","onClick","undefined","connect","state","makeSelectChannelIsBlocked","makeSelectChannelIsModeratorBlockedForCreator","makeSelectIsTogglingForDelegator","makeSelectChannelIsAdminBlocked","makeSelectUriIsBlockingOrUnBlocking","creatorId","selectClaimIdForUri","doChannelMute","doChannelUnmute","isMuted","makeSelectChannelIsMuted"],"sourceRoot":""}