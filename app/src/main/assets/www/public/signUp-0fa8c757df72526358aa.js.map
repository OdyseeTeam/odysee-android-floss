{"version":3,"file":"signUp-0fa8c757df72526358aa.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/loginGraphic/index.jsx","webpack://odysee.com/../ui/component/userSignOutButton/view.jsx","webpack://odysee.com/../ui/component/userSignOutButton/index.js","webpack://odysee.com/../ui/component/userEmailVerify/view.jsx","webpack://odysee.com/../ui/component/userEmailVerify/index.js","webpack://odysee.com/../ui/constants/email.js","webpack://odysee.com/../ui/component/userEmailNew/view.jsx","webpack://odysee.com/../ui/component/userEmailNew/index.js","webpack://odysee.com/../ui/component/userFirstChannel/view.jsx","webpack://odysee.com/../ui/component/userFirstChannel/index.js","webpack://odysee.com/../ui/component/userChannelFollowIntro/view.jsx","webpack://odysee.com/../ui/component/userChannelFollowIntro/index.js","webpack://odysee.com/../ui/component/userTagFollowIntro/view.jsx","webpack://odysee.com/../ui/component/userTagFollowIntro/index.js","webpack://odysee.com/../ui/component/userSignUp/view.jsx","webpack://odysee.com/../ui/component/userSignUp/index.js","webpack://odysee.com/../ui/page/signUp/index.js","webpack://odysee.com/../ui/page/signUp/view.jsx","webpack://odysee.com/../ui/page/youtubeSync/view.jsx","webpack://odysee.com/../ui/page/youtubeSync/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { SITE_NAME, LOGIN_IMG_URL } from 'config';\n\nfunction LoginGraphic(props: any) {\n  const alt = __('%SITE_NAME% login', { SITE_NAME });\n\n  return (\n    <div className=\"signup-image\">\n      <img alt={alt} src={LOGIN_IMG_URL} />\n    </div>\n  );\n}\n\nexport default LoginGraphic;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\n\ntype Props = {\n  button: string,\n  label?: string,\n  doSignOut: () => void,\n  doClearEmailEntry: () => void,\n  doClearPasswordEntry: () => void,\n};\n\nfunction UserSignOutButton(props: Props) {\n  const { button = 'link', doSignOut, doClearEmailEntry, doClearPasswordEntry, label } = props;\n\n  return (\n    <Button\n      button={button}\n      label={label || __('Sign Out')}\n      onClick={() => {\n        doClearPasswordEntry();\n        doClearEmailEntry();\n        doSignOut();\n      }}\n    />\n  );\n}\n\nexport default UserSignOutButton;\n","import { connect } from 'react-redux';\nimport { doSignOut } from 'redux/actions/app';\nimport { doClearEmailEntry, doClearPasswordEntry } from 'redux/actions/user';\nimport UserSignOutButton from './view';\n\nconst select = state => ({});\n\nexport default connect(select, {\n  doSignOut,\n  doClearEmailEntry,\n  doClearPasswordEntry,\n})(UserSignOutButton);\n","// @flow\nimport * as React from 'react';\nimport Button from 'component/button';\nimport UserSignOutButton from 'component/userSignOutButton';\nimport I18nMessage from 'component/i18nMessage';\nimport Card from 'component/common/card';\nimport { SITE_HELP_EMAIL } from 'config';\nconst THIRTY_SECONDS_IN_MS = 30000;\ntype Props = {\n  email: string,\n  isReturningUser: boolean,\n  resendVerificationEmail: (string) => void,\n  resendingEmail: boolean,\n  checkEmailVerified: () => void,\n  toast: (string) => void,\n  user: {\n    has_verified_email: boolean,\n  },\n};\n\ntype State = {\n  wait: boolean,\n};\n\nclass UserEmailVerify extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.emailVerifyCheckInterval = null;\n    this.state = { wait: false };\n    (this: any).handleResendVerificationEmail = this.handleResendVerificationEmail.bind(this);\n  }\n\n  componentDidMount() {\n    this.emailVerifyCheckInterval = setInterval(() => {\n      this.checkIfVerified();\n    }, 5000);\n  }\n\n  componentDidUpdate() {\n    const { user } = this.props;\n\n    if (this.emailVerifyCheckInterval && user && user.has_verified_email) {\n      clearInterval(this.emailVerifyCheckInterval);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.emailVerifyCheckInterval) {\n      clearInterval(this.emailVerifyCheckInterval);\n    }\n  }\n\n  handleResendVerificationEmail() {\n    const { email, resendVerificationEmail, toast } = this.props;\n    if (!this.state.wait) {\n      resendVerificationEmail(email);\n      toast(__('New email sent.'));\n      this.setState({\n        wait: true,\n      });\n      setTimeout(() => this.setState({ wait: false }), THIRTY_SECONDS_IN_MS);\n    } else {\n      toast(__('Please wait a bit longer before requesting again.'));\n    }\n  }\n\n  checkIfVerified() {\n    const { checkEmailVerified } = this.props;\n    checkEmailVerified();\n  }\n\n  emailVerifyCheckInterval: ?IntervalID;\n\n  render() {\n    const { email, isReturningUser, resendingEmail } = this.props;\n\n    return (\n      <div className=\"main__sign-up\">\n        <Card\n          title={isReturningUser ? __('Check Your email') : __('Confirm your account')}\n          subtitle={\n            <p>\n              {__(\n                'We just sent an email to %email% with a link for you to %verify_text%. Remember to check other email folders like spam or promotions.',\n                {\n                  email,\n                  verify_text: isReturningUser ? __('log in') : __('verify your account'),\n                }\n              )}\n            </p>\n          }\n          actions={\n            <React.Fragment>\n              <div className=\"section__actions\">\n                <Button\n                  button=\"primary\"\n                  label={__('Resend Link')}\n                  onClick={this.handleResendVerificationEmail}\n                  disabled={resendingEmail}\n                />\n                <UserSignOutButton label={__('Start Over')} />\n              </div>\n              <p className=\"help--card-actions\">\n                <I18nMessage\n                  tokens={{\n                    help_link: <Button button=\"link\" href={`mailto:${SITE_HELP_EMAIL}`} label={`${SITE_HELP_EMAIL}`} />,\n                    chat_link: <Button button=\"link\" href=\"https://chat.odysee.com\" label={__('chat')} />,\n                  }}\n                >\n                  Email %help_link% or join our %chat_link% if you encounter any trouble verifying.\n                </I18nMessage>\n              </p>\n            </React.Fragment>\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserEmailVerify;\n","import { connect } from 'react-redux';\nimport { doUserResendVerificationEmail, doUserCheckEmailVerified } from 'redux/actions/user';\nimport {\n  selectEmailToVerify,\n  selectEmailAlreadyExists,\n  selectUser,\n  selectResendingVerificationEmail,\n} from 'redux/selectors/user';\nimport { doToast } from 'redux/actions/notifications';\nimport UserEmailVerify from './view';\n\nconst select = state => ({\n  email: selectEmailToVerify(state),\n  isReturningUser: selectEmailAlreadyExists(state),\n  user: selectUser(state),\n  resendingEmail: selectResendingVerificationEmail(state),\n});\n\nconst perform = dispatch => ({\n  resendVerificationEmail: email => dispatch(doUserResendVerificationEmail(email)),\n  checkEmailVerified: () => dispatch(doUserCheckEmailVerified()),\n  toast: message => dispatch(doToast({ message })),\n});\n\nexport default connect(select, perform)(UserEmailVerify);\n","export const EMAIL_REGEX = /^[^@]+@[^@]+$/;\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport { DOMAIN, SIMPLE_SITE } from 'config';\nimport React, { useState } from 'react';\nimport { FormField, Form } from 'component/common/form';\nimport Button from 'component/button';\nimport analytics from 'analytics';\nimport { EMAIL_REGEX } from 'constants/email';\nimport I18nMessage from 'component/i18nMessage';\nimport { useHistory } from 'react-router-dom';\nimport Card from 'component/common/card';\nimport ErrorText from 'component/common/error-text';\nimport Nag from 'component/nag';\nimport classnames from 'classnames';\nimport LoginGraphic from 'component/loginGraphic';\nimport { LocalStorage, LS } from 'util/storage';\n\ntype Props = {\n  errorMessage: ?string,\n  emailExists: boolean,\n  isPending: boolean,\n  syncEnabled: boolean,\n  setSync: (boolean) => void,\n  balance: number,\n  daemonSettings: { share_usage_data: boolean },\n  setShareDiagnosticData: (boolean) => void,\n  doSignUp: (string, ?string) => Promise<any>,\n  clearEmailEntry: () => void,\n  interestedInYoutubSync: boolean,\n  doToggleInterestedInYoutubeSync: () => void,\n};\n\nfunction UserEmailNew(props: Props) {\n  const {\n    errorMessage,\n    isPending,\n    doSignUp,\n    setSync,\n    daemonSettings,\n    setShareDiagnosticData,\n    clearEmailEntry,\n    emailExists,\n    interestedInYoutubSync,\n    doToggleInterestedInYoutubeSync,\n  } = props;\n  const { share_usage_data: shareUsageData } = daemonSettings;\n  const { push, location } = useHistory();\n  const urlParams = new URLSearchParams(location.search);\n  const emailFromUrl = urlParams.get('email');\n  const defaultEmail = emailFromUrl ? decodeURIComponent(emailFromUrl) : '';\n  const [email, setEmail] = useState(defaultEmail);\n  const [password, setPassword] = useState('');\n  const [localShareUsageData, setLocalShareUsageData] = React.useState(false);\n  const [formSyncEnabled, setFormSyncEnabled] = useState(true);\n  const valid = email.match(EMAIL_REGEX);\n\n  function handleUsageDataChange() {\n    setLocalShareUsageData(!localShareUsageData);\n  }\n\n  function handleSubmit() {\n    doSignUp(email, password === '' ? undefined : password)\n      .then(() => {\n        LocalStorage.setItem(LS.IS_NEW_ACCOUNT, 'true');\n        analytics.event.emailProvided();\n      })\n      .catch(() => {});\n  }\n\n  function handleChangeToSignIn(additionalParams) {\n    clearEmailEntry();\n\n    let url = `/$/${PAGES.AUTH_SIGNIN}`;\n    const urlParams = new URLSearchParams(location.search);\n\n    urlParams.delete('email');\n    if (email) {\n      urlParams.set('email', encodeURIComponent(email));\n    }\n\n    urlParams.delete('email_exists');\n    if (emailExists) {\n      urlParams.set('email_exists', '1');\n    }\n\n    push(`${url}?${urlParams.toString()}`);\n  }\n\n  React.useEffect(() => {\n    if (emailExists) {\n      handleChangeToSignIn();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [emailExists]);\n\n  return (\n    <div\n      className={classnames('main__sign-up', {\n        'main__sign-up--graphic': SIMPLE_SITE,\n      })}\n    >\n      <Card\n        title={__('Join')}\n        actions={\n          <div className={classnames({ 'card--disabled': DOMAIN === 'lbry.tv' && IS_WEB })}>\n            <Form onSubmit={handleSubmit} className=\"section\">\n              <FormField\n                autoFocus\n                placeholder={__('yourstruly@example.com')}\n                type=\"email\"\n                name=\"sign_up_email\"\n                label={__('Email')}\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n              <FormField\n                type=\"password\"\n                name=\"sign_in_password\"\n                label={__('Password')}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n\n              {}\n              <FormField\n                type=\"checkbox\"\n                name=\"youtube_sync_checkbox\"\n                label={__('Sync my YouTube channel')}\n                checked={interestedInYoutubSync}\n                onChange={() => doToggleInterestedInYoutubeSync()}\n              />\n              {}\n\n              {}\n\n              {!shareUsageData && !IS_WEB && (\n                <FormField\n                  type=\"checkbox\"\n                  name=\"share_data_checkbox\"\n                  checked={localShareUsageData}\n                  onChange={handleUsageDataChange}\n                  label={\n                    <React.Fragment>\n                      {__('Share usage data with LBRY inc.')}{' '}\n                      <Button button=\"link\" href=\"https://odysee.com/$/privacypolicy\" label={__('Learn More')} />\n                      {!localShareUsageData && <span className=\"error__text\"> ({__('Required')})</span>}\n                    </React.Fragment>\n                  }\n                />\n              )}\n              <div className=\"section__actions\">\n                <Button\n                  button=\"primary\"\n                  type=\"submit\"\n                  label={__('Sign Up')}\n                  disabled={\n                    !email || !password || !valid || (!IS_WEB && !localShareUsageData && !shareUsageData) || isPending\n                  }\n                />\n                <Button button=\"link\" onClick={handleChangeToSignIn} label={__('Log In')} />\n              </div>\n              <p className=\"help--card-actions\">\n                <I18nMessage\n                  tokens={{\n                    terms: <Button button=\"link\" href=\"https://odysee.com/$/tos\" label={__('terms')} />,\n                  }}\n                >\n                  By creating an account, you agree to our %terms% and confirm you're over the age of 13.\n                </I18nMessage>\n              </p>\n            </Form>\n          </div>\n        }\n        nag={<>{errorMessage && <Nag type=\"error\" relative message={<ErrorText>{errorMessage}</ErrorText>} />}</>}\n        secondPane={SIMPLE_SITE && <LoginGraphic />}\n      />\n    </div>\n  );\n}\n\nexport default UserEmailNew;\n","import { connect } from 'react-redux';\nimport { doClearEmailEntry, doUserSignUp } from 'redux/actions/user';\nimport {\n  selectEmailNewIsPending,\n  selectEmailNewErrorMessage,\n  selectEmailAlreadyExists,\n  selectUser,\n} from 'redux/selectors/user';\nimport * as SETTINGS from 'constants/settings';\nimport * as DAEMON_SETTINGS from 'constants/daemon_settings';\nimport { doSetWalletSyncPreference, doSetDaemonSetting } from 'redux/actions/settings';\nimport { selectDaemonSettings, selectClientSetting } from 'redux/selectors/settings';\nimport UserEmailNew from './view';\n\nconst select = (state) => ({\n  isPending: selectEmailNewIsPending(state),\n  errorMessage: selectEmailNewErrorMessage(state),\n  syncEnabled: selectClientSetting(state, SETTINGS.ENABLE_SYNC),\n  daemonSettings: selectDaemonSettings(state),\n  emailExists: selectEmailAlreadyExists(state),\n  user: selectUser(state),\n});\n\nconst perform = (dispatch) => ({\n  setSync: (value) => dispatch(doSetWalletSyncPreference(value)),\n  setShareDiagnosticData: (shouldShareData) =>\n    dispatch(doSetDaemonSetting(DAEMON_SETTINGS.SHARE_USAGE_DATA, shouldShareData)),\n  doSignUp: (email, password) => dispatch(doUserSignUp(email, password)),\n  clearEmailEntry: () => dispatch(doClearEmailEntry()),\n});\n\nexport default connect(select, perform)(UserEmailNew);\n","// @flow\nimport * as MODALS from 'constants/modal_types';\n\nimport React, { useState } from 'react';\nimport { isNameValid } from 'util/lbryURI';\nimport Button from 'component/button';\nimport { Form, FormField } from 'component/common/form';\nimport { INVALID_NAME_ERROR } from 'constants/claim';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\nimport analytics from 'analytics';\nimport { sortLanguageMap } from 'util/default-languages';\nimport SUPPORTED_LANGUAGES from 'constants/supported_languages';\nimport ThumbnailBrokenImage from 'component/selectThumbnail/thumbnail-broken.png';\nimport { AVATAR_DEFAULT } from 'config';\nimport * as ICONS from 'constants/icons';\nimport * as PUBLISH from 'constants/publish';\n\nexport const DEFAULT_BID_FOR_FIRST_CHANNEL = 0.01;\n\ntype Props = {\n  createChannel: (string, number, any) => Promise<ChannelClaim>,\n  creatingChannel: boolean,\n  createChannelError: string,\n  claimingReward: boolean,\n  user: User,\n  doToggleInterestedInYoutubeSync: () => void,\n  openModal: (\n    id: string,\n    { onUpdate: (string, boolean) => void, assetName: string, helpText: string, currentValue: string, title: string }\n  ) => void,\n};\n\nfunction UserFirstChannel(props: Props) {\n  const {\n    createChannel,\n    creatingChannel,\n    claimingReward,\n    user,\n    createChannelError,\n    doToggleInterestedInYoutubeSync,\n    openModal,\n  } = props;\n  const { primary_email: primaryEmail } = user;\n  const initialChannel = primaryEmail ? primaryEmail.split('@')[0] : '';\n  const [channel, setChannel] = useState(initialChannel);\n  const [title, setTitle] = useState(initialChannel);\n  const [isUpload, setIsUpload] = React.useState({ cover: false, thumbnail: false });\n  const [thumbError, setThumbError] = React.useState(false);\n  const [params, setParams]: [any, (any) => void] = React.useState(getChannelParams());\n\n  const [languageParam, setLanguageParam] = useState([]);\n  const primaryLanguage = Array.isArray(languageParam) && languageParam.length && languageParam[0];\n  const [nameError, setNameError] = useState(undefined);\n\n  function getChannelParams() {\n    // fill this in with sdk data\n    const channelParams: {\n      title: string,\n      languages: ?Array<string>,\n    } = {\n      title,\n      languages: languageParam || [],\n    };\n    return channelParams;\n  }\n\n  let thumbnailPreview;\n  if (!params.thumbnailUrl) {\n    thumbnailPreview = AVATAR_DEFAULT;\n  } else if (thumbError) {\n    thumbnailPreview = ThumbnailBrokenImage;\n  } else {\n    thumbnailPreview = params.thumbnailUrl;\n  }\n\n  function handleThumbnailChange(thumbnailUrl: string, uploadSelected: boolean) {\n    setParams({ ...params, thumbnailUrl });\n    setIsUpload({ ...isUpload, thumbnail: uploadSelected });\n    setThumbError(false);\n  }\n\n  function handleLanguageChange(index, code) {\n    let langs = [...languageParam];\n    if (index === 0) {\n      if (code === PUBLISH.LANG_NONE) {\n        // clear all\n        langs = [];\n      } else {\n        langs[0] = code;\n      }\n    } else {\n      if (code === PUBLISH.LANG_NONE || code === langs[0]) {\n        langs.splice(1, 1);\n      } else {\n        langs[index] = code;\n      }\n    }\n    setLanguageParam(langs);\n    // setParams({ ...params, languages: langs });\n  }\n\n  function handleCreateChannel() {\n    createChannel(`@${channel}`, DEFAULT_BID_FOR_FIRST_CHANNEL, {\n      title: title,\n      thumbnailUrl: params.thumbnailUrl,\n      languages: primaryLanguage,\n    }).then((channelClaim) => {\n      if (channelClaim) {\n        analytics.apiLog.publish(channelClaim);\n      }\n    });\n  }\n\n  function handleChannelChange(e) {\n    const { value } = e.target;\n    setChannel(value);\n    if (!isNameValid(value)) {\n      setNameError(INVALID_NAME_ERROR);\n    } else {\n      setNameError();\n    }\n  }\n\n  function handleTitleChange(e) {\n    const { value } = e.target;\n    setTitle(value);\n  }\n\n  return (\n    <div className=\"main__channel-creation\">\n      <div className=\"help--card-actions notificationsBlocked\">\n        <I18nMessage\n          tokens={{\n            sync_channel: (\n              <Button\n                icons={ICONS.ALERT}\n                button=\"link\"\n                label={__('Sync it and skip this step')}\n                onClick={() => doToggleInterestedInYoutubeSync()}\n              />\n            ),\n          }}\n        >\n          Have a YouTube channel? %sync_channel%.\n        </I18nMessage>\n      </div>\n      <Card\n        title={__('Create a Channel')}\n        subtitle={\n          <React.Fragment>\n            <p>{__('Your channel will be used for publishing and commenting.')}</p>\n            <p>{__('You can have more than one or remove it later.')}</p>\n          </React.Fragment>\n        }\n        actions={\n          <Form onSubmit={handleCreateChannel}>\n            <fieldset-section>\n              <label>{__('Channel profile picture')}</label>\n              <div className=\"form-field__avatar_upload\">\n                <img className=\"form-field__avatar\" src={thumbnailPreview} />\n                <Button\n                  button=\"alt\"\n                  title={__('Edit')}\n                  onClick={() =>\n                    openModal(MODALS.IMAGE_UPLOAD, {\n                      onUpdate: (thumbnailUrl, isUpload) => handleThumbnailChange(thumbnailUrl, isUpload),\n                      title: __('Edit Thumbnail Image'),\n                      helpText: __('(1:1 ratio)'),\n                      assetName: __('Thumbnail'),\n                      currentValue: params.thumbnailUrl,\n                    })\n                  }\n                  icon={ICONS.CAMERA}\n                  iconSize={18}\n                />\n              </div>\n            </fieldset-section>\n            <fieldset-section>\n              <FormField\n                autoFocus\n                type=\"text\"\n                name=\"channel_title2\"\n                label={__('Display Name')}\n                placeholder={__('My Awesome Channel')}\n                value={title}\n                onChange={handleTitleChange}\n              />\n            </fieldset-section>\n            <fieldset-group class=\"fieldset-group--smushed fieldset-group--disabled-prefix\">\n              <fieldset-section>\n                <label htmlFor=\"auth_first_channel\">\n                  {createChannelError || nameError ? (\n                    <span className=\"error__text\">{createChannelError || nameError}</span>\n                  ) : (\n                    __('Username (cannot be changed)')\n                  )}\n                </label>\n                <div className=\"form-field__prefix\">@</div>\n              </fieldset-section>\n\n              <FormField\n                placeholder={__('channel')}\n                type=\"text\"\n                name=\"auth_first_channel\"\n                className=\"form-field\"\n                value={channel}\n                onChange={handleChannelChange}\n              />\n            </fieldset-group>\n            <fieldset-section>\n              <FormField\n                name=\"language_select\"\n                type=\"select\"\n                label={__('Primary Language')}\n                onChange={(event) => handleLanguageChange(0, event.target.value)}\n                value={primaryLanguage}\n                helper={__('Your main content language')}\n              >\n                <option key={'pri-langNone'} value={PUBLISH.LANG_NONE}>\n                  {__('None selected')}\n                </option>\n                {sortLanguageMap(SUPPORTED_LANGUAGES).map(([langKey, langName]) => (\n                  <option key={langKey} value={langKey}>\n                    {langName}\n                  </option>\n                ))}\n              </FormField>\n            </fieldset-section>\n            <div className=\"section__actions\">\n              <Button\n                button=\"primary\"\n                type=\"submit\"\n                disabled={nameError || !channel || creatingChannel || claimingReward}\n                label={creatingChannel || claimingReward ? __('Creating') : __('Create')}\n              />\n            </div>\n          </Form>\n        }\n      />\n    </div>\n  );\n}\n\nexport default UserFirstChannel;\n","import { connect } from 'react-redux';\nimport { selectUser, selectEmailToVerify } from 'redux/selectors/user';\nimport { selectCreatingChannel, selectMyChannelClaims, selectCreateChannelError } from 'redux/selectors/claims';\nimport { doCreateChannel } from 'redux/actions/claims';\nimport { doOpenModal } from 'redux/actions/app';\nimport UserFirstChannel from './view';\n\nconst select = (state) => ({\n  email: selectEmailToVerify(state),\n  user: selectUser(state),\n  channels: selectMyChannelClaims(state),\n  creatingChannel: selectCreatingChannel(state),\n  createChannelError: selectCreateChannelError(state),\n});\n\nconst perform = (dispatch) => ({\n  openModal: (modal, props) => dispatch(doOpenModal(modal, props)),\n  createChannel: (name, amount, optionalParams) => dispatch(doCreateChannel(name, amount, optionalParams)),\n});\n\nexport default connect(select, perform)(UserFirstChannel);\n","// @flow\nimport { CUSTOM_HOMEPAGE, SIMPLE_SITE, SITE_NAME } from 'config';\nimport { parseURI } from 'util/lbryURI';\nimport * as CS from 'constants/claim_search';\nimport { COMMUNITY_CHANNELS } from 'constants/channels';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport ClaimListDiscover from 'component/claimListDiscover';\nimport Nag from 'component/nag';\nimport React from 'react';\n\ntype Props = {\n  homepageData: any,\n  discoverData: ?Array<string>,\n  language: string,\n  prefsReady: boolean,\n  subscribedChannels: Array<Subscription>,\n  channelSubscribe: (string, string) => void,\n  onContinue: () => void,\n};\n\nfunction UserChannelFollowIntro(props: Props) {\n  const { homepageData, discoverData, language, prefsReady, subscribedChannels, channelSubscribe, onContinue } = props;\n\n  const { PRIMARY_CONTENT, LATEST } = homepageData;\n\n  const autoFollowChannels = COMMUNITY_CHANNELS[language] || COMMUNITY_CHANNELS['en'];\n\n  const channelsToSubscribe = autoFollowChannels\n    .trim()\n    .split(' ')\n    .filter((x) => x !== '');\n\n  let channelIds;\n  if (discoverData) {\n    channelIds = discoverData;\n  } else if (CUSTOM_HOMEPAGE) {\n    if (LATEST) {\n      channelIds = LATEST.channelIds;\n    } else if (PRIMARY_CONTENT) {\n      channelIds = PRIMARY_CONTENT.channelIds;\n    }\n  }\n\n  const followingCount = (subscribedChannels && subscribedChannels.length) || 0;\n  const followingCountIgnoringAutoFollows = (subscribedChannels || []).filter(\n    (channel) => !channelsToSubscribe.includes(channel.uri)\n  ).length;\n\n  // subscribe to odysee channels\n  React.useEffect(() => {\n    if (channelsToSubscribe && channelsToSubscribe.length && prefsReady) {\n      const delayedChannelSubscribe = () => {\n        channelsToSubscribe.forEach((channelUri) => {\n          let claimName;\n          try {\n            const { claimName: name } = parseURI(channelUri);\n            claimName = name;\n          } catch (e) {}\n\n          if (claimName) channelSubscribe(claimName, channelUri);\n        });\n      };\n      const timer = setTimeout(delayedChannelSubscribe, 1000);\n\n      return () => clearTimeout(timer);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [prefsReady]);\n\n  return (\n    <Card\n      className=\"channelsToFollow-wrapper\"\n      title={__('Find channels to follow')}\n      subtitle={__(\n        '%SITE_NAME% works better if you find and follow a couple creators you like. You can also block channels you never want to see.',\n        { SITE_NAME }\n      )}\n      actions={\n        <div className=\"section__body\">\n          <ClaimListDiscover\n            hideFilters={SIMPLE_SITE}\n            hideAdvancedFilter={SIMPLE_SITE}\n            meta={\n              <Button\n                button={subscribedChannels.length < 1 ? 'alt' : 'primary'}\n                onClick={onContinue}\n                label={subscribedChannels.length < 1 ? __('Skip') : __('Continue')}\n              />\n            }\n            defaultOrderBy={CS.ORDER_BY_TRENDING}\n            defaultFreshness={CS.FRESH_ALL}\n            claimType=\"channel\"\n            claimIds={(CUSTOM_HOMEPAGE && channelIds) || undefined}\n            defaultTags={followingCount > 3 ? CS.TAGS_FOLLOWED : undefined}\n            maxPages={SIMPLE_SITE ? 3 : undefined}\n          />\n\n          {followingCountIgnoringAutoFollows > 0 && (\n            <Nag\n              type=\"helpful\"\n              message={__(\n                followingCountIgnoringAutoFollows === 1\n                  ? 'Nice! You are currently following %followingCount% creator'\n                  : 'Nice! You are currently following %followingCount% creators',\n                {\n                  followingCount: followingCountIgnoringAutoFollows,\n                }\n              )}\n              actionText={__('Continue')}\n              onClick={onContinue}\n            />\n          )}\n        </div>\n      }\n    />\n  );\n}\n\nexport default UserChannelFollowIntro;\n","import { connect } from 'react-redux';\nimport { doChannelSubscribe } from 'redux/actions/subscriptions';\nimport { selectHomepageData, selectLanguage, selectHomepageDiscover } from 'redux/selectors/settings';\nimport { selectPrefsReady } from 'redux/selectors/sync';\nimport { selectSubscriptions } from 'redux/selectors/subscriptions';\nimport UserChannelFollowIntro from './view';\n\nconst select = (state) => ({\n  homepageData: selectHomepageData(state) || {},\n  discoverData: selectHomepageDiscover(state),\n  language: selectLanguage(state),\n  prefsReady: selectPrefsReady(state),\n  subscribedChannels: selectSubscriptions(state),\n});\n\nconst perform = (dispatch) => ({\n  channelSubscribe: (channelName, uri) => dispatch(doChannelSubscribe({ channelName, uri })),\n});\n\nexport default connect(select, perform)(UserChannelFollowIntro);\n","// @flow\nimport React from 'react';\nimport Nag from 'component/nag';\nimport TagsSelect from 'component/tagsSelect';\nimport Button from 'component/button';\nimport { Form } from 'component/common/form';\nimport Card from 'component/common/card';\n\ntype Props = {\n  subscribedChannels: Array<Subscription>,\n  onContinue: () => void,\n  followedTags: Array<Tag>,\n};\n\nfunction UserTagFollowIntro(props: Props) {\n  const { onContinue, followedTags } = props;\n  const followingCount = (followedTags && followedTags.length) || 0;\n\n  return (\n    <Card\n      title={__('Tag selection')}\n      subtitle={__('Select some tags to help us show you interesting things.')}\n      actions={\n        <React.Fragment>\n          <Form onSubmit={onContinue}>\n            <div className=\"section__actions--between\">\n              <span />\n              <Button\n                button={followedTags.length < 1 ? 'alt' : 'primary'}\n                onClick={onContinue}\n                label={followedTags.length < 1 ? __('Skip') : __('Continue')}\n              />\n            </div>\n          </Form>\n          <div className=\"section__body\">\n            <TagsSelect hideHeader limitShow={300} help={false} showClose={false} title={__('Follow new tags')} />\n            {followingCount > 0 && (\n              <Nag\n                type=\"helpful\"\n                message={\n                  followingCount === 1\n                    ? __('You are currently following %followingCount% tag', { followingCount })\n                    : __('You are currently following %followingCount% tags', { followingCount })\n                }\n                actionText={__('Continue')}\n                onClick={onContinue}\n              />\n            )}\n          </div>\n        </React.Fragment>\n      }\n    />\n  );\n}\n\nexport default UserTagFollowIntro;\n","import { connect } from 'react-redux';\nimport { selectFollowedTags } from 'redux/selectors/tags';\nimport UserTagFollowIntro from './view';\n\nconst select = state => ({\n  followedTags: selectFollowedTags(state),\n});\n\nexport default connect(select)(UserTagFollowIntro);\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport * as SETTINGS from 'constants/settings';\nimport React from 'react';\nimport classnames from 'classnames';\nimport { useHistory } from 'react-router';\nimport UserEmailNew from 'component/userEmailNew';\nimport UserEmailVerify from 'component/userEmailVerify';\nimport UserFirstChannel from 'component/userFirstChannel';\nimport UserChannelFollowIntro from 'component/userChannelFollowIntro';\nimport UserTagFollowIntro from 'component/userTagFollowIntro';\nimport YoutubeSync from 'page/youtubeSync';\nimport { DEFAULT_BID_FOR_FIRST_CHANNEL } from 'component/userFirstChannel/view';\nimport { YOUTUBE_STATUSES } from 'lbryinc';\nimport REWARDS from 'rewards';\nimport UserVerify from 'component/userVerify';\nimport Spinner from 'component/spinner';\nimport useFetched from 'effects/use-fetched';\nimport Confetti from 'react-confetti';\nimport usePrevious from 'effects/use-previous';\nimport { lazyImport } from 'util/lazyImport';\nimport { SHOW_TAGS_INTRO } from 'config';\n\nconst YoutubeTransferStatus = lazyImport(() =>\n  import('component/youtubeTransferStatus' /* webpackChunkName: \"youtubeTransferStatus\" */)\n);\n\nconst REDIRECT_PARAM = 'redirect';\nconst REDIRECT_IMMEDIATELY_PARAM = 'immediate';\nconst STEP_PARAM = 'step';\n\ntype Props = {\n  user: ?User,\n  emailToVerify: ?string,\n  channels: ?Array<string>,\n  balance: ?number,\n  fetchingChannels: boolean,\n  claimingReward: boolean,\n  claimConfirmEmailReward: () => void,\n  claimNewUserReward: () => void,\n  claimedRewards: Array<Reward>,\n  youtubeChannels: Array<any>,\n  syncEnabled: boolean,\n  hasSynced: boolean,\n  syncingWallet: boolean,\n  creatingChannel: boolean,\n  setClientSetting: (string, boolean, ?boolean) => void,\n  followingAcknowledged: boolean,\n  tagsAcknowledged: boolean,\n  rewardsAcknowledged: boolean,\n  interestedInYoutubeSync: boolean,\n  doToggleInterestedInYoutubeSync: () => void,\n  prefsReady: boolean,\n};\n\nfunction UserSignUp(props: Props) {\n  const {\n    emailToVerify,\n    user,\n    claimingReward,\n    claimedRewards,\n    channels,\n    claimConfirmEmailReward,\n    claimNewUserReward,\n    balance,\n    youtubeChannels,\n    syncEnabled,\n    syncingWallet,\n    hasSynced,\n    fetchingChannels,\n    creatingChannel,\n    followingAcknowledged,\n    tagsAcknowledged,\n    rewardsAcknowledged,\n    setClientSetting,\n    interestedInYoutubeSync,\n    doToggleInterestedInYoutubeSync,\n    prefsReady,\n  } = props;\n  const {\n    location: { search, pathname },\n    replace,\n  } = useHistory();\n  const urlParams = new URLSearchParams(search);\n  const redirect = urlParams.get(REDIRECT_PARAM);\n  const step = urlParams.get(STEP_PARAM);\n  const shouldRedirectImmediately = urlParams.get(REDIRECT_IMMEDIATELY_PARAM);\n  const [initialSignInStep, setInitialSignInStep] = React.useState();\n  const hasVerifiedEmail = user && user.has_verified_email;\n  const rewardsApproved = user && user.is_reward_approved;\n  const isIdentityVerified = user && user.is_identity_verified;\n  const passwordSet = user && user.password_set;\n  const hasFetchedReward = useFetched(claimingReward);\n  const previousHasVerifiedEmail = usePrevious(hasVerifiedEmail);\n  const channelCount = channels ? channels.length : 0;\n  const hasClaimedEmailAward = claimedRewards.some((reward) => reward.reward_type === REWARDS.TYPE_CONFIRM_EMAIL);\n  const hasYoutubeChannels = youtubeChannels && Boolean(youtubeChannels.length);\n  const isYoutubeTransferComplete =\n    hasYoutubeChannels &&\n    youtubeChannels.every(\n      (channel) =>\n        channel.transfer_state === YOUTUBE_STATUSES.YOUTUBE_SYNC_COMPLETED_TRANSFER ||\n        channel.sync_status === YOUTUBE_STATUSES.YOUTUBE_SYNC_ABANDONDED\n    );\n  // Complexity warning\n  // We can't just check if we are currently fetching something\n  // We may want to keep a component rendered while something is being fetched, instead of replacing it with the large spinner\n  // The verbose variable names are an attempt to alleviate _some_ of the confusion from handling all edge cases that come from\n  // reward claiming, channel creation, account syncing, and youtube transfer\n  // The possible screens for the sign in flow\n  const showEmail = !hasVerifiedEmail;\n  const showEmailVerification = (emailToVerify && !hasVerifiedEmail) || (!hasVerifiedEmail && passwordSet);\n  const showUserVerification = hasVerifiedEmail && !rewardsApproved && !isIdentityVerified && !rewardsAcknowledged;\n  const showChannelCreation =\n    hasVerifiedEmail &&\n    ((balance !== undefined &&\n      balance !== null &&\n      balance > DEFAULT_BID_FOR_FIRST_CHANNEL &&\n      channelCount === 0 &&\n      !hasYoutubeChannels) ||\n      interestedInYoutubeSync);\n  const showYoutubeTransfer = hasVerifiedEmail && hasYoutubeChannels && !isYoutubeTransferComplete;\n  const showFollowIntro = step === 'channels' || (hasVerifiedEmail && !followingAcknowledged);\n  const showTagsIntro = SHOW_TAGS_INTRO && (step === 'tags' || (hasVerifiedEmail && !tagsAcknowledged));\n  const canHijackSignInFlowWithSpinner = hasVerifiedEmail && !showFollowIntro && !showTagsIntro && !rewardsAcknowledged;\n  const showSpinnerForSync = syncingWallet && !hasSynced && balance === undefined;\n  const isCurrentlyFetchingSomething = fetchingChannels || claimingReward || showSpinnerForSync || creatingChannel;\n  const isWaitingForSomethingToFinish =\n    // If the user has claimed the email award, we need to wait until the balance updates sometime in the future\n    (!hasFetchedReward && !hasClaimedEmailAward) || (syncEnabled && !hasSynced);\n  const showLoadingSpinner =\n    canHijackSignInFlowWithSpinner && (isCurrentlyFetchingSomething || isWaitingForSomethingToFinish);\n\n  function setSettingAndSync(setting, value) {\n    setClientSetting(setting, value, true);\n  }\n\n  React.useEffect(() => {\n    if (previousHasVerifiedEmail === false && hasVerifiedEmail && prefsReady) {\n      setSettingAndSync(SETTINGS.FIRST_RUN_STARTED, true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [hasVerifiedEmail, previousHasVerifiedEmail, prefsReady]);\n\n  React.useEffect(() => {\n    // Don't claim the reward if sync is enabled until after a sync has been completed successfully\n    // If we do it before, we could end up trying to sync a wallet with a non-zero balance which will fail to sync\n    const delayForSync = syncEnabled && !hasSynced;\n\n    if (hasVerifiedEmail && !hasClaimedEmailAward && !hasFetchedReward && !delayForSync) {\n      claimConfirmEmailReward();\n    }\n  }, [\n    hasVerifiedEmail,\n    claimConfirmEmailReward,\n    hasClaimedEmailAward,\n    hasFetchedReward,\n    syncEnabled,\n    hasSynced,\n    balance,\n  ]);\n\n  // Loop through this list from the end, until it finds a matching component\n  // If it never finds one, assume the user has completed every step and redirect them\n  const SIGN_IN_FLOW = [\n    showEmail && (\n      <UserEmailNew\n        interestedInYoutubSync={interestedInYoutubeSync}\n        doToggleInterestedInYoutubeSync={doToggleInterestedInYoutubeSync}\n      />\n    ),\n    showEmailVerification && <UserEmailVerify />,\n    showUserVerification && (\n      <UserVerify\n        onSkip={() => {\n          setSettingAndSync(SETTINGS.REWARDS_ACKNOWLEDGED, true);\n        }}\n      />\n    ),\n    showChannelCreation &&\n      (interestedInYoutubeSync ? (\n        <YoutubeSync inSignUpFlow doToggleInterestedInYoutubeSync={doToggleInterestedInYoutubeSync} />\n      ) : (\n        <UserFirstChannel doToggleInterestedInYoutubeSync={doToggleInterestedInYoutubeSync} />\n      )),\n    showFollowIntro && (\n      <UserChannelFollowIntro\n        onContinue={() => {\n          if (urlParams.get('reset_scroll')) {\n            urlParams.delete('reset_scroll');\n            urlParams.append('reset_scroll', '2');\n          }\n\n          urlParams.delete(STEP_PARAM);\n\n          setSettingAndSync(SETTINGS.FOLLOWING_ACKNOWLEDGED, true);\n          replace(`${pathname}?${urlParams.toString()}`);\n        }}\n        onBack={() => {\n          if (urlParams.get('reset_scroll')) {\n            urlParams.delete('reset_scroll');\n            urlParams.append('reset_scroll', '3');\n          }\n\n          setSettingAndSync(SETTINGS.FOLLOWING_ACKNOWLEDGED, false);\n          replace(`${pathname}?${urlParams.toString()}`);\n        }}\n      />\n    ),\n    showTagsIntro && (\n      <UserTagFollowIntro\n        onContinue={() => {\n          let url = `/$/${PAGES.AUTH}?reset_scroll=1&${STEP_PARAM}=channels`;\n          if (redirect) {\n            url += `&${REDIRECT_PARAM}=${redirect}`;\n          }\n          if (shouldRedirectImmediately) {\n            url += `&${REDIRECT_IMMEDIATELY_PARAM}=true`;\n          }\n\n          replace(url);\n          setSettingAndSync(SETTINGS.TAGS_ACKNOWLEDGED, true);\n        }}\n      />\n    ),\n    showYoutubeTransfer && (\n      <div>\n        <React.Suspense fallback={null}>\n          <YoutubeTransferStatus /> <Confetti recycle={false} style={{ position: 'fixed' }} />\n        </React.Suspense>\n      </div>\n    ),\n    showLoadingSpinner && (\n      <div className=\"main--empty\">\n        <Spinner />\n      </div>\n    ),\n  ];\n\n  //   $FlowFixMe\n  function getSignInStep() {\n    for (var i = SIGN_IN_FLOW.length - 1; i > -1; i--) {\n      const Component = SIGN_IN_FLOW[i];\n      if (Component) {\n        // If we want to redirect immediately,\n        // remember the first step so we can redirect once a new step has been reached\n        // Ignore the loading step\n        if (redirect && shouldRedirectImmediately) {\n          if (!initialSignInStep) {\n            setInitialSignInStep(i);\n          } else if (i !== initialSignInStep && i !== SIGN_IN_FLOW.length - 1) {\n            replace(redirect);\n          }\n        }\n\n        const scrollableSteps = [2, 4, 5];\n        const isScrollable = scrollableSteps.includes(i);\n        return [Component, isScrollable];\n      }\n    }\n\n    return [undefined, false];\n  }\n\n  const [componentToRender, isScrollable] = getSignInStep();\n\n  React.useEffect(() => {\n    if (!componentToRender) {\n      claimNewUserReward();\n    }\n  }, [componentToRender, claimNewUserReward]);\n\n  if (!componentToRender) {\n    replace(redirect || '/');\n  }\n\n  return (\n    <section className={classnames('main--contained', { 'main--hoisted': isScrollable })}>{componentToRender}</section>\n  );\n}\n\nexport default UserSignUp;\n","import REWARD_TYPES from 'rewards';\nimport { connect } from 'react-redux';\nimport { selectGetSyncIsPending, selectSyncHash, selectPrefsReady } from 'redux/selectors/sync';\nimport { doClaimRewardType } from 'redux/actions/rewards';\nimport { doSetClientSetting } from 'redux/actions/settings';\nimport { selectClaimedRewards, makeSelectIsRewardClaimPending } from 'redux/selectors/rewards';\nimport { selectUserIsPending, selectYoutubeChannels, selectEmailToVerify, selectUser } from 'redux/selectors/user';\nimport { selectMyChannelClaims, selectFetchingMyChannels, selectCreatingChannel } from 'redux/selectors/claims';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport * as SETTINGS from 'constants/settings';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport { selectInterestedInYoutubeSync } from 'redux/selectors/app';\nimport { doToggleInterestedInYoutubeSync } from 'redux/actions/app';\nimport UserSignIn from './view';\n\nconst select = (state) => ({\n  emailToVerify: selectEmailToVerify(state),\n  user: selectUser(state),\n  channels: selectMyChannelClaims(state),\n  claimedRewards: selectClaimedRewards(state),\n  claimingReward: makeSelectIsRewardClaimPending()(state, {\n    reward_type: REWARD_TYPES.TYPE_CONFIRM_EMAIL,\n  }),\n  balance: selectBalance(state),\n  fetchingChannels: selectFetchingMyChannels(state),\n  youtubeChannels: selectYoutubeChannels(state),\n  userFetchPending: selectUserIsPending(state),\n  syncEnabled: selectClientSetting(state, SETTINGS.ENABLE_SYNC),\n  followingAcknowledged: selectClientSetting(state, SETTINGS.FOLLOWING_ACKNOWLEDGED),\n  tagsAcknowledged: selectClientSetting(state, SETTINGS.TAGS_ACKNOWLEDGED),\n  rewardsAcknowledged: selectClientSetting(state, SETTINGS.REWARDS_ACKNOWLEDGED),\n  syncingWallet: selectGetSyncIsPending(state),\n  hasSynced: Boolean(selectSyncHash(state)),\n  creatingChannel: selectCreatingChannel(state),\n  interestedInYoutubeSync: selectInterestedInYoutubeSync(state),\n  prefsReady: selectPrefsReady(state),\n});\n\nconst perform = (dispatch) => ({\n  claimConfirmEmailReward: () =>\n    dispatch(\n      doClaimRewardType(REWARD_TYPES.TYPE_CONFIRM_EMAIL, {\n        notifyError: false,\n      })\n    ),\n  claimNewUserReward: () =>\n    dispatch(\n      doClaimRewardType(REWARD_TYPES.NEW_USER, {\n        notifyError: false,\n      })\n    ),\n  setClientSetting: (setting, value, pushToPrefs) => dispatch(doSetClientSetting(setting, value, pushToPrefs)),\n  doToggleInterestedInYoutubeSync: () => dispatch(doToggleInterestedInYoutubeSync()),\n});\n\nexport default connect(select, perform)(UserSignIn);\n","import SignUpPage from './view';\n\nexport default SignUpPage;\n","// @flow\nimport React from 'react';\nimport UserSignUp from 'component/userSignUp';\nimport Page from 'component/page';\n\nexport default function SignUpPage() {\n  return (\n    <Page authPage noFooter>\n      <UserSignUp />\n    </Page>\n  );\n}\n","// @flow\nimport { SITE_NAME, DOMAIN } from 'config';\nimport * as PAGES from 'constants/pages';\nimport SUPPORTED_LANGUAGES from 'constants/supported_languages';\nimport React from 'react';\nimport Page from 'component/page';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\nimport { Form, FormField } from 'component/common/form';\nimport { INVALID_NAME_ERROR } from 'constants/claim';\nimport { isNameValid } from 'util/lbryURI';\nimport { Lbryio } from 'lbryinc';\nimport { useHistory } from 'react-router';\nimport Nag from 'component/nag';\nimport { lazyImport } from 'util/lazyImport';\nimport { getDefaultLanguage, sortLanguageMap } from 'util/default-languages';\n\nconst YoutubeTransferStatus = lazyImport(() =>\n  import('component/youtubeTransferStatus' /* webpackChunkName: \"youtubeTransferStatus\" */)\n);\n\nconst STATUS_TOKEN_PARAM = 'status_token';\nconst ERROR_MESSAGE_PARAM = 'error_message';\nconst NEW_CHANNEL_PARAM = 'new_channel';\n\ntype Props = {\n  youtubeChannels: ?Array<{ transfer_state: string, sync_status: string }>,\n  doUserFetch: () => void,\n  inSignUpFlow?: boolean,\n  doToggleInterestedInYoutubeSync: () => void,\n};\n\nexport default function YoutubeSync(props: Props) {\n  const { youtubeChannels, doUserFetch, inSignUpFlow = false, doToggleInterestedInYoutubeSync } = props;\n  const {\n    location: { search, pathname },\n    push,\n    replace,\n  } = useHistory();\n  const urlParams = new URLSearchParams(search);\n  const statusToken = urlParams.get(STATUS_TOKEN_PARAM);\n  const errorMessage = urlParams.get(ERROR_MESSAGE_PARAM);\n  const newChannelParam = urlParams.get(NEW_CHANNEL_PARAM);\n  const [channel, setChannel] = React.useState('');\n  const [language, setLanguage] = React.useState(getDefaultLanguage());\n  const [nameError, setNameError] = React.useState(undefined);\n  const [acknowledgedTerms, setAcknowledgedTerms] = React.useState(false);\n  const [addingNewChannel, setAddingNewChannel] = React.useState(newChannelParam);\n  const hasYoutubeChannels = youtubeChannels && youtubeChannels.length > 0;\n\n  React.useEffect(() => {\n    const urlParamsInEffect = new URLSearchParams(search);\n    if (!urlParamsInEffect.get('reset_scroll')) {\n      urlParamsInEffect.append('reset_scroll', 'youtube');\n    }\n\n    replace(`?${urlParamsInEffect.toString()}`);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [pathname, search]);\n\n  React.useEffect(() => {\n    if (statusToken && !hasYoutubeChannels) {\n      doUserFetch();\n    }\n  }, [statusToken, hasYoutubeChannels, doUserFetch]);\n\n  React.useEffect(() => {\n    if (!newChannelParam) {\n      setAddingNewChannel(false);\n    }\n  }, [newChannelParam]);\n\n  function handleCreateChannel() {\n    Lbryio.call('yt', 'new', {\n      type: 'sync',\n      immediate_sync: true,\n      channel_language: language,\n      desired_lbry_channel_name: `@${channel}`,\n      return_url: `https://${DOMAIN}/$/${inSignUpFlow ? PAGES.AUTH : PAGES.YOUTUBE_SYNC}`,\n    }).then((ytAuthUrl) => {\n      if (window.cordova) {\n        window.odysee.functions.initBrowser(ytAuthUrl);\n      } else {\n        // react-router isn't needed since it's a different domain\n        window.location.href = ytAuthUrl;\n      }\n    });\n  }\n\n  function handleChannelChange(e) {\n    const { value } = e.target;\n    setChannel(value);\n    if (!isNameValid(value)) {\n      setNameError(INVALID_NAME_ERROR);\n    } else {\n      setNameError();\n    }\n  }\n\n  function handleNewChannel() {\n    urlParams.append('new_channel', 'true');\n    push(`${pathname}?${urlParams.toString()}`);\n    setAddingNewChannel(true);\n  }\n\n  const Wrapper = (props: { children: any }) => {\n    return inSignUpFlow ? (\n      <>{props.children}</>\n    ) : (\n      <Page noSideNavigation authPage>\n        {props.children}\n      </Page>\n    );\n  };\n\n  return (\n    <Wrapper>\n      <div className=\"main__channel-creation\">\n        {hasYoutubeChannels && !addingNewChannel ? (\n          <React.Suspense fallback={null}>\n            <YoutubeTransferStatus alwaysShow addNewChannel={handleNewChannel} />\n          </React.Suspense>\n        ) : (\n          <Card\n            title={__('Sync your YouTube channel to %site_name%', { site_name: IS_WEB ? SITE_NAME : 'LBRY' })}\n            subtitle={__('Get your YouTube videos in front of the %site_name% audience.', {\n              site_name: IS_WEB ? SITE_NAME : 'LBRY',\n            })}\n            actions={\n              <Form onSubmit={handleCreateChannel}>\n                <fieldset-group class=\"fieldset-group--smushed fieldset-group--disabled-prefix\">\n                  <fieldset-section>\n                    <label htmlFor=\"auth_first_channel\">\n                      {nameError ? (\n                        <span className=\"error__text\">{nameError}</span>\n                      ) : (\n                        __('Your desired %site_name% channel name', { site_name: IS_WEB ? SITE_NAME : 'LBRY' })\n                      )}\n                    </label>\n                    <div className=\"form-field__prefix\">@</div>\n                  </fieldset-section>\n\n                  <FormField\n                    autoFocus\n                    placeholder={__('channel')}\n                    type=\"text\"\n                    name=\"yt_sync_channel\"\n                    className=\"form-field--short\"\n                    value={channel}\n                    onChange={handleChannelChange}\n                  />\n                </fieldset-group>\n                <FormField\n                  name=\"language_select\"\n                  type=\"select\"\n                  label={__('Channel language')}\n                  onChange={(event) => setLanguage(event.target.value)}\n                  value={language}\n                >\n                  {sortLanguageMap(SUPPORTED_LANGUAGES).map(([langKey, langName]) => (\n                    <option key={langKey} value={langKey}>\n                      {langName}\n                    </option>\n                  ))}\n                </FormField>\n                <FormField\n                  type=\"checkbox\"\n                  name=\"yt_sync_terms\"\n                  checked={acknowledgedTerms}\n                  onChange={() => setAcknowledgedTerms(!acknowledgedTerms)}\n                  label={\n                    <I18nMessage\n                      tokens={{\n                        terms: (\n                          <Button button=\"link\" label={__('these terms')} href=\"https://odysee.com/$/youtubetos\" />\n                        ),\n                        faq: (\n                          <Button\n                            button=\"link\"\n                            label={__('how the program works')}\n                            href=\"https://help.odysee.tv/category-syncprogram/\"\n                          />\n                        ),\n                        site_name: SITE_NAME,\n                      }}\n                    >\n                      I want to sync my content to %site_name% and the LBRY network and agree to %terms%. I have also\n                      read and understand %faq%.\n                    </I18nMessage>\n                  }\n                />\n\n                <div className=\"section__actions\">\n                  <Button\n                    button=\"primary\"\n                    type=\"submit\"\n                    disabled={nameError || !channel || !acknowledgedTerms}\n                    label={__('Claim Now')}\n                  />\n\n                  {inSignUpFlow && !errorMessage && (\n                    <Button button=\"link\" label={__('Skip')} onClick={() => doToggleInterestedInYoutubeSync()} />\n                  )}\n\n                  {errorMessage && <Button button=\"link\" label={__('Skip')} navigate={`/$/${PAGES.REWARDS}`} />}\n                </div>\n                <div className=\"help--card-actions\">\n                  <I18nMessage\n                    tokens={{\n                      count: 100,\n                      learn_more: (\n                        <Button\n                          button=\"link\"\n                          label={__('Learn more')}\n                          href=\"https://help.odysee.tv/category-syncprogram/\"\n                        />\n                      ),\n                    }}\n                  >\n                    This will verify you are an active YouTuber with over %count% subscribers and original content.\n                    Channel names cannot be changed once chosen, please be extra careful. %learn_more%.\n                  </I18nMessage>\n                </div>\n              </Form>\n            }\n            nag={errorMessage && <Nag message={errorMessage} type=\"error\" relative />}\n          />\n        )}\n      </div>\n    </Wrapper>\n  );\n}\n","import { connect } from 'react-redux';\nimport { selectYoutubeChannels } from 'redux/selectors/user';\nimport { doUserFetch } from 'redux/actions/user';\nimport CreatorDashboardPage from './view';\n\nconst select = state => ({\n  youtubeChannels: selectYoutubeChannels(state),\n});\n\nexport default connect(select, {\n  doUserFetch,\n})(CreatorDashboardPage);\n"],"names":["props","alt","__","SITE_NAME","React","className","src","LOGIN_IMG_URL","_props$button","button","doSignOut","doClearEmailEntry","doClearPasswordEntry","label","Button","onClick","connect","state","UserSignOutButton","UserEmailVerify","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","call","_assertThisInitialized","emailVerifyCheckInterval","wait","handleResendVerificationEmail","bind","key","value","_this2","this","setInterval","checkIfVerified","user","has_verified_email","clearInterval","_this3","_this$props","email","resendVerificationEmail","toast","setState","setTimeout","checkEmailVerified","_this$props2","isReturningUser","resendingEmail","Card","title","subtitle","verify_text","actions","disabled","I18nMessage","tokens","help_link","href","concat","SITE_HELP_EMAIL","chat_link","selectEmailToVerify","selectEmailAlreadyExists","selectUser","selectResendingVerificationEmail","dispatch","doUserResendVerificationEmail","doUserCheckEmailVerified","message","doToast","EMAIL_REGEX","errorMessage","isPending","doSignUp","daemonSettings","setSync","clearEmailEntry","setShareDiagnosticData","emailExists","interestedInYoutubSync","doToggleInterestedInYoutubeSync","shareUsageData","share_usage_data","_useHistory","useHistory","push","location","emailFromUrl","URLSearchParams","search","get","defaultEmail","decodeURIComponent","_useState2","_slicedToArray","useState","setEmail","_useState4","password","setPassword","_React$useState2","_useState6","valid","match","handleChangeToSignIn","additionalParams","url","PAGES","urlParams","set","encodeURIComponent","toString","classnames","SIMPLE_SITE","DOMAIN","IS_WEB","Form","onSubmit","undefined","then","LocalStorage","LS","analytics","FormField","autoFocus","placeholder","type","name","onChange","e","target","checked","terms","nag","Nag","relative","ErrorText","secondPane","LoginGraphic","selectEmailNewIsPending","selectEmailNewErrorMessage","syncEnabled","selectClientSetting","SETTINGS","selectDaemonSettings","doSetWalletSyncPreference","shouldShareData","doSetDaemonSetting","DAEMON_SETTINGS","doUserSignUp","UserEmailNew","DEFAULT_BID_FOR_FIRST_CHANNEL","thumbnailPreview","createChannel","creatingChannel","claimingReward","createChannelError","openModal","primaryEmail","primary_email","initialChannel","split","channel","setChannel","setTitle","cover","thumbnail","isUpload","setIsUpload","_React$useState4","thumbError","setThumbError","_React$useState6","languages","languageParam","params","setParams","setLanguageParam","primaryLanguage","Array","isArray","length","_useState8","nameError","setNameError","handleThumbnailChange","thumbnailUrl","uploadSelected","_objectSpread","ThumbnailBrokenImage","AVATAR_DEFAULT","sync_channel","icons","ICONS","channelClaim","MODALS","onUpdate","helpText","assetName","currentValue","icon","iconSize","class","htmlFor","isNameValid","INVALID_NAME_ERROR","event","index","code","langs","_toConsumableArray","PUBLISH","splice","helper","sortLanguageMap","SUPPORTED_LANGUAGES","map","_ref","_ref2","langKey","langName","channels","selectMyChannelClaims","selectCreatingChannel","selectCreateChannelError","modal","doOpenModal","amount","optionalParams","doCreateChannel","UserFirstChannel","channelIds","homepageData","discoverData","language","prefsReady","subscribedChannels","channelSubscribe","onContinue","PRIMARY_CONTENT","LATEST","channelsToSubscribe","COMMUNITY_CHANNELS","trim","filter","x","CUSTOM_HOMEPAGE","followingCount","followingCountIgnoringAutoFollows","includes","uri","timer","forEach","channelUri","claimName","parseURI","clearTimeout","ClaimListDiscover","hideFilters","hideAdvancedFilter","meta","defaultOrderBy","CS","defaultFreshness","claimType","claimIds","defaultTags","maxPages","actionText","selectHomepageData","selectHomepageDiscover","selectLanguage","selectPrefsReady","selectSubscriptions","channelName","doChannelSubscribe","UserChannelFollowIntro","followedTags","TagsSelect","hideHeader","limitShow","help","showClose","selectFollowedTags","UserTagFollowIntro","YoutubeTransferStatus","lazyImport","REDIRECT_PARAM","REDIRECT_IMMEDIATELY_PARAM","STEP_PARAM","emailToVerify","claimedRewards","claimConfirmEmailReward","claimNewUserReward","balance","youtubeChannels","syncingWallet","hasSynced","fetchingChannels","followingAcknowledged","tagsAcknowledged","rewardsAcknowledged","setClientSetting","interestedInYoutubeSync","_useHistory$location","pathname","replace","redirect","step","shouldRedirectImmediately","initialSignInStep","setInitialSignInStep","hasVerifiedEmail","rewardsApproved","is_reward_approved","isIdentityVerified","is_identity_verified","passwordSet","password_set","hasFetchedReward","useFetched","previousHasVerifiedEmail","usePrevious","channelCount","hasClaimedEmailAward","some","reward","reward_type","REWARDS","hasYoutubeChannels","Boolean","isYoutubeTransferComplete","every","transfer_state","YOUTUBE_STATUSES","sync_status","showEmail","showEmailVerification","showUserVerification","showChannelCreation","showYoutubeTransfer","showFollowIntro","showTagsIntro","SHOW_TAGS_INTRO","showLoadingSpinner","setSettingAndSync","setting","SIGN_IN_FLOW","UserVerify","onSkip","YoutubeSync","inSignUpFlow","append","onBack","fallback","Confetti","recycle","style","position","Spinner","_getSignInStep2","i","Component","getSignInStep","componentToRender","isScrollable","selectClaimedRewards","makeSelectIsRewardClaimPending","REWARD_TYPES","selectBalance","selectFetchingMyChannels","selectYoutubeChannels","userFetchPending","selectUserIsPending","selectGetSyncIsPending","selectSyncHash","selectInterestedInYoutubeSync","doClaimRewardType","notifyError","pushToPrefs","doSetClientSetting","_doToggleInterestedInYoutubeSync","UserSignIn","Page","authPage","noFooter","UserSignUp","STATUS_TOKEN_PARAM","ERROR_MESSAGE_PARAM","NEW_CHANNEL_PARAM","doUserFetch","_props$inSignUpFlow","statusToken","newChannelParam","getDefaultLanguage","setLanguage","_React$useState8","acknowledgedTerms","setAcknowledgedTerms","_React$useState10","addingNewChannel","setAddingNewChannel","urlParamsInEffect","Wrapper","children","noSideNavigation","alwaysShow","addNewChannel","site_name","Lbryio","immediate_sync","channel_language","desired_lbry_channel_name","return_url","ytAuthUrl","window","cordova","odysee","functions","initBrowser","faq","navigate","count","learn_more"],"sourceRoot":""}