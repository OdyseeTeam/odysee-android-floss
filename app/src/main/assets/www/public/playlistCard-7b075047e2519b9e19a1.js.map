{"version":3,"file":"playlistCard-7b075047e2519b9e19a1.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/collectionItemsList/view.jsx","webpack://odysee.com/../ui/component/collectionItemsList/index.js","webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/playlistCard/internal/shuffleButton/view.jsx","webpack://odysee.com/../ui/component/playlistCard/internal/shuffleButton/index.js","webpack://odysee.com/../ui/component/playlistCard/internal/loopButton/view.jsx","webpack://odysee.com/../ui/component/playlistCard/internal/loopButton/index.js","webpack://odysee.com/../ui/component/playlistCard/view.jsx","webpack://odysee.com/../ui/component/playlistCard/index.js","webpack://odysee.com/../ui/hocs/withCollectionItems/view.jsx","webpack://odysee.com/../ui/hocs/withCollectionItems/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\n\nimport ClaimList from 'component/claimList';\nimport withCollectionItems from 'hocs/withCollectionItems';\n\n// prettier-ignore\nconst Lazy = {\n  DragDropContext: React.lazy(() => import('react-beautiful-dnd' /* webpackChunkName: \"dnd\" */).then((module) => ({ default: module.DragDropContext }))),\n  Droppable: React.lazy(() => import('react-beautiful-dnd' /* webpackChunkName: \"dnd\" */).then((module) => ({ default: module.Droppable }))),\n};\n\ntype Props = {\n  collectionId: string,\n  isEditPreview?: boolean,\n  // -- redux --\n  collectionUrls: ?Array<string>,\n  doCollectionEdit: (id: string, params: CollectionEditParams) => void,\n};\n\nconst CollectionItemsList = (props: Props) => {\n  const { collectionId, isEditPreview, collectionUrls, doCollectionEdit, ...claimListProps } = props;\n\n  function handleOnDragEnd(result: any) {\n    const { source, destination } = result;\n\n    if (!destination) return;\n\n    const { index: from } = source;\n    const { index: to } = destination;\n\n    doCollectionEdit(collectionId, { order: { from, to }, isPreview: isEditPreview });\n  }\n\n  return (\n    <React.Suspense fallback={null}>\n      <Lazy.DragDropContext onDragEnd={handleOnDragEnd}>\n        <Lazy.Droppable droppableId=\"list__ordering\">\n          {(DroppableProvided) => (\n            <ClaimList\n              collectionId={collectionId}\n              uris={collectionUrls}\n              isEditPreview={isEditPreview}\n              droppableProvided={DroppableProvided}\n              {...claimListProps}\n            />\n          )}\n        </Lazy.Droppable>\n      </Lazy.DragDropContext>\n    </React.Suspense>\n  );\n};\n\nexport default withCollectionItems(CollectionItemsList);\n","import { connect } from 'react-redux';\nimport { doCollectionEdit } from 'redux/actions/collections';\nimport { selectUrlsForCollectionId } from 'redux/selectors/collections';\n\nimport CollectionItemsList from './view';\n\nconst select = (state, props) => {\n  const { collectionId } = props;\n\n  return {\n    collectionUrls: selectUrlsForCollectionId(state, collectionId),\n  };\n};\n\nconst perform = {\n  doCollectionEdit,\n};\n\nexport default connect(select, perform)(CollectionItemsList);\n","// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport React from 'react';\nimport Button from 'component/button';\nimport classnames from 'classnames';\n\ntype Props = {\n  url: string,\n  id: string,\n  // -- redux --\n  shuffle: boolean,\n  doToggleShuffleList: (params: { currentUri?: string, collectionId: string, hideToast?: boolean }) => void,\n};\n\nconst ShuffleButton = (props: Props) => {\n  const { url, id, shuffle, doToggleShuffleList } = props;\n\n  return (\n    <Button\n      button=\"alt\"\n      className={classnames('button--alt-no-style button-toggle', {\n        'button-toggle--active': shuffle,\n      })}\n      title={__('Shuffle')}\n      icon={ICONS.SHUFFLE}\n      onClick={() => doToggleShuffleList({ currentUri: url, collectionId: id })}\n    />\n  );\n};\n\nexport default ShuffleButton;\n","import { connect } from 'react-redux';\nimport ShuffleButton from './view';\nimport { selectListIsShuffledForId } from 'redux/selectors/content';\nimport { doToggleShuffleList } from 'redux/actions/content';\n\nconst select = (state, props) => {\n  const { id: collectionId } = props;\n\n  return {\n    shuffle: selectListIsShuffledForId(state, collectionId),\n  };\n};\n\nconst perform = {\n  doToggleShuffleList,\n};\n\nexport default connect(select, perform)(ShuffleButton);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport React from 'react';\nimport Button from 'component/button';\nimport classnames from 'classnames';\n\ntype Props = {\n  id: string,\n  // -- redux --\n  loop: boolean,\n  doToggleLoopList: (params: { collectionId: string }) => void,\n};\n\nconst LoopButton = (props: Props) => {\n  const { id, loop, doToggleLoopList } = props;\n\n  return (\n    <Button\n      button=\"alt\"\n      className={classnames('button--alt-no-style button-toggle', {\n        'button-toggle--active': loop,\n      })}\n      title={__('Loop')}\n      icon={ICONS.REPEAT}\n      onClick={() => doToggleLoopList({ collectionId: id })}\n    />\n  );\n};\n\nexport default LoopButton;\n","import { connect } from 'react-redux';\nimport LoopButton from './view';\nimport { selectListIsLoopedForId } from 'redux/selectors/content';\nimport { doToggleLoopList } from 'redux/actions/content';\n\nconst select = (state, props) => {\n  const { id: collectionId } = props;\n\n  return {\n    loop: selectListIsLoopedForId(state, collectionId),\n  };\n};\n\nconst perform = {\n  doToggleLoopList,\n};\n\nexport default connect(select, perform)(LoopButton);\n","// @flow\n\n// $FlowFixMe\nimport { Global } from '@emotion/react';\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport CollectionItemsList from 'component/collectionItemsList';\nimport Card from 'component/common/card';\nimport Button from 'component/button';\nimport * as PAGES from 'constants/pages';\nimport * as DRAWERS from 'constants/drawer_types';\nimport * as COLLECTIONS_CONSTS from 'constants/collections';\nimport Icon from 'component/common/icon';\nimport * as ICONS from 'constants/icons';\nimport * as MODALS from 'constants/modal_types';\nimport { NavLink } from 'react-router-dom';\nimport UriIndicator from 'component/uriIndicator';\nimport I18nMessage from 'component/i18nMessage';\nimport ShuffleButton from './internal/shuffleButton';\nimport LoopButton from './internal/loopButton';\nimport SwipeableDrawer from 'component/swipeableDrawer';\nimport DrawerExpandButton from 'component/swipeableDrawerExpand';\nimport usePersistedState from 'effects/use-persisted-state';\nimport { HEADER_HEIGHT_MOBILE } from 'constants/player';\nimport { getMaxLandscapeHeight } from 'util/window';\nimport { useIsMobile, useIsMediumScreen } from 'effects/use-screensize';\nimport { getLocalizedNameForCollectionId } from 'util/collections';\nimport './style.lazy.scss';\n\ntype Props = {\n  id: string,\n  playingItemUrl: string,\n  playingCurrentPlaylist: boolean,\n  isMyCollection: boolean,\n  collectionUrls: Array<Claim>,\n  collectionName: string,\n  isPrivateCollection: boolean,\n  hasEdits: boolean,\n  publishedCollectionName: string | boolean,\n  playingItemIndex: ?number,\n  collectionLength: number,\n  disableClickNavigation?: boolean,\n  useDrawer?: boolean,\n  collectionEmpty: boolean,\n  hasCollectionById: boolean,\n  isFloating?: boolean,\n  playingCollectionId: ?string,\n  collectionSavedForId: boolean,\n  createUnpublishedCollection: (string, Array<any>, ?string) => void,\n  doCollectionEdit: (string, CollectionEditParams) => void,\n  doDisablePlayerDrag?: (disable: boolean) => void,\n  doClearPlayingCollection: () => void,\n  doOpenModal: (id: string, props: {}) => void,\n  doClearQueueList: () => void,\n  doToggleCollectionSavedForId: (id: string) => void,\n  thumbnailFromClaim: string,\n};\n\nexport default function PlaylistCard(props: Props) {\n  const { collectionName, useDrawer, hasCollectionById, playingItemIndex, collectionLength, collectionEmpty, id } =\n    props;\n\n  const usedCollectionName = getLocalizedNameForCollectionId(id) || collectionName;\n  const [showEdit, setShowEdit] = React.useState(false);\n\n  if (!hasCollectionById) return null;\n\n  const currentIndexLabel = ` - ${Number.isInteger(playingItemIndex) ? playingItemIndex + 1 : 0}/${collectionLength} `;\n  const playlistCardProps = { showEdit, setShowEdit, currentIndexLabel, ...props };\n\n  if (useDrawer) {\n    return (\n      <>\n        <DrawerExpandButton\n          fixed\n          icon={ICONS.PLAYLIST_PLAYBACK}\n          label={\n            __('Now playing: --[Which Playlist is currently playing]--') + ' ' + usedCollectionName + currentIndexLabel\n          }\n          type={DRAWERS.PLAYLIST}\n        />\n\n        <SwipeableDrawer\n          startOpen={!collectionEmpty}\n          type={DRAWERS.PLAYLIST}\n          title={\n            // returns the card title element\n            <PlaylistCardComponent {...playlistCardProps} className=\"playlist-card--drawer-header\" titleOnly />\n          }\n          hasSubtitle\n        >\n          {/* returns the card body element */}\n          <PlaylistCardComponent {...playlistCardProps} className=\"playlist__wrapper\" bodyOnly />\n        </SwipeableDrawer>\n      </>\n    );\n  }\n\n  // returns the full card element\n  return <PlaylistCardComponent {...playlistCardProps} className=\"playlist__wrapper\" />;\n}\n\ntype PlaylistCardProps = Props & {\n  titleOnly?: boolean,\n  bodyOnly?: boolean,\n  showEdit: boolean,\n  currentIndexLabel: string,\n  setShowEdit: (show: boolean) => void,\n};\n\nconst PlaylistCardComponent = (props: PlaylistCardProps) => {\n  const {\n    isMyCollection,\n    collectionUrls,\n    collectionName,\n    id,\n    playingItemUrl,\n    isPrivateCollection,\n    hasEdits,\n    publishedCollectionName,\n    doCollectionEdit,\n    playingItemIndex,\n    collectionLength,\n    currentIndexLabel,\n    disableClickNavigation,\n    titleOnly,\n    bodyOnly,\n    showEdit,\n    setShowEdit,\n    doDisablePlayerDrag,\n    collectionEmpty,\n    playingCurrentPlaylist,\n    isFloating,\n    playingCollectionId,\n    doClearPlayingCollection,\n    doOpenModal,\n    doClearQueueList,\n    doToggleCollectionSavedForId,\n    collectionSavedForId,\n    thumbnailFromClaim,\n    ...cardProps\n  } = props;\n\n  const isMobile = useIsMobile();\n  const isMediumScreen = useIsMediumScreen() && !isMobile;\n\n  const usedCollectionName = getLocalizedNameForCollectionId(id) || collectionName;\n\n  const activeItemRef = React.useRef();\n  const scrollRestorePending = React.useRef();\n  const listHasActive = React.useRef();\n  const lengthRef = React.useRef(collectionLength);\n  const activeItemIndexRef = React.useRef(playingItemIndex);\n\n  const [floatingBodyOpen, setFloatingBodyOpen] = usePersistedState('playlist-card-open', true);\n  const [bodyOpen, setBodyOpen] = React.useState(isFloating ? floatingBodyOpen : true);\n  const [bodyRef, setBodyRef] = React.useState();\n  const [hasActive, setHasActive] = React.useState();\n  const [scrolledPastActive, setScrolledPast] = React.useState();\n\n  const backgroundImage = thumbnailFromClaim\n    ? 'https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + thumbnailFromClaim\n    : undefined;\n\n  function closePlaylist() {\n    if (collectionEmpty) {\n      doClearPlayingCollection();\n      return;\n    }\n\n    const isPlayingQueue = playingCollectionId === COLLECTIONS_CONSTS.QUEUE_ID;\n    const title = isPlayingQueue\n      ? __('Are you sure you want to quit and clear the current Queue?')\n      : __('Are you sure you want to quit the current playlist?');\n\n    doOpenModal(MODALS.CONFIRM, {\n      title: title,\n      subtitle: __('The current video will keep playing.'),\n      onConfirm: (closeModal) => {\n        doClearPlayingCollection();\n        if (isPlayingQueue) doClearQueueList();\n        closeModal();\n      },\n    });\n  }\n\n  const activeListItemRef = React.useCallback(\n    (node) => {\n      if (node && bodyRef && Number.isInteger(playingItemIndex)) {\n        activeItemRef.current = node;\n        // without this, the list would scroll to the top of the item\n        // so make it so it's approximately centered instead\n        const listCenter = bodyRef.offsetHeight / 2;\n\n        let topToScroll = node.offsetTop - bodyRef.offsetTop - listCenter;\n        if (playingItemIndex === 1) {\n          topToScroll = 0;\n        } else if (playingItemIndex === collectionLength) {\n          topToScroll = bodyRef.scrollHeight;\n        }\n\n        try {\n          bodyRef.scrollTo({ top: topToScroll, behavior: isMediumScreen ? 'instant' : 'smooth' });\n        } catch (error) {}\n\n        setScrolledPast(false);\n        scrollRestorePending.current = true;\n      }\n    },\n    [bodyRef, collectionLength, isMediumScreen, playingItemIndex]\n  );\n\n  React.useEffect(() => {\n    if (bodyRef) {\n      const handleScroll = () => {\n        const currentActiveItem = activeItemRef.current;\n\n        if (currentActiveItem) {\n          const { top, height } = currentActiveItem.getBoundingClientRect();\n          const itemTop = currentActiveItem.offsetTop - bodyRef.offsetTop;\n          const itemBottom = itemTop + height;\n\n          let [playerTop, playerInfoTop] = [0, 0];\n          if (isFloating || isMobile) {\n            if (isFloating) {\n              const playerInfo = document.querySelector('.content__info');\n              if (playerInfo) playerInfoTop = playerInfo.offsetTop;\n\n              const playerElem = document.querySelector('.content__viewer');\n              const playerTransform = playerElem && playerElem.style.transform;\n              if (playerTransform) {\n                playerTop = Number(\n                  playerTransform.substring(playerTransform.indexOf(', ') + 2, playerTransform.indexOf('px)'))\n                );\n              }\n            }\n\n            if (isMobile) {\n              const contentHeight = HEADER_HEIGHT_MOBILE + getMaxLandscapeHeight();\n              playerTop += contentHeight;\n            }\n          }\n\n          const scrolled =\n            top - playerTop - height - bodyRef.offsetTop - playerInfoTop > bodyRef.offsetHeight ||\n            itemBottom < bodyRef.scrollTop;\n\n          if (!scrollRestorePending.current) {\n            setScrolledPast(scrolled);\n          } else {\n            scrollRestorePending.current = false;\n          }\n        }\n      };\n\n      const itemWasRemoved = collectionLength < lengthRef.current;\n      const itemWasAdded =\n        collectionLength > lengthRef.current &&\n        Number.isInteger(playingItemIndex) &&\n        playingItemIndex === activeItemIndexRef.current;\n\n      lengthRef.current = collectionLength;\n      activeItemIndexRef.current = playingItemIndex;\n\n      if (bodyOpen && listHasActive.current && !itemWasRemoved && !itemWasAdded) {\n        handleScroll();\n        if (activeItemRef.current) activeListItemRef(activeItemRef.current);\n      }\n\n      bodyRef.addEventListener('scroll', handleScroll);\n      window.addEventListener('resize', handleScroll);\n      return () => {\n        bodyRef.removeEventListener('scroll', handleScroll);\n        window.removeEventListener('resize', handleScroll);\n      };\n    }\n  }, [activeListItemRef, bodyOpen, bodyRef, collectionLength, isFloating, isMobile, playingItemIndex]);\n\n  return (\n    <>\n      <Global\n        styles={{\n          '.claim-list__scroll-to-recent': {\n            opacity: !scrolledPastActive || !hasActive ? '0' : '0.9 !important',\n            // visibility also needed because it prevents clicking on the button\n            // opacity makes it invisible but still clickable\n            visibility: !scrolledPastActive || !hasActive ? 'hidden' : 'visible !important',\n\n            '&:hover': {\n              opacity: !scrolledPastActive || !hasActive ? '0' : '1 !important',\n            },\n          },\n\n          '.playlist__wrapper': {\n            '.claim-list': {\n              'li:last-child': {\n                marginBottom:\n                  scrolledPastActive && hasActive && playingItemIndex !== collectionLength\n                    ? '3rem !important'\n                    : undefined,\n              },\n            },\n          },\n        }}\n      />\n\n      <Card\n        {...cardProps}\n        smallTitle\n        slimHeader={!isFloating}\n        gridHeader={!titleOnly}\n        singlePane\n        headerActions={\n          !bodyOpen || bodyOnly ? undefined : (\n            <div className=\"playlist-card-actions\">\n              <section>\n                <LoopButton id={id} />\n                <ShuffleButton url={playingItemUrl} id={id} />\n              </section>\n\n              <section>\n                <Button\n                  requiresAuth\n                  title={__('Copy')}\n                  className=\"button-toggle\"\n                  icon={ICONS.COPY}\n                  onClick={() => doOpenModal(MODALS.COLLECTION_CREATE, { sourceId: id })}\n                />\n\n                {isMyCollection\n                  ? !collectionEmpty && (\n                      <Button\n                        title={__('Arrange')}\n                        className={classnames('button-toggle', { 'button-toggle--active': showEdit })}\n                        icon={ICONS.ARRANGE}\n                        onClick={() => setShowEdit(!showEdit)}\n                      />\n                    )\n                  : id && (\n                      <Button\n                        requiresAuth\n                        title={__('Save')}\n                        className=\"button-toggle\"\n                        icon={collectionSavedForId ? ICONS.PLAYLIST_FILLED : ICONS.PLAYLIST_ADD}\n                        onClick={() => doToggleCollectionSavedForId(id)}\n                      />\n                    )}\n              </section>\n            </div>\n          )\n        }\n        title={\n          bodyOnly ? undefined : (\n            <NavLink\n              to={`/$/${PAGES.PLAYLIST}/${id || ''}`}\n              className={classnames('playlist__title', { 'align-end': isFloating })}\n            >\n              {isFloating ? (\n                <>\n                  <Icon icon={ICONS.PLAYLIST_PLAYBACK} size={40} />\n                  <div className=\"playlist__title-text\">\n                    <span className=\"text-ellipsis\">\n                      {__('Now playing: --[Which Playlist is currently playing]--') + ' ' + usedCollectionName}\n                    </span>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <Icon icon={COLLECTIONS_CONSTS.PLAYLIST_ICONS[id] || ICONS.PLAYLIST} className=\"icon--margin-right\" />\n                  <div className=\"playlist__title-text\">\n                    <div className=\"playlist__title-text-list\">\n                      <span className=\"text-ellipsis\">{usedCollectionName}</span>\n                    </div>\n                    {bodyOnly ? undefined : (\n                      <>\n                        <div className=\"sub\">\n                          {isPrivateCollection ? (\n                            <I18nMessage\n                              tokens={{\n                                lock_icon: <Icon icon={ICONS.LOCK} style={{ transform: 'translateY(3px)' }} />,\n                              }}\n                            >\n                              Private %lock_icon%\n                            </I18nMessage>\n                          ) : (\n                            <UriIndicator link uri={publishedCollectionName} showHiddenAsAnonymous />\n                          )}\n\n                          {currentIndexLabel}\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </>\n              )}\n\n              {hasEdits && (\n                <Icon\n                  title={__('Pending edits')}\n                  icon={ICONS.PUBLISH}\n                  color=\"red\"\n                  style={{ marginLeft: 'var(--spacing-xxs)' }}\n                />\n              )}\n            </NavLink>\n          )\n        }\n        titleActions={\n          bodyOnly || titleOnly ? undefined : (\n            <>\n              {!bodyOnly && (\n                <Button\n                  className={classnames('button-toggle', { 'button-toggle--active': !bodyOpen })}\n                  icon={bodyOpen ? ICONS.UP : ICONS.DOWN}\n                  onClick={() => {\n                    if (isFloating) setFloatingBodyOpen(!floatingBodyOpen);\n                    setBodyOpen(!bodyOpen);\n                  }}\n                />\n              )}\n\n              <Button\n                title={__('Close Playlist')}\n                className=\"button-toggle\"\n                icon={ICONS.REMOVE}\n                onClick={closePlaylist}\n              />\n            </>\n          )\n        }\n        body={\n          !bodyOpen || titleOnly ? undefined : (\n            <CollectionItemsList\n              collectionId={id}\n              type=\"small\"\n              activeUri={playingItemUrl}\n              empty={__('Playlist is Empty')}\n              showEdit={showEdit}\n              smallThumbnail\n              showIndexes\n              playItemsOnClick={playingCurrentPlaylist}\n              disableClickNavigation={disableClickNavigation}\n              doDisablePlayerDrag={doDisablePlayerDrag}\n              setActiveListItemRef={bodyRef ? activeListItemRef : undefined}\n              setListRef={(node) => setBodyRef(node)}\n              scrolledPastActive={scrolledPastActive}\n              restoreScrollPos={() => activeListItemRef(activeItemRef.current)}\n              setHasActive={(hasActive) => {\n                listHasActive.current = hasActive;\n                setHasActive(hasActive);\n              }}\n            />\n          )\n        }\n        backgroundImage={backgroundImage}\n      />\n    </>\n  );\n};\n","import { connect } from 'react-redux';\nimport PlaylistCard from './view';\nimport {\n  selectClaimForUri,\n  selectChannelNameForId,\n  selectThumbnailForUri,\n  selectClaimForClaimId,\n} from 'redux/selectors/claims';\nimport {\n  selectUrlsForCollectionId,\n  selectCollectionTitleForId,\n  selectCollectionIsMine,\n  selectIsCollectionPrivateForId,\n  selectIndexForUrlInCollectionForId,\n  selectCollectionLengthForId,\n  selectCollectionIsEmptyForId,\n  selectCollectionForId,\n  selectCollectionSavedForId,\n  selectCollectionHasEditsForId,\n} from 'redux/selectors/collections';\nimport { selectPlayingUri } from 'redux/selectors/content';\nimport { doCollectionEdit, doClearQueueList, doToggleCollectionSavedForId } from 'redux/actions/collections';\nimport { doClearPlayingCollection } from 'redux/actions/content';\nimport { doOpenModal } from 'redux/actions/app';\n\nconst select = (state, props) => {\n  const { id: collectionId } = props;\n\n  const {\n    uri: playingUri,\n    collection: { collectionId: playingCollectionId },\n  } = selectPlayingUri(state);\n\n  const playingCurrentPlaylist = collectionId === playingCollectionId;\n  const { permanent_url: playingItemUrl } = playingCurrentPlaylist ? selectClaimForUri(state, playingUri) || {} : {};\n\n  const claim = selectClaimForClaimId(state, collectionId);\n  const collectionUri = (claim && (claim.canonical_url || claim.permanent_url)) || null;\n\n  return {\n    id: collectionId,\n    playingItemUrl,\n    playingCurrentPlaylist,\n    collectionUrls: selectUrlsForCollectionId(state, collectionId),\n    collectionName: selectCollectionTitleForId(state, collectionId),\n    isMyCollection: selectCollectionIsMine(state, collectionId),\n    isPrivateCollection: selectIsCollectionPrivateForId(state, collectionId),\n    hasEdits: selectCollectionHasEditsForId(state, collectionId),\n    publishedCollectionName: selectChannelNameForId(state, collectionId),\n    playingItemIndex: selectIndexForUrlInCollectionForId(state, playingCollectionId, playingItemUrl),\n    collectionLength: selectCollectionLengthForId(state, collectionId),\n    collectionEmpty: selectCollectionIsEmptyForId(state, collectionId),\n    hasCollectionById: collectionId && Boolean(selectCollectionForId(state, collectionId)),\n    playingCollectionId,\n    collectionSavedForId: selectCollectionSavedForId(state, collectionId),\n    thumbnailFromClaim: selectThumbnailForUri(state, playingItemUrl || collectionUri),\n  };\n};\n\nconst perform = {\n  doCollectionEdit,\n  doClearPlayingCollection,\n  doClearQueueList,\n  doOpenModal,\n  doToggleCollectionSavedForId,\n};\n\nexport default connect(select, perform)(PlaylistCard);\n","// @flow\nimport React from 'react';\n\nimport Spinner from 'component/spinner';\n\ntype Props = {\n  collectionId: string,\n  useIds?: boolean,\n  // -- redux --\n  isPrivate: ?boolean,\n  collectionUrls: ?Array<string>,\n  collectionIds: ?Array<string>,\n  doResolveClaimId: (claimId: string, returnCachedClaims?: boolean, options?: {}) => void,\n  doFetchItemsInCollection: (params: { collectionId: string }) => void,\n};\n\n/**\n * HigherOrderComponent for collections to resolve it and its items\n *\n * @param Component: FunctionalComponentParam\n * @returns {FunctionalComponent}\n */\nconst withCollectionItems = (Component: FunctionalComponentParam) => {\n  const CreditCardPrompt = (props: Props) => {\n    const {\n      collectionId,\n      useIds,\n      isPrivate,\n      collectionUrls,\n      collectionIds,\n      doResolveClaimId,\n      doFetchItemsInCollection,\n    } = props;\n\n    const collectionItems = useIds ? collectionIds : collectionUrls;\n\n    React.useEffect(() => {\n      if (!isPrivate) {\n        doResolveClaimId(collectionId, true, { include_is_my_output: true });\n      }\n    }, [collectionId, doResolveClaimId, isPrivate]);\n\n    React.useEffect(() => {\n      doFetchItemsInCollection({ collectionId });\n    }, [collectionId, doFetchItemsInCollection]);\n\n    if (collectionItems === undefined) {\n      return (\n        <div className=\"main--empty\">\n          <Spinner />\n        </div>\n      );\n    }\n\n    return <Component {...props} />;\n  };\n\n  return CreditCardPrompt;\n};\n\nexport default withCollectionItems;\n","import { connect } from 'react-redux';\n\nimport {\n  selectHasPrivateCollectionForId,\n  selectUrlsForCollectionId,\n  selectClaimIdsForCollectionId,\n} from 'redux/selectors/collections';\n\nimport { doResolveClaimId } from 'redux/actions/claims';\nimport { doFetchItemsInCollection } from 'redux/actions/collections';\n\nimport withCollectionItems from './view';\n\nconst select = (state, props) => {\n  const { collectionId } = props;\n\n  return {\n    isPrivate: selectHasPrivateCollectionForId(state, collectionId),\n    collectionUrls: selectUrlsForCollectionId(state, collectionId),\n    collectionIds: selectClaimIdsForCollectionId(state, collectionId),\n  };\n};\n\nconst perform = {\n  doResolveClaimId,\n  doFetchItemsInCollection,\n};\n\nexport default (Component) => connect(select, perform)(withCollectionItems(Component));\n"],"names":["Lazy","DragDropContext","React","then","module","default","Droppable","withCollectionItems","props","collectionId","isEditPreview","collectionUrls","doCollectionEdit","claimListProps","_objectWithoutProperties","_excluded","fallback","onDragEnd","result","source","destination","from","index","to","order","isPreview","droppableId","DroppableProvided","ClaimList","_extends","uris","droppableProvided","perform","connect","state","selectUrlsForCollectionId","CollectionItemsList","FirstPaneWrapper","singlePane","children","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","url","shuffle","doToggleShuffleList","currentUri","selectListIsShuffledForId","ShuffleButton","loop","doToggleLoopList","selectListIsLoopedForId","LoopButton","PlaylistCardComponent","isMyCollection","collectionName","playingItemUrl","isPrivateCollection","hasEdits","publishedCollectionName","playingItemIndex","collectionLength","currentIndexLabel","disableClickNavigation","titleOnly","bodyOnly","showEdit","setShowEdit","doDisablePlayerDrag","collectionEmpty","playingCurrentPlaylist","isFloating","playingCollectionId","doClearPlayingCollection","doOpenModal","doClearQueueList","doToggleCollectionSavedForId","collectionSavedForId","thumbnailFromClaim","cardProps","isMobile","useIsMobile","isMediumScreen","useIsMediumScreen","usedCollectionName","getLocalizedNameForCollectionId","activeItemRef","scrollRestorePending","listHasActive","lengthRef","activeItemIndexRef","_usePersistedState2","usePersistedState","floatingBodyOpen","setFloatingBodyOpen","_React$useState4","bodyOpen","setBodyOpen","_React$useState6","bodyRef","setBodyRef","_React$useState8","hasActive","_setHasActive","_React$useState10","scrolledPastActive","setScrolledPast","activeListItemRef","node","Number","isInteger","current","listCenter","offsetHeight","topToScroll","offsetTop","scrollHeight","scrollTo","top","behavior","error","handleScroll","currentActiveItem","_currentActiveItem$ge","getBoundingClientRect","height","itemBottom","playerTop","playerInfoTop","playerInfo","document","querySelector","playerElem","playerTransform","transform","substring","indexOf","HEADER_HEIGHT_MOBILE","getMaxLandscapeHeight","scrolled","scrollTop","itemWasRemoved","itemWasAdded","addEventListener","window","removeEventListener","Global","styles","opacity","visibility","marginBottom","Card","requiresAuth","MODALS","sourceId","NavLink","concat","PAGES","size","COLLECTIONS_CONSTS","I18nMessage","tokens","lock_icon","UriIndicator","link","uri","showHiddenAsAnonymous","color","marginLeft","isPlayingQueue","onConfirm","closeModal","type","activeUri","empty","smallThumbnail","showIndexes","playItemsOnClick","setActiveListItemRef","setListRef","restoreScrollPos","setHasActive","_selectPlayingUri","selectPlayingUri","playingUri","collection","selectClaimForUri","permanent_url","claim","selectClaimForClaimId","collectionUri","canonical_url","selectCollectionTitleForId","selectCollectionIsMine","selectIsCollectionPrivateForId","selectCollectionHasEditsForId","selectChannelNameForId","selectIndexForUrlInCollectionForId","selectCollectionLengthForId","selectCollectionIsEmptyForId","hasCollectionById","selectCollectionForId","selectCollectionSavedForId","selectThumbnailForUri","useDrawer","_React$useState2","playlistCardProps","_objectSpread","DrawerExpandButton","fixed","label","DRAWERS","SwipeableDrawer","startOpen","hasSubtitle","Component","useIds","isPrivate","collectionIds","doResolveClaimId","doFetchItemsInCollection","collectionItems","include_is_my_output","Spinner","select","selectHasPrivateCollectionForId","selectClaimIdsForCollectionId"],"sourceRoot":""}