{"version":3,"file":"modalRepost-cea807ac01e91a85d075.js","mappings":"8vCA+DA,QAhDA,SAAqBA,GACnB,IAAQC,EAA6CD,EAA7CC,IAAKC,EAAwCF,EAAxCE,YAAaC,EAA2BH,EAA3BG,WAAYC,EAAeJ,EAAfI,WAGxBC,GACVC,EAAAA,EAAAA,MADFC,SAAYF,OAGRG,EAAY,IAAIC,gBAAgBJ,GAChCK,EAAQF,EAAUG,IAAI,SAAWH,EAAUG,IAAI,MAAQT,EACvDU,EAAWF,IAAuB,MAAbA,EAAM,GAAaA,EAAMG,MAAM,GAAKH,EAAMI,QAAQ,MAAO,KAE9BC,EAAAC,EAAlBC,EAAAA,SAAe,IAAG,GAA/CC,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GACoBK,EAAAJ,EAAlBC,EAAAA,SAAe,IAAG,GAA7CI,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,GAAwBC,EAAAA,EAAAA,GAAYN,EAAY,KAChDO,GAAuBD,EAAAA,EAAAA,GAAYH,EAAW,KAoBpD,OAlBAJ,EAAAA,WAAgB,WACVM,GACFnB,EAAWmB,EAEf,GAAG,CAACA,EAAuBnB,IAE3Ba,EAAAA,WAAgB,WACVQ,GACFrB,EAAWqB,EAEf,GAAG,CAACA,EAAsBrB,IAE1Ba,EAAAA,WAAgB,WACVL,GACFR,EAAWQ,EAEf,GAAG,CAACA,EAAUR,IAGZa,EAAAA,cAACS,EAAAA,GAAK,CAACC,UAAWxB,EAAYyB,QAAM,EAACC,KAAK,QACxCZ,EAAAA,cAACa,EAAAA,EAAY,CACX7B,IAAKA,EACL8B,KAAMnB,EACNM,WAAYA,EACZG,UAAWA,EACXF,cAAeA,EACfG,aAAcA,IAItB,ECnDA,SAAeU,EAAAA,EAAAA,IAAQ,MALP,SAACC,GAAQ,MAAM,CAC7B9B,WAAY,kBAAM8B,GAASC,EAAAA,EAAAA,MAAc,EACzC9B,WAAY,SAACH,GAAG,OAAKgC,GAASE,EAAAA,EAAAA,IAAalC,GAAK,EACjD,GAED,CAAsCmC,E","sources":["webpack://odysee.com/../ui/modal/modalRepost/view.jsx","webpack://odysee.com/../ui/modal/modalRepost/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport Modal from 'modal/modal';\nimport RepostCreate from 'component/repostCreate';\nimport useThrottle from 'effects/use-throttle';\n\ntype Props = {\n  uri?: string,\n  contentName?: string,\n  // --- redux ---\n  closeModal: () => void,\n  resolveUri: (string) => void,\n};\n\nfunction ModalRepost(props: Props) {\n  const { uri, contentName, closeModal, resolveUri } = props;\n\n  const {\n    location: { search },\n  } = useHistory();\n\n  const urlParams = new URLSearchParams(search);\n  const param = urlParams.get('name') || urlParams.get('q') || contentName;\n  const repostTo = param && (param[0] === '@' ? param.slice(1) : param.replace(/\\s/g, '')); // remove spaces\n\n  const [contentUri, setContentUri] = React.useState('');\n  const [repostUri, setRepostUri] = React.useState('');\n  const throttledContentValue = useThrottle(contentUri, 500);\n  const throttledRepostValue = useThrottle(repostUri, 500);\n\n  React.useEffect(() => {\n    if (throttledContentValue) {\n      resolveUri(throttledContentValue);\n    }\n  }, [throttledContentValue, resolveUri]);\n\n  React.useEffect(() => {\n    if (throttledRepostValue) {\n      resolveUri(throttledRepostValue);\n    }\n  }, [throttledRepostValue, resolveUri]);\n\n  React.useEffect(() => {\n    if (repostTo) {\n      resolveUri(repostTo);\n    }\n  }, [repostTo, resolveUri]);\n\n  return (\n    <Modal onAborted={closeModal} isOpen type=\"card\">\n      <RepostCreate\n        uri={uri}\n        name={repostTo}\n        contentUri={contentUri}\n        repostUri={repostUri}\n        setContentUri={setContentUri}\n        setRepostUri={setRepostUri}\n      />\n    </Modal>\n  );\n}\n\nexport default ModalRepost;\n","import { connect } from 'react-redux';\nimport { doHideModal } from 'redux/actions/app';\nimport { doResolveUri } from 'redux/actions/claims';\nimport ModalRepost from './view';\n\nconst perform = (dispatch) => ({\n  closeModal: () => dispatch(doHideModal()),\n  resolveUri: (uri) => dispatch(doResolveUri(uri)),\n});\n\nexport default connect(null, perform)(ModalRepost);\n"],"names":["props","uri","contentName","closeModal","resolveUri","search","useHistory","location","urlParams","URLSearchParams","param","get","repostTo","slice","replace","_React$useState2","_slicedToArray","React","contentUri","setContentUri","_React$useState4","repostUri","setRepostUri","throttledContentValue","useThrottle","throttledRepostValue","Modal","onAborted","isOpen","type","RepostCreate","name","connect","dispatch","doHideModal","doResolveUri","ModalRepost"],"sourceRoot":""}