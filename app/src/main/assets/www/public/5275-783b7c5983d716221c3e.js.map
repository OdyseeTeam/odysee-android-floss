{"version":3,"file":"5275-783b7c5983d716221c3e.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/walletSpendableBalanceHelp/view.jsx","webpack://odysee.com/../ui/component/walletSpendableBalanceHelp/index.js","webpack://odysee.com/../ui/scss/component/_wallet-tip-selector.scss?4917","webpack://odysee.com/../ui/component/walletTipAmountSelector/view.jsx","webpack://odysee.com/../ui/component/walletTipAmountSelector/index.js","webpack://odysee.com/../ui/hocs/withCreditCard/view.jsx","webpack://odysee.com/../ui/hocs/withCreditCard/index.js","webpack://odysee.com/../ui/scss/component/_wallet-tip-selector.scss"],"sourcesContent":["// @flow\nimport CreditAmount from 'component/common/credit-amount';\nimport I18nMessage from 'component/i18nMessage';\nimport React from 'react';\n\ntype Props = { balance: number, inline?: boolean };\n\nfunction WalletSpendableBalanceHelp(props: Props) {\n  const { balance, inline } = props;\n\n  const getMessage = (text: string) => (\n    <I18nMessage tokens={{ balance: <CreditAmount amount={balance} precision={4} /> }}>{text}</I18nMessage>\n  );\n\n  return !balance ? null : inline ? (\n    <span className=\"help--spendable\">{getMessage('%balance% available.')}</span>\n  ) : (\n    <div className=\"help\">{getMessage('Your immediately spendable balance is %balance%.')}</div>\n  );\n}\n\nexport default WalletSpendableBalanceHelp;\n","import { connect } from 'react-redux';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport WalletSpendableBalanceHelp from './view';\n\nconst select = (state) => ({ balance: selectBalance(state) });\n\nexport default connect(select)(WalletSpendableBalanceHelp);\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_wallet-tip-selector.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./_wallet-tip-selector.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","// @flow\nimport 'scss/component/_wallet-tip-selector.scss';\nimport { FormField } from 'component/common/form';\nimport { MINIMUM_PUBLISH_BID } from 'constants/claim';\nimport { useIsMobile } from 'effects/use-screensize';\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport Button from 'component/button';\nimport classnames from 'classnames';\nimport React from 'react';\nimport usePersistedState from 'effects/use-persisted-state';\nimport WalletSpendableBalanceHelp from 'component/walletSpendableBalanceHelp';\n\nconst DEFAULT_TIP_AMOUNTS = [1, 5, 25, 100];\nconst TAB_FIAT = 'TabFiat';\nconst TAB_LBC = 'TabLBC';\n\ntype Props = {\n  uri: string,\n  activeTab: string,\n  amount: number,\n  balance: number,\n  claim: StreamClaim,\n  convertedAmount?: number,\n  customTipAmount?: number,\n  exchangeRate?: any,\n  fiatConversion?: boolean,\n  tipError: string,\n  uri: string,\n  canReceiveFiatTips: ?boolean,\n  onChange: (number) => void,\n  setConvertedAmount?: (number) => void,\n  setDisableSubmitButton: (boolean) => void,\n  setTipError: (any) => void,\n  preferredCurrency: string,\n  doTipAccountCheckForUri: (uri: string) => void,\n};\n\nfunction WalletTipAmountSelector(props: Props) {\n  const {\n    uri,\n    activeTab,\n    amount,\n    balance,\n    claim,\n    convertedAmount,\n    customTipAmount,\n    exchangeRate,\n    fiatConversion,\n    tipError,\n    canReceiveFiatTips,\n    onChange,\n    setConvertedAmount,\n    setDisableSubmitButton,\n    setTipError,\n    preferredCurrency,\n    doTipAccountCheckForUri,\n  } = props;\n\n  const isMobile = useIsMobile();\n  const [useCustomTip, setUseCustomTip] = usePersistedState('comment-support:useCustomTip', true);\n\n  const convertToTwoDecimalsOrMore = (number: number, decimals: number = 2) =>\n    Number((Math.round(number * 10 ** decimals) / 10 ** decimals).toFixed(decimals));\n\n  const tipAmountsToDisplay =\n    customTipAmount && fiatConversion && activeTab === TAB_FIAT\n      ? [customTipAmount]\n      : customTipAmount && exchangeRate\n      ? [convertToTwoDecimalsOrMore(customTipAmount / exchangeRate)]\n      : DEFAULT_TIP_AMOUNTS;\n\n  // if it's fiat but there's no card saved OR the creator can't receive fiat tips\n  const shouldDisableFiatSelectors = activeTab === TAB_FIAT && !canReceiveFiatTips;\n\n  /**\n   * whether tip amount selection/review functionality should be disabled\n   * @param [amount] LBC amount (optional)\n   * @returns {boolean}\n   */\n  function shouldDisableAmountSelector(amount: number) {\n    // if it's LBC but the balance isn't enough, or fiat conditions met\n    // $FlowFixMe\n    return (\n      ((amount > balance || balance === 0) && activeTab !== TAB_FIAT) ||\n      shouldDisableFiatSelectors ||\n      (customTipAmount && fiatConversion && activeTab !== TAB_FIAT && exchangeRate\n        ? convertToTwoDecimalsOrMore(amount * exchangeRate) < customTipAmount\n        : customTipAmount && amount < customTipAmount)\n    );\n  }\n\n  // parse number as float and sets it in the parent component\n  function handleCustomPriceChange(amount: number) {\n    const tipAmountValue = parseFloat(amount);\n    onChange(tipAmountValue);\n    if (fiatConversion && exchangeRate && setConvertedAmount && convertedAmount !== tipAmountValue * exchangeRate) {\n      setConvertedAmount(tipAmountValue * exchangeRate);\n    }\n  }\n\n  React.useEffect(() => {\n    if (setDisableSubmitButton) setDisableSubmitButton(shouldDisableFiatSelectors);\n  }, [setDisableSubmitButton, shouldDisableFiatSelectors]);\n\n  React.useEffect(() => {\n    if (setConvertedAmount && exchangeRate && (!convertedAmount || convertedAmount !== amount * exchangeRate)) {\n      setConvertedAmount(amount * exchangeRate);\n    }\n  }, [amount, convertedAmount, exchangeRate, setConvertedAmount]);\n\n  React.useEffect(() => {\n    if (canReceiveFiatTips === undefined) {\n      doTipAccountCheckForUri(uri);\n    }\n  }, [canReceiveFiatTips, doTipAccountCheckForUri, uri]);\n\n  React.useEffect(() => {\n    let regexp;\n\n    if (amount === 0) {\n      setTipError(__('Amount cannot be zero.'));\n    } else if (!amount || typeof amount !== 'number') {\n      setTipError(__('Amount must be a number.'));\n    } else {\n      // if it's not fiat, aka it's boost or lbc tip\n      if (activeTab !== TAB_FIAT) {\n        regexp = RegExp(/^(\\d*([.]\\d{0,8})?)$/);\n        const validTipInput = regexp.test(String(amount));\n\n        if (!validTipInput) {\n          setTipError(__('Amount must have no more than 8 decimal places'));\n        } else if (amount === balance) {\n          setTipError(__('Please decrease the amount to account for transaction fees'));\n        } else if (amount > balance || balance === 0) {\n          setTipError(__('Not enough Credits'));\n        } else if (amount < MINIMUM_PUBLISH_BID) {\n          setTipError(__('Amount must be higher'));\n        } else if (\n          convertedAmount &&\n          exchangeRate &&\n          customTipAmount &&\n          amount < convertToTwoDecimalsOrMore(customTipAmount / exchangeRate)\n        ) {\n          regexp = RegExp(/^(\\d*([.]\\d{0,2})?)$/);\n          const validCustomTipInput = regexp.test(String(amount));\n\n          if (validCustomTipInput) {\n            setTipError(\n              __('Insufficient amount (%input_amount% Credits = %converted_amount% USD).', {\n                input_amount: amount,\n                converted_amount: convertToTwoDecimalsOrMore(convertedAmount, 4),\n              })\n            );\n          } else {\n            setTipError(__('Amount must have no more than 2 decimal places'));\n          }\n        } else {\n          setTipError(false);\n        }\n        //  if tip fiat tab\n      } else {\n        regexp = RegExp(/^(\\d*([.]\\d{0,2})?)$/);\n        const validTipInput = regexp.test(String(amount));\n\n        if (!validTipInput) {\n          setTipError(__('Amount must have no more than 2 decimal places'));\n        } else if (amount < 1) {\n          setTipError(__('Amount must be at least one dollar'));\n        } else if (amount > 1000) {\n          setTipError(__('Amount cannot be over 1000 dollars'));\n        } else if (customTipAmount && amount < customTipAmount) {\n          setTipError(\n            __('Amount is lower than price of $%price_amount%', {\n              price_amount: convertToTwoDecimalsOrMore(customTipAmount),\n            })\n          );\n        } else {\n          setTipError(false);\n        }\n      }\n    }\n  }, [activeTab, amount, balance, convertedAmount, customTipAmount, exchangeRate, setTipError]);\n\n  if (!claim) return null;\n\n  const getHelpMessage = (helpMessage: any, customClassName) => (\n    <div className={classnames('help', customClassName)}>{helpMessage}</div>\n  );\n\n  let fiatIconToUse = ICONS.FINANCE;\n  if (preferredCurrency === 'EUR') fiatIconToUse = ICONS.EURO;\n\n  function openExternal(uri) {\n    if (!window.odysee.build.googlePlay) {\n      window.odysee.functions.history.push(uri);\n    } else {\n      window.odysee.functions.initBrowser(uri, 'external');\n    }\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        {tipAmountsToDisplay &&\n          tipAmountsToDisplay.map((defaultAmount) => (\n            <Button\n              key={defaultAmount}\n              disabled={shouldDisableAmountSelector(defaultAmount)}\n              button=\"alt\"\n              className={classnames('button-toggle button-toggle--expandformobile', {\n                'button-toggle--active':\n                  convertToTwoDecimalsOrMore(defaultAmount) === convertToTwoDecimalsOrMore(amount) && !useCustomTip,\n                'button-toggle--disabled': amount > balance,\n              })}\n              label={defaultAmount}\n              icon={activeTab === TAB_LBC ? ICONS.LBC : fiatIconToUse}\n              onClick={() => {\n                handleCustomPriceChange(defaultAmount);\n                setUseCustomTip(false);\n              }}\n            />\n          ))}\n\n        <Button\n          button=\"alt\"\n          disabled={shouldDisableFiatSelectors}\n          className={classnames('button-toggle button-toggle--expandformobile', {\n            'button-toggle--active': useCustomTip,\n          })}\n          icon={activeTab === TAB_LBC ? ICONS.LBC : fiatIconToUse}\n          label={__('Custom')}\n          onClick={() => setUseCustomTip(true)}\n        />\n        {activeTab === TAB_LBC && DEFAULT_TIP_AMOUNTS.some((val) => val > balance) && (\n          <Button\n            button=\"secondary\"\n            className=\"button-toggle-group-action\"\n            icon={ICONS.BUY}\n            title={__('Buy or swap more LBRY Credits')}\n            onClick={() => openExternal(`/$/${PAGES.BUY}`)}\n          />\n        )}\n      </div>\n\n      {customTipAmount &&\n        fiatConversion &&\n        activeTab !== TAB_FIAT &&\n        getHelpMessage(\n          __('This support is priced in $USD.') +\n            (convertedAmount\n              ? ' ' +\n                __('The current exchange rate for the submitted LBC amount is ~ $%exchange_amount%.', {\n                  exchange_amount: convertToTwoDecimalsOrMore(convertedAmount),\n                })\n              : '')\n        )}\n\n      {/* custom number input form */}\n      {useCustomTip && (\n        <div className=\"walletTipSelector__input\">\n          <FormField\n            autoFocus={!isMobile}\n            name=\"tip-input\"\n            id=\"tip-input\"\n            disabled={!customTipAmount && shouldDisableAmountSelector(0)}\n            error={tipError}\n            min=\"0\"\n            step=\"any\"\n            type=\"number\"\n            placeholder=\"1.23\"\n            value={amount}\n            onChange={(event) => handleCustomPriceChange(event.target.value)}\n          />\n        </div>\n      )}\n\n      {/* lbc tab */}\n      {activeTab === TAB_LBC && <WalletSpendableBalanceHelp />}\n\n      {/* help message */}\n      {activeTab === TAB_FIAT &&\n        (!canReceiveFiatTips\n          ? getHelpMessage(__('Only creators that verify cash accounts can receive tips.'))\n          : getHelpMessage(__('Send a tip directly from your attached card.')))}\n    </>\n  );\n}\n\nexport default WalletTipAmountSelector;\n","import { connect } from 'react-redux';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport { selectClaimForUri } from 'redux/selectors/claims';\nimport WalletTipAmountSelector from './view';\nimport { selectPreferredCurrency } from 'redux/selectors/settings';\nimport { selectCanReceiveFiatTipsForUri } from 'redux/selectors/stripe';\nimport { doTipAccountCheckForUri } from 'redux/actions/stripe';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  return {\n    balance: selectBalance(state),\n    claim: selectClaimForUri(state, uri),\n    preferredCurrency: selectPreferredCurrency(state),\n    canReceiveFiatTips: selectCanReceiveFiatTipsForUri(state, uri),\n  };\n};\n\nconst perform = {\n  doTipAccountCheckForUri,\n};\n\nexport default connect(select, perform)(WalletTipAmountSelector);\n","// @flow\nimport React from 'react';\n\nimport * as MODALS from 'constants/modal_types';\nimport Button from 'component/button';\nimport Spinner from 'component/spinner';\n\nimport { ModalContext } from 'contexts/modal';\n\ntype Props = {\n  modalState: any,\n  // -- redux --\n  hasSavedCard: ?boolean,\n  isAuthenticated: ?boolean,\n  doOpenModal: (modalId: string, modalProps: {}) => void,\n  doGetCustomerStatus: () => void,\n};\n\n/**\n * HigherOrderComponent to condition a button to become a \"add card\" prompt every time it is needed for a purchase,\n * and also prompts back to the previous modal in case it came from one.\n *\n * @param Component: FunctionalComponentParam\n * @returns {FunctionalComponent}\n */\nconst withCreditCard = (Component: FunctionalComponentParam) => {\n  const CreditCardPrompt = (props: Props) => {\n    // eslint-disable-next-line react/prop-types\n    const { hasSavedCard, isAuthenticated, doOpenModal, doGetCustomerStatus, modalState, ...componentProps } = props;\n\n    const fetchPending = isAuthenticated && hasSavedCard === undefined;\n    const modal = React.useContext(ModalContext)?.modal;\n\n    React.useEffect(() => {\n      if (fetchPending) {\n        doGetCustomerStatus();\n      }\n    }, [doGetCustomerStatus, fetchPending]);\n\n    if (!hasSavedCard) {\n      const handleOpenAddCardModal = () =>\n        doOpenModal(MODALS.ADD_CARD, {\n          ...(modal ? { previousModal: modal.id, previousProps: { ...modal.modalProps, ...modalState } } : {}),\n        });\n\n      return (\n        <Button\n          disabled={fetchPending}\n          requiresAuth\n          button=\"primary\"\n          label={fetchPending ? <Spinner type=\"small\" /> : __('Add a Credit Card')}\n          onClick={handleOpenAddCardModal}\n        />\n      );\n    }\n\n    return <Component {...componentProps} />;\n  };\n\n  return CreditCardPrompt;\n};\n\nexport default withCreditCard;\n","import { connect } from 'react-redux';\n\nimport { selectHasSavedCard } from 'redux/selectors/stripe';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\n\nimport { doOpenModal } from 'redux/actions/app';\nimport { doGetCustomerStatus } from 'redux/actions/stripe';\n\nimport withCreditCard from './view';\n\nconst select = (state, props) => ({\n  hasSavedCard: selectHasSavedCard(state),\n  isAuthenticated: selectUserVerifiedEmail(state),\n});\n\nconst perform = {\n  doOpenModal,\n  doGetCustomerStatus,\n};\n\nexport default (Component) => connect(select, perform)(withCreditCard(Component));\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"[dir] .walletTipSelector__input{margin:var(--spacing-s) 0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./../ui/scss/component/_wallet-tip-selector.scss\"],\"names\":[],\"mappings\":\"AAAA,gCACE,yBAAA\",\"sourcesContent\":[\".walletTipSelector__input {\\n  margin: var(--spacing-s) 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["props","balance","inline","getMessage","text","React","I18nMessage","tokens","CreditAmount","amount","precision","className","connect","state","selectBalance","WalletSpendableBalanceHelp","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","DEFAULT_TIP_AMOUNTS","TAB_FIAT","TAB_LBC","uri","activeTab","claim","convertedAmount","customTipAmount","exchangeRate","fiatConversion","tipError","canReceiveFiatTips","onChange","setConvertedAmount","setDisableSubmitButton","setTipError","preferredCurrency","doTipAccountCheckForUri","isMobile","useIsMobile","_usePersistedState2","_slicedToArray","usePersistedState","useCustomTip","setUseCustomTip","convertToTwoDecimalsOrMore","number","decimals","arguments","length","undefined","Number","Math","round","pow","toFixed","tipAmountsToDisplay","shouldDisableFiatSelectors","shouldDisableAmountSelector","handleCustomPriceChange","tipAmountValue","parseFloat","__","RegExp","test","String","MINIMUM_PUBLISH_BID","validCustomTipInput","input_amount","converted_amount","_validTipInput","price_amount","getHelpMessage","helpMessage","customClassName","classnames","fiatIconToUse","ICONS","map","defaultAmount","Button","key","disabled","button","label","icon","onClick","some","val","title","window","odysee","build","googlePlay","functions","initBrowser","history","push","openExternal","concat","PAGES","exchange_amount","FormField","autoFocus","name","id","error","min","step","type","placeholder","value","event","target","perform","selectClaimForUri","selectPreferredCurrency","selectCanReceiveFiatTipsForUri","WalletTipAmountSelector","Component","_React$useContext","hasSavedCard","isAuthenticated","doOpenModal","doGetCustomerStatus","modalState","componentProps","_objectWithoutProperties","_excluded","fetchPending","modal","ModalContext","requiresAuth","Spinner","MODALS","_objectSpread","previousModal","previousProps","modalProps","select","selectHasSavedCard","selectUserVerifiedEmail","withCreditCard","___CSS_LOADER_EXPORT___","module"],"sourceRoot":""}