{"version":3,"file":"comments-b6f9108a47f675813887.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/commentCreate/internal/sticker-contents.jsx","webpack://odysee.com/../ui/component/commentCreate/internal/tip-contents.jsx","webpack://odysee.com/../ui/component/selectChannel/view.jsx","webpack://odysee.com/../ui/component/selectChannel/index.js","webpack://odysee.com/../ui/component/commentCreate/internal/extra-contents.jsx","webpack://odysee.com/../ui/component/commentCreate/view.jsx","webpack://odysee.com/../ui/component/commentCreate/index.js","webpack://odysee.com/../ui/component/commentsList/internal/commentListMenu/view.jsx","webpack://odysee.com/../ui/component/commentsList/internal/commentListMenu/index.js","webpack://odysee.com/../ui/component/commentsList/view.jsx","webpack://odysee.com/../ui/component/commentsList/index.js","webpack://odysee.com/../ui/component/common/error-bubble.jsx"],"sourcesContent":["// @flow\nimport Button from 'component/button';\nimport React from 'react';\nimport FilePrice from 'component/filePrice';\nimport OptimizedImage from 'component/optimizedImage';\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport UriIndicator from 'component/uriIndicator';\n\ntype Props = {\n  activeChannelUrl: string,\n  src: string,\n  price: number,\n  exchangeRate?: number,\n};\n\nexport const StickerReviewBox = (props: Props) => {\n  const { activeChannelUrl, src, price, exchangeRate } = props;\n\n  return (\n    <div className=\"comment-create__sticker-preview\">\n      <div className=\"comment-create__sticker-preview__info\">\n        <ChannelThumbnail xsmall uri={activeChannelUrl} />\n        <UriIndicator uri={activeChannelUrl} link showAtSign />\n      </div>\n\n      <div className=\"comment-create__sticker-preview__image\">\n        <OptimizedImage src={src} waitLoad loading=\"lazy\" />\n      </div>\n\n      {Boolean(price && exchangeRate) && (\n        <FilePrice\n          customPrices={{\n            priceFiat: price,\n            priceLBC: Number(exchangeRate) !== 0 ? price / Number(exchangeRate) : 0,\n          }}\n          isFiat\n        />\n      )}\n    </div>\n  );\n};\n\ntype StickerButtonProps = {\n  isReviewingStickerComment: boolean,\n  disabled?: boolean,\n};\n\nexport const StickerActionButton = (stickerButtonProps: StickerButtonProps) => {\n  const { isReviewingStickerComment, disabled, ...buttonProps } = stickerButtonProps;\n\n  return (\n    <Button\n      disabled={disabled}\n      {...buttonProps}\n      title={__('Stickers')}\n      label={isReviewingStickerComment ? __('Change') : undefined}\n    />\n  );\n};\n","// @flow\nimport Button from 'component/button';\nimport React from 'react';\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport UriIndicator from 'component/uriIndicator';\nimport CreditAmount from 'component/common/credit-amount';\n\nconst TAB_FIAT = 'TabFiat';\nconst TAB_LBC = 'TabLBC';\n\ntype Props = {\n  activeChannelUrl: string,\n  tipAmount: number,\n  activeTab: string,\n  message: string,\n  isReviewingStickerComment?: boolean,\n  stickerPreviewComponent?: any,\n};\n\nexport const TipReviewBox = (props: Props) => {\n  const { activeChannelUrl, tipAmount, activeTab, message, isReviewingStickerComment, stickerPreviewComponent } = props;\n\n  return (\n    <div className=\"comment-create__support-comment-preview\">\n      <CreditAmount\n        amount={tipAmount}\n        className=\"comment-create__support-comment-preview__amount\"\n        isFiat={activeTab === TAB_FIAT}\n        size={activeTab === TAB_LBC ? 18 : 2}\n      />\n\n      {isReviewingStickerComment ? (\n        stickerPreviewComponent\n      ) : (\n        <>\n          <ChannelThumbnail xsmall uri={activeChannelUrl} />\n\n          <div>\n            <UriIndicator uri={activeChannelUrl} link showAtSign />\n            <div>{message}</div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\ntype TipButtonProps = {\n  name: string,\n  tab: string,\n  activeTab: string,\n  tipSelectorOpen: boolean,\n  onClick: (tab: string) => void,\n};\n\nexport const TipActionButton = (tipButtonProps: TipButtonProps) => {\n  const { name, tab, activeTab, tipSelectorOpen, onClick, ...buttonProps } = tipButtonProps;\n\n  return (\n    (!tipSelectorOpen || activeTab !== tab) && (\n      <Button {...buttonProps} title={name} label={tipSelectorOpen ? name : undefined} onClick={() => onClick(tab)} />\n    )\n  );\n};\n","// @flow\nimport React from 'react';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  tiny?: boolean,\n  label?: string,\n  injected?: ?Array<string>,\n  // --- Redux ---\n  myChannelClaims: ?Array<ChannelClaim>,\n  fetchingChannels: boolean,\n  activeChannelClaimId: ?string,\n  setActiveChannel: (claimId: ?string, override?: boolean) => void,\n};\n\nfunction SelectChannel(props: Props) {\n  const {\n    fetchingChannels,\n    myChannelClaims = [],\n    label,\n    injected = [],\n    tiny,\n    activeChannelClaimId,\n    setActiveChannel,\n  } = props;\n\n  function handleChannelChange(event: SyntheticInputEvent<*>) {\n    const channelClaimId = event.target.value;\n    setActiveChannel(channelClaimId);\n  }\n\n  return (\n    <>\n      <FormField\n        name=\"channel\"\n        label={!tiny && (label || __('Channel'))}\n        labelOnLeft={tiny}\n        type={tiny ? 'select-tiny' : 'select'}\n        onChange={handleChannelChange}\n        value={activeChannelClaimId}\n        disabled={fetchingChannels}\n      >\n        {fetchingChannels ? (\n          <option>{__('Loading your channels...')}</option>\n        ) : (\n          <>\n            {myChannelClaims &&\n              myChannelClaims.map(({ name, claim_id: claimId }) => (\n                <option key={claimId} value={claimId}>\n                  {name}\n                </option>\n              ))}\n            {injected &&\n              injected.map((item) => (\n                <option key={item} value={item}>\n                  {item}\n                </option>\n              ))}\n          </>\n        )}\n      </FormField>\n    </>\n  );\n}\n\nexport default SelectChannel;\n","import { connect } from 'react-redux';\nimport SelectChannel from './view';\nimport { selectMyChannelClaims, selectFetchingMyChannels } from 'redux/selectors/claims';\nimport { selectActiveChannelClaimId } from 'redux/selectors/app';\nimport { doSetActiveChannel } from 'redux/actions/app';\n\nconst select = (state) => ({\n  myChannelClaims: selectMyChannelClaims(state),\n  fetchingChannels: selectFetchingMyChannels(state),\n  activeChannelClaimId: selectActiveChannelClaimId(state),\n});\n\nconst perform = {\n  setActiveChannel: doSetActiveChannel,\n};\n\nexport default connect(select, perform)(SelectChannel);\n","// @flow\nimport React from 'react';\nimport * as ICONS from 'constants/icons';\nimport CreditAmount from 'component/common/credit-amount';\nimport I18nMessage from 'component/i18nMessage';\nimport Icon from 'component/common/icon';\nimport SelectChannel from 'component/selectChannel';\n\ntype SelectorProps = {\n  isReply: boolean,\n  isLivestream: boolean,\n};\n\nexport const FormChannelSelector = (selectorProps: SelectorProps) => {\n  const { isReply, isLivestream } = selectorProps;\n\n  return (\n    <div className=\"comment-create__label-wrapper\">\n      <span className=\"comment-create__label\">\n        {(isReply ? __('Replying as') : isLivestream ? __('Chat as') : __('Comment as')) + ' '}\n      </span>\n\n      <SelectChannel tiny />\n    </div>\n  );\n};\n\ntype HelpTextProps = {\n  deletedComment: boolean,\n  minAmount: number,\n  minSuper: number,\n  minTip: number,\n};\n\nexport const HelpText = (helpTextProps: HelpTextProps) => {\n  const { deletedComment, minAmount, minSuper, minTip } = helpTextProps;\n\n  return (\n    <>\n      {deletedComment && <div className=\"error__text\">{__('This comment has been deleted.')}</div>}\n\n      {!!minAmount && (\n        <div className=\"help--notice comment-create__min-amount-notice\">\n          <I18nMessage tokens={{ lbc: <CreditAmount noFormat amount={minAmount} /> }}>\n            {minTip ? 'Comment min: %lbc%' : minSuper ? 'HyperChat min: %lbc%' : ''}\n          </I18nMessage>\n\n          <Icon\n            customTooltipText={\n              minTip\n                ? __('This channel requires a minimum tip for each comment.')\n                : minSuper\n                ? __('This channel requires a minimum amount for HyperChats to be visible.')\n                : ''\n            }\n            className=\"icon--help\"\n            icon={ICONS.HELP}\n            tooltip\n            size={16}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","// @flow\nimport { buildValidSticker } from 'util/comments';\nimport { FF_MAX_CHARS_IN_COMMENT, FF_MAX_CHARS_IN_LIVESTREAM_COMMENT } from 'constants/form-field';\nimport { FormField, Form } from 'component/common/form';\nimport { Lbryio } from 'lbryinc';\nimport { SIMPLE_SITE } from 'config';\nimport { useHistory } from 'react-router';\nimport * as ICONS from 'constants/icons';\nimport * as KEYCODES from 'constants/keycodes';\nimport * as PAGES from 'constants/pages';\nimport * as MODALS from 'constants/modal_types';\nimport * as STRIPE from 'constants/stripe';\nimport Button from 'component/button';\nimport classnames from 'classnames';\nimport CommentSelectors, { SELECTOR_TABS } from './internal/comment-selectors';\nimport React from 'react';\nimport type { ElementRef } from 'react';\nimport usePersistedState from 'effects/use-persisted-state';\nimport WalletTipAmountSelector from 'component/walletTipAmountSelector';\nimport { useIsMobile } from 'effects/use-screensize';\nimport { StickerReviewBox, StickerActionButton } from './internal/sticker-contents';\nimport { TipReviewBox, TipActionButton } from './internal/tip-contents';\nimport { FormChannelSelector, HelpText } from './internal/extra-contents';\nimport ErrorBubble from 'component/common/error-bubble';\nimport { AppContext } from 'component/app/view';\nimport withCreditCard from 'hocs/withCreditCard';\nimport { getStripeEnvironment } from 'util/stripe';\nimport './style.lazy.scss';\n\nconst stripeEnvironment = getStripeEnvironment();\n\nconst TAB_FIAT = 'TabFiat';\nconst TAB_LBC = 'TabLBC';\n\ntype TipParams = { tipAmount: number, tipChannelName: string, channelClaimId: string };\ntype UserParams = { activeChannelName: ?string, activeChannelId: ?string };\n\ntype Props = {\n  activeChannelClaimId?: string,\n  activeChannelName?: string,\n  activeChannelUrl?: string,\n  bottom: boolean,\n  hasChannels: boolean,\n  claimId?: string,\n  channelClaimId?: string,\n  tipChannelName?: string,\n  claimIsMine: boolean,\n  embed?: boolean,\n  isFetchingChannels: boolean,\n  isNested: boolean,\n  isReply: boolean,\n  isLivestream?: boolean,\n  parentId: string,\n  channelSettings: ?PerChannelSettings,\n  shouldFetchComment: boolean,\n  supportDisabled: boolean,\n  uri: string,\n  disableInput?: boolean,\n  canReceiveFiatTips: ?boolean,\n  onSlimInputClose?: () => void,\n  setQuickReply: (any) => void,\n  onCancelReplying?: () => void,\n  onDoneReplying?: () => void,\n  // redux\n  doCommentCreate: (uri: string, isLivestream?: boolean, params: CommentSubmitParams) => Promise<any>,\n  doFetchCreatorSettings: (channelId: string) => Promise<any>,\n  doToast: ({ message: string }) => void,\n  doCommentById: (commentId: string, toastIfNotFound: boolean) => Promise<any>,\n  doSendCashTip: (\n    TipParams,\n    anonymous: boolean,\n    UserParams,\n    claimId: string,\n    stripe: ?string,\n    preferredCurrency: string,\n    (any) => void\n  ) => string,\n  doSendTip: (\n    params: {},\n    isSupport: boolean,\n    successCb: (any) => void,\n    errorCb: (any) => void,\n    boolean,\n    string\n  ) => void,\n  doOpenModal: (id: string, any) => void,\n  preferredCurrency: string,\n  myChannelClaimIds: ?Array<string>,\n  myCommentedChannelIds: ?Array<string>,\n  doFetchMyCommentedChannels: (claimId: ?string) => void,\n  doTipAccountCheckForUri: (uri: string) => void,\n  textInjection?: string,\n  chatCommentsRestrictedToChannelMembers: boolean,\n  isAChannelMember: boolean,\n  commentSettingDisabled: ?boolean,\n  userHasMembersOnlyChatPerk: boolean,\n  isLivestreamChatMembersOnly: boolean,\n  areCommentsMembersOnly: boolean,\n  hasPremiumPlus: boolean,\n};\n\nexport function CommentCreate(props: Props) {\n  const {\n    // chatCommentsRestrictedToChannelMembers,\n    activeChannelClaimId,\n    activeChannelName,\n    activeChannelUrl,\n    bottom,\n    canReceiveFiatTips,\n    channelClaimId,\n    claimId,\n    claimIsMine,\n    disableInput,\n    doCommentById,\n    doCommentCreate,\n    doFetchCreatorSettings,\n    doFetchMyCommentedChannels,\n    doOpenModal,\n    doSendCashTip,\n    doSendTip,\n    doTipAccountCheckForUri,\n    doToast,\n    embed,\n    hasChannels,\n    isFetchingChannels,\n    isLivestream,\n    isNested,\n    isReply,\n    myChannelClaimIds,\n    myCommentedChannelIds,\n    onCancelReplying,\n    onDoneReplying,\n    onSlimInputClose,\n    parentId,\n    preferredCurrency,\n    setQuickReply,\n    channelSettings,\n    shouldFetchComment,\n    supportDisabled,\n    textInjection,\n    tipChannelName,\n    uri,\n    commentSettingDisabled,\n    userHasMembersOnlyChatPerk,\n    isLivestreamChatMembersOnly,\n    areCommentsMembersOnly,\n    hasPremiumPlus,\n  } = props;\n\n  const fileUri = React.useContext(AppContext)?.uri;\n\n  const isMobile = useIsMobile();\n\n  const formFieldRef: ElementRef<any> = React.useRef();\n  const buttonRef: ElementRef<any> = React.useRef();\n  const slimInputButtonRef: ElementRef<any> = React.useRef();\n\n  const {\n    push,\n    location: { pathname },\n  } = useHistory();\n\n  const [isSubmitting, setSubmitting] = React.useState(false);\n  const [commentFailure, setCommentFailure] = React.useState(false);\n  const [successTip, setSuccessTip] = React.useState({ txid: undefined, tipAmount: undefined });\n  const [tipSelectorOpen, setTipSelector] = React.useState();\n  const [isReviewingSupportComment, setReviewingSupportComment] = React.useState();\n  const [isReviewingStickerComment, setReviewingStickerComment] = React.useState();\n  const [selectedSticker, setSelectedSticker] = React.useState();\n  const [tipAmount, setTipAmount] = React.useState(1);\n  const [convertedAmount, setConvertedAmount] = React.useState();\n  const [commentValue, setCommentValue] = React.useState('');\n  const [advancedEditor, setAdvancedEditor] = usePersistedState('comment-editor-mode', false);\n  const [activeTab, setActiveTab] = React.useState();\n  const [tipError, setTipError] = React.useState();\n  const [deletedComment, setDeletedComment] = React.useState(false);\n  const [showSelectors, setShowSelectors] = React.useState({ tab: undefined, open: false });\n  const [disableReviewButton, setDisableReviewButton] = React.useState();\n  const [exchangeRate, setExchangeRate] = React.useState();\n  const [tipModalOpen, setTipModalOpen] = React.useState(undefined);\n\n  const charCount = commentValue ? commentValue.length : 0;\n  const hasNothingToSumbit = !commentValue.length && !selectedSticker;\n  const disabled =\n    commentSettingDisabled ||\n    deletedComment ||\n    isSubmitting ||\n    isFetchingChannels ||\n    hasNothingToSumbit ||\n    disableInput;\n  const minSuper = (channelSettings && channelSettings.min_tip_amount_super_chat) || 0;\n  const minTip = (channelSettings && channelSettings.min_tip_amount_comment) || 0;\n  const minAmount = minTip || minSuper || 0;\n  const minAmountMet = activeTab !== TAB_LBC || minAmount === 0 || tipAmount >= minAmount;\n  const stickerPrice = selectedSticker && selectedSticker.price;\n  const tipSelectorError = tipError || disableReviewButton;\n  const fiatIcon = STRIPE.CURRENCY[preferredCurrency].icon;\n\n  const minAmountRef = React.useRef(minAmount);\n  minAmountRef.current = minAmount;\n\n  const addEmoteToComment = React.useCallback((emote: string) => {\n    setCommentValue((prev) => prev + (prev && prev.charAt(prev.length - 1) !== ' ' ? ` ${emote} ` : `${emote} `));\n  }, []);\n\n  const handleSelectSticker = React.useCallback(\n    (sticker: any) => {\n      // $FlowFixMe\n      setSelectedSticker(sticker);\n      setReviewingStickerComment(true);\n      setTipAmount(sticker.price || 0);\n      setShowSelectors((prev) => ({ tab: prev.tab || undefined, open: false }));\n\n      // added this here since selecting a sticker can cause scroll issues\n      if (onSlimInputClose) onSlimInputClose();\n\n      if (sticker.price && sticker.price > 0) {\n        setActiveTab(canReceiveFiatTips ? TAB_FIAT : TAB_LBC);\n        setTipSelector(true);\n      }\n    },\n    [canReceiveFiatTips, onSlimInputClose]\n  );\n\n  const commentSelectorsProps = React.useMemo(() => {\n    return {\n      claimIsMine,\n      addEmoteToComment,\n      handleSelectSticker,\n      isOpen: showSelectors.open,\n      openTab: showSelectors.tab || undefined,\n    };\n  }, [claimIsMine, addEmoteToComment, handleSelectSticker, showSelectors.open, showSelectors.tab]);\n\n  const submitButtonProps = { button: 'primary', type: 'submit', requiresAuth: true };\n  const actionButtonProps = { button: 'alt' };\n  const tipButtonProps = {\n    ...actionButtonProps,\n    disabled: !commentValue.length && !selectedSticker,\n    tipSelectorOpen,\n    activeTab,\n    onClick: handleSelectTipComment,\n  };\n  const cancelButtonProps = { button: 'link', label: __('Cancel') };\n  const stickerReviewProps = {\n    activeChannelUrl,\n    src: selectedSticker ? selectedSticker.url : '',\n    price: selectedSticker ? selectedSticker.price : 0,\n    exchangeRate,\n  };\n\n  const commentSelectorElem = React.useMemo(\n    () => (\n      <CommentSelectors\n        {...commentSelectorsProps}\n        closeSelector={() => setShowSelectors((prev) => ({ tab: prev.tab || undefined, open: false }))}\n      />\n    ),\n    [commentSelectorsProps]\n  );\n\n  // **************************************************************************\n  // Functions\n  // **************************************************************************\n\n  function getMembersOnlyCreatorSetting() {\n    return (\n      channelClaimId &&\n      doFetchCreatorSettings(channelClaimId)\n        .then((cs: SettingsResponse) => (isLivestream ? cs.livestream_chat_members_only : cs.comments_members_only))\n        .catch(() => undefined)\n    );\n  }\n\n  function handleJoinMembersOnlyChat() {\n    return doOpenModal(MODALS.JOIN_MEMBERSHIP, { uri, fileUri });\n  }\n\n  function handleSelectTipComment(tab: string) {\n    setActiveTab(tab);\n\n    if (isMobile) {\n      setTipModalOpen(true);\n      doOpenModal(MODALS.SEND_TIP, {\n        uri,\n        isTipOnly: true,\n        hasSelectedTab: tab,\n        customText: __('Preview Comment Tip'),\n        setAmount: (amount) => {\n          setTipAmount(amount);\n          setReviewingSupportComment(true);\n        },\n      });\n    } else {\n      setTipSelector(true);\n    }\n\n    if (onSlimInputClose) onSlimInputClose();\n  }\n\n  function handleStickerComment() {\n    if (selectedSticker) {\n      setReviewingStickerComment(false);\n      setSelectedSticker(undefined);\n      setShowSelectors({ tab: SELECTOR_TABS.STICKER, open: true });\n    } else {\n      setShowSelectors({ tab: showSelectors.tab || undefined, open: !showSelectors.open });\n    }\n\n    setTipSelector(false);\n  }\n\n  function handleCancelSticker() {\n    setReviewingStickerComment(false);\n    setSelectedSticker(null);\n    setShowSelectors({ tab: undefined, open: false });\n    if (onSlimInputClose) onSlimInputClose();\n  }\n\n  function handleImageUpload() {\n    doOpenModal(MODALS.IMAGE_UPLOAD, {\n      onUpdate: (imageUrl, imageTitle) => updateComment(imageUrl, imageTitle),\n      assetName: __('Image'),\n    });\n  }\n\n  function updateComment(imageUrl, imageTitle) {\n    if (!imageTitle) imageTitle = '';\n    let markdown = `![${imageTitle}](${imageUrl})`;\n    setCommentValue((prev) => prev + (prev && prev.charAt(prev.length - 1) !== ' ' ? ` ${markdown} ` : `${markdown} `));\n  }\n\n  function handleCancelSupport() {\n    if (!isReviewingSupportComment) setTipSelector(false);\n    setReviewingSupportComment(false);\n\n    if (stickerPrice) {\n      setReviewingStickerComment(false);\n      setShowSelectors({ tab: showSelectors.tab || undefined, open: false });\n      setSelectedSticker(null);\n    }\n\n    if (onSlimInputClose) onSlimInputClose();\n  }\n\n  async function handleSupportComment() {\n    if (!activeChannelClaimId) return;\n\n    if (!channelClaimId) {\n      doToast({\n        message: __('Unable to verify channel settings. Try refreshing the page.'),\n        isError: true,\n      });\n      return;\n    }\n\n    // do another creator settings fetch here to make sure that on submit, the setting did not change\n    const commentsAreMembersOnly = await getMembersOnlyCreatorSetting();\n    if (commentsAreMembersOnly === undefined) {\n      doToast({\n        message: __('Unable to send the comment.'),\n        subMessage: __('Try again later, or refresh the page.'),\n        isError: true,\n      });\n      return;\n    }\n\n    if (notAuthedToLiveChat && commentsAreMembersOnly) return handleJoinMembersOnlyChat();\n\n    // if comment post didn't work, but tip was already made, try again to create comment\n    if (commentFailure && tipAmount === successTip.tipAmount) {\n      handleCreateComment(successTip.txid);\n      return;\n    } else {\n      setSuccessTip({ txid: undefined, tipAmount: undefined });\n    }\n\n    // !! Beware of stale closure when editing the then-block, including doSubmitTip().\n    doFetchCreatorSettings(channelClaimId)\n      .then(() => {\n        const lockedMinAmount = minAmount; // value during closure.\n        const currentMinAmount = minAmountRef.current; // value from latest doFetchCreatorSettings().\n\n        if (lockedMinAmount !== currentMinAmount) {\n          doToast({\n            message: __('The creator just updated the minimum setting. Please revise or double-check your tip amount.'),\n            isError: true,\n          });\n          setReviewingSupportComment(false);\n          return;\n        }\n\n        doSubmitTip();\n      })\n      .catch(() => {\n        doToast({\n          message: __('Unable to send the comment.'),\n          subMessage: __('Try again later, or refresh the page.'),\n          isError: true,\n        });\n      });\n  }\n\n  function doSubmitTip() {\n    if (!claimId || !channelClaimId || !activeChannelName || !activeChannelClaimId || isSubmitting || !tipChannelName) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    const params = { amount: tipAmount, claim_id: claimId, channel_id: activeChannelClaimId };\n\n    if (activeTab === TAB_LBC) {\n      // call doSendTip and then run the callback from the response\n      // second parameter is callback\n      doSendTip(\n        params,\n        false,\n        (response) => {\n          const { txid } = response;\n          // todo: why the setTimeout?\n          setTimeout(() => {\n            handleCreateComment(txid);\n          }, 1500);\n\n          doToast({\n            message: __('Tip successfully sent.'),\n            subMessage: __(\"I'm sure they appreciate it!\"),\n            linkText: `${tipAmount} LBC ⇒ ${tipChannelName}`, // force show decimal places\n            linkTarget: `/${PAGES.WALLET}?tab=fiat-payment-history`,\n          });\n\n          setSuccessTip({ txid, tipAmount });\n        },\n        () => {\n          // reset the frontend so people can send a new comment\n          setSubmitting(false);\n        },\n        false,\n        'comment'\n      );\n    } else {\n      const tipParams: TipParams = { tipAmount: Math.round(tipAmount * 100) / 100, tipChannelName, channelClaimId };\n      const userParams: UserParams = { activeChannelName, activeChannelId: activeChannelClaimId };\n\n      doSendCashTip(\n        tipParams,\n        false,\n        userParams,\n        claimId,\n        stripeEnvironment,\n        preferredCurrency,\n        (customerTipResponse) => {\n          const { payment_intent_id } = customerTipResponse;\n\n          handleCreateComment(null, payment_intent_id, stripeEnvironment);\n\n          setCommentValue('');\n          setReviewingSupportComment(false);\n          setTipSelector(false);\n          setCommentFailure(false);\n          setSubmitting(false);\n        }\n      );\n    }\n  }\n\n  /**\n   *\n   * @param {string} [txid] Optional transaction id generated by\n   * @param {string} [payment_intent_id] Optional payment_intent_id from Stripe payment\n   * @param {string} [environment] Optional environment for Stripe (test|live)\n   * @param {boolean} [is_protected] Whether are not the content has a protected chat\n   */\n  async function handleCreateComment(txid, payment_intent_id, environment) {\n    if (isSubmitting || disableInput || !claimId) return;\n\n    // do another creator settings fetch here to make sure that on submit, the setting did not change\n    const commentsAreMembersOnly = await getMembersOnlyCreatorSetting();\n    if (commentsAreMembersOnly === undefined) {\n      doToast({\n        message: __('Unable to send the comment.'),\n        subMessage: __('Try again later, or refresh the page.'),\n        isError: true,\n      });\n      return;\n    }\n\n    if (notAuthedToLiveChat && commentsAreMembersOnly) return handleJoinMembersOnlyChat();\n\n    setSubmitting(true);\n\n    const stickerValue = selectedSticker && buildValidSticker(selectedSticker.name);\n\n    doCommentCreate(uri, isLivestream, {\n      comment: stickerValue || commentValue,\n      claim_id: claimId,\n      parent_id: parentId,\n      txid,\n      payment_intent_id,\n      environment,\n      sticker: !!stickerValue,\n      is_protected: Boolean(isLivestreamChatMembersOnly || areCommentsMembersOnly),\n    })\n      .then((res) => {\n        setSubmitting(false);\n        if (setQuickReply) setQuickReply(res);\n\n        if (res && res.signature) {\n          if (!stickerValue) setCommentValue('');\n          setReviewingSupportComment(false);\n          setTipSelector(false);\n          setCommentFailure(false);\n\n          if (onDoneReplying) {\n            onDoneReplying();\n          }\n        }\n      })\n      .catch(() => {\n        setSubmitting(false);\n        setCommentFailure(true);\n\n        if (channelClaimId) {\n          // It could be that the creator added a minimum tip setting.\n          // Manually update for now until a websocket msg is available.\n          doFetchCreatorSettings(channelClaimId).catch(() => {});\n        }\n      });\n  }\n\n  function handleSubmitSticker() {\n    if (isReviewingSupportComment) {\n      handleSupportComment();\n    } else {\n      handleCreateComment();\n    }\n\n    setSelectedSticker(null);\n    setReviewingStickerComment(false);\n    setShowSelectors({ tab: showSelectors.tab || undefined, open: false });\n    setTipSelector(false);\n  }\n\n  // **************************************************************************\n  // Effects\n  // **************************************************************************\n\n  // Fetch channel constraints if not already.\n  React.useEffect(() => {\n    if (!channelSettings && channelClaimId) {\n      doFetchCreatorSettings(channelClaimId).catch(() => {});\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // change sticker selection\n  React.useEffect(() => {\n    if (isMobile && showSelectors.tab && slimInputButtonRef && slimInputButtonRef.current) {\n      slimInputButtonRef.current.click();\n    }\n  }, [isMobile, showSelectors.tab]);\n\n  // Notifications: Fetch top-level comments to identify if it has been deleted and can reply to it\n  React.useEffect(() => {\n    if (shouldFetchComment && doCommentById) {\n      doCommentById(parentId, false).then((result) => {\n        setDeletedComment(String(result).includes('Error'));\n      });\n    }\n  }, [doCommentById, shouldFetchComment, parentId]);\n\n  // Stickers: Get LBC-USD exchange rate if hasn't yet and selected a paid sticker\n  React.useEffect(() => {\n    if (stickerPrice && !exchangeRate) Lbryio.getExchangeRates().then(({ LBC_USD }) => setExchangeRate(LBC_USD));\n  }, [exchangeRate, stickerPrice]);\n\n  React.useEffect(() => {\n    if (canReceiveFiatTips === undefined) {\n      doTipAccountCheckForUri(uri);\n    }\n  }, [canReceiveFiatTips, doTipAccountCheckForUri, uri]);\n\n  // Handle keyboard shortcut comment creation\n  React.useEffect(() => {\n    function altEnterListener(e: SyntheticKeyboardEvent<*>) {\n      const inputRef = formFieldRef && formFieldRef.current && formFieldRef.current.input;\n\n      if (inputRef && inputRef.current === document.activeElement) {\n        // $FlowFixMe\n        const isTyping = Boolean(e.target.attributes['typing-term']);\n\n        if (((isLivestream && !isTyping) || e.ctrlKey || e.metaKey) && e.keyCode === KEYCODES.ENTER) {\n          e.preventDefault();\n          buttonRef.current.click();\n        }\n\n        if (isLivestream && isTyping && e.keyCode === KEYCODES.ENTER) {\n          inputRef.current.removeAttribute('typing-term');\n        }\n      }\n    }\n\n    window.addEventListener('keydown', altEnterListener);\n\n    // removes the listener so it doesn't cause problems elsewhere in the app\n    return () => {\n      window.removeEventListener('keydown', altEnterListener);\n    };\n  }, [isLivestream]);\n\n  // Determine my channels that have commented\n  React.useEffect(() => {\n    if (myCommentedChannelIds === undefined && claimId && myChannelClaimIds) {\n      doFetchMyCommentedChannels(claimId);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [claimId, myCommentedChannelIds, myChannelClaimIds]);\n\n  React.useEffect(() => {\n    if (textInjection) {\n      setCommentValue(\n        commentValue === ''\n          ? commentValue + textInjection + ' '\n          : commentValue.substring(commentValue.length - 1) === ' '\n          ? commentValue + textInjection + ' '\n          : commentValue + ' ' + textInjection + ' '\n      );\n      // $FlowFixMe\n      return formFieldRef?.current?.input?.current?.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [textInjection]);\n\n  const notAuthedToLiveChat = Boolean(\n    (isLivestream ? isLivestreamChatMembersOnly : areCommentsMembersOnly) && !userHasMembersOnlyChatPerk && !claimIsMine\n  );\n\n  let commentLabelText = 'Say something about this...';\n  if (notAuthedToLiveChat) {\n    commentLabelText = 'The creator has made this chat members-only';\n  }\n\n  // **************************************************************************\n  // Render\n  // **************************************************************************\n\n  if (!isFetchingChannels && !hasChannels) {\n    return (\n      <div\n        role=\"button\"\n        className=\"comment-create__auth\"\n        onClick={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (embed) {\n            window.open(`https://odysee.com/$/${PAGES.AUTH}?redirect=/$/${PAGES.LIVESTREAM}`);\n            return;\n          }\n\n          const pathPlusRedirect = `/$/${PAGES.CHANNEL_NEW}?redirect=${pathname}`;\n          if (isLivestream) {\n            window.open(pathPlusRedirect);\n          } else {\n            push(pathPlusRedirect);\n          }\n        }}\n      >\n        <FormField\n          type=\"textarea\"\n          name=\"comment__signup-prompt\"\n          placeholder={__(commentLabelText)}\n          disabled={isMobile}\n        />\n\n        {!isMobile && (\n          <div className=\"section__actions--no-margin\">\n            <Button disabled button=\"primary\" label={__('Send --[button to submit something]--')} requiresAuth />\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {notAuthedToLiveChat && (\n        <ErrorBubble\n          title={\n            isLivestream ? __('This chat is in members-only mode') : __('This comment section is in members-only mode')\n          }\n          className=\"comment-restriction\"\n          subtitle={__(\n            'To participate, consider buying a membership with the members-only chat perk from this creator!'\n          )}\n          action={<Button button=\"primary\" label={__('Join')} onClick={handleJoinMembersOnlyChat} />}\n        />\n      )}\n\n      <Form\n        onSubmit={() => {}}\n        className={classnames('comment-create', {\n          'comment-create--reply': isReply,\n          'comment-create--nestedReply': isNested,\n          'comment-create--bottom': bottom,\n        })}\n      >\n        {isReviewingSupportComment ? (\n          activeChannelUrl &&\n          activeTab && (\n            <TipReviewBox\n              activeChannelUrl={activeChannelUrl}\n              tipAmount={tipAmount}\n              activeTab={activeTab}\n              message={commentValue}\n              isReviewingStickerComment={isReviewingStickerComment}\n              stickerPreviewComponent={selectedSticker && <StickerReviewBox {...stickerReviewProps} />}\n            />\n          )\n        ) : selectedSticker ? (\n          activeChannelUrl && <StickerReviewBox {...stickerReviewProps} />\n        ) : (\n          <>\n            <FormField\n              autoFocus={isReply}\n              charCount={charCount}\n              className={classnames('', {\n                create__reply: isReply,\n                create__comment: !isReply,\n                disabled_chat_comments: notAuthedToLiveChat,\n              })}\n              disabled={isFetchingChannels || disableInput}\n              isLivestream={isLivestream}\n              label={<FormChannelSelector isReply={Boolean(isReply)} isLivestream={Boolean(isLivestream)} />}\n              noticeLabel={\n                isMobile && (\n                  <HelpText deletedComment={deletedComment} minAmount={minAmount} minSuper={minSuper} minTip={minTip} />\n                )\n              }\n              name={isReply ? 'create__reply' : 'create__comment'}\n              onChange={(e) => setCommentValue(SIMPLE_SITE || !advancedEditor || isReply ? e.target.value : e)}\n              handleTip={(isLBC) => handleSelectTipComment(isLBC ? TAB_LBC : TAB_FIAT)}\n              handleSubmit={handleCreateComment}\n              slimInput={isMobile && uri} // \"uri\": make sure it's on a file page\n              slimInputButtonRef={slimInputButtonRef}\n              onSlimInputClose={onSlimInputClose}\n              commentSelectorsProps={commentSelectorsProps}\n              submitButtonRef={buttonRef}\n              setShowSelectors={setShowSelectors}\n              showSelectors={showSelectors}\n              tipModalOpen={tipModalOpen}\n              placeholder={__(commentLabelText)}\n              quickActionHandler={!SIMPLE_SITE ? () => setAdvancedEditor(!advancedEditor) : undefined}\n              quickActionLabel={\n                !SIMPLE_SITE && (isReply ? undefined : advancedEditor ? __('Simple Editor') : __('Advanced Editor'))\n              }\n              ref={formFieldRef}\n              textAreaMaxLength={isLivestream ? FF_MAX_CHARS_IN_LIVESTREAM_COMMENT : FF_MAX_CHARS_IN_COMMENT}\n              type={!SIMPLE_SITE && advancedEditor && !isReply ? 'markdown' : 'textarea'}\n              value={commentValue}\n              uri={uri}\n            />\n            {!isMobile && commentSelectorElem}\n          </>\n        )}\n\n        {(!isMobile || isReviewingStickerComment) &&\n          (tipSelectorOpen || (isReviewingStickerComment && stickerPrice)) && (\n            <WalletTipAmountSelector\n              activeTab={activeTab}\n              amount={tipAmount}\n              uri={uri}\n              convertedAmount={convertedAmount}\n              customTipAmount={stickerPrice}\n              exchangeRate={exchangeRate}\n              fiatConversion={selectedSticker && !!selectedSticker.price}\n              onChange={(amount) => setTipAmount(amount)}\n              setConvertedAmount={setConvertedAmount}\n              setDisableSubmitButton={setDisableReviewButton}\n              setTipError={setTipError}\n              tipError={tipError}\n            />\n          )}\n\n        {(!isMobile || isReviewingStickerComment || isReviewingSupportComment) && (\n          <div className=\"section__actions\">\n            {/* Submit Button */}\n            {isReviewingSupportComment ? (\n              activeTab === TAB_LBC ? (\n                <Button\n                  {...submitButtonProps}\n                  autoFocus\n                  disabled={disabled || !minAmountMet}\n                  label={\n                    isSubmitting\n                      ? __('Sending...')\n                      : commentFailure && tipAmount === successTip.tipAmount\n                      ? __('Re-submit')\n                      : __('Send')\n                  }\n                  onClick={handleSupportComment}\n                />\n              ) : (\n                <SubmitCashTipButton\n                  {...submitButtonProps}\n                  autoFocus\n                  disabled={disabled || !minAmountMet}\n                  label={\n                    isSubmitting\n                      ? __('Sending...')\n                      : commentFailure && tipAmount === successTip.tipAmount\n                      ? __('Re-submit')\n                      : __('Send')\n                  }\n                  onClick={handleSupportComment}\n                />\n              )\n            ) : tipSelectorOpen ? (\n              <Button\n                {...submitButtonProps}\n                disabled={disabled || tipSelectorError || !minAmountMet}\n                icon={activeTab === TAB_LBC ? ICONS.LBC : fiatIcon}\n                label={__('Review')}\n                onClick={() => {\n                  setReviewingSupportComment(true);\n                  if (onSlimInputClose) onSlimInputClose();\n                }}\n              />\n            ) : (\n              (!isMobile || selectedSticker) &&\n              (!minTip || claimIsMine) && (\n                <Button\n                  {...submitButtonProps}\n                  ref={buttonRef}\n                  disabled={disabled}\n                  label={\n                    isLivestream\n                      ? isSubmitting\n                        ? __('Sending...')\n                        : __('Send --[button to send chat message]--')\n                      : isReply\n                      ? isSubmitting\n                        ? __('Replying...')\n                        : __('Reply')\n                      : isSubmitting\n                      ? __('Commenting...')\n                      : __('Comment --[button to submit something]--')\n                  }\n                  onClick={() =>\n                    selectedSticker ? handleSubmitSticker() : handleCreateComment(undefined, undefined, undefined)\n                  }\n                />\n              )\n            )}\n\n            {(!isMobile || isReviewingStickerComment) && (\n              <>\n                <StickerActionButton\n                  {...actionButtonProps}\n                  isReviewingStickerComment={isReviewingStickerComment}\n                  icon={ICONS.STICKER}\n                  onClick={handleStickerComment}\n                  onChange={() => {}}\n                  disabled={notAuthedToLiveChat}\n                />\n\n                {hasPremiumPlus && !isLivestream && (\n                  <Button\n                    button=\"alt\"\n                    icon={ICONS.IMAGE}\n                    title={__('Upload Image')}\n                    onClick={handleImageUpload}\n                    onChange={() => {}}\n                  />\n                )}\n\n                {!supportDisabled && !claimIsMine && (\n                  <>\n                    <TipActionButton {...tipButtonProps} name={__('Credits')} icon={ICONS.LBC} tab={TAB_LBC} />\n\n                    {window.cordova && !window?.odysee?.build?.googlePlay && stripeEnvironment && (\n                      <TipActionButton {...tipButtonProps} name={__('Cash')} icon={fiatIcon} tab={TAB_FIAT} />\n                    )}\n                  </>\n                )}\n              </>\n            )}\n\n            {tipSelectorOpen || isReviewingSupportComment ? (\n              <Button {...cancelButtonProps} disabled={isSubmitting} onClick={handleCancelSupport} />\n            ) : isReviewingStickerComment ? (\n              <Button {...cancelButtonProps} onClick={handleCancelSticker} />\n            ) : (\n              onCancelReplying && <Button {...cancelButtonProps} onClick={onCancelReplying} />\n            )}\n\n            <HelpText deletedComment={deletedComment} minAmount={minAmount} minSuper={minSuper} minTip={minTip} />\n          </div>\n        )}\n        <div className=\"chat-resize\">\n          <div />\n          <div />\n          <div />\n        </div>\n      </Form>\n    </>\n  );\n}\n\nconst SubmitCashTipButton = withCreditCard((props: any) => <Button {...props} />);\n","import { connect } from 'react-redux';\nimport {\n  selectClaimForUri,\n  selectClaimIsMine,\n  selectHasChannels,\n  selectFetchingMyChannels,\n  makeSelectTagInClaimOrChannelForUri,\n  selectMyChannelClaimIds,\n  selectedRestrictedCommentsChatTagForUri,\n} from 'redux/selectors/claims';\nimport { CommentCreate } from './view';\nimport { DISABLE_SUPPORT_TAG } from 'constants/tags';\nimport {\n  doCommentCreate,\n  doFetchCreatorSettings,\n  doCommentById,\n  doFetchMyCommentedChannels,\n} from 'redux/actions/comments';\nimport { doSendTip, doSendCashTip } from 'redux/actions/wallet';\nimport { doToast } from 'redux/actions/notifications';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport {\n  selectMyCommentedChannelIdsForId,\n  selectCommentsDisabledSettingForChannelId,\n  selectLivestreamChatMembersOnlyForChannelId,\n  selectMembersOnlyCommentsForChannelId,\n} from 'redux/selectors/comments';\nimport { getChannelIdFromClaim } from 'util/claim';\nimport { doOpenModal } from 'redux/actions/app';\nimport { selectPreferredCurrency } from 'redux/selectors/settings';\nimport { selectCanReceiveFiatTipsForUri } from 'redux/selectors/stripe';\nimport { doTipAccountCheckForUri } from 'redux/actions/stripe';\nimport {\n  selectUserHasOdyseePremiumPlus,\n  selectUserIsMemberOfMembersOnlyChatForCreatorId,\n} from 'redux/selectors/memberships';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const claim = selectClaimForUri(state, uri);\n  const { claim_id: claimId, name, signing_channel: channel } = claim || {};\n\n  // setup variables for tip API\n  const channelClaimId = getChannelIdFromClaim(claim);\n  const tipChannelName = channel ? channel.name : name;\n\n  const activeChannelClaim = selectActiveChannelClaim(state);\n  const {\n    claim_id: activeChannelClaimId,\n    name: activeChannelName,\n    canonical_url: activeChannelUrl,\n  } = activeChannelClaim || {};\n\n  return {\n    activeChannelClaimId,\n    activeChannelName,\n    activeChannelUrl,\n    canReceiveFiatTips: selectCanReceiveFiatTipsForUri(state, uri),\n    channelClaimId,\n    chatCommentsRestrictedToChannelMembers: Boolean(selectedRestrictedCommentsChatTagForUri(state, uri)),\n    claimId,\n    claimIsMine: selectClaimIsMine(state, claim),\n    hasChannels: selectHasChannels(state),\n    isFetchingChannels: selectFetchingMyChannels(state),\n    myChannelClaimIds: selectMyChannelClaimIds(state),\n    myCommentedChannelIds: selectMyCommentedChannelIdsForId(state, claim?.claim_id),\n    preferredCurrency: selectPreferredCurrency(state),\n    channelSettings: state.comments.settingsByChannelId[channelClaimId],\n    supportDisabled: makeSelectTagInClaimOrChannelForUri(uri, DISABLE_SUPPORT_TAG)(state),\n    tipChannelName,\n    userHasMembersOnlyChatPerk: selectUserIsMemberOfMembersOnlyChatForCreatorId(state, channelClaimId),\n    commentSettingDisabled: selectCommentsDisabledSettingForChannelId(state, channelClaimId),\n    isLivestreamChatMembersOnly: Boolean(selectLivestreamChatMembersOnlyForChannelId(state, channelClaimId)),\n    areCommentsMembersOnly: Boolean(selectMembersOnlyCommentsForChannelId(state, channelClaimId)),\n    hasPremiumPlus: selectUserHasOdyseePremiumPlus(state),\n  };\n};\n\nconst perform = {\n  doCommentCreate,\n  doFetchCreatorSettings,\n  doFetchMyCommentedChannels,\n  doToast,\n  doCommentById,\n  doSendCashTip,\n  doSendTip,\n  doOpenModal,\n  doTipAccountCheckForUri,\n};\n\nexport default connect(select, perform)(CommentCreate);\n","// @flow\n\nimport { Menu, MenuButton, MenuList, MenuItem } from '@reach/menu-button';\n\nimport * as ICONS from 'constants/icons';\n\nimport Icon from 'component/common/icon';\nimport React from 'react';\n\ntype Props = {\n  // -- redux --\n  claimId: ?string,\n  channelId: ?string,\n  channelName: ?string,\n  claimIsMine: boolean,\n  channelHasMembershipTiers: boolean,\n  areCommentsMembersOnly?: boolean,\n  creatorMembershipsFetched: boolean,\n  doToggleMembersOnlyCommentsSettingForClaimId: (claimId: ClaimId) => Promise<any>,\n  doMembershipList: ({ channel_name: string, channel_id: string }) => Promise<CreatorMemberships>,\n  doToast: ({ message: string }) => void,\n};\n\nconst CommentListMenu = (props: Props) => {\n  const {\n    // -- redux --\n    claimId,\n    channelId,\n    channelName,\n    claimIsMine,\n    channelHasMembershipTiers,\n    areCommentsMembersOnly,\n    creatorMembershipsFetched,\n    doToggleMembersOnlyCommentsSettingForClaimId,\n    doMembershipList,\n    doToast,\n  } = props;\n\n  function updateMembersOnlyComments() {\n    if (claimId) {\n      doToggleMembersOnlyCommentsSettingForClaimId(claimId).then(() =>\n        doToast({\n          message: __(\n            areCommentsMembersOnly\n              ? 'Members-only comments are now disabled.'\n              : 'Members-only comments are now enabled.'\n          ),\n        })\n      );\n    }\n  }\n\n  React.useEffect(() => {\n    if (!creatorMembershipsFetched && channelName && channelId) {\n      doMembershipList({ channel_name: channelName, channel_id: channelId });\n    }\n  }, [channelId, channelName, creatorMembershipsFetched, doMembershipList]);\n\n  if (channelHasMembershipTiers && claimIsMine) {\n    return (\n      <Menu>\n        <MenuButton className=\"button button--alt menu__button\">\n          <Icon size={18} icon={ICONS.SETTINGS} />\n        </MenuButton>\n\n        <MenuList className=\"menu__list\">\n          <MenuItem className=\"comment__menu-option\" onSelect={() => updateMembersOnlyComments()}>\n            <span className=\"menu__link\">\n              <Icon aria-hidden icon={ICONS.MEMBERSHIP} />\n              {__(areCommentsMembersOnly ? 'Disable members-only comments' : 'Enable members-only comments')}\n            </span>\n          </MenuItem>\n        </MenuList>\n      </Menu>\n    );\n  }\n\n  return null;\n};\n\nexport default CommentListMenu;\n","import { connect } from 'react-redux';\nimport { selectClaimForUri, selectClaimIsMineForUri } from 'redux/selectors/claims';\nimport { selectMembersOnlyCommentsForChannelId } from 'redux/selectors/comments';\nimport {\n  selectChannelHasMembershipTiersForId,\n  selectCreatorMembershipsFetchedByUri,\n} from 'redux/selectors/memberships';\nimport { getChannelFromClaim } from 'util/claim';\n\nimport { doToggleMembersOnlyCommentsSettingForClaimId } from 'redux/actions/comments';\nimport { doMembershipList } from 'redux/actions/memberships';\nimport { doToast } from 'redux/actions/notifications';\n\nimport CommentListMenu from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const claim = selectClaimForUri(state, uri);\n  const claimId = claim && claim.claim_id;\n  const { claim_id: channelId, name: channelName } = getChannelFromClaim(claim) || {};\n\n  return {\n    claimId,\n    channelId,\n    channelName,\n    claimIsMine: selectClaimIsMineForUri(state, uri),\n    channelHasMembershipTiers: channelId && selectChannelHasMembershipTiersForId(state, channelId),\n    areCommentsMembersOnly: channelId && selectMembersOnlyCommentsForChannelId(state, channelId),\n    creatorMembershipsFetched: selectCreatorMembershipsFetchedByUri(state, uri),\n  };\n};\n\nconst perform = {\n  doToggleMembersOnlyCommentsSettingForClaimId,\n  doMembershipList,\n  doToast,\n};\n\nexport default connect(select, perform)(CommentListMenu);\n","// @flow\nimport {\n  COMMENT_PAGE_SIZE_TOP_LEVEL,\n  SORT_BY,\n  LINKED_COMMENT_QUERY_PARAM,\n  THREAD_COMMENT_QUERY_PARAM,\n} from 'constants/comment';\nimport { ENABLE_COMMENT_REACTIONS } from 'config';\nimport { useIsMobile, useIsMediumScreen } from 'effects/use-screensize';\nimport { getCommentsListTitle } from 'util/comments';\nimport * as ICONS from 'constants/icons';\nimport * as REACTION_TYPES from 'constants/reactions';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport classnames from 'classnames';\nimport CommentView from 'component/comment';\nimport debounce from 'util/debounce';\nimport Empty from 'component/common/empty';\nimport React, { useEffect } from 'react';\nimport Spinner from 'component/spinner';\nimport usePersistedState from 'effects/use-persisted-state';\nimport { useHistory } from 'react-router-dom';\nimport CommentListMenu from './internal/commentListMenu';\nimport { lazyImport } from 'util/lazyImport';\n\nconst DEBOUNCE_SCROLL_HANDLER_MS = 200;\nconst CommentCreate = lazyImport(() => import('component/commentCreate' /* webpackChunkName: \"comments\" */));\n\nfunction scaleToDevicePixelRatio(value) {\n  const devicePixelRatio = window.devicePixelRatio || 1.0;\n  if (devicePixelRatio < 1.0) {\n    return Math.ceil(value / devicePixelRatio);\n  }\n  return Math.ceil(value * devicePixelRatio);\n}\n\n// ****************************************************************************\n// ****************************************************************************\n\nexport type Props = {|\n  uri: string,\n  linkedCommentId?: string,\n  commentsAreExpanded?: boolean,\n  threadCommentId: ?string,\n  notInDrawer?: boolean,\n|};\n\ntype StateProps = {|\n  topLevelComments: Array<Comment>,\n  pinnedComments: Array<Comment>,\n  allCommentIds: Array<CommentId>,\n  threadComment: ?Comment, // comment object for 'threadCommentId'\n  totalComments: number,\n  topLevelTotalPages: number,\n  threadCommentAncestors: ?Array<string>,\n  linkedCommentAncestors: ?Array<string>,\n  myReactsByCommentId: ?{ [string]: Array<string> }, // \"CommentId:MyChannelId\" -> reaction array (note the ID concatenation)\n  othersReactsById: ?{ [string]: { [REACTION_TYPES.LIKE | REACTION_TYPES.DISLIKE]: number } },\n  commentsEnabledSetting: ?boolean,\n  claimId: ?string,\n  channelId: ?string,\n  claimIsMine: ?boolean,\n  activeChannelId: ?string,\n  isFetchingComments: boolean,\n  isFetchingTopLevelComments: boolean,\n  isFetchingReacts: boolean,\n  fetchingChannels: boolean,\n  chatCommentsRestrictedToChannelMembers: boolean,\n  isAChannelMember: boolean,\n  scheduledState: ClaimScheduledState,\n|};\n\ntype DispatchProps = {|\n  fetchTopLevelComments: (\n    uri: string,\n    parentId: ?string,\n    page: number,\n    pageSize: number,\n    sortBy: number,\n    isLivestream?: boolean\n  ) => void,\n  fetchComment: (CommentId) => void,\n  fetchReacts: (Array<CommentId>) => Promise<any>,\n  resetComments: (ClaimId) => void,\n  doFetchOdyseeMembershipForChannelIds: (claimIds: ClaimIds) => void,\n  doFetchChannelMembershipsForChannelIds: (channelId: string, claimIds: Array<string>) => void,\n  doPopOutInlinePlayer: (param: { source: string }) => void,\n|};\n\n// ****************************************************************************\n// CommentList\n// ****************************************************************************\n\nexport default function CommentList(props: Props & StateProps & DispatchProps) {\n  const {\n    allCommentIds,\n    uri,\n    pinnedComments,\n    topLevelComments,\n    topLevelTotalPages,\n    claimId,\n    channelId,\n    claimIsMine,\n    isFetchingComments,\n    isFetchingTopLevelComments,\n    isFetchingReacts,\n    linkedCommentId,\n    totalComments,\n    fetchingChannels,\n    myReactsByCommentId,\n    othersReactsById,\n    activeChannelId,\n    commentsEnabledSetting,\n    commentsAreExpanded,\n    threadCommentId,\n    threadComment,\n    notInDrawer,\n    threadCommentAncestors,\n    linkedCommentAncestors,\n    fetchTopLevelComments,\n    fetchComment,\n    fetchReacts,\n    resetComments,\n    doFetchOdyseeMembershipForChannelIds,\n    doPopOutInlinePlayer,\n    doFetchChannelMembershipsForChannelIds,\n    chatCommentsRestrictedToChannelMembers,\n    isAChannelMember,\n    scheduledState,\n  } = props;\n\n  const threadRedirect = React.useRef(false);\n\n  const {\n    push,\n    location: { pathname, search },\n  } = useHistory();\n\n  const isMobile = useIsMobile();\n  const isMediumScreen = useIsMediumScreen();\n\n  const currentFetchedPage = Math.ceil(topLevelComments.length / COMMENT_PAGE_SIZE_TOP_LEVEL);\n  const spinnerRef = React.useRef();\n  const commentListRef = React.useRef();\n  const DEFAULT_SORT = ENABLE_COMMENT_REACTIONS ? SORT_BY.POPULARITY : SORT_BY.NEWEST;\n  const [sort, setSort] = usePersistedState('comment-sort-by', DEFAULT_SORT);\n  const [page, setPage] = React.useState(currentFetchedPage > 0 ? currentFetchedPage : 1);\n  const [didInitialPageFetch, setInitialPageFetch] = React.useState(false);\n  const hasDefaultExpansion = commentsAreExpanded || !isMediumScreen || isMobile;\n  const [expandedComments, setExpandedComments] = React.useState(hasDefaultExpansion);\n  const [debouncedUri, setDebouncedUri] = React.useState();\n\n  const totalFetchedComments = allCommentIds ? allCommentIds.length : 0;\n  const moreBelow = page < topLevelTotalPages;\n  const title = getCommentsListTitle(totalComments);\n  const threadDepthLevel = isMobile ? 3 : 10;\n  let threadCommentParent;\n  if (threadCommentAncestors) {\n    threadCommentAncestors.some((ancestor, index) => {\n      if (index >= threadDepthLevel - 1) return true;\n\n      threadCommentParent = ancestor;\n    });\n  }\n  const threadTopLevelComment = threadCommentAncestors && threadCommentAncestors[threadCommentAncestors.length - 1];\n\n  // Display comments immediately if not fetching reactions\n  // If not, wait to show comments until reactions are fetched\n  const [readyToDisplayComments, setReadyToDisplayComments] = React.useState(\n    Boolean(othersReactsById) || !ENABLE_COMMENT_REACTIONS\n  );\n\n  // get commenter claim ids for checking premium status\n  const commenterClaimIds = React.useMemo(() => {\n    return topLevelComments.map((comment) => comment.channel_id);\n  }, [topLevelComments]);\n\n  React.useEffect(() => {\n    if (commenterClaimIds.length > 0 && channelId) {\n      doFetchOdyseeMembershipForChannelIds(commenterClaimIds);\n      doFetchChannelMembershipsForChannelIds(channelId, commenterClaimIds);\n    }\n    // todo: investigate why topLevelComments triggers a re-render even though the comments are the same\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- keep commenterClaimIds.length instead\n  }, [\n    channelId,\n    commenterClaimIds.length,\n    doFetchChannelMembershipsForChannelIds,\n    doFetchOdyseeMembershipForChannelIds,\n  ]);\n\n  const handleReset = React.useCallback(() => {\n    if (claimId) resetComments(claimId);\n    setPage(1);\n  }, [claimId, resetComments]);\n\n  function refreshComments() {\n    // Invalidate existing comments\n    setPage(0);\n    doPopOutInlinePlayer({ source: 'comment' });\n  }\n\n  function changeSort(newSort) {\n    if (sort !== newSort) {\n      setSort(newSort);\n      refreshComments();\n      doPopOutInlinePlayer({ source: 'comment' });\n    }\n  }\n\n  // If a linked comment is deep within a thread, redirect to it's own thread page\n  // based on the set depthLevel (mobile/desktop)\n  React.useEffect(() => {\n    if (\n      !threadCommentId &&\n      linkedCommentId &&\n      linkedCommentAncestors &&\n      linkedCommentAncestors.length > threadDepthLevel - 1 &&\n      !threadRedirect.current\n    ) {\n      const urlParams = new URLSearchParams(search);\n      urlParams.set(THREAD_COMMENT_QUERY_PARAM, linkedCommentId);\n\n      push({ pathname, search: urlParams.toString() });\n      // to do it only once\n      threadRedirect.current = true;\n    }\n  }, [linkedCommentAncestors, linkedCommentId, pathname, push, search, threadCommentId, threadDepthLevel]);\n\n  // TODO: still have to change this to use the new check\n  const notAuthedToChat = chatCommentsRestrictedToChannelMembers && !isAChannelMember && !claimIsMine;\n\n  // set new page on scroll debounce and avoid setting the page after navigated uris\n  useEffect(() => {\n    if (debouncedUri && debouncedUri === uri) {\n      setPage(page + 1);\n      setDebouncedUri(undefined);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Only for comparing uri with debounced uri\n  }, [debouncedUri, uri]);\n\n  // Force comments reset\n  useEffect(() => {\n    if (page === 0) {\n      handleReset();\n    }\n  }, [handleReset, page]);\n\n  // Set page back to 1 on every claim switch\n  useEffect(() => {\n    return () => setPage(1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [uri]);\n\n  // When navigating to a new claim, the page will be 1 due to the above\n  // and if there was already fetched top level comments, the fetched page will be higher\n  // so set the current page as the fetched page to start fetching new pages from there\n  useEffect(() => {\n    if (page < currentFetchedPage) setPage(currentFetchedPage > 0 ? currentFetchedPage : 1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Only on uri change\n  }, [uri]);\n\n  // Fetch top-level comments\n  useEffect(() => {\n    const isInitialFetch = currentFetchedPage === 0;\n    const isNewPage = page !== 1 && page !== currentFetchedPage;\n    // only one or the other should be true, if both are true it means\n    // it will fetch the wrong page initially. needs Number so it's 0 or 1\n    const hasRightFetchPage = Number(isInitialFetch) ^ Number(isNewPage);\n\n    if (page !== 0 && hasRightFetchPage) {\n      if (page === 1) {\n        if (threadCommentId) {\n          fetchComment(threadCommentId);\n        }\n        if (linkedCommentId) {\n          fetchComment(linkedCommentId);\n        }\n      }\n\n      fetchTopLevelComments(uri, undefined, page, COMMENT_PAGE_SIZE_TOP_LEVEL, sort, false);\n    }\n  }, [currentFetchedPage, fetchComment, fetchTopLevelComments, linkedCommentId, page, sort, threadCommentId, uri]);\n\n  React.useEffect(() => {\n    if (threadCommentId) {\n      refreshComments();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [threadCommentId]);\n\n  // Fetch reacts\n  useEffect(() => {\n    if (totalFetchedComments > 0 && ENABLE_COMMENT_REACTIONS && !fetchingChannels && !isFetchingReacts) {\n      let idsForReactionFetch;\n\n      if (!othersReactsById || !myReactsByCommentId) {\n        idsForReactionFetch = allCommentIds;\n      } else {\n        idsForReactionFetch = allCommentIds.filter((commentId) => {\n          const key = activeChannelId ? `${commentId}:${activeChannelId}` : commentId;\n          return !othersReactsById[key] || (activeChannelId && !myReactsByCommentId[key]);\n        });\n      }\n\n      if (idsForReactionFetch.length !== 0) {\n        fetchReacts(idsForReactionFetch)\n          .then(() => {\n            setReadyToDisplayComments(true);\n          })\n          .catch(() => setReadyToDisplayComments(true));\n      }\n    }\n  }, [\n    activeChannelId,\n    allCommentIds,\n    fetchReacts,\n    fetchingChannels,\n    isFetchingReacts,\n    myReactsByCommentId,\n    othersReactsById,\n    totalFetchedComments,\n  ]);\n\n  // Scroll to linked-comment\n  useEffect(() => {\n    if (linkedCommentId || threadCommentId) {\n      window.pendingLinkedCommentScroll = true;\n    } else {\n      delete window.pendingLinkedCommentScroll;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Infinite scroll\n  useEffect(() => {\n    if (topLevelComments.length === 0) return;\n\n    function shouldFetchNextPage(page, topLevelTotalPages, yPrefetchPx = 1000) {\n      if (!spinnerRef || !spinnerRef.current) return false;\n\n      const rect = spinnerRef.current.getBoundingClientRect(); // $FlowFixMe\n      const windowH = window.innerHeight || document.documentElement.clientHeight; // $FlowFixMe\n      const windowW = window.innerWidth || document.documentElement.clientWidth;\n\n      const isApproachingViewport = yPrefetchPx !== 0 && rect.top < windowH + scaleToDevicePixelRatio(yPrefetchPx);\n\n      const isInViewport =\n        rect.width > 0 &&\n        rect.height > 0 &&\n        rect.bottom >= 0 &&\n        rect.right >= 0 &&\n        rect.top <= windowH &&\n        rect.left <= windowW;\n\n      return (isInViewport || isApproachingViewport) && page < topLevelTotalPages;\n    }\n\n    const handleCommentScroll = debounce(() => {\n      if (shouldFetchNextPage(page, topLevelTotalPages)) {\n        setDebouncedUri(uri);\n        setInitialPageFetch(true);\n      }\n    }, DEBOUNCE_SCROLL_HANDLER_MS);\n\n    if (!didInitialPageFetch) {\n      handleCommentScroll();\n      setInitialPageFetch(true);\n    }\n\n    if (hasDefaultExpansion && !isFetchingComments && readyToDisplayComments && moreBelow) {\n      const commentsInDrawer = Boolean(document.querySelector('.MuiDrawer-root .card--enable-overflow'));\n      const scrollingElement = commentsInDrawer ? document.querySelector('.card--enable-overflow') : window;\n\n      if (scrollingElement) {\n        scrollingElement.addEventListener('scroll', handleCommentScroll);\n\n        return () => scrollingElement.removeEventListener('scroll', handleCommentScroll);\n      }\n    }\n  }, [\n    topLevelComments,\n    hasDefaultExpansion,\n    didInitialPageFetch,\n    isFetchingComments,\n    isMobile,\n    moreBelow,\n    page,\n    readyToDisplayComments,\n    topLevelTotalPages,\n    uri,\n  ]);\n\n  const commentProps = {\n    isTopLevel: true,\n    uri,\n    linkedCommentId,\n    threadCommentId,\n    threadDepthLevel,\n  };\n\n  const actionButtonsProps = {\n    uri,\n    totalComments,\n    sort,\n    changeSort,\n    handleRefresh: refreshComments,\n  };\n\n  if (scheduledState === 'scheduled') {\n    // Not ready yet, so hide it.\n    return null;\n  }\n\n  return (\n    <Card\n      className=\"card--enable-overflow comment__list\"\n      title={(!isMobile || notInDrawer) && title}\n      titleActions={<CommentActionButtons {...actionButtonsProps} />}\n      actions={\n        <>\n          {isMobile && !notInDrawer && <CommentActionButtons {...actionButtonsProps} />}\n\n          <CommentCreate uri={uri} />\n\n          {threadCommentId && threadComment && (\n            <span className=\"comment__actions comment__thread-links\">\n              <ThreadLinkButton\n                label={__('View all comments')}\n                threadCommentParent={threadTopLevelComment || threadCommentId}\n                threadCommentId={threadCommentId}\n                isViewAll\n              />\n\n              {threadCommentParent && (\n                <ThreadLinkButton\n                  label={__('Show parent comments')}\n                  threadCommentParent={threadCommentParent}\n                  threadCommentId={threadCommentId}\n                />\n              )}\n            </span>\n          )}\n\n          {commentsEnabledSetting && !isFetchingComments && !totalComments && !threadCommentId && (\n            <Empty padded text={__('That was pretty deep. What do you think?')} />\n          )}\n\n          <ul\n            ref={commentListRef}\n            className={classnames('comments', {\n              'comments--contracted': isMediumScreen && !expandedComments && totalComments > 1,\n            })}\n          >\n            {readyToDisplayComments && (\n              <>\n                {pinnedComments &&\n                  !threadCommentId &&\n                  pinnedComments.map((c) => (\n                    <CommentView key={c.comment_id} comment={c} disabled={notAuthedToChat} {...commentProps} />\n                  ))}\n\n                {topLevelComments.map((c) => (\n                  <CommentView key={c.comment_id} comment={c} disabled={notAuthedToChat} {...commentProps} />\n                ))}\n              </>\n            )}\n          </ul>\n\n          {!hasDefaultExpansion && (\n            <div className=\"card__bottom-actions card__bottom-actions--comments\">\n              {(!expandedComments || moreBelow) && totalComments > 1 && (\n                <Button\n                  button=\"link\"\n                  title={!expandedComments ? __('Expand') : __('More')}\n                  label={!expandedComments ? __('Expand') : __('More')}\n                  onClick={() => (!expandedComments ? setExpandedComments(true) : setPage(page + 1))}\n                />\n              )}\n              {expandedComments && totalComments > 1 && (\n                <Button\n                  button=\"link\"\n                  title={__('Collapse')}\n                  label={__('Collapse')}\n                  onClick={() => {\n                    setExpandedComments(false);\n                    if (commentListRef.current) {\n                      const ADDITIONAL_OFFSET = 200;\n                      const refTop = commentListRef.current.getBoundingClientRect().top;\n                      window.scrollTo({\n                        top: refTop + window.pageYOffset - ADDITIONAL_OFFSET,\n                        behavior: 'smooth',\n                      });\n                    }\n                  }}\n                />\n              )}\n            </div>\n          )}\n\n          {(threadCommentId\n            ? !readyToDisplayComments\n            : isFetchingTopLevelComments || (hasDefaultExpansion && moreBelow)) && (\n            <div className=\"main--empty\" ref={spinnerRef}>\n              <Spinner type=\"small\" />\n            </div>\n          )}\n        </>\n      }\n    />\n  );\n}\n\ntype ActionButtonsProps = {\n  uri: string,\n  totalComments: number,\n  sort: string,\n  changeSort: (string) => void,\n  handleRefresh: () => void,\n};\n\nconst CommentActionButtons = (actionButtonsProps: ActionButtonsProps) => {\n  const { uri, totalComments, sort, changeSort, handleRefresh } = actionButtonsProps;\n\n  const sortButtonProps = { activeSort: sort, changeSort };\n\n  return (\n    <div className=\"comment__actions\">\n      {totalComments > 1 && ENABLE_COMMENT_REACTIONS && (\n        <span className=\"comment__sort\">\n          <SortButton {...sortButtonProps} label={__('Best')} icon={ICONS.BEST} sortOption={SORT_BY.POPULARITY} />\n          <SortButton\n            {...sortButtonProps}\n            label={__('Controversial')}\n            icon={ICONS.CONTROVERSIAL}\n            sortOption={SORT_BY.CONTROVERSY}\n          />\n          <SortButton {...sortButtonProps} label={__('New')} icon={ICONS.NEW} sortOption={SORT_BY.NEWEST} />\n        </span>\n      )}\n\n      <div className=\"comment__settings\">\n        <Button button=\"alt\" icon={ICONS.REFRESH} title={__('Refresh')} onClick={handleRefresh} />\n        <CommentListMenu uri={uri} />\n      </div>\n    </div>\n  );\n};\n\ntype SortButtonProps = {\n  activeSort: string,\n  sortOption: string,\n  changeSort: (string) => void,\n};\n\nconst SortButton = (sortButtonProps: SortButtonProps) => {\n  const { activeSort, sortOption, changeSort, ...buttonProps } = sortButtonProps;\n\n  return (\n    <Button\n      {...buttonProps}\n      className={classnames(`button-toggle`, { 'button-toggle--active': activeSort === sortOption })}\n      button=\"alt\"\n      iconSize={18}\n      onClick={() => changeSort(sortOption)}\n    />\n  );\n};\n\ntype ThreadLinkProps = {\n  label: string,\n  isViewAll?: boolean,\n  threadCommentParent: string,\n  threadCommentId: string,\n};\n\nconst ThreadLinkButton = (props: ThreadLinkProps) => {\n  const { label, isViewAll, threadCommentParent, threadCommentId } = props;\n\n  const {\n    push,\n    location: { pathname, search },\n  } = useHistory();\n\n  return (\n    <Button\n      button=\"link\"\n      label={label}\n      icon={ICONS.ARROW_LEFT}\n      iconSize={12}\n      onClick={() => {\n        const urlParams = new URLSearchParams(search);\n\n        if (!isViewAll) {\n          urlParams.set(THREAD_COMMENT_QUERY_PARAM, threadCommentParent);\n          // on moving back, link the current thread comment so that it auto-expands into the correct conversation\n          urlParams.set(LINKED_COMMENT_QUERY_PARAM, threadCommentId);\n        } else {\n          urlParams.delete(THREAD_COMMENT_QUERY_PARAM);\n          // links the top-level comment when going back to all comments, for easy locating\n          // in the middle of big comment sections\n          urlParams.set(LINKED_COMMENT_QUERY_PARAM, threadCommentParent);\n        }\n        window.pendingLinkedCommentScroll = true;\n\n        push({ pathname, search: urlParams.toString() });\n      }}\n    />\n  );\n};\n","// @flow\nimport type { Props } from './view';\nimport CommentsList from './view';\nimport { connect } from 'react-redux';\nimport {\n  selectClaimForUri,\n  selectClaimIsMine,\n  selectFetchingMyChannels,\n  selectScheduledStateForUri,\n  selectProtectedContentTagForUri,\n} from 'redux/selectors/claims';\nimport {\n  selectTopLevelCommentsForUri,\n  selectTopLevelTotalPagesForUri,\n  selectIsFetchingComments,\n  selectIsFetchingTopLevelComments,\n  selectIsFetchingReacts,\n  selectTotalCommentsCountForUri,\n  selectOthersReacts,\n  selectMyReacts,\n  selectCommentIdsForUri,\n  selectCommentsEnabledSettingForChannelId,\n  selectPinnedCommentsForUri,\n  selectCommentForCommentId,\n  selectCommentAncestorsForId,\n} from 'redux/selectors/comments';\nimport { doCommentReset, doCommentList, doCommentById, doCommentReactList } from 'redux/actions/comments';\nimport { doPopOutInlinePlayer } from 'redux/actions/content';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport { getChannelIdFromClaim } from 'util/claim';\nimport {\n  doFetchOdyseeMembershipForChannelIds,\n  doFetchChannelMembershipsForChannelIds,\n} from 'redux/actions/memberships';\nimport { selectUserHasValidMembershipForCreatorId } from 'redux/selectors/memberships';\n\nconst select = (state, props) => {\n  const { uri, threadCommentId, linkedCommentId } = props;\n\n  const claim = selectClaimForUri(state, uri);\n  const channelId = getChannelIdFromClaim(claim);\n\n  const activeChannelClaim = selectActiveChannelClaim(state);\n  const threadComment = selectCommentForCommentId(state, threadCommentId);\n  const activeChannelId = activeChannelClaim && activeChannelClaim.claim_id;\n\n  return {\n    activeChannelId,\n    allCommentIds: selectCommentIdsForUri(state, uri),\n    channelId,\n    chatCommentsRestrictedToChannelMembers: Boolean(selectProtectedContentTagForUri(state, uri)),\n    claimId: claim && claim.claim_id,\n    claimIsMine: selectClaimIsMine(state, claim),\n    fetchingChannels: selectFetchingMyChannels(state),\n    // $FlowFixMe\n    isAChannelMember: selectUserHasValidMembershipForCreatorId(state, channelId),\n    isFetchingComments: selectIsFetchingComments(state),\n    isFetchingReacts: selectIsFetchingReacts(state),\n    isFetchingTopLevelComments: selectIsFetchingTopLevelComments(state),\n    linkedCommentAncestors: selectCommentAncestorsForId(state, linkedCommentId),\n    // $FlowFixMe\n    commentsEnabledSetting: selectCommentsEnabledSettingForChannelId(state, channelId),\n    myReactsByCommentId: selectMyReacts(state),\n    othersReactsById: selectOthersReacts(state),\n    pinnedComments: selectPinnedCommentsForUri(state, uri),\n    threadComment,\n    threadCommentAncestors: selectCommentAncestorsForId(state, threadCommentId),\n    topLevelComments: selectTopLevelCommentsForUri(state, uri),\n    topLevelTotalPages: selectTopLevelTotalPagesForUri(state, uri),\n    totalComments: selectTotalCommentsCountForUri(state, uri),\n    scheduledState: selectScheduledStateForUri(state, uri),\n  };\n};\n\nconst perform = {\n  fetchTopLevelComments: doCommentList,\n  fetchComment: doCommentById,\n  fetchReacts: doCommentReactList,\n  resetComments: doCommentReset,\n  doFetchOdyseeMembershipForChannelIds,\n  doFetchChannelMembershipsForChannelIds,\n  doPopOutInlinePlayer,\n};\n\nexport default connect<_, Props, _, _, _, _>(select, perform)(CommentsList);\n","// @flow\nimport React from 'react';\n\ntype Props = {\n  title?: string,\n  subtitle?: string,\n  action?: any,\n  children?: string,\n};\n\nconst ErrorBubble = (props: Props) => {\n  const { children, title, subtitle, action } = props;\n\n  if (title && subtitle && action) {\n    return (\n      <div className=\"error-bubble\">\n        <div>\n          <label>{title}</label>\n          <span>{subtitle}</span>\n        </div>\n        {action}\n      </div>\n    );\n  }\n\n  if (!children) {\n    return null;\n  }\n\n  return <span className=\"error-bubble\">{children}</span>;\n};\n\nexport default ErrorBubble;\n"],"names":["StickerReviewBox","props","activeChannelUrl","src","price","exchangeRate","React","className","ChannelThumbnail","xsmall","uri","UriIndicator","link","showAtSign","OptimizedImage","waitLoad","loading","Boolean","FilePrice","customPrices","priceFiat","priceLBC","Number","isFiat","StickerActionButton","stickerButtonProps","isReviewingStickerComment","disabled","buttonProps","_objectWithoutProperties","_excluded","Button","_extends","title","__","label","undefined","TipReviewBox","tipAmount","activeTab","message","stickerPreviewComponent","CreditAmount","amount","size","TipActionButton","tipButtonProps","name","tab","tipSelectorOpen","_onClick","onClick","fetchingChannels","_props$myChannelClaim","myChannelClaims","_props$injected","injected","tiny","activeChannelClaimId","setActiveChannel","FormField","labelOnLeft","type","onChange","event","channelClaimId","target","value","map","_ref","claimId","claim_id","key","item","perform","doSetActiveChannel","connect","state","selectMyChannelClaims","selectFetchingMyChannels","selectActiveChannelClaimId","SelectChannel","FormChannelSelector","selectorProps","isReply","isLivestream","HelpText","helpTextProps","deletedComment","minAmount","minSuper","minTip","I18nMessage","tokens","lbc","noFormat","Icon","customTooltipText","icon","ICONS","tooltip","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","assign","bind","source","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","input","hint","prim","toPrimitive","res","String","_toPrimitive","_toPropertyKey","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_i","_s","_e","_x","_r","_arr","_n","_d","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","toString","from","test","_unsupportedIterableToArray","_nonIterableRest","len","arr2","stripeEnvironment","getStripeEnvironment","TAB_FIAT","TAB_LBC","SubmitCashTipButton","withCreditCard","doCommentCreate","doFetchCreatorSettings","doFetchMyCommentedChannels","doToast","doCommentById","doSendCashTip","doSendTip","doOpenModal","doTipAccountCheckForUri","claim","selectClaimForUri","channel","signing_channel","getChannelIdFromClaim","tipChannelName","_ref2","selectActiveChannelClaim","activeChannelName","canonical_url","canReceiveFiatTips","selectCanReceiveFiatTipsForUri","chatCommentsRestrictedToChannelMembers","selectedRestrictedCommentsChatTagForUri","claimIsMine","selectClaimIsMine","hasChannels","selectHasChannels","isFetchingChannels","myChannelClaimIds","selectMyChannelClaimIds","myCommentedChannelIds","selectMyCommentedChannelIdsForId","preferredCurrency","selectPreferredCurrency","channelSettings","comments","settingsByChannelId","supportDisabled","makeSelectTagInClaimOrChannelForUri","DISABLE_SUPPORT_TAG","userHasMembersOnlyChatPerk","selectUserIsMemberOfMembersOnlyChatForCreatorId","commentSettingDisabled","selectCommentsDisabledSettingForChannelId","isLivestreamChatMembersOnly","selectLivestreamChatMembersOnlyForChannelId","areCommentsMembersOnly","selectMembersOnlyCommentsForChannelId","hasPremiumPlus","selectUserHasOdyseePremiumPlus","_React$useContext","_window","_window$odysee","_window$odysee$build","bottom","disableInput","embed","isNested","onCancelReplying","onDoneReplying","onSlimInputClose","parentId","setQuickReply","shouldFetchComment","textInjection","fileUri","AppContext","isMobile","useIsMobile","formFieldRef","buttonRef","slimInputButtonRef","_useHistory","useHistory","pathname","location","_React$useState2","isSubmitting","setSubmitting","_React$useState4","commentFailure","setCommentFailure","_React$useState6","txid","successTip","setSuccessTip","_React$useState8","setTipSelector","_React$useState10","isReviewingSupportComment","setReviewingSupportComment","_React$useState12","setReviewingStickerComment","_React$useState14","selectedSticker","setSelectedSticker","_React$useState16","setTipAmount","_React$useState18","convertedAmount","setConvertedAmount","_React$useState20","commentValue","setCommentValue","_usePersistedState2","usePersistedState","advancedEditor","setAdvancedEditor","_React$useState22","setActiveTab","_React$useState24","tipError","setTipError","_React$useState26","setDeletedComment","_React$useState28","open","showSelectors","setShowSelectors","_React$useState30","disableReviewButton","setDisableReviewButton","_React$useState32","setExchangeRate","_React$useState34","tipModalOpen","setTipModalOpen","charCount","hasNothingToSumbit","min_tip_amount_super_chat","min_tip_amount_comment","minAmountMet","stickerPrice","tipSelectorError","fiatIcon","STRIPE","minAmountRef","current","addEmoteToComment","emote","concat","handleSelectSticker","sticker","commentSelectorsProps","isOpen","openTab","submitButtonProps","button","requiresAuth","actionButtonProps","handleSelectTipComment","cancelButtonProps","stickerReviewProps","url","commentSelectorElem","CommentSelectors","closeSelector","getMembersOnlyCreatorSetting","cs","livestream_chat_members_only","comments_members_only","handleJoinMembersOnlyChat","MODALS","isTipOnly","hasSelectedTab","customText","setAmount","handleSupportComment","_handleSupportComment","_callee","commentsAreMembersOnly","_context","isError","subMessage","notAuthedToLiveChat","handleCreateComment","doSubmitTip","channel_id","response","setTimeout","linkText","linkTarget","PAGES","tipParams","Math","round","activeChannelId","customerTipResponse","payment_intent_id","_x2","_x3","_x4","_handleCreateComment","_callee2","environment","stickerValue","_context2","buildValidSticker","comment","parent_id","is_protected","signature","click","includes","Lbryio","LBC_USD","altEnterListener","e","inputRef","document","activeElement","isTyping","attributes","ctrlKey","metaKey","keyCode","KEYCODES","preventDefault","removeAttribute","window","addEventListener","removeEventListener","_formFieldRef$current","_formFieldRef$current2","_formFieldRef$current3","substring","focus","commentLabelText","ErrorBubble","subtitle","action","Form","onSubmit","classnames","autoFocus","create__reply","create__comment","disabled_chat_comments","noticeLabel","SIMPLE_SITE","handleTip","isLBC","handleSubmit","slimInput","submitButtonRef","placeholder","quickActionHandler","quickActionLabel","ref","textAreaMaxLength","FF_MAX_CHARS_IN_LIVESTREAM_COMMENT","FF_MAX_CHARS_IN_COMMENT","WalletTipAmountSelector","customTipAmount","fiatConversion","setDisableSubmitButton","SELECTOR_TABS","onUpdate","imageUrl","imageTitle","markdown","updateComment","assetName","cordova","odysee","build","googlePlay","role","stopPropagation","pathPlusRedirect","channelId","channelName","channelHasMembershipTiers","creatorMembershipsFetched","doToggleMembersOnlyCommentsSettingForClaimId","doMembershipList","channel_name","Menu","MenuButton","MenuList","MenuItem","onSelect","getChannelFromClaim","selectClaimIsMineForUri","selectChannelHasMembershipTiersForId","selectCreatorMembershipsFetchedByUri","CommentListMenu","DEBOUNCE_SCROLL_HANDLER_MS","CommentCreate","lazyImport","CommentActionButtons","actionButtonsProps","totalComments","sort","changeSort","handleRefresh","sortButtonProps","activeSort","ENABLE_COMMENT_REACTIONS","SortButton","sortOption","SORT_BY","iconSize","ThreadLinkButton","isViewAll","threadCommentParent","threadCommentId","_useHistory2","_useHistory2$location","search","urlParams","URLSearchParams","THREAD_COMMENT_QUERY_PARAM","set","LINKED_COMMENT_QUERY_PARAM","pendingLinkedCommentScroll","fetchTopLevelComments","doCommentList","fetchComment","fetchReacts","doCommentReactList","resetComments","doCommentReset","doFetchOdyseeMembershipForChannelIds","doFetchChannelMembershipsForChannelIds","doPopOutInlinePlayer","linkedCommentId","activeChannelClaim","threadComment","selectCommentForCommentId","allCommentIds","selectCommentIdsForUri","selectProtectedContentTagForUri","isAChannelMember","selectUserHasValidMembershipForCreatorId","isFetchingComments","selectIsFetchingComments","isFetchingReacts","selectIsFetchingReacts","isFetchingTopLevelComments","selectIsFetchingTopLevelComments","linkedCommentAncestors","selectCommentAncestorsForId","commentsEnabledSetting","selectCommentsEnabledSettingForChannelId","myReactsByCommentId","selectMyReacts","othersReactsById","selectOthersReacts","pinnedComments","selectPinnedCommentsForUri","threadCommentAncestors","topLevelComments","selectTopLevelCommentsForUri","topLevelTotalPages","selectTopLevelTotalPagesForUri","selectTotalCommentsCountForUri","scheduledState","selectScheduledStateForUri","commentsAreExpanded","notInDrawer","threadRedirect","_useHistory$location","isMediumScreen","useIsMediumScreen","currentFetchedPage","ceil","COMMENT_PAGE_SIZE_TOP_LEVEL","spinnerRef","commentListRef","DEFAULT_SORT","setSort","page","setPage","didInitialPageFetch","setInitialPageFetch","hasDefaultExpansion","expandedComments","setExpandedComments","debouncedUri","setDebouncedUri","totalFetchedComments","moreBelow","getCommentsListTitle","threadDepthLevel","some","ancestor","index","threadTopLevelComment","readyToDisplayComments","setReadyToDisplayComments","commenterClaimIds","handleReset","refreshComments","notAuthedToChat","useEffect","isNewPage","hasRightFetchPage","idsForReactionFetch","commentId","handleCommentScroll","debounce","shouldFetchNextPage","scrollingElement","querySelector","yPrefetchPx","devicePixelRatio","rect","getBoundingClientRect","windowH","innerHeight","documentElement","clientHeight","windowW","innerWidth","clientWidth","isApproachingViewport","top","width","height","right","left","commentProps","isTopLevel","newSort","Card","titleActions","actions","Empty","padded","text","c","CommentView","comment_id","refTop","scrollTo","pageYOffset","behavior","Spinner","children"],"sourceRoot":""}