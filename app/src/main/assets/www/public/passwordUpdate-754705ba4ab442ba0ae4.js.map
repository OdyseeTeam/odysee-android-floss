{"version":3,"file":"passwordUpdate-754705ba4ab442ba0ae4.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/settingsRow/index.js","webpack://odysee.com/../ui/component/settingsRow/view.jsx","webpack://odysee.com/../ui/component/settingAccountPassword/index.js","webpack://odysee.com/../ui/component/settingAccountPassword/view.jsx","webpack://odysee.com/../ui/page/passwordUpdate/index.js","webpack://odysee.com/../ui/page/passwordUpdate/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","import SettingsRow from './view';\nexport default SettingsRow;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport * as PAGES from 'constants/pages';\nimport classnames from 'classnames';\n\ntype Props = {\n  title: string,\n  subtitle?: string,\n  multirow?: boolean, // Displays the Value widget(s) below the Label instead of on the right.\n  useVerticalSeparator?: boolean, // Show a separator line between Label and Value. Useful when there are multiple Values.\n  disabled?: boolean,\n  highlighted?: boolean,\n  membersOnly?: boolean,\n  children?: React$Node,\n};\n\nexport default function SettingsRow(props: Props) {\n  const { title, subtitle, multirow, useVerticalSeparator, disabled, highlighted, membersOnly, children } = props;\n  return (\n    <div\n      className={classnames('card__main-actions settings-row', {\n        'section__actions--between': !multirow,\n        'opacity-40': disabled,\n        'card--highlightedActive': highlighted,\n      })}\n    >\n      <div className=\"settings-row__title\">\n        <span>\n          {title}\n          {membersOnly && (\n            <Button className=\"settings-row__members-only\" navigate={`/$/${PAGES.ODYSEE_MEMBERSHIP}`}>\n              {'PREMIUM'}\n            </Button>\n          )}\n        </span>\n        {subtitle && <p className=\"settings-row__subtitle\">{subtitle}</p>}\n      </div>\n      <div\n        className={classnames('settings-row__value', {\n          'settings-row__value--multirow': multirow,\n          'settings-row__vertical-separator': useVerticalSeparator,\n          'non-clickable': disabled,\n        })}\n      >\n        {children && children}\n      </div>\n    </div>\n  );\n}\n","import { connect } from 'react-redux';\nimport { selectUser, selectPasswordSetSuccess, selectPasswordSetError } from 'redux/selectors/user';\nimport { doUserPasswordSet, doClearPasswordEntry } from 'redux/actions/user';\nimport { doToast } from 'redux/actions/notifications';\nimport UserSignIn from './view';\n\nconst select = (state) => ({\n  user: selectUser(state),\n  passwordSetSuccess: selectPasswordSetSuccess(state),\n  passwordSetError: selectPasswordSetError(state),\n});\n\nexport default connect(select, {\n  doUserPasswordSet,\n  doToast,\n  doClearPasswordEntry,\n})(UserSignIn);\n","// @flow\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { FormField, Form } from 'component/common/form';\nimport Button from 'component/button';\nimport ErrorText from 'component/common/error-text';\nimport SettingsRow from 'component/settingsRow';\nimport * as PAGES from 'constants/pages';\n\ntype Props = {\n  user: ?User,\n  doToast: ({ message: string }) => void,\n  doUserPasswordSet: (string, ?string) => void,\n  doClearPasswordEntry: () => void,\n  passwordSetSuccess: boolean,\n  passwordSetError: ?string,\n};\n\nexport default function SettingAccountPassword(props: Props) {\n  const { user, doToast, doUserPasswordSet, passwordSetSuccess, passwordSetError, doClearPasswordEntry } = props;\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const hasPassword = user && user.password_set;\n  const { goBack } = useHistory();\n\n  const title = hasPassword ? __('Update Your Password') : __('Add A Password');\n  const subtitle = hasPassword ? '' : __('You do not currently have a password set.');\n\n  function handleSubmit() {\n    doUserPasswordSet(newPassword, oldPassword);\n  }\n\n  React.useEffect(() => {\n    if (passwordSetSuccess) {\n      goBack();\n      doToast({\n        message: __('Password updated successfully.'),\n      });\n      doClearPasswordEntry();\n      setOldPassword('');\n      setNewPassword('');\n    }\n  }, [passwordSetSuccess, setOldPassword, setNewPassword, doClearPasswordEntry, doToast, goBack]);\n\n  return (\n    <SettingsRow title={title} subtitle={subtitle} multirow>\n      <Form onSubmit={handleSubmit} className=\"section\">\n        {hasPassword && (\n          <FormField\n            type=\"password\"\n            name=\"setting_set_old_password\"\n            label={__('Old Password')}\n            value={oldPassword}\n            onChange={(e) => setOldPassword(e.target.value)}\n          />\n        )}\n        <FormField\n          type=\"password\"\n          name=\"setting_set_new_password\"\n          label={__('New Password')}\n          value={newPassword}\n          onChange={(e) => setNewPassword(e.target.value)}\n        />\n\n        <div className=\"section__actions\">\n          <Button button=\"primary\" type=\"submit\" label={__('Set Password')} disabled={!newPassword} />\n          {hasPassword ? (\n            <Button button=\"link\" label={__('Forgot Password?')} navigate={`/$/${PAGES.AUTH_PASSWORD_RESET}`} />\n          ) : (\n            <Button button=\"link\" label={__('Cancel')} onClick={() => goBack()} />\n          )}\n        </div>\n      </Form>\n      {passwordSetError && (\n        <div className=\"section\">\n          <ErrorText>{passwordSetError}</ErrorText>\n        </div>\n      )}\n    </SettingsRow>\n  );\n}\n","import PasswordUpdate from './view';\n\nexport default PasswordUpdate;\n","// @flow\nimport React from 'react';\nimport Card from 'component/common/card';\nimport Page from 'component/page';\nimport SettingAccountPassword from 'component/settingAccountPassword';\n\nexport default function PasswordUpdate() {\n  return (\n    <Page noFooter noSideNavigation settingsPage backout={{ title: __('Password'), backLabel: __('Back') }}>\n      <Card background isBodyList body={<SettingAccountPassword />} />\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","multirow","useVerticalSeparator","disabled","highlighted","membersOnly","navigate","concat","PAGES","connect","state","user","selectUser","passwordSetSuccess","selectPasswordSetSuccess","passwordSetError","selectPasswordSetError","doUserPasswordSet","doToast","doClearPasswordEntry","oldPassword","setOldPassword","_useState4","newPassword","setNewPassword","hasPassword","password_set","goBack","useHistory","message","SettingsRow","Form","onSubmit","FormField","type","name","label","value","onChange","target","ErrorText","Page","noFooter","noSideNavigation","settingsPage","backout","backLabel","Card","SettingAccountPassword"],"sourceRoot":""}