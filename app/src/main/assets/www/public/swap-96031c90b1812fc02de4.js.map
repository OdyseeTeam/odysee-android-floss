{"version":3,"file":"swap-96031c90b1812fc02de4.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/common/qr-code.jsx","webpack://odysee.com/../ui/component/copyableText/index.js","webpack://odysee.com/../ui/component/copyableText/view.jsx","webpack://odysee.com/../ui/component/walletSwap/view.jsx","webpack://odysee.com/../ui/redux/selectors/coinSwap.js","webpack://odysee.com/../ui/component/walletSwap/index.js","webpack://odysee.com/../ui/redux/actions/coinSwap.js","webpack://odysee.com/../ui/page/swap/index.js","webpack://odysee.com/../ui/page/swap/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport React from 'react';\nimport classnames from 'classnames';\nimport ReactQrCode from 'qrcode.react';\n\ntype Props = {\n  value: string,\n  paddingRight?: boolean,\n  paddingTop?: boolean,\n};\n\nclass QRCode extends React.Component<Props> {\n  static defaultProps = {\n    paddingRight: false,\n    paddingTop: false,\n  };\n\n  render() {\n    const { value, paddingRight, paddingTop } = this.props;\n    return (\n      <div\n        className={classnames('qr-code', {\n          'qr-code--right-padding': paddingRight,\n          'qr-code--top-padding': paddingTop,\n        })}\n      >\n        <ReactQrCode value={value} />\n      </div>\n    );\n  }\n}\n\nexport default QRCode;\n","import { connect } from 'react-redux';\nimport { doToast } from 'redux/actions/notifications';\nimport CopyableText from './view';\n\nexport default connect(null, {\n  doToast,\n})(CopyableText);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport { FormField } from 'component/common/form';\nimport Button from 'component/button';\nimport React, { useRef } from 'react';\n\ntype Props = {\n  copyable: string,\n  onlyCopy: boolean,\n  snackMessage: ?string,\n  doToast: ({ message: string }) => void,\n  label?: string,\n  primaryButton?: boolean,\n  name?: string,\n  onCopy?: (string) => string,\n  enableInputMask?: boolean,\n};\n\nexport default function CopyableText(props: Props) {\n  const {\n    copyable,\n    onlyCopy,\n    doToast,\n    snackMessage,\n    label,\n    primaryButton = false,\n    name,\n    onCopy,\n    enableInputMask,\n  } = props;\n  const [maskInput, setMaskInput] = React.useState(enableInputMask);\n\n  const input = useRef();\n\n  function handleCopyText() {\n    if (enableInputMask || onlyCopy) {\n      navigator.clipboard\n        .writeText(copyable)\n        .then(() => {\n          doToast({ message: snackMessage || __('Text copied') });\n        })\n        .catch(() => {\n          doToast({ message: __('Failed to copy.'), isError: true });\n        });\n    } else {\n      const topRef = input.current;\n      if (topRef && topRef.input && topRef.input.current) {\n        topRef.input.current.select();\n        if (onCopy) {\n          // Allow clients to change the selection before making the copy.\n          onCopy(topRef.input.current);\n        }\n      }\n\n      document.execCommand('copy');\n      doToast({ message: snackMessage || __('Text copied') });\n    }\n  }\n\n  function onFocus() {\n    // We have to go a layer deep since the input is inside the form component\n    const topRef = input.current;\n    if (topRef && topRef.input && topRef.input.current) {\n      topRef.input.current.select();\n    }\n  }\n\n  return (\n    <FormField\n      type={maskInput ? 'password' : 'text'}\n      className=\"form-field--copyable\"\n      readOnly\n      name={name}\n      label={label}\n      value={copyable || ''}\n      ref={input}\n      onFocus={onFocus}\n      inputButton={\n        <Button button={primaryButton ? 'primary' : 'secondary'} icon={ICONS.COPY} onClick={handleCopyText} />\n      }\n      helper={\n        enableInputMask && (\n          <Button button=\"link\" onClick={() => setMaskInput(!maskInput)} label={maskInput ? __('Show') : __('Hide')} />\n        )\n      }\n    />\n  );\n}\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport { FormField, Form } from 'component/common/form';\nimport { Lbryio } from 'lbryinc';\nimport Card from 'component/common/card';\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport Spinner from 'component/spinner';\nimport Nag from 'component/nag';\nimport CopyableText from 'component/copyableText';\nimport Icon from 'component/common/icon';\nimport QRCode from 'component/common/qr-code';\nimport usePersistedState from 'effects/use-persisted-state';\nimport * as ICONS from 'constants/icons';\nimport * as MODALS from 'constants/modal_types';\nimport * as PAGES from 'constants/pages';\nimport { clipboard } from 'electron';\nimport I18nMessage from 'component/i18nMessage';\nimport { Redirect, useHistory } from 'react-router';\n\nconst ENABLE_ALTERNATIVE_COINS = true;\n\nconst BTC_SATOSHIS = 100000000;\nconst LBC_MAX = 21000000;\nconst LBC_MIN = 1;\n\nconst IS_DEV = process.env.NODE_ENV !== 'production';\nconst DEBOUNCE_BTC_CHANGE_MS = 400;\n\nconst INTERNAL_APIS_DOWN = 'internal_apis_down';\nconst BTC_API_STATUS_PENDING = 'NEW'; // Started swap, waiting for coin.\nconst BTC_API_STATUS_CONFIRMING = 'PENDING'; // Coin receiving, waiting confirmation.\nconst BTC_API_STATUS_PROCESSING = 'COMPLETED'; // Coin confirmed. Sending LBC.\nconst BTC_API_STATUS_UNRESOLVED = 'UNRESOLVED'; // Underpaid, overpaid, etc.\nconst BTC_API_STATUS_EXPIRED = 'EXPIRED'; // Charge expired (60 minutes).\nconst BTC_API_STATUS_ERROR = 'Error';\n\nconst ACTION_MAIN = 'action_main';\nconst ACTION_STATUS_PENDING = 'action_pending';\nconst ACTION_STATUS_CONFIRMING = 'action_confirming';\nconst ACTION_STATUS_PROCESSING = 'action_processing';\nconst ACTION_STATUS_SUCCESS = 'action_success';\nconst ACTION_PAST_SWAPS = 'action_past_swaps';\n\nconst NAG_API_STATUS_PENDING = 'Waiting to receive your crypto.';\nconst NAG_API_STATUS_CONFIRMING = 'Confirming transaction.';\nconst NAG_API_STATUS_PROCESSING = 'Crypto received. Sending your Credits.';\nconst NAG_API_STATUS_SUCCESS = 'Credits sent. You should see it in your wallet.';\nconst NAG_API_STATUS_ERROR = 'An error occurred on the previous swap.';\nconst NAG_SWAP_CALL_FAILED = 'Failed to initiate swap.';\n// const NAG_STATUS_CALL_FAILED = 'Failed to query swap status.';\nconst NAG_SERVER_DOWN = 'The system is currently down. Come back later.';\nconst NAG_RATE_CALL_FAILED = 'Unable to obtain exchange rate. Try again later.';\nconst NAG_EXPIRED = 'Swap expired.';\n\ntype Props = {\n  receiveAddress: string,\n  coinSwaps: Array<CoinSwapInfo>,\n  isAuthenticated: boolean,\n  doToast: ({ message: string }) => void,\n  addCoinSwap: (CoinSwapInfo) => void,\n  removeCoinSwap: (string) => void,\n  getNewAddress: () => void,\n  checkAddressIsMine: (string) => void,\n  openModal: (string, {}) => void,\n  queryCoinSwapStatus: (string) => void,\n};\n\nfunction WalletSwap(props: Props) {\n  const {\n    receiveAddress,\n    doToast,\n    coinSwaps,\n    isAuthenticated,\n    addCoinSwap,\n    removeCoinSwap,\n    getNewAddress,\n    checkAddressIsMine,\n    openModal,\n    queryCoinSwapStatus,\n  } = props;\n\n  const [btc, setBtc] = React.useState(0);\n  const [lbcError, setLbcError] = React.useState();\n  const [lbc, setLbc] = usePersistedState('swap-desired-lbc', LBC_MIN);\n  const [action, setAction] = React.useState(ACTION_MAIN);\n  const [nag, setNag] = React.useState(null);\n  const [showQr, setShowQr] = React.useState(false);\n  const [isFetchingRate, setIsFetchingRate] = React.useState(false);\n  const [isSwapping, setIsSwapping] = React.useState(false);\n  const [isRefreshingStatus, setIsRefreshingStatus] = React.useState(false);\n  const { location } = useHistory();\n  const [swap, setSwap] = React.useState({});\n  const [coin, setCoin] = React.useState('bitcoin');\n  const [lastStatusQuery, setLastStatusQuery] = React.useState();\n  const { goBack } = useHistory();\n\n  function formatCoinAmountString(amount) {\n    return amount === 0 ? '---' : amount.toLocaleString(undefined, { minimumFractionDigits: 8 });\n  }\n\n  function returnToMainAction() {\n    setIsSwapping(false);\n    setAction(ACTION_MAIN);\n    setSwap(null);\n  }\n\n  function handleRemoveSwap(chargeCode) {\n    openModal(MODALS.CONFIRM, {\n      title: __('Remove Swap'),\n      subtitle: <I18nMessage tokens={{ address: <em>{`${chargeCode}`}</em> }}>Remove %address%?</I18nMessage>,\n      body: <p className=\"help--warning\">{__('This process cannot be reversed.')}</p>,\n      onConfirm: (closeModal) => {\n        removeCoinSwap(chargeCode);\n        closeModal();\n      },\n    });\n  }\n\n  // Ensure 'receiveAddress' is populated\n  React.useEffect(() => {\n    if (!receiveAddress) {\n      getNewAddress();\n    } else {\n      checkAddressIsMine(receiveAddress);\n    }\n  }, [receiveAddress, getNewAddress, checkAddressIsMine]);\n\n  // Get 'btc/rate' and calculate required BTC.\n  React.useEffect(() => {\n    if (isNaN(lbc) || lbc === 0) {\n      setBtc(0);\n      return;\n    }\n\n    setIsFetchingRate(true);\n\n    const timer = setTimeout(() => {\n      Lbryio.call('btc', 'rate', { satoshi: BTC_SATOSHIS })\n        .then((rate) => {\n          setIsFetchingRate(false);\n          setBtc((lbc * Math.round(BTC_SATOSHIS * rate)) / BTC_SATOSHIS);\n        })\n        .catch(() => {\n          setIsFetchingRate(false);\n          setBtc(0);\n          setNag({ msg: NAG_RATE_CALL_FAILED, type: 'error' });\n        });\n    }, DEBOUNCE_BTC_CHANGE_MS);\n\n    return () => clearTimeout(timer);\n  }, [lbc]);\n\n  // Resolve 'swap' with the latest info from 'coinSwaps'\n  React.useEffect(() => {\n    const swapInfo = swap && coinSwaps.find((x) => x.chargeCode === swap.chargeCode);\n    if (!swapInfo) {\n      return;\n    }\n\n    const jsonSwap = JSON.stringify(swap);\n    const jsonSwapInfo = JSON.stringify(swapInfo);\n    if (jsonSwap !== jsonSwapInfo) {\n      setSwap({ ...swapInfo });\n    }\n\n    if (!swapInfo.status) {\n      return;\n    }\n\n    switch (swapInfo.status.status) {\n      case BTC_API_STATUS_PENDING:\n        setAction(ACTION_STATUS_PENDING);\n        setNag({ msg: NAG_API_STATUS_PENDING, type: 'helpful' });\n        break;\n      case BTC_API_STATUS_CONFIRMING:\n        setAction(ACTION_STATUS_CONFIRMING);\n        setNag({ msg: NAG_API_STATUS_CONFIRMING, type: 'helpful' });\n        break;\n      case BTC_API_STATUS_PROCESSING:\n        if (swapInfo.status.lbcTxid) {\n          setAction(ACTION_STATUS_SUCCESS);\n          setNag({ msg: NAG_API_STATUS_SUCCESS, type: 'helpful' });\n          setIsSwapping(false);\n        } else {\n          setAction(ACTION_STATUS_PROCESSING);\n          setNag({ msg: NAG_API_STATUS_PROCESSING, type: 'helpful' });\n        }\n        break;\n      case BTC_API_STATUS_ERROR:\n        setNag({ msg: NAG_API_STATUS_ERROR, type: 'error' });\n        break;\n      case INTERNAL_APIS_DOWN:\n        setNag({ msg: NAG_SERVER_DOWN, type: 'error' });\n        break;\n      case BTC_API_STATUS_EXPIRED:\n        setNag({ msg: NAG_EXPIRED, type: 'error' });\n        if (action === ACTION_PAST_SWAPS) {\n          setAction(ACTION_STATUS_PENDING);\n        }\n        break;\n      case BTC_API_STATUS_UNRESOLVED:\n        setNag({\n          msg: __(\n            'Received amount did not match order code %chargeCode%. Contact hello@lbry.com to resolve the payment.',\n            { chargeCode: swapInfo.chargeCode }\n          ),\n          type: 'error',\n        });\n        if (action === ACTION_PAST_SWAPS) {\n          setAction(ACTION_STATUS_PENDING);\n        }\n        break;\n      default:\n        setNag({ msg: swapInfo.status.status, type: 'error' });\n        break;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [swap, coinSwaps]);\n\n  // Validate entered LBC\n  React.useEffect(() => {\n    let msg;\n    if (lbc < LBC_MIN) {\n      msg = __('The amount needs to be higher');\n    } else if (lbc > LBC_MAX) {\n      msg = __('The amount is too high');\n    }\n    setLbcError(msg);\n  }, [lbc]);\n\n  // 'Refresh' button feedback\n  React.useEffect(() => {\n    let timer;\n    if (isRefreshingStatus) {\n      timer = setTimeout(() => {\n        setIsRefreshingStatus(false);\n      }, 1000);\n    }\n\n    return () => clearTimeout(timer);\n  }, [isRefreshingStatus]);\n\n  function getCoinAddress(coin) {\n    if (swap && swap.sendAddresses) {\n      return swap.sendAddresses[coin];\n    }\n    return '';\n  }\n\n  function getCoinSendAmountStr(coin) {\n    if (swap && swap.sendAmounts && swap.sendAmounts[coin]) {\n      return `${swap.sendAmounts[coin].amount} ${swap.sendAmounts[coin].currency}`;\n    }\n    return '';\n  }\n\n  function currencyToCoin(currency) {\n    const MAP = {\n      DAI: 'dai',\n      USDC: 'usdc',\n      BTC: 'bitcoin',\n      ETH: 'ethereum',\n      LTC: 'litecoin',\n      BCH: 'bitcoincash',\n    };\n    return MAP[currency] || 'bitcoin';\n  }\n\n  function getSentAmountStr(swapInfo) {\n    if (swapInfo && swapInfo.status) {\n      const currency = swapInfo.status.receiptCurrency;\n      const coin = currencyToCoin(currency);\n      return getCoinSendAmountStr(coin);\n    }\n    return '';\n  }\n\n  function getCoinLabel(coin) {\n    const COIN_LABEL = {\n      dai: 'Dai',\n      usdc: 'USD Coin',\n      bitcoin: 'Bitcoin',\n      ethereum: 'Ethereum',\n      litecoin: 'Litecoin',\n      bitcoincash: 'Bitcoin Cash',\n    };\n\n    return COIN_LABEL[coin] || coin;\n  }\n\n  function getLbcAmountStrForSwap(swap) {\n    if (swap && swap.lbcAmount) {\n      return formatCoinAmountString(swap.lbcAmount);\n    }\n    return '---';\n  }\n\n  function handleStartSwap() {\n    setIsSwapping(true);\n    setSwap(null);\n    setNag(null);\n\n    Lbryio.call('btc', 'swap', {\n      lbc_satoshi_requested: parseInt(lbc * BTC_SATOSHIS + 0.5),\n      btc_satoshi_provided: parseInt(btc * BTC_SATOSHIS + 0.5),\n      pay_to_wallet_address: receiveAddress,\n    })\n      .then((response) => {\n        const btcAmount = response.Charge.data.pricing['bitcoin'].amount;\n        const rate = response.Exchange.rate;\n\n        const timeline = response.Charge.data.timeline;\n        const lastTimeline = timeline[timeline.length - 1];\n\n        const newSwap = {\n          chargeCode: response.Exchange.charge_code,\n          coins: Object.keys(response.Charge.data.addresses),\n          sendAddresses: response.Charge.data.addresses,\n          sendAmounts: response.Charge.data.pricing,\n          lbcAmount: (btcAmount * BTC_SATOSHIS) / rate,\n          status: {\n            status: lastTimeline.status,\n            receiptCurrency: lastTimeline.payment.value.currency,\n            receiptTxid: lastTimeline.payment.transaction_id,\n            lbcTxid: response.Exchange.lbc_txid || '',\n          },\n        };\n\n        setSwap({ ...newSwap });\n        addCoinSwap({ ...newSwap });\n      })\n      .catch((err) => {\n        const translateError = (err) => {\n          // TODO: https://github.com/lbryio/lbry.go/issues/87\n          // Translate error codes instead of strings when it is available.\n          if (err === 'users are currently limited to 4 transactions per month') {\n            return __('Users are currently limited to 4 completed swaps per month or 5 pending swaps.');\n          }\n          return err;\n        };\n        setNag({ msg: err === INTERNAL_APIS_DOWN ? NAG_SWAP_CALL_FAILED : translateError(err.message), type: 'error' });\n        returnToMainAction();\n      });\n  }\n\n  function handleViewPastSwaps() {\n    setAction(ACTION_PAST_SWAPS);\n    setNag(null);\n    setIsRefreshingStatus(true);\n\n    const now = Date.now();\n    if (!lastStatusQuery || now - lastStatusQuery > 30000) {\n      // There is a '200/minute' limit in the commerce API. If the history is\n      // long, or if the user goes trigger-happy, the limit could be reached\n      // easily. Statuses don't change often, so just limit it to every 30s.\n      setLastStatusQuery(now);\n      coinSwaps.forEach((x) => {\n        queryCoinSwapStatus(x.chargeCode);\n      });\n    }\n  }\n\n  function getShortStatusStr(coinSwap: CoinSwapInfo) {\n    const swapInfo = coinSwaps.find((x) => x.chargeCode === coinSwap.chargeCode);\n    if (!swapInfo || !swapInfo.status) {\n      return '---';\n    }\n\n    let msg;\n    switch (swapInfo.status.status) {\n      case BTC_API_STATUS_PENDING:\n        msg = __('Waiting');\n        break;\n      case BTC_API_STATUS_CONFIRMING:\n        msg = __('Confirming');\n        break;\n      case BTC_API_STATUS_PROCESSING:\n        if (swapInfo.status.lbcTxid) {\n          msg = __('Credits sent');\n        } else {\n          msg = __('Sending Credits');\n        }\n        break;\n      case BTC_API_STATUS_ERROR:\n        msg = __('Failed');\n        break;\n      case BTC_API_STATUS_EXPIRED:\n        msg = __('Expired');\n        break;\n      case BTC_API_STATUS_UNRESOLVED:\n        msg = __('Unresolved');\n        break;\n      default:\n        msg = swapInfo.status.status;\n        // if (IS_DEV) throw new Error('Unhandled \"status\": ' + status.Status);\n        break;\n    }\n    return msg;\n  }\n\n  function getViewTransactionElement(swap, isSend) {\n    if (!swap || !swap.status) {\n      return '';\n    }\n\n    const explorerUrl = (coin, txid) => {\n      // It's unclear whether we can link to sites like blockchain.com.\n      // Don't do it for now.\n      return '';\n    };\n\n    if (isSend) {\n      const sendTxId = swap.status.receiptTxid;\n      const url = explorerUrl(swap.status.receiptCurrency, sendTxId);\n      return sendTxId ? (\n        <>\n          {url && <Button button=\"link\" href={url} label={__('View transaction')} />}\n          {!url && (\n            <Button\n              button=\"link\"\n              label={__('Copy transaction ID')}\n              title={sendTxId}\n              onClick={() => {\n                clipboard.writeText(sendTxId);\n                doToast({\n                  message: __('Transaction ID copied.'),\n                });\n              }}\n            />\n          )}\n        </>\n      ) : null;\n    } else {\n      const lbcTxId = swap.status.lbcTxid;\n      return lbcTxId ? (\n        <Button button=\"link\" href={`https://explorer.lbry.com/tx/${lbcTxId}`} label={__('View transaction')} />\n      ) : null;\n    }\n  }\n\n  function getCloseButton() {\n    return (\n      <>\n        <Button autoFocus button=\"primary\" label={__('Close')} onClick={() => goBack()} />\n        <Icon\n          className=\"icon--help\"\n          icon={ICONS.HELP}\n          tooltip\n          size={16}\n          customTooltipText={__(\n            'This page can be closed while the transactions are in progress.\\nYou can view the status later from:\\n • Wallet » Swap » View Past Swaps'\n          )}\n        />\n      </>\n    );\n  }\n\n  function getGap() {\n    return <div className=\"confirm__value\" />; // better way?\n  }\n\n  function getActionElement() {\n    switch (action) {\n      case ACTION_MAIN:\n        return actionMain;\n\n      case ACTION_STATUS_PENDING:\n        return actionPending;\n\n      case ACTION_STATUS_CONFIRMING:\n        return actionConfirmingSend;\n\n      case ACTION_STATUS_PROCESSING: // fall-through\n      case ACTION_STATUS_SUCCESS:\n        return actionProcessingAndSuccess;\n\n      case ACTION_PAST_SWAPS:\n        return actionPastSwaps;\n\n      default:\n        if (IS_DEV) throw new Error('Unhandled action: ' + action);\n        return actionMain;\n    }\n  }\n\n  const actionMain = (\n    <>\n      <div className=\"section section--padded card--inline confirm__wrapper\">\n        <div className=\"section\">\n          <FormField\n            autoFocus\n            label={\n              <I18nMessage\n                tokens={{\n                  lbc: <LbcSymbol size={22} />,\n                }}\n              >\n                Enter desired %lbc%\n              </I18nMessage>\n            }\n            type=\"number\"\n            name=\"lbc\"\n            className=\"form-field--price-amount--auto\"\n            affixClass=\"form-field--fix-no-height\"\n            max={LBC_MAX}\n            min={LBC_MIN}\n            step={1 / BTC_SATOSHIS}\n            placeholder=\"12.34\"\n            value={lbc}\n            error={lbcError}\n            disabled={isSwapping}\n            onChange={(event) => setLbc(parseFloat(event.target.value))}\n          />\n          {getGap()}\n          <div className=\"confirm__label\">{__('Estimated BTC price')}</div>\n          <div className=\"confirm__value\">\n            {formatCoinAmountString(btc)} {btc === 0 ? '' : 'BTC'}\n            {isFetchingRate && <Spinner type=\"small\" />}\n          </div>\n        </div>\n      </div>\n      <div className=\"section__actions\">\n        <Button\n          autoFocus\n          onClick={handleStartSwap}\n          button=\"primary\"\n          disabled={isSwapping || isNaN(btc) || btc === 0 || lbc === 0 || lbcError}\n          label={isSwapping ? __('Processing...') : __('Start Swap')}\n        />\n        {!isSwapping && coinSwaps.length !== 0 && (\n          <Button button=\"link\" label={__('View Past Swaps')} onClick={handleViewPastSwaps} />\n        )}\n        {isSwapping && <Spinner type=\"small\" />}\n      </div>\n    </>\n  );\n\n  const actionPending = (\n    <>\n      <div className=\"section section--padded card--inline confirm__wrapper\">\n        <div className=\"section\">\n          {swap && swap.coins && ENABLE_ALTERNATIVE_COINS && (\n            <>\n              <FormField\n                type=\"select\"\n                name=\"select_coin\"\n                value={coin}\n                label={__('Alternative coins')}\n                onChange={(e) => setCoin(e.target.value)}\n              >\n                {swap.coins.map((x) => (\n                  <option key={x} value={x}>\n                    {getCoinLabel(x)}\n                  </option>\n                ))}\n              </FormField>\n              {getGap()}\n            </>\n          )}\n          <div className=\"confirm__label\">{__('Send')}</div>\n          <CopyableText\n            primaryButton\n            copyable={getCoinSendAmountStr(coin)}\n            snackMessage={__('Amount copied.')}\n            onCopy={(inputElem) => {\n              const inputStr = inputElem.value;\n              const selectEndIndex = inputStr.lastIndexOf(' ');\n              if (selectEndIndex > -1 && inputStr.substring(0, selectEndIndex).match(/[\\d.]/)) {\n                inputElem.setSelectionRange(0, selectEndIndex, 'forward');\n              }\n            }}\n          />\n          <div className=\"help\">{__('Use the copy button to ensure the EXACT amount is sent!')}</div>\n          {getGap()}\n          <div className=\"confirm__label\">{__('To --[the tip recipient]--')}</div>\n          <CopyableText primaryButton copyable={getCoinAddress(coin)} snackMessage={__('Address copied.')} />\n          <div className=\"confirm__value--subitem\">\n            <Button\n              button=\"link\"\n              label={showQr ? __('Hide QR code') : __('Show QR code')}\n              onClick={() => setShowQr(!showQr)}\n            />\n            {showQr && getCoinAddress(coin) && <QRCode value={getCoinAddress(coin)} />}\n          </div>\n          {getGap()}\n          <div className=\"confirm__label\">{__('Receive')}</div>\n          <div className=\"confirm__value\">{<LbcSymbol postfix={getLbcAmountStrForSwap(swap)} size={22} />}</div>\n        </div>\n      </div>\n      <div className=\"section__actions\">{getCloseButton()}</div>\n    </>\n  );\n\n  const actionConfirmingSend = (\n    <>\n      <div className=\"section section--padded card--inline confirm__wrapper\">\n        <div className=\"section\">\n          <div className=\"confirm__label\">{__('Confirming')}</div>\n          <div className=\"confirm__value confirm__value--no-gap\">{getSentAmountStr(swap)}</div>\n          <div className=\"confirm__value--subitem\">{getViewTransactionElement(swap, true)}</div>\n        </div>\n      </div>\n      <div className=\"section__actions\">{getCloseButton()}</div>\n    </>\n  );\n\n  const actionProcessingAndSuccess = (\n    <>\n      <div className=\"section section--padded card--inline confirm__wrapper\">\n        <div className=\"section\">\n          <div className=\"confirm__label\">{__('Sent')}</div>\n          <div className=\"confirm__value confirm__value--no-gap\">{getSentAmountStr(swap)}</div>\n          <div className=\"confirm__value--subitem\">{getViewTransactionElement(swap, true)}</div>\n          {getGap()}\n          <div className=\"confirm__label\">{action === ACTION_STATUS_SUCCESS ? __('Received') : __('Receiving')}</div>\n          <div className=\"confirm__value confirm__value--no-gap\">\n            {<LbcSymbol postfix={getLbcAmountStrForSwap(swap)} size={22} />}\n          </div>\n          {action === ACTION_STATUS_SUCCESS && (\n            <div className=\"confirm__value--subitem\">{getViewTransactionElement(swap, false)}</div>\n          )}\n        </div>\n      </div>\n      <div className=\"section__actions\">{getCloseButton()}</div>\n    </>\n  );\n\n  const actionPastSwaps = (\n    <>\n      <div className=\"section section--padded card--inline confirm__wrapper\">\n        <div className=\"section\">\n          <div className=\"table__wrapper\">\n            <table className=\"table table--btc-swap\">\n              <thead>\n                <tr>\n                  <th>{__('Code')}</th>\n                  <th>{__('Status')}</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {coinSwaps.length === 0 && (\n                  <tr>\n                    <td>{'---'}</td>\n                  </tr>\n                )}\n                {coinSwaps.length !== 0 &&\n                  coinSwaps.map((x) => {\n                    return (\n                      <tr key={x.chargeCode}>\n                        <td>\n                          <Button\n                            button=\"link\"\n                            className=\"button--hash-id\"\n                            title={x.chargeCode}\n                            label={x.chargeCode}\n                            onClick={() => {\n                              setSwap({ ...x });\n                            }}\n                          />\n                        </td>\n                        <td>{isRefreshingStatus ? '...' : getShortStatusStr(x)}</td>\n                        <td>\n                          <Button\n                            button=\"link\"\n                            icon={ICONS.REMOVE}\n                            title={__('Remove swap')}\n                            onClick={() => handleRemoveSwap(x.chargeCode)}\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n      <div className=\"section__actions\">\n        <Button\n          autoFocus\n          button=\"primary\"\n          label={__('Go Back')}\n          onClick={() => {\n            returnToMainAction();\n            setNag(null);\n          }}\n        />\n        {coinSwaps.length !== 0 && !isRefreshingStatus && (\n          <Button button=\"link\" label={__('Refresh')} onClick={handleViewPastSwaps} />\n        )}\n        {isRefreshingStatus && <Spinner type=\"small\" />}\n      </div>\n    </>\n  );\n\n  if (!isAuthenticated) {\n    return <Redirect to={`/$/${PAGES.AUTH_SIGNIN}?redirect=${location.pathname}`} />;\n  }\n\n  return (\n    <Form onSubmit={handleStartSwap}>\n      <Card\n        title={<I18nMessage tokens={{ lbc: <LbcSymbol size={22} /> }}>Swap Crypto for %lbc%</I18nMessage>}\n        subtitle={__(\n          'Send crypto to the address provided and you will be sent an equivalent amount of Credits. You can pay with BCH, LTC, ETH, USDC or DAI after starting the swap.'\n        )}\n        actions={getActionElement()}\n        nag={nag ? <Nag relative type={nag.type} message={__(nag.msg)} /> : null}\n      />\n    </Form>\n  );\n}\n\nexport default WalletSwap;\n","// @flow\n\nconst selectState = (state: State) => state.coinSwap || {};\nexport const selectCoinSwaps = (state: State) => selectState(state).coinSwaps;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport WalletSwap from './view';\nimport { doOpenModal } from 'redux/actions/app';\nimport { doAddCoinSwap, doRemoveCoinSwap, doQueryCoinSwapStatus } from 'redux/actions/coinSwap';\nimport { doToast } from 'redux/actions/notifications';\nimport { selectCoinSwaps } from 'redux/selectors/coinSwap';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\nimport { doGetNewAddress, doCheckAddressIsMine } from 'redux/actions/wallet';\nimport { selectReceiveAddress } from 'redux/selectors/wallet';\n\nconst select = (state, props) => ({\n  receiveAddress: selectReceiveAddress(state),\n  coinSwaps: selectCoinSwaps(state),\n  isAuthenticated: selectUserVerifiedEmail(state),\n});\n\nconst perform = (dispatch) => ({\n  openModal: (modal, props) => dispatch(doOpenModal(modal, props)),\n  doToast: (options) => dispatch(doToast(options)),\n  addCoinSwap: (coinSwap) => dispatch(doAddCoinSwap(coinSwap)),\n  removeCoinSwap: (chargeCode) => dispatch(doRemoveCoinSwap(chargeCode)),\n  getNewAddress: () => dispatch(doGetNewAddress()),\n  checkAddressIsMine: (address) => dispatch(doCheckAddressIsMine(address)),\n  queryCoinSwapStatus: (sendAddress) => dispatch(doQueryCoinSwapStatus(sendAddress)),\n});\n\nexport default withRouter(connect(select, perform)(WalletSwap));\n","// @flow\nimport * as ACTIONS from 'constants/action_types';\nimport { selectPrefsReady } from 'redux/selectors/sync';\nimport { doAlertWaitingForSync } from 'redux/actions/app';\nimport { Lbryio } from 'lbryinc';\n\nexport const doAddCoinSwap = (coinSwapInfo: CoinSwapInfo) => (dispatch: Dispatch, getState: GetState) => {\n  const state = getState();\n  const ready = selectPrefsReady(state);\n\n  if (!ready) {\n    return dispatch(doAlertWaitingForSync());\n  }\n\n  dispatch({\n    type: ACTIONS.ADD_COIN_SWAP,\n    data: coinSwapInfo,\n  });\n};\n\nexport const doRemoveCoinSwap = (chargeCode: string) => (dispatch: Dispatch, getState: GetState) => {\n  const state = getState();\n  const ready = selectPrefsReady(state);\n\n  if (!ready) {\n    return dispatch(doAlertWaitingForSync());\n  }\n\n  dispatch({\n    type: ACTIONS.REMOVE_COIN_SWAP,\n    data: {\n      chargeCode,\n    },\n  });\n};\n\nexport const doQueryCoinSwapStatus = (chargeCode: string) => (dispatch: Dispatch, getState: GetState) => {\n  Lbryio.call('btc', 'status', { charge_code: chargeCode }).then((response) => {\n    dispatch({\n      type: ACTIONS.COIN_SWAP_STATUS_RECEIVED,\n      data: response,\n    });\n  });\n};\n","import SwapPage from './view';\n\nexport default SwapPage;\n","// @flow\nimport React from 'react';\nimport Page from 'component/page';\nimport WalletSwap from 'component/walletSwap';\n\ntype Props = {};\n\nexport default function SwapPage(props: Props) {\n  return (\n    <Page\n      noSideNavigation\n      className=\"main--swap\"\n      backout={{\n        backoutLabel: __('Done'),\n        title: __('Swap Crypto'),\n      }}\n    >\n      <WalletSwap />\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","QRCode","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","key","value","_this$props","this","paddingRight","paddingTop","ReactQrCode","connect","doToast","copyable","onlyCopy","snackMessage","label","_props$primaryButton","primaryButton","name","onCopy","enableInputMask","_React$useState2","maskInput","setMaskInput","input","useRef","FormField","type","readOnly","ref","onFocus","topRef","current","select","inputButton","navigator","clipboard","writeText","then","message","isError","document","execCommand","helper","ENABLE_ALTERNATIVE_COINS","BTC_SATOSHIS","LBC_MAX","LBC_MIN","IS_DEV","process","DEBOUNCE_BTC_CHANGE_MS","INTERNAL_APIS_DOWN","BTC_API_STATUS_PENDING","BTC_API_STATUS_CONFIRMING","BTC_API_STATUS_PROCESSING","BTC_API_STATUS_UNRESOLVED","BTC_API_STATUS_EXPIRED","BTC_API_STATUS_ERROR","ACTION_MAIN","ACTION_STATUS_PENDING","ACTION_STATUS_CONFIRMING","ACTION_STATUS_PROCESSING","ACTION_STATUS_SUCCESS","ACTION_PAST_SWAPS","NAG_API_STATUS_PENDING","NAG_API_STATUS_CONFIRMING","NAG_API_STATUS_PROCESSING","NAG_API_STATUS_SUCCESS","NAG_API_STATUS_ERROR","NAG_SWAP_CALL_FAILED","NAG_SERVER_DOWN","NAG_RATE_CALL_FAILED","NAG_EXPIRED","receiveAddress","coinSwaps","isAuthenticated","addCoinSwap","removeCoinSwap","getNewAddress","checkAddressIsMine","openModal","queryCoinSwapStatus","btc","setBtc","_React$useState4","lbcError","setLbcError","_usePersistedState2","usePersistedState","lbc","setLbc","_React$useState6","action","setAction","_React$useState8","setNag","_React$useState10","showQr","setShowQr","_React$useState12","isFetchingRate","setIsFetchingRate","_React$useState14","isSwapping","setIsSwapping","_React$useState16","isRefreshingStatus","setIsRefreshingStatus","location","useHistory","_React$useState18","swap","setSwap","_React$useState20","coin","setCoin","_React$useState22","lastStatusQuery","setLastStatusQuery","goBack","formatCoinAmountString","amount","toLocaleString","minimumFractionDigits","returnToMainAction","getCoinAddress","sendAddresses","getCoinSendAmountStr","sendAmounts","concat","currency","getSentAmountStr","swapInfo","_coin","DAI","USDC","BTC","ETH","LTC","BCH","currencyToCoin","receiptCurrency","getLbcAmountStrForSwap","lbcAmount","handleStartSwap","Lbryio","lbc_satoshi_requested","parseInt","btc_satoshi_provided","pay_to_wallet_address","response","btcAmount","Charge","data","pricing","rate","Exchange","timeline","lastTimeline","length","newSwap","chargeCode","charge_code","coins","Object","keys","addresses","payment","receiptTxid","transaction_id","lbcTxid","lbc_txid","_objectSpread","err","msg","translateError","handleViewPastSwaps","now","Date","forEach","x","getViewTransactionElement","isSend","sendTxId","url","href","lbcTxId","getCloseButton","autoFocus","tooltip","size","customTooltipText","getGap","isNaN","timer","setTimeout","satoshi","Math","round","clearTimeout","find","JSON","stringify","actionMain","I18nMessage","tokens","LbcSymbol","affixClass","max","min","step","placeholder","error","disabled","onChange","event","parseFloat","target","Spinner","actionPending","map","dai","usdc","bitcoin","ethereum","litecoin","bitcoincash","getCoinLabel","CopyableText","inputElem","inputStr","selectEndIndex","lastIndexOf","substring","match","setSelectionRange","postfix","actionConfirmingSend","actionProcessingAndSuccess","actionPastSwaps","coinSwap","getShortStatusStr","MODALS","address","onConfirm","closeModal","Form","onSubmit","Card","Error","getActionElement","Nag","relative","Redirect","to","PAGES","pathname","selectCoinSwaps","state","selectState","withRouter","selectReceiveAddress","selectUserVerifiedEmail","dispatch","modal","doOpenModal","options","_doToast","coinSwapInfo","getState","selectPrefsReady","doAlertWaitingForSync","ACTIONS","doRemoveCoinSwap","doGetNewAddress","doCheckAddressIsMine","sendAddress","WalletSwap","Page","noSideNavigation","backout","backoutLabel"],"sourceRoot":""}