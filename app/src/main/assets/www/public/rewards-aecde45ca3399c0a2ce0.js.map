{"version":3,"file":"rewards-aecde45ca3399c0a2ce0.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/busy-indicator.jsx","webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/common/transaction-link.jsx","webpack://odysee.com/../ui/component/rewardAuthIntro/view.jsx","webpack://odysee.com/../ui/component/rewardAuthIntro/index.js","webpack://odysee.com/../ui/component/rewardLink/view.jsx","webpack://odysee.com/../ui/component/rewardLink/index.js","webpack://odysee.com/../ui/component/rewardListClaimed/view.jsx","webpack://odysee.com/../ui/component/rewardListClaimed/index.js","webpack://odysee.com/../ui/component/rewardTile/view.jsx","webpack://odysee.com/../ui/component/rewardTile/index.js","webpack://odysee.com/../ui/page/rewards/view.jsx","webpack://odysee.com/../ui/page/rewards/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\n\ntype Props = {\n  message: ?string,\n};\n\nclass BusyIndicator extends React.PureComponent<Props> {\n  static defaultProps = {\n    message: '',\n  };\n\n  render() {\n    const { message } = this.props;\n\n    return (\n      <span className=\"busy-indicator\">\n        {message} <span className=\"busy-indicator__loader\" />\n      </span>\n    );\n  }\n}\n\nexport default BusyIndicator;\n","// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\n\ntype Props = {\n  id: string,\n};\n\nconst TransactionLink = (props: Props) => {\n  const { id } = props;\n\n  const href = `https://explorer.lbry.com/tx/${id}`;\n  const label = id.substr(0, 7);\n\n  return <Button button=\"link\" href={href} label={label} />;\n};\n\nexport default TransactionLink;\n","// @flow\nimport { SITE_NAME } from 'config';\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport CreditAmount from 'component/common/credit-amount';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\n\ntype Props = {\n  balance: number,\n  totalRewardValue: number,\n  title?: string,\n};\n\nfunction RewardAuthIntro(props: Props) {\n  const { totalRewardValue, title } = props;\n  const totalRewardRounded = Math.floor(totalRewardValue / 10) * 10;\n\n  return (\n    <Card\n      title={title || __('Unlock %SITE_NAME% rewards to earn Credits', { SITE_NAME })}\n      subtitle={\n        <I18nMessage\n          tokens={{\n            credit_amount: <CreditAmount inheritStyle amount={totalRewardRounded} />,\n            site_name: SITE_NAME,\n          }}\n        >\n          Unlocking %site_name% rewards allows you to earn more than %credit_amount% in rewards.\n        </I18nMessage>\n      }\n      actions={\n        <Button\n          requiresAuth\n          button=\"primary\"\n          navigate={`/$/${PAGES.REWARDS_VERIFY}?redirect=/$/${PAGES.REWARDS}`}\n          label={__('Unlock Rewards')}\n        />\n      }\n    />\n  );\n}\n\nexport default RewardAuthIntro;\n","import { connect } from 'react-redux';\nimport { selectUnclaimedRewardValue } from 'redux/selectors/rewards';\nimport RewardAuthIntro from './view';\n\nconst select = state => ({\n  totalRewardValue: selectUnclaimedRewardValue(state),\n});\n\nexport default connect(select, null)(RewardAuthIntro);\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport LbcMessage from 'component/common/lbc-message';\n\ntype Reward = {\n  reward_amount: number,\n  reward_range: string,\n};\n\ntype Props = {\n  isPending: boolean,\n  label: ?string,\n  reward: Reward,\n  button: ?boolean,\n  disabled: boolean,\n  claimReward: (Reward) => void,\n};\n\nconst RewardLink = (props: Props) => {\n  const { reward, claimReward, label, isPending, button, disabled = false } = props;\n  let displayLabel = label;\n  if (isPending) {\n    displayLabel = __('Claiming...');\n  } else if (label) {\n    displayLabel = label;\n  } else if (reward && reward.reward_range && reward.reward_range.includes('-')) {\n    displayLabel = __('Claim %range% LBC', { range: reward.reward_range });\n  } else if (reward && reward.reward_amount > 0) {\n    displayLabel = __('Claim %amount% LBC', { amount: reward.reward_amount });\n  } else {\n    displayLabel = __('Claim ??? LBC');\n  }\n\n  return !reward ? null : (\n    <Button\n      button={button ? 'primary' : 'link'}\n      disabled={disabled || isPending}\n      label={<LbcMessage>{displayLabel}</LbcMessage>}\n      aria-label={displayLabel}\n      onClick={() => {\n        claimReward(reward);\n      }}\n    />\n  );\n};\n\nexport default RewardLink;\n","import { connect } from 'react-redux';\nimport { makeSelectRewardByClaimCode, makeSelectIsRewardClaimPending } from 'redux/selectors/rewards';\nimport { doClaimRewardType } from 'redux/actions/rewards';\n\nimport RewardLink from './view';\n\nconst select = (state, props) => ({\n  isPending: makeSelectIsRewardClaimPending()(state, props),\n  reward: makeSelectRewardByClaimCode()(state, props.claim_code),\n});\n\nconst perform = dispatch => ({\n  claimReward: reward =>\n    dispatch(doClaimRewardType(reward.reward_type, { notifyError: true, params: { claim_code: reward.claim_code } })),\n});\n\nexport default connect(select, perform)(RewardLink);\n","// @flow\nimport React from 'react';\nimport ButtonTransaction from 'component/common/transaction-link';\nimport moment from 'moment';\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport Card from 'component/common/card';\n\ntype Reward = {\n  id: string,\n  reward_title: string,\n  reward_amount: number,\n  transaction_id: string,\n  created_at: string,\n};\n\ntype Props = {\n  rewards: Array<Reward>,\n};\n\nconst RewardListClaimed = (props: Props) => {\n  const { rewards } = props;\n\n  if (!rewards || !rewards.length) {\n    return null;\n  }\n\n  return (\n    <Card\n      title={<div className=\"table__header-text\">{__('Claimed Rewards')}</div>}\n      subtitle={\n        <div className=\"table__header-text\">\n          {__(\n            'Reward history is tied to your email. In case of lost or multiple wallets, your balance may differ from the amounts claimed'\n          )}\n        </div>\n      }\n      isBodyList\n      body={\n        <div className=\"table__wrapper\">\n          <table className=\"table table--rewards\">\n            <thead>\n              <tr>\n                <th>{__('Title')}</th>\n                <th>\n                  <LbcSymbol size={20} />\n                </th>\n                <th>{__('Transaction')}</th>\n                <th>{__('Date')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {rewards.reverse().map((reward) => (\n                <tr key={reward.id}>\n                  <td>{reward.reward_title}</td>\n                  <td>{reward.reward_amount}</td>\n                  <td>{reward.transaction_id && <ButtonTransaction id={reward.transaction_id} />}</td>\n                  <td>{moment(reward.created_at).format('LLL')}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      }\n    />\n  );\n};\n\nexport default RewardListClaimed;\n","import { connect } from 'react-redux';\nimport { selectClaimedRewards } from 'redux/selectors/rewards';\nimport RewardListClaimed from './view';\n\nconst select = (state) => ({\n  rewards: selectClaimedRewards(state),\n});\n\nexport default connect(select, null)(RewardListClaimed);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport React from 'react';\nimport Icon from 'component/common/icon';\nimport RewardLink from 'component/rewardLink';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport rewards from 'rewards';\nimport LbcMessage from 'component/common/lbc-message';\n\ntype Props = {\n  openRewardCodeModal: () => void,\n  openSetReferrerModal: () => void,\n  reward: {\n    id: string,\n    reward_title: string,\n    reward_amount: number,\n    reward_range?: string,\n    transaction_id: string,\n    created_at: string,\n    reward_description: string,\n    reward_type: string,\n    claim_code: string,\n  },\n  user: User,\n  disabled: boolean,\n};\n\nconst RewardTile = (props: Props) => {\n  const { reward, openRewardCodeModal, openSetReferrerModal, user, disabled = false } = props;\n  const referrerSet = user && user.invited_by_id;\n  const claimed = !!reward.transaction_id;\n  const customActionsRewards = [rewards.TYPE_REFERRAL, rewards.TYPE_REFEREE];\n\n  return (\n    <Card\n      title={__(reward.reward_title)}\n      subtitle={<LbcMessage>{reward.reward_description}</LbcMessage>}\n      actions={\n        <div className=\"section__actions\">\n          {reward.reward_type === rewards.TYPE_GENERATED_CODE && (\n            <Button button=\"primary\" onClick={openRewardCodeModal} label={__('Enter Code')} disabled={disabled} />\n          )}\n          {reward.reward_type === rewards.TYPE_REFERRAL && (\n            <Button\n              button=\"primary\"\n              navigate=\"/$/invite\"\n              label={__('Go To Invites')}\n              aria-hidden={disabled}\n              tabIndex={disabled ? -1 : 0}\n            />\n          )}\n          {reward.reward_type === rewards.TYPE_REFEREE && (\n            <>\n              {referrerSet && <RewardLink button reward_type={reward.reward_type} disabled={disabled} />}\n              <Button\n                button={referrerSet ? 'link' : 'primary'}\n                onClick={openSetReferrerModal}\n                label={referrerSet ? __('Change Inviter') : __('Set Inviter')}\n                disabled={disabled}\n              />\n            </>\n          )}\n          {!customActionsRewards.some((i) => i === reward.reward_type) &&\n            (claimed ? (\n              <span>\n                <Icon icon={ICONS.COMPLETED} /> {__('Reward claimed.')}\n              </span>\n            ) : (\n              <RewardLink button claim_code={reward.claim_code} disabled={disabled} />\n            ))}\n        </div>\n      }\n    />\n  );\n};\n\nexport default RewardTile;\n","import * as MODALS from 'constants/modal_types';\nimport { connect } from 'react-redux';\nimport { doOpenModal } from 'redux/actions/app';\nimport { selectUser } from 'redux/selectors/user';\nimport RewardTile from './view';\n\nconst select = state => ({\n  user: selectUser(state),\n});\nconst perform = dispatch => ({\n  openRewardCodeModal: () => dispatch(doOpenModal(MODALS.REWARD_GENERATED_CODE)),\n  openSetReferrerModal: () => dispatch(doOpenModal(MODALS.SET_REFERRER)),\n});\n\nexport default connect(select, perform)(RewardTile);\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport React, { PureComponent } from 'react';\nimport BusyIndicator from 'component/common/busy-indicator';\nimport RewardListClaimed from 'component/rewardListClaimed';\nimport RewardTile from 'component/rewardTile';\nimport Button from 'component/button';\nimport Page from 'component/page';\nimport classnames from 'classnames';\nimport REWARD_TYPES from 'rewards';\nimport RewardAuthIntro from 'component/rewardAuthIntro';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\nimport { SITE_HELP_EMAIL, SITE_NAME } from 'config';\n\ntype Props = {\n  doAuth: () => void,\n  fetchRewards: () => void,\n  fetchUser: () => void,\n  fetching: boolean,\n  rewards: Array<Reward>,\n  claimed: Array<Reward>,\n  user: ?{\n    is_identity_verified: boolean,\n    is_reward_approved: boolean,\n    primary_email: string,\n    has_verified_email: boolean,\n  },\n  daemonSettings: {\n    share_usage_data: boolean,\n  },\n};\n\nclass RewardsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { user, fetchUser, fetchRewards } = this.props;\n    const rewardsApproved = user && user.is_reward_approved;\n\n    fetchRewards();\n    if (!rewardsApproved) {\n      fetchUser();\n    }\n  }\n\n  renderPageHeader() {\n    const { user, daemonSettings, fetchUser } = this.props;\n    const rewardsEnabled = IS_WEB || (daemonSettings && daemonSettings.share_usage_data);\n\n    if (user && !user.is_reward_approved && rewardsEnabled) {\n      if (!user.primary_email || !user.has_verified_email || !user.is_identity_verified) {\n        return (\n          <div className=\"section\">\n            <RewardAuthIntro />\n          </div>\n        );\n      }\n\n      return (\n        <Card\n          className=\"section\"\n          title={__('Reward validation pending')}\n          body={\n            <React.Fragment>\n              <p>\n                {__(\n                  'This account must undergo review before you can participate in the rewards program. Not all users and regions may qualify.'\n                )}{' '}\n                {__('This can take anywhere from a few hours to several days. Please be patient.')}\n              </p>\n\n              <p>\n                {__(\n                  'We apologize for this inconvenience, but have added this additional step to prevent abuse. Users on VPN or shared connections will continue to see this message and are not eligible for Rewards.'\n                )}\n              </p>\n              <p>\n                <I18nMessage\n                  tokens={{\n                    rewards_faq: (\n                      <Button\n                        button=\"link\"\n                        label={__('Rewards FAQ')}\n                        href=\"https://help.odysee.tv/category-monetization/category-rewards/\"\n                      />\n                    ),\n                    help_email: SITE_HELP_EMAIL,\n                    site_name: SITE_NAME,\n                  }}\n                >\n                  Please review the %rewards_faq% for eligibility, and send us an email to %help_email% if you continue\n                  to see this message. You can continue to use %site_name% without this feature.\n                </I18nMessage>\n                {`${__('Enjoy all the awesome free content in the meantime!')}`}\n              </p>\n            </React.Fragment>\n          }\n          actions={\n            <div className=\"section__actions\">\n              <Button navigate=\"/\" button=\"primary\" label=\"Return Home\" />\n              <Button onClick={() => fetchUser()} button=\"link\" label=\"Refresh\" />\n            </div>\n          }\n        />\n      );\n    }\n\n    return null;\n  }\n\n  renderCustomRewardCode() {\n    const { user } = this.props;\n    const isNotEligible = !user || !user.primary_email || !user.has_verified_email || !user.is_reward_approved;\n    return (\n      <RewardTile\n        key={REWARD_TYPES.TYPE_GENERATED_CODE}\n        reward={{\n          reward_type: REWARD_TYPES.TYPE_GENERATED_CODE,\n          reward_title: __('Custom Code'),\n          reward_description: __('Are you a supermodel or rockstar that received a custom reward code? Claim it here.'),\n        }}\n        disabled={isNotEligible}\n      />\n    );\n  }\n\n  renderUnclaimedRewards() {\n    const { fetching, rewards, user, daemonSettings, claimed } = this.props;\n\n    if (!IS_WEB && daemonSettings && !daemonSettings.share_usage_data) {\n      return (\n        <section className=\"card card--section\">\n          <h2 className=\"card__title card__title--deprecated\">{__('Rewards Disabled')}</h2>\n          <p className=\"error__text\">\n            <I18nMessage tokens={{ settings: <Button button=\"link\" navigate=\"/$/settings\" label=\"Settings\" /> }}>\n              Rewards are currently disabled for your account. Turn on diagnostic data sharing, in %settings%, to\n              re-enable them.\n            </I18nMessage>\n          </p>\n        </section>\n      );\n    } else if (fetching) {\n      return <BusyIndicator message={__('Fetching rewards')} />;\n    } else if (user === null) {\n      return (\n        <p className=\"help\">{__('This application is unable to earn rewards due to an authentication failure.')}</p>\n      );\n    } else if (!rewards || rewards.length <= 0) {\n      return (\n        <Card\n          title={__('No rewards available')}\n          subtitle={\n            claimed && claimed.length\n              ? __(\n                  \"You have claimed all available rewards! We're regularly adding more so be sure to check back later.\"\n                )\n              : __('There are no rewards available at this time, please check back later.')\n          }\n          actions={<Button button=\"primary\" navigate={`/$/${PAGES.DISCOVER}`} label={__('Go Home')} />}\n        />\n      );\n    }\n\n    const isNotEligible = !user || !user.primary_email || !user.has_verified_email || !user.is_reward_approved;\n\n    return (\n      <div\n        aria-hidden={isNotEligible}\n        className={classnames('card__list', {\n          'card--disabled': isNotEligible,\n        })}\n      >\n        {rewards.map((reward) => (\n          <RewardTile disabled={isNotEligible} key={reward.claim_code} reward={reward} />\n        ))}\n        {this.renderCustomRewardCode()}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Page>\n        {this.renderPageHeader()}\n        <div className=\"section\">{this.renderUnclaimedRewards()}</div>\n        <RewardListClaimed />\n      </Page>\n    );\n  }\n}\n\nexport default RewardsPage;\n","import { connect } from 'react-redux';\nimport { selectUser } from 'redux/selectors/user';\nimport { selectFetchingRewards, selectUnclaimedRewards, selectClaimedRewards } from 'redux/selectors/rewards';\nimport { doUserFetch } from 'redux/actions/user';\nimport { doRewardList } from 'redux/actions/rewards';\nimport { selectDaemonSettings } from 'redux/selectors/settings';\nimport RewardsPage from './view';\n\nconst select = state => ({\n  daemonSettings: selectDaemonSettings(state),\n  fetching: selectFetchingRewards(state),\n  rewards: selectUnclaimedRewards(state),\n  claimed: selectClaimedRewards(state),\n  user: selectUser(state),\n});\n\nconst perform = dispatch => ({\n  fetchRewards: () => dispatch(doRewardList()),\n  fetchUser: () => dispatch(doUserFetch()),\n});\n\nexport default connect(select, perform)(RewardsPage);\n"],"names":["BusyIndicator","_React$PureComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","key","value","message","this","props","React","className","FirstPaneWrapper","singlePane","children","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","href","concat","label","substr","totalRewardValue","totalRewardRounded","Math","floor","Card","SITE_NAME","I18nMessage","tokens","credit_amount","CreditAmount","inheritStyle","amount","site_name","requiresAuth","navigate","PAGES","connect","state","selectUnclaimedRewardValue","RewardAuthIntro","reward","claimReward","isPending","_props$disabled","disabled","displayLabel","reward_range","includes","range","reward_amount","LbcMessage","makeSelectIsRewardClaimPending","makeSelectRewardByClaimCode","claim_code","dispatch","doClaimRewardType","reward_type","notifyError","params","RewardLink","rewards","length","LbcSymbol","size","reverse","map","reward_title","transaction_id","ButtonTransaction","moment","created_at","format","selectClaimedRewards","RewardListClaimed","openRewardCodeModal","openSetReferrerModal","user","referrerSet","invited_by_id","claimed","customActionsRewards","reward_description","tabIndex","some","i","selectUser","doOpenModal","MODALS","RewardTile","RewardsPage","_PureComponent","_this$props","fetchUser","fetchRewards","rewardsApproved","is_reward_approved","_this$props2","daemonSettings","primary_email","has_verified_email","is_identity_verified","rewards_faq","help_email","SITE_HELP_EMAIL","isNotEligible","REWARD_TYPES","_this$props3","fetching","renderCustomRewardCode","Page","renderPageHeader","renderUnclaimedRewards","PureComponent","selectDaemonSettings","selectFetchingRewards","selectUnclaimedRewards","doRewardList","doUserFetch"],"sourceRoot":""}