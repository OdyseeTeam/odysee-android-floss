{"version":3,"file":"videoPlayersPage-1adde3bc8a0b85de0685.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/videoClaimInitiator/view.jsx","webpack://odysee.com/../ui/component/videoClaimInitiator/index.js","webpack://odysee.com/../ui/page/claim/internal/claimPageComponent/internal/streamClaimPage/internal/videoPlayers/view.jsx","webpack://odysee.com/../ui/page/claim/internal/claimPageComponent/internal/streamClaimPage/internal/videoPlayers/index.js"],"sourcesContent":["// @flow\n// This component is entirely for triggering the start of a video claim view\n// A video/audio claim will actually be rendered by VideoRenderFloating, which\n// will use this component to properly position itself based on the ClaimCoverRender\nimport React from 'react';\n\nimport Button from 'component/button';\nimport ClaimCoverRender from 'component/claimCoverRender';\n\ntype Props = {\n  // -- withStreamClaimRender --\n  uri: string,\n  children?: any,\n  streamClaim: () => void,\n  // -- redux --\n  doSetMainPlayerDimension: (dimensions: { height: number, width: number }) => void,\n};\n\nconst VideoClaimInitiator = (props: Props) => {\n  const { uri, children, streamClaim, doSetMainPlayerDimension } = props;\n\n  const playerRef = React.useCallback(\n    (node) => {\n      if (node) {\n        const rect = node.getBoundingClientRect();\n        doSetMainPlayerDimension(rect);\n      }\n    },\n    [doSetMainPlayerDimension]\n  );\n\n  return (\n    <ClaimCoverRender uri={uri} onClick={streamClaim} passedRef={playerRef}>\n      <Button className=\"button--icon button--play\" onClick={streamClaim} iconSize={30} title={__('Play')} />\n      {children}\n    </ClaimCoverRender>\n  );\n};\n\nexport default VideoClaimInitiator;\n","import { connect } from 'react-redux';\n\nimport { doSetMainPlayerDimension } from 'redux/actions/app';\nimport withStreamClaimRender from 'hocs/withStreamClaimRender';\n\nimport VideoClaimInitiator from './view';\n\nconst perform = {\n  doSetMainPlayerDimension,\n};\n\nexport default withStreamClaimRender(connect(null, perform)(VideoClaimInitiator));\n","// @flow\nimport { VIDEO_ALMOST_FINISHED_THRESHOLD } from 'constants/player';\nimport * as React from 'react';\nimport { lazyImport } from 'util/lazyImport';\nimport * as ICONS from 'constants/icons';\nimport * as DRAWERS from 'constants/drawer_types';\nimport * as COLLECTIONS_CONSTS from 'constants/collections';\nimport FileTitleSection from 'component/fileTitleSection';\nimport VideoClaimInitiator from 'component/videoClaimInitiator';\nimport ClaimCoverRender from 'component/claimCoverRender';\nimport RecommendedContent from 'component/recommendedContent';\nimport Empty from 'component/common/empty';\nimport SwipeableDrawer from 'component/swipeableDrawer';\nimport DrawerExpandButton from 'component/swipeableDrawerExpand';\nimport { useIsMobile, useIsMobileLandscape, useIsMediumScreen } from 'effects/use-screensize';\n\nconst CommentsList = lazyImport(() => import('component/commentsList' /* webpackChunkName: \"comments\" */));\nconst PlaylistCard = lazyImport(() => import('component/playlistCard' /* webpackChunkName: \"playlistCard\" */));\n\nexport const PRIMARY_PLAYER_WRAPPER_CLASS = 'file-page__video-container';\nexport const PRIMARY_IMAGE_WRAPPER_CLASS = 'file-render__img-container';\n\ntype Props = {\n  uri: string,\n  accessStatus: ?string,\n  // -- redux --\n  audioVideoDuration: ?number,\n  commentsListTitle: string,\n  fileInfo: FileListItem,\n  isMature: boolean,\n  isUriPlaying: boolean,\n  linkedCommentId?: string,\n  threadCommentId?: string,\n  location: { search: string },\n  playingCollectionId: ?string,\n  position: number,\n  commentSettingDisabled: ?boolean,\n  videoTheaterMode: boolean,\n  contentUnlocked: boolean,\n  isAutoplayCountdownForUri: ?boolean,\n  clearPosition: (uri: string) => void,\n};\n\nexport default function VideoPlayersPage(props: Props) {\n  const {\n    uri,\n    accessStatus,\n    // -- redux --\n    playingCollectionId,\n    fileInfo,\n    isMature,\n    linkedCommentId,\n    threadCommentId,\n    videoTheaterMode,\n    commentSettingDisabled,\n    audioVideoDuration,\n    commentsListTitle,\n    isUriPlaying,\n    location,\n    position,\n    contentUnlocked,\n    isAutoplayCountdownForUri,\n    clearPosition,\n  } = props;\n\n  const isMobile = useIsMobile();\n  const isMediumScreen = useIsMediumScreen() && !isMobile;\n  const isLandscapeRotated = useIsMobileLandscape();\n\n  const initialPlayingCol = React.useRef(playingCollectionId);\n\n  const { search } = location;\n  const urlParams = new URLSearchParams(search);\n  const colParam = urlParams.get(COLLECTIONS_CONSTS.COLLECTION_ID);\n\n  const collectionId = React.useMemo(() => {\n    const startedPlayingOtherPlaylist =\n      (isUriPlaying || playingCollectionId === null) &&\n      playingCollectionId !== undefined &&\n      !initialPlayingCol.current !== playingCollectionId;\n    return startedPlayingOtherPlaylist ? playingCollectionId : colParam;\n  }, [colParam, isUriPlaying, playingCollectionId]);\n\n  const rightSideProps = React.useMemo(\n    () => ({ collectionId, uri, isMediumScreen }),\n    [collectionId, isMediumScreen, uri]\n  );\n\n  const videoPlayedEnoughToResetPosition = React.useMemo(() => {\n    // I've never seen 'fileInfo' contain metadata lately, but retaining as historical fallback.\n    const durationInSecs =\n      audioVideoDuration ||\n      (fileInfo && fileInfo.metadata && fileInfo.metadata.video ? fileInfo.metadata.video.duration : 0);\n    const isVideoTooShort = durationInSecs <= 45;\n    const almostFinishedPlaying = position / durationInSecs >= VIDEO_ALMOST_FINISHED_THRESHOLD;\n\n    return durationInSecs ? isVideoTooShort || almostFinishedPlaying : false;\n  }, [audioVideoDuration, fileInfo, position]);\n\n  React.useEffect(() => {\n    // always refresh file info when entering file page to see if we have the file\n    // this could probably be refactored into more direct components now\n    if (fileInfo && videoPlayedEnoughToResetPosition) {\n      clearPosition(uri);\n    }\n  }, [clearPosition, fileInfo, uri, videoPlayedEnoughToResetPosition]);\n\n  if (isMature) {\n    return (\n      <>\n        <div className=\"section card-stack file-page__video\">\n          {isAutoplayCountdownForUri && (\n            <div className={PRIMARY_PLAYER_WRAPPER_CLASS}>\n              <ClaimCoverRender uri={uri} />\n            </div>\n          )}\n\n          <FileTitleSection uri={uri} accessStatus={accessStatus} isNsfwBlocked />\n        </div>\n\n        {isMediumScreen && <PlaylistCard id={collectionId} uri={uri} useDrawer={isMobile} />}\n        {!videoTheaterMode && <RightSideContent {...rightSideProps} />}\n      </>\n    );\n  }\n\n  const commentsListProps = { uri, linkedCommentId, threadCommentId };\n  return (\n    <>\n      <div className=\"section card-stack file-page__video\">\n        <div className={PRIMARY_PLAYER_WRAPPER_CLASS}>\n          <VideoClaimInitiator uri={uri} />\n        </div>\n\n        <div className=\"file-page__secondary-content\">\n          <section className=\"file-page__media-actions\">\n            {isMediumScreen && <PlaylistCard id={collectionId} uri={uri} useDrawer={isMobile} />}\n\n            <FileTitleSection uri={uri} accessStatus={accessStatus} />\n\n            {contentUnlocked &&\n              (commentSettingDisabled ? (\n                <Empty padded={!isMobile} text={__('The creator of this content has disabled comments.')} />\n              ) : isMobile && !isLandscapeRotated ? (\n                <React.Fragment>\n                  <SwipeableDrawer type={DRAWERS.CHAT} title={<h2>{commentsListTitle}</h2>}>\n                    <React.Suspense fallback={null}>\n                      <CommentsList {...commentsListProps} />\n                    </React.Suspense>\n                  </SwipeableDrawer>\n\n                  <DrawerExpandButton icon={ICONS.CHAT} label={<h2>{commentsListTitle}</h2>} type={DRAWERS.CHAT} />\n                </React.Fragment>\n              ) : (\n                <React.Suspense fallback={null}>\n                  <CommentsList {...commentsListProps} notInDrawer />\n                </React.Suspense>\n              ))}\n          </section>\n\n          {videoTheaterMode && <RightSideContent {...rightSideProps} />}\n        </div>\n      </div>\n\n      {!videoTheaterMode && <RightSideContent {...rightSideProps} />}\n    </>\n  );\n}\n\ntype RightSideProps = {\n  collectionId: ?string,\n  uri: string,\n  isMediumScreen: boolean,\n};\n\nconst RightSideContent = (rightSideProps: RightSideProps) => {\n  const { collectionId, uri, isMediumScreen } = rightSideProps;\n\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"card-stack--spacing-m\">\n      {!isMediumScreen && <PlaylistCard id={collectionId} uri={uri} useDrawer={isMobile} />}\n      <RecommendedContent uri={uri} />\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport * as SETTINGS from 'constants/settings';\n\nimport { getChannelIdFromClaim } from 'util/claim';\nimport { LINKED_COMMENT_QUERY_PARAM, THREAD_COMMENT_QUERY_PARAM } from 'constants/comment';\n\nimport { selectClaimIsNsfwForUri, selectClaimForUri } from 'redux/selectors/claims';\nimport { makeSelectFileInfoForUri } from 'redux/selectors/file_info';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport {\n  selectContentPositionForUri,\n  selectPlayingCollectionId,\n  selectIsUriCurrentlyPlaying,\n  selectIsAutoplayCountdownForUri,\n} from 'redux/selectors/content';\nimport { selectCommentsListTitleForUri, selectCommentsDisabledSettingForChannelId } from 'redux/selectors/comments';\nimport { selectNoRestrictionOrUserIsMemberForContentClaimId } from 'redux/selectors/memberships';\nimport { clearPosition } from 'redux/actions/content';\n\nimport VideoPlayersPage from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n  const { search } = location;\n\n  const urlParams = new URLSearchParams(search);\n  const playingCollectionId = selectPlayingCollectionId(state);\n  const claim = selectClaimForUri(state, uri);\n  const channelId = getChannelIdFromClaim(claim);\n\n  const claimId = claim.claim_id;\n\n  return {\n    commentsListTitle: selectCommentsListTitleForUri(state, uri),\n    fileInfo: makeSelectFileInfoForUri(uri)(state),\n    isMature: selectClaimIsNsfwForUri(state, uri),\n    isUriPlaying: selectIsUriCurrentlyPlaying(state, uri),\n    linkedCommentId: urlParams.get(LINKED_COMMENT_QUERY_PARAM),\n    threadCommentId: urlParams.get(THREAD_COMMENT_QUERY_PARAM),\n    playingCollectionId,\n    position: selectContentPositionForUri(state, uri),\n    commentSettingDisabled: selectCommentsDisabledSettingForChannelId(state, channelId),\n    videoTheaterMode: selectClientSetting(state, SETTINGS.VIDEO_THEATER_MODE),\n    contentUnlocked: claimId && selectNoRestrictionOrUserIsMemberForContentClaimId(state, claimId),\n    isAutoplayCountdownForUri: selectIsAutoplayCountdownForUri(state, uri),\n  };\n};\n\nconst perform = {\n  clearPosition,\n};\n\nexport default withRouter(connect(select, perform)(VideoPlayersPage));\n"],"names":["props","uri","children","streamClaim","doSetMainPlayerDimension","playerRef","React","node","rect","getBoundingClientRect","ClaimCoverRender","onClick","passedRef","Button","className","iconSize","title","__","perform","withStreamClaimRender","connect","VideoClaimInitiator","CommentsList","lazyImport","PlaylistCard","PRIMARY_PLAYER_WRAPPER_CLASS","RightSideContent","rightSideProps","collectionId","isMediumScreen","isMobile","useIsMobile","id","useDrawer","RecommendedContent","clearPosition","withRouter","state","search","location","urlParams","URLSearchParams","playingCollectionId","selectPlayingCollectionId","claim","selectClaimForUri","channelId","getChannelIdFromClaim","claimId","claim_id","commentsListTitle","selectCommentsListTitleForUri","fileInfo","makeSelectFileInfoForUri","isMature","selectClaimIsNsfwForUri","isUriPlaying","selectIsUriCurrentlyPlaying","linkedCommentId","get","LINKED_COMMENT_QUERY_PARAM","threadCommentId","THREAD_COMMENT_QUERY_PARAM","position","selectContentPositionForUri","commentSettingDisabled","selectCommentsDisabledSettingForChannelId","videoTheaterMode","selectClientSetting","SETTINGS","contentUnlocked","selectNoRestrictionOrUserIsMemberForContentClaimId","isAutoplayCountdownForUri","selectIsAutoplayCountdownForUri","accessStatus","audioVideoDuration","useIsMediumScreen","isLandscapeRotated","useIsMobileLandscape","initialPlayingCol","colParam","COLLECTIONS_CONSTS","undefined","current","videoPlayedEnoughToResetPosition","durationInSecs","metadata","video","duration","isVideoTooShort","almostFinishedPlaying","VIDEO_ALMOST_FINISHED_THRESHOLD","FileTitleSection","isNsfwBlocked","commentsListProps","Empty","padded","text","SwipeableDrawer","type","DRAWERS","fallback","DrawerExpandButton","icon","ICONS","label","_extends","notInDrawer"],"sourceRoot":""}