{"version":3,"file":"modalWalletEncrypt-40e0f2c3556402aa55d8.js","mappings":"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","sources":["webpack://odysee.com/../ui/modal/modalWalletEncrypt/view.jsx","webpack://odysee.com/../ui/modal/modalWalletEncrypt/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Form, FormField, Submit } from 'component/common/form';\nimport { Modal } from 'modal/modal';\nimport Button from 'component/button';\nimport { setSavedPassword } from 'util/saved-passwords';\n\ntype Props = {\n  closeModal: () => void,\n  walletEncryptSucceded: boolean,\n  updateWalletStatus: boolean,\n  encryptWallet: (?string) => void,\n  updateWalletStatus: () => void,\n};\n\ntype State = {\n  newPassword: ?string,\n  newPasswordConfirm: ?string,\n  passwordMismatch: boolean,\n  understandConfirmed: boolean,\n  understandError: boolean,\n  submitted: boolean,\n  failMessage: ?string,\n  rememberPassword: boolean,\n};\n\nconst acknowledgementText = __('I Understand');\n\nclass ModalWalletEncrypt extends React.PureComponent<Props, State> {\n  state = {\n    newPassword: null,\n    newPasswordConfirm: null,\n    passwordMismatch: false,\n    understandConfirmed: false,\n    understandError: false,\n    submitted: false, // Prior actions could be marked complete\n    failMessage: undefined,\n    rememberPassword: false,\n  };\n\n  componentDidUpdate() {\n    const { props, state } = this;\n\n    if (state.submitted) {\n      if (props.walletEncryptSucceded === true) {\n        props.closeModal();\n        props.updateWalletStatus();\n      } else if (props.walletEncryptSucceded === false) {\n        // See https://github.com/lbryio/lbry/issues/1307\n        this.setState({ failMessage: 'Unable to encrypt wallet.' });\n      }\n    }\n  }\n\n  onChangeNewPassword(event: SyntheticInputEvent<>) {\n    this.setState({ newPassword: event.target.value });\n  }\n\n  onChangeRememberPassword(event: SyntheticInputEvent<>) {\n    this.setState({ rememberPassword: event.target.checked });\n  }\n\n  onChangeNewPasswordConfirm(event: SyntheticInputEvent<>) {\n    this.setState({ newPasswordConfirm: event.target.value });\n  }\n\n  onChangeUnderstandConfirm(event: SyntheticInputEvent<>) {\n    const regex = new RegExp('^.?' + acknowledgementText + '.?$', 'i');\n    this.setState({\n      understandConfirmed: regex.test(event.target.value),\n    });\n  }\n\n  submitEncryptForm() {\n    const { state } = this;\n\n    if (!state.newPassword) {\n      return;\n    }\n\n    let invalidEntries = false;\n\n    if (state.newPassword !== state.newPasswordConfirm) {\n      this.setState({ passwordMismatch: true });\n      invalidEntries = true;\n    }\n\n    if (state.understandConfirmed === false) {\n      this.setState({ understandError: true });\n      invalidEntries = true;\n    }\n\n    if (invalidEntries === true) {\n      return;\n    }\n\n    setSavedPassword(state.newPassword, state.rememberPassword);\n    this.setState({ submitted: true });\n    this.props.encryptWallet(state.newPassword);\n  }\n\n  render() {\n    const { closeModal } = this.props;\n\n    const { passwordMismatch, understandError, failMessage } = this.state;\n    return (\n      <Modal\n        isOpen\n        title={__('Encrypt wallet')}\n        contentLabel={__('Encrypt wallet')}\n        type=\"custom\"\n        onConfirmed={() => this.submitEncryptForm()}\n        onAborted={closeModal}\n      >\n        <Form onSubmit={() => this.submitEncryptForm()}>\n          <p>\n            {__(\n              'Encrypting your wallet will require a password to access your local wallet data when LBRY starts. Please enter a new password for your wallet.'\n            )}{' '}\n            <Button button=\"link\" label={__('Learn more')} href=\"https://lbry.com/faq/wallet-encryption\" />.\n          </p>\n          <fieldset-section>\n            <FormField\n              autoFocus\n              error={passwordMismatch === true ? 'Passwords do not match' : false}\n              label={__('Password')}\n              placeholder={__('Shh...')}\n              type=\"password\"\n              name=\"wallet-new-password\"\n              onChange={(event) => this.onChangeNewPassword(event)}\n            />\n          </fieldset-section>\n          <fieldset-section>\n            <FormField\n              error={passwordMismatch === true ? 'Passwords do not match' : false}\n              label={__('Confirm Password')}\n              placeholder={__('Your eyes only')}\n              type=\"password\"\n              name=\"wallet-new-password-confirm\"\n              onChange={(event) => this.onChangeNewPasswordConfirm(event)}\n            />\n          </fieldset-section>\n          <fieldset-section>\n            <FormField\n              label={__('Remember Password')}\n              type=\"checkbox\"\n              name=\"wallet-remember-password\"\n              onChange={(event) => this.onChangeRememberPassword(event)}\n              checked={this.state.rememberPassword}\n            />\n          </fieldset-section>\n\n          <div className=\"help--warning\">\n            {__(\n              'If your password is lost, it cannot be recovered. You will not be able to access your wallet without a password.'\n            )}\n          </div>\n          <FormField\n            inputButton={<Submit label={failMessage ? __('Encrypting Wallet') : __('Encrypt wallet')} />}\n            error={\n              understandError === true\n                ? __('You must enter \"%acknowledgement_text%\"', { acknowledgement_text: acknowledgementText })\n                : false\n            }\n            label={__('Enter \"%acknowledgement_text%\"', { acknowledgement_text: acknowledgementText })}\n            placeholder={__('Type \"%acknowledgement_text%\"', { acknowledgement_text: acknowledgementText })}\n            type=\"text\"\n            name=\"wallet-understand\"\n            onChange={(event) => this.onChangeUnderstandConfirm(event)}\n          />\n          {failMessage && <div className=\"error__text\">{__(failMessage)}</div>}\n        </Form>\n        <div className=\"card__actions\">\n          <Button button=\"link\" label={__('Cancel')} onClick={closeModal} />\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default ModalWalletEncrypt;\n","import { connect } from 'react-redux';\nimport { selectWalletEncryptSucceeded, selectWalletEncryptResult } from 'redux/selectors/wallet';\nimport { doWalletStatus, doWalletEncrypt } from 'redux/actions/wallet';\nimport { doHideModal } from 'redux/actions/app';\nimport ModalWalletEncrypt from './view';\n\nconst select = (state) => ({\n  walletEncryptSucceded: selectWalletEncryptSucceeded(state),\n  walletEncryptResult: selectWalletEncryptResult(state),\n});\n\nconst perform = (dispatch) => ({\n  closeModal: () => dispatch(doHideModal()),\n  encryptWallet: (password) => dispatch(doWalletEncrypt(password)),\n  updateWalletStatus: () => dispatch(doWalletStatus()),\n});\n\nexport default connect(select, perform)(ModalWalletEncrypt);\n"],"names":["acknowledgementText","__","_React$PureComponent","_inherits","ModalWalletEncrypt","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_assertThisInitialized","newPassword","newPasswordConfirm","passwordMismatch","understandConfirmed","understandError","submitted","failMessage","undefined","rememberPassword","key","value","props","this","state","walletEncryptSucceded","closeModal","updateWalletStatus","setState","event","target","checked","regex","RegExp","test","invalidEntries","setSavedPassword","encryptWallet","_this2","_this$state","React","Modal","isOpen","title","contentLabel","type","onConfirmed","submitEncryptForm","onAborted","Form","onSubmit","Button","button","label","href","FormField","autoFocus","error","placeholder","name","onChange","onChangeNewPassword","onChangeNewPasswordConfirm","onChangeRememberPassword","className","inputButton","Submit","acknowledgement_text","onChangeUnderstandConfirm","onClick","connect","selectWalletEncryptSucceeded","walletEncryptResult","selectWalletEncryptResult","dispatch","doHideModal","password","doWalletEncrypt","doWalletStatus"],"sourceRoot":""}