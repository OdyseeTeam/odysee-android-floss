{"version":3,"file":"livestream-5912b23b190c70522ce2.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/livestreamLink/view.jsx","webpack://odysee.com/../ui/component/livestreamLink/index.js","webpack://odysee.com/../ui/component/livestreamMenu/view.jsx","webpack://odysee.com/../ui/component/livestreamMenu/index.js","webpack://odysee.com/../ui/component/videoClaimInitiator/view.jsx","webpack://odysee.com/../ui/component/videoClaimInitiator/index.js","webpack://odysee.com/../ui/contexts/livestream.js","webpack://odysee.com/../ui/component/livestreamLayout/view.jsx","webpack://odysee.com/../ui/component/livestreamLayout/index.js","webpack://odysee.com/../ui/page/claim/internal/claimPageComponent/internal/streamClaimPage/internal/livestream/view.jsx","webpack://odysee.com/../ui/page/claim/internal/claimPageComponent/internal/streamClaimPage/internal/livestream/index.js"],"sourcesContent":["// @flow\n\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport { formatLbryUrlForWeb } from 'util/url';\nimport * as ICONS from 'constants/icons';\nimport Card from 'component/common/card';\nimport ClaimPreview from 'component/claimPreview';\nimport Icon from 'component/common/icon';\n\ntype Props = {\n  title?: string,\n  claimUri: string,\n  doResolveUri: (uri: string) => void,\n};\n\nconst LivestreamLink = (props: Props) => {\n  const { claimUri, title = null, doResolveUri } = props;\n  const { push } = useHistory();\n\n  React.useEffect(() => {\n    if (claimUri) {\n      doResolveUri(claimUri);\n    }\n  }, [claimUri, doResolveUri]);\n\n  if (!claimUri) return null;\n\n  return (\n    <Card\n      className=\"livestream__channel-link claim-preview__wrapper--live\"\n      title={\n        <h1 className=\"page__title\">\n          <Icon icon={ICONS.LIVESTREAM_MONOCHROME} />\n          <label>{title || __('Live stream in progress')}</label>\n        </h1>\n      }\n      onClick={() => push(formatLbryUrlForWeb(claimUri))}\n    >\n      <ClaimPreview uri={claimUri} type=\"inline\" hideMenu />\n    </Card>\n  );\n};\n\nexport default LivestreamLink;\n","import { connect } from 'react-redux';\n\nimport { doResolveUri } from 'redux/actions/claims';\n\nimport LivestreamLink from './view';\n\nimport withLiveStatus from 'hocs/withLiveStatus';\n\nconst perform = {\n  doResolveUri,\n};\n\nexport default withLiveStatus(connect(null, perform)(LivestreamLink));\n","// @flow\n// $FlowFixMe\nimport { Global } from '@emotion/react';\n\nimport { Menu, MenuButton, MenuList, MenuItem } from '@reach/menu-button';\nimport { useHistory } from 'react-router-dom';\nimport usePersistedState from 'effects/use-persisted-state';\nimport * as ICONS from 'constants/icons';\nimport Icon from 'component/common/icon';\nimport React from 'react';\n\ntype Props = {\n  isPopoutWindow?: boolean,\n  hyperchatsHidden?: boolean,\n  noHyperchats?: boolean,\n  isMobile?: boolean,\n  isCompact?: boolean,\n  hideChat?: () => void,\n  setPopoutWindow?: (any) => void,\n  toggleHyperchats?: () => void,\n  toggleIsCompact?: () => void,\n  // -- redux --\n  claimId: ?string,\n  claimIsMine: boolean,\n  channelHasMembershipTiers: boolean,\n  isLivestreamChatMembersOnly?: boolean,\n  doToggleLiveChatMembersOnlySettingForClaimId: (claimId: ClaimId) => Promise<any>,\n  doToast: ({ message: string }) => void,\n};\n\nconst LivestreamMenu = (props: Props) => {\n  const {\n    hideChat,\n    hyperchatsHidden,\n    isCompact,\n    isMobile,\n    isPopoutWindow,\n    noHyperchats,\n    setPopoutWindow,\n    toggleHyperchats,\n    toggleIsCompact,\n    // -- redux --\n    claimId,\n    claimIsMine,\n    channelHasMembershipTiers,\n    isLivestreamChatMembersOnly,\n    doToggleLiveChatMembersOnlySettingForClaimId,\n    doToast,\n  } = props;\n\n  const {\n    location: { pathname },\n  } = useHistory();\n\n  const initialPopoutUnload = React.useRef(false);\n\n  const [showTimestamps, setShowTimestamps] = usePersistedState('live-timestamps', false);\n\n  function updateLivestreamMembersOnlyChat() {\n    if (claimId) {\n      doToggleLiveChatMembersOnlySettingForClaimId(claimId).then(() =>\n        doToast({\n          message: __(\n            isLivestreamChatMembersOnly ? 'Members-only chat is now disabled.' : 'Members-only chat is now enabled.'\n          ),\n        })\n      );\n    }\n  }\n\n  function handlePopout() {\n    if (setPopoutWindow) {\n      const popoutWindow = window.open('/$/popout' + pathname, 'Popout Chat', 'height=700,width=400');\n\n      // Adds function to popoutWindow when unloaded and verify if it was closed\n      const handleUnload = (e) => {\n        if (!initialPopoutUnload.current) {\n          initialPopoutUnload.current = true;\n        } else {\n          const timer = setInterval((a, b) => {\n            if (popoutWindow.closed) {\n              clearInterval(timer);\n              setPopoutWindow(undefined);\n            }\n          }, 300);\n        }\n      };\n\n      popoutWindow.onunload = handleUnload;\n\n      if (window.focus) popoutWindow.focus();\n      setPopoutWindow(popoutWindow);\n    }\n  }\n\n  return (\n    <>\n      <MenuGlobalStyles showTimestamps={showTimestamps} />\n\n      <Menu>\n        <MenuButton className=\"menu__button\">\n          <Icon size={isMobile ? 16 : 18} icon={ICONS.SETTINGS} />\n        </MenuButton>\n\n        <MenuList className=\"menu__list\">\n          {channelHasMembershipTiers && claimIsMine && (\n            <MenuItem className=\"comment__menu-option\" onSelect={() => updateLivestreamMembersOnlyChat()}>\n              <span className=\"menu__link\">\n                <Icon aria-hidden icon={ICONS.MEMBERSHIP} />\n                {__(isLivestreamChatMembersOnly ? 'Disable Members-Only Chat' : 'Enable Members-Only Chat')}\n              </span>\n            </MenuItem>\n          )}\n          <MenuItem className=\"comment__menu-option\" onSelect={() => setShowTimestamps(!showTimestamps)}>\n            <span className=\"menu__link\">\n              <Icon aria-hidden icon={ICONS.TIME} />\n              {__('Toggle Timestamps')}\n            </span>\n          </MenuItem>\n          <MenuItem className=\"comment__menu-option\" onSelect={toggleIsCompact}>\n            <span className=\"menu__link\">\n              <Icon aria-hidden icon={!isCompact ? ICONS.COMPACT : ICONS.EXPAND} size={18} />\n              {!isCompact ? __('Enable Compact Mode') : __('Disable Compact Mode')}\n            </span>\n          </MenuItem>\n\n          {!isMobile ? (\n            <>\n              {!noHyperchats && (\n                <MenuItem className=\"comment__menu-option\" onSelect={toggleHyperchats}>\n                  <span className=\"menu__link\">\n                    <Icon aria-hidden icon={hyperchatsHidden ? ICONS.EYE : ICONS.DISMISS_ALL} size={18} />\n                    {hyperchatsHidden ? __('Display HyperChats') : __('Dismiss HyperChats')}\n                  </span>\n                </MenuItem>\n              )}\n              {/* No need for Hide Chat on mobile with the expand/collapse drawer */}\n              <MenuItem className=\"comment__menu-option\" onSelect={hideChat}>\n                <span className=\"menu__link\">\n                  <Icon aria-hidden icon={ICONS.EYE} />\n                  {__('Hide Chat')}\n                </span>\n              </MenuItem>\n\n              {!isPopoutWindow && (\n                <MenuItem className=\"comment__menu-option\" onSelect={handlePopout}>\n                  <span className=\"menu__link\">\n                    <Icon aria-hidden icon={ICONS.EXTERNAL} />\n                    {__('Popout Chat')}\n                  </span>\n                </MenuItem>\n              )}\n            </>\n          ) : (\n            !noHyperchats && (\n              <MenuItem className=\"comment__menu-option\" onSelect={toggleHyperchats}>\n                <span className=\"menu__link\">\n                  <Icon aria-hidden icon={hyperchatsHidden ? ICONS.EYE : ICONS.DISMISS_ALL} size={18} />\n                  {hyperchatsHidden ? __('Display HyperChats') : __('Dismiss HyperChats')}\n                </span>\n              </MenuItem>\n            )\n          )}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\nexport default LivestreamMenu;\n\ntype GlobalStylesProps = {\n  showTimestamps?: boolean,\n};\n\nconst MenuGlobalStyles = (globalStylesProps: GlobalStylesProps) => {\n  const { showTimestamps } = globalStylesProps;\n\n  return (\n    <Global\n      styles={{\n        ':root': {\n          '--live-timestamp-opacity': showTimestamps ? '0.5' : '0',\n        },\n      }}\n    />\n  );\n};\n","import { connect } from 'react-redux';\nimport { selectClaimForUri, selectClaimIsMineForUri } from 'redux/selectors/claims';\nimport { doToggleLiveChatMembersOnlySettingForClaimId } from 'redux/actions/comments';\nimport { selectLivestreamChatMembersOnlyForChannelId } from 'redux/selectors/comments';\nimport { selectChannelHasMembershipTiersForId } from 'redux/selectors/memberships';\nimport { doToast } from 'redux/actions/notifications';\nimport { getChannelFromClaim } from 'util/claim';\n\nimport ChatLayout from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const claim = selectClaimForUri(state, uri);\n  const claimId = claim && claim.claim_id;\n  const { claim_id: channelId } = getChannelFromClaim(claim) || {};\n\n  return {\n    claimId,\n    claimIsMine: selectClaimIsMineForUri(state, uri),\n    channelHasMembershipTiers: channelId && selectChannelHasMembershipTiersForId(state, channelId),\n    isLivestreamChatMembersOnly: selectLivestreamChatMembersOnlyForChannelId(state, channelId),\n  };\n};\n\nconst perform = {\n  doToggleLiveChatMembersOnlySettingForClaimId,\n  doToast,\n};\n\nexport default connect(select, perform)(ChatLayout);\n","// @flow\n// This component is entirely for triggering the start of a video claim view\n// A video/audio claim will actually be rendered by VideoRenderFloating, which\n// will use this component to properly position itself based on the ClaimCoverRender\nimport React from 'react';\n\nimport Button from 'component/button';\nimport ClaimCoverRender from 'component/claimCoverRender';\n\ntype Props = {\n  // -- withStreamClaimRender --\n  uri: string,\n  children?: any,\n  streamClaim: () => void,\n  // -- redux --\n  doSetMainPlayerDimension: (dimensions: { height: number, width: number }) => void,\n};\n\nconst VideoClaimInitiator = (props: Props) => {\n  const { uri, children, streamClaim, doSetMainPlayerDimension } = props;\n\n  const playerRef = React.useCallback(\n    (node) => {\n      if (node) {\n        const rect = node.getBoundingClientRect();\n        doSetMainPlayerDimension(rect);\n      }\n    },\n    [doSetMainPlayerDimension]\n  );\n\n  return (\n    <ClaimCoverRender uri={uri} onClick={streamClaim} passedRef={playerRef}>\n      <Button className=\"button--icon button--play\" onClick={streamClaim} iconSize={30} title={__('Play')} />\n      {children}\n    </ClaimCoverRender>\n  );\n};\n\nexport default VideoClaimInitiator;\n","import { connect } from 'react-redux';\n\nimport { doSetMainPlayerDimension } from 'redux/actions/app';\nimport withStreamClaimRender from 'hocs/withStreamClaimRender';\n\nimport VideoClaimInitiator from './view';\n\nconst perform = {\n  doSetMainPlayerDimension,\n};\n\nexport default withStreamClaimRender(connect(null, perform)(VideoClaimInitiator));\n","// @flow\nimport React from 'react';\n\nexport const LivestreamContext = React.createContext<any>();\n","// @flow\nimport { lazyImport } from 'util/lazyImport';\nimport { useIsMobile, useIsMobileLandscape } from 'effects/use-screensize';\nimport FileTitleSection from 'component/fileTitleSection';\nimport LivestreamLink from 'component/livestreamLink';\nimport React from 'react';\nimport { PRIMARY_PLAYER_WRAPPER_CLASS } from 'constants/player';\nimport VideoClaimInitiator from 'component/videoClaimInitiator';\nimport * as ICONS from 'constants/icons';\nimport * as DRAWERS from 'constants/drawer_types';\nimport SwipeableDrawer from 'component/swipeableDrawer';\nimport DrawerExpandButton from 'component/swipeableDrawerExpand';\nimport LivestreamMenu from 'component/livestreamMenu';\nimport CreditAmount from 'component/common/credit-amount';\nimport Button from 'component/button';\nimport classnames from 'classnames';\n\nimport usePersistedState from 'effects/use-persisted-state';\nimport { getTipValues } from 'util/livestream';\nimport 'scss/component/_swipeable-drawer.scss';\n\nconst LivestreamScheduledInfo = lazyImport(() =>\n  import('component/livestreamScheduledInfo' /* webpackChunkName: \"livestreamScheduledInfo\" */)\n);\nconst ChatLayout = lazyImport(() => import('component/chat' /* webpackChunkName: \"chat\" */));\n\nconst VIEW_MODES = {\n  CHAT: 'chat',\n  SUPERCHAT: 'sc',\n};\n\ntype Props = {\n  uri: string,\n  livestreamChatEnabled: boolean,\n  // -- redux --\n  activeStreamUri: boolean | string,\n  claim: ?StreamClaim,\n  chatDisabled: boolean,\n  isCurrentClaimLive: boolean,\n  showScheduledInfo: boolean,\n  superChats: Array<Comment>,\n  activeViewers?: number,\n  videoTheaterMode: boolean,\n  doClearPlayingUri: () => void,\n};\n\nexport default function LivestreamLayout(props: Props) {\n  const {\n    uri,\n    livestreamChatEnabled,\n    // -- redux --\n    activeStreamUri,\n    claim,\n    chatDisabled,\n    isCurrentClaimLive,\n    showScheduledInfo,\n    superChats,\n    activeViewers,\n    videoTheaterMode,\n    doClearPlayingUri,\n  } = props;\n\n  const isMobile = useIsMobile();\n  const isLandscapeRotated = useIsMobileLandscape();\n\n  const [hyperchatsHidden, setHyperchatsHidden] = React.useState(false);\n  const [chatViewMode, setChatViewMode] = React.useState(VIEW_MODES.CHAT);\n  const [isCompact, setIsCompact] = usePersistedState('isCompact', false);\n\n  const liveStatusFetching = activeStreamUri === undefined;\n\n  React.useEffect(() => {\n    if (!isCurrentClaimLive) doClearPlayingUri();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [isCurrentClaimLive]);\n\n  if (!claim || !claim.signing_channel) return null;\n\n  const { name: channelName } = claim.signing_channel;\n\n  return (\n    <section className=\"card-stack file-page__video\">\n      <div className={PRIMARY_PLAYER_WRAPPER_CLASS}>\n        <VideoClaimInitiator uri={claim.canonical_url}>\n          {showScheduledInfo && <LivestreamScheduledInfo uri={claim.canonical_url} />}\n        </VideoClaimInitiator>\n      </div>\n      <div className=\"file-page__secondary-content\">\n        <div className=\"file-page__media-actions\">\n          <div className=\"section card-stack\">\n            {!liveStatusFetching && !activeStreamUri && !showScheduledInfo && !isCurrentClaimLive ? (\n              <div className=\"help--notice\" style={{ marginTop: '20px' }}>\n                {channelName\n                  ? __(\"%channelName% isn't live right now, but the chat is! Check back later to watch the stream.\", {\n                      channelName,\n                    })\n                  : __(\"This channel isn't live right now, but the chat is! Check back later to watch the stream.\")}\n              </div>\n            ) : (\n              chatDisabled && (\n                <div className=\"help--notice\">\n                  {channelName\n                    ? __('%channel% has disabled chat for this stream. Enjoy the stream!', { channel: channelName })\n                    : __('This channel has disabled chat for this stream. Enjoy the stream!')}\n                </div>\n              )\n            )}\n\n            <LivestreamLink title={__(\"Click here to access the stream that's currently active\")} uri={uri} />\n\n            {isMobile && !isLandscapeRotated && livestreamChatEnabled && (\n              <React.Suspense fallback={null}>\n                <SwipeableDrawer\n                  type={DRAWERS.CHAT}\n                  title={\n                    <div className=\"chat-card--drawer-header\">\n                      <ChatModeSelector\n                        superChats={superChats}\n                        chatViewMode={chatViewMode}\n                        setChatViewMode={(mode) => setChatViewMode(mode)}\n                        activeViewers={activeViewers}\n                      />\n                      <LivestreamMenu\n                        uri={uri}\n                        noHyperchats={!superChats || superChats.length === 0}\n                        hyperchatsHidden={hyperchatsHidden}\n                        toggleHyperchats={() => setHyperchatsHidden(!hyperchatsHidden)}\n                        toggleIsCompact={() => setIsCompact(!isCompact)}\n                        isCompact={isCompact}\n                        isMobile\n                      />\n                    </div>\n                  }\n                  hasSubtitle={activeViewers}\n                >\n                  <ChatLayout\n                    uri={uri}\n                    hideHeader\n                    hyperchatsHidden={hyperchatsHidden}\n                    customViewMode={chatViewMode}\n                    setCustomViewMode={(mode) => setChatViewMode(mode)}\n                  />\n                </SwipeableDrawer>\n\n                <DrawerExpandButton icon={ICONS.CHAT} label={__('Open Live Chat')} type={DRAWERS.CHAT} />\n              </React.Suspense>\n            )}\n\n            <FileTitleSection uri={uri} />\n          </div>\n        </div>\n\n        {(!isMobile || isLandscapeRotated) && videoTheaterMode && livestreamChatEnabled && (\n          <React.Suspense fallback={null}>\n            <ChatLayout\n              uri={uri}\n              hyperchatsHidden={hyperchatsHidden}\n              customViewMode={chatViewMode}\n              setCustomViewMode={(mode) => setChatViewMode(mode)}\n            />\n          </React.Suspense>\n        )}\n      </div>\n    </section>\n  );\n}\n\nconst ChatModeSelector = (chatSelectorProps: any) => {\n  const { superChats, chatViewMode, setChatViewMode } = chatSelectorProps;\n  const { superChatsFiatAmount, superChatsLBCAmount } = getTipValues(superChats);\n\n  return (\n    <div className=\"chat-card--drawer-header-mode\">\n      <Button\n        title={__('Live Chat')}\n        label={__('Live Chat')}\n        className={classnames(`button-toggle`, {\n          'button-toggle--active': chatViewMode === VIEW_MODES.CHAT && superChats,\n        })}\n        iconSize={18}\n        onClick={() => setChatViewMode(VIEW_MODES.CHAT)}\n      />\n      {superChats && (\n        <Button\n          title={__('HyperChats')}\n          label={\n            <>\n              <CreditAmount amount={superChatsLBCAmount || 0} size={8} /> /\n              <CreditAmount amount={superChatsFiatAmount || 0} size={8} isFiat /> {__('Tipped')}\n            </>\n          }\n          className={classnames(`button-toggle`, { 'button-toggle--active': chatViewMode === VIEW_MODES.SUPERCHAT })}\n          iconSize={18}\n          onClick={() => setChatViewMode(VIEW_MODES.SUPERCHAT)}\n        />\n      )}\n    </div>\n  );\n};\n","import { connect } from 'react-redux';\n\nimport * as SETTINGS from 'constants/settings';\n\nimport { selectClaimForUri, selectThumbnailForUri } from 'redux/selectors/claims';\nimport { selectHyperChatsForUri } from 'redux/selectors/comments';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport {\n  selectViewersForId,\n  selectChatCommentsDisabledForUri,\n  selectClaimIsActiveChannelLivestreamForUri,\n  selectShowScheduledLiveInfoForUri,\n  selectActiveStreamUriForClaimUri,\n} from 'redux/selectors/livestream';\nimport { doClearPlayingUri } from 'redux/actions/content';\n\nimport LivestreamLayout from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const claim = selectClaimForUri(state, uri);\n  const claimId = claim && claim.claim_id;\n\n  return {\n    claim,\n    thumbnail: selectThumbnailForUri(state, uri),\n    chatDisabled: selectChatCommentsDisabledForUri(state, uri),\n    superChats: selectHyperChatsForUri(state, uri),\n    activeViewers: claimId && selectViewersForId(state, claimId),\n    isCurrentClaimLive: selectClaimIsActiveChannelLivestreamForUri(state, uri),\n    showScheduledInfo: selectShowScheduledLiveInfoForUri(state, uri),\n    activeStreamUri: selectActiveStreamUriForClaimUri(state, uri),\n    videoTheaterMode: selectClientSetting(state, SETTINGS.VIDEO_THEATER_MODE),\n  };\n};\n\nconst perform = {\n  doClearPlayingUri,\n};\n\nexport default connect(select, perform)(LivestreamLayout);\n","// @flow\nimport React from 'react';\nimport analytics from 'analytics';\n\nimport { formatLbryChannelName } from 'util/url';\nimport { lazyImport } from 'util/lazyImport';\nimport { useIsMobile, useIsMobileLandscape } from 'effects/use-screensize';\nimport { LivestreamContext } from 'contexts/livestream';\n\nimport LivestreamLayout from 'component/livestreamLayout';\nimport LoadingBarOneOff from 'component/loadingBarOneOff';\n\nconst ChatLayout = lazyImport(() => import('component/chat' /* webpackChunkName: \"chat\" */));\n\ntype Props = {\n  uri: string,\n  // -- redux --\n  chatDisabled: boolean,\n  claim: StreamClaim,\n  socketConnection: { connected: ?boolean },\n  isStreamPlaying: boolean,\n  theaterMode?: Boolean,\n  contentUnlocked: boolean,\n  doCommentSocketConnect: (uri: string, channelName: string, claimId: string, subCategory: ?string) => void,\n  doCommentSocketDisconnect: (claimId: string, channelName: string) => void,\n};\n\nexport default function LivestreamPage(props: Props) {\n  const {\n    uri,\n    // -- redux --\n    chatDisabled,\n    claim,\n    socketConnection,\n    isStreamPlaying,\n    theaterMode,\n    contentUnlocked,\n    doCommentSocketConnect,\n    doCommentSocketDisconnect,\n  } = props;\n\n  const isMobile = useIsMobile();\n  const isLandscapeRotated = useIsMobileLandscape();\n\n  const streamPlayingRef = React.useRef();\n\n  const [layoutRendered, setLayoutRendered] = React.useState(chatDisabled || isMobile);\n  const [hyperchatsHidden, setHyperchatsHidden] = React.useState(false);\n\n  const livestreamChatEnabled = !chatDisabled && contentUnlocked;\n  const showLivestreamChat = (!isMobile || isLandscapeRotated) && !theaterMode && livestreamChatEnabled;\n\n  React.useEffect(() => {\n    // TODO: This should not be needed once we unify the livestream player (?)\n    analytics.event.playerLoaded('livestream', false);\n  }, []);\n\n  const { signing_channel: channelClaim } = claim || {};\n  const { canonical_url: channelUrl } = channelClaim || {};\n\n  // On livestream page, only connect, videoRenderFloating will handle disconnect.\n  // (either by leaving page with floating player off, or by closing the player)\n  React.useEffect(() => {\n    const { claim_id: claimId, signing_channel: channelClaim } = claim;\n    const channelName = channelClaim && formatLbryChannelName(channelUrl);\n\n    if (claimId && channelName && !socketConnection?.connected && contentUnlocked) {\n      doCommentSocketConnect(uri, channelName, claimId, undefined);\n    }\n  }, [channelUrl, claim, doCommentSocketConnect, doCommentSocketDisconnect, socketConnection, uri, contentUnlocked]);\n\n  React.useEffect(() => {\n    // use for unmount case without triggering render\n    streamPlayingRef.current = isStreamPlaying;\n  }, [isStreamPlaying]);\n\n  React.useEffect(() => {\n    return () => {\n      if (!streamPlayingRef.current) {\n        const { claim_id: claimId, signing_channel: channelClaim } = claim;\n        const channelName = channelClaim && formatLbryChannelName(channelUrl);\n\n        if (claimId && channelName && contentUnlocked) doCommentSocketDisconnect(claimId, channelName);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only on unmount -> leave page\n  }, []);\n\n  return (\n    <LivestreamContext.Provider value={{ livestreamPage: true }}>\n      {/* -- Prevent layout shift: only render when ChatLayout is already imported otherwise\n      the chat will appear and push everything on the page */}\n      {(!showLivestreamChat || layoutRendered) && (\n        <LivestreamLayout uri={uri} livestreamChatEnabled={livestreamChatEnabled} />\n      )}\n\n      {showLivestreamChat && (\n        <React.Suspense fallback={<LoadingBarOneOff />}>\n          <ChatLayout\n            uri={uri}\n            hyperchatsHidden={hyperchatsHidden}\n            toggleHyperchats={() => setHyperchatsHidden(!hyperchatsHidden)}\n            setLayoutRendered={setLayoutRendered}\n          />\n        </React.Suspense>\n      )}\n    </LivestreamContext.Provider>\n  );\n}\n","import { connect } from 'react-redux';\n\nimport * as SETTINGS from 'constants/settings';\n\nimport { selectClaimForUri } from 'redux/selectors/claims';\nimport { selectSocketConnectionForId, selectChatCommentsDisabledForUri } from 'redux/selectors/livestream';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport { selectIsUriCurrentlyPlaying } from 'redux/selectors/content';\nimport { selectNoRestrictionOrUserIsMemberForContentClaimId } from 'redux/selectors/memberships';\n\nimport { doCommentSocketConnect, doCommentSocketDisconnect } from 'redux/actions/websocket';\n\nimport LivestreamPage from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const claim = selectClaimForUri(state, uri);\n  const { claim_id: claimId, canonical_url } = claim || {};\n\n  return {\n    claim,\n    chatDisabled: selectChatCommentsDisabledForUri(state, uri),\n    isStreamPlaying: selectIsUriCurrentlyPlaying(state, uri),\n    socketConnection: selectSocketConnectionForId(state, claimId),\n    theaterMode: selectClientSetting(state, SETTINGS.VIDEO_THEATER_MODE),\n    uri: canonical_url || '',\n    contentUnlocked: claimId && selectNoRestrictionOrUserIsMemberForContentClaimId(state, claimId),\n  };\n};\n\nconst perform = {\n  doCommentSocketConnect,\n  doCommentSocketDisconnect,\n};\n\nexport default connect(select, perform)(LivestreamPage);\n"],"names":["props","claimUri","_props$title","title","doResolveUri","push","useHistory","React","Card","className","Icon","icon","ICONS","__","onClick","formatLbryUrlForWeb","ClaimPreview","uri","type","hideMenu","perform","withLiveStatus","connect","LivestreamLink","hideChat","hyperchatsHidden","isCompact","isMobile","isPopoutWindow","noHyperchats","setPopoutWindow","toggleHyperchats","toggleIsCompact","claimId","claimIsMine","channelHasMembershipTiers","isLivestreamChatMembersOnly","doToggleLiveChatMembersOnlySettingForClaimId","doToast","pathname","location","initialPopoutUnload","_usePersistedState2","_slicedToArray","usePersistedState","showTimestamps","setShowTimestamps","MenuGlobalStyles","Menu","MenuButton","size","MenuList","MenuItem","onSelect","then","message","popoutWindow","window","open","onunload","e","current","timer","setInterval","a","b","closed","clearInterval","undefined","focus","globalStylesProps","Global","styles","state","claim","selectClaimForUri","claim_id","channelId","getChannelFromClaim","selectClaimIsMineForUri","selectChannelHasMembershipTiersForId","selectLivestreamChatMembersOnlyForChannelId","ChatLayout","children","streamClaim","doSetMainPlayerDimension","playerRef","node","rect","getBoundingClientRect","ClaimCoverRender","passedRef","Button","iconSize","withStreamClaimRender","VideoClaimInitiator","LivestreamContext","LivestreamScheduledInfo","lazyImport","VIEW_MODES","CHAT","SUPERCHAT","ChatModeSelector","chatSelectorProps","superChats","chatViewMode","setChatViewMode","_getTipValues","getTipValues","superChatsFiatAmount","superChatsLBCAmount","label","classnames","CreditAmount","amount","isFiat","doClearPlayingUri","thumbnail","selectThumbnailForUri","chatDisabled","selectChatCommentsDisabledForUri","selectHyperChatsForUri","activeViewers","selectViewersForId","isCurrentClaimLive","selectClaimIsActiveChannelLivestreamForUri","showScheduledInfo","selectShowScheduledLiveInfoForUri","activeStreamUri","selectActiveStreamUriForClaimUri","videoTheaterMode","selectClientSetting","SETTINGS","livestreamChatEnabled","useIsMobile","isLandscapeRotated","useIsMobileLandscape","_React$useState2","setHyperchatsHidden","_React$useState4","_setChatViewMode","setIsCompact","liveStatusFetching","signing_channel","channelName","name","PRIMARY_PLAYER_WRAPPER_CLASS","canonical_url","channel","style","marginTop","fallback","SwipeableDrawer","DRAWERS","mode","LivestreamMenu","length","hasSubtitle","hideHeader","customViewMode","setCustomViewMode","DrawerExpandButton","FileTitleSection","doCommentSocketConnect","doCommentSocketDisconnect","_ref","isStreamPlaying","selectIsUriCurrentlyPlaying","socketConnection","selectSocketConnectionForId","theaterMode","contentUnlocked","selectNoRestrictionOrUserIsMemberForContentClaimId","streamPlayingRef","layoutRendered","setLayoutRendered","showLivestreamChat","analytics","channelUrl","formatLbryChannelName","connected","_claimId","_channelName","Provider","value","livestreamPage","LivestreamLayout","LoadingBarOneOff"],"sourceRoot":""}