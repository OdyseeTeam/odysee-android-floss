{"version":3,"file":"top-d93154db85ad568037b2.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/claimEffectiveAmount/view.jsx","webpack://odysee.com/../ui/component/claimEffectiveAmount/index.js","webpack://odysee.com/../ui/component/searchTopClaim/index.js","webpack://odysee.com/../ui/component/searchTopClaim/view.jsx","webpack://odysee.com/../ui/page/top/view.jsx","webpack://odysee.com/../ui/page/top/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport CreditAmount from 'component/common/credit-amount';\n\ntype Props = {\n  uri: string,\n  claim: ?Claim,\n};\n\nfunction ClaimEffectiveAmount(props: Props) {\n  const { claim } = props;\n\n  if (!claim) {\n    return null;\n  }\n\n  return <CreditAmount amount={Number(claim.repost_bid_amount || claim.meta.effective_amount || claim.amount)} />;\n}\n\nexport default ClaimEffectiveAmount;\n","import { connect } from 'react-redux';\nimport { selectClaimForUri } from 'redux/selectors/claims';\nimport ClaimEffectiveAmount from './view';\n\nconst select = (state, props) => ({\n  claim: selectClaimForUri(state, props.uri, true),\n});\n\nexport default connect(select)(ClaimEffectiveAmount);\n","import { connect } from 'react-redux';\nimport { doBeginPublish } from 'redux/actions/publish';\nimport { doResolveUris } from 'redux/actions/claims';\nimport { doOpenModal } from 'redux/actions/app';\nimport { selectPendingIds, makeSelectClaimForUri } from 'redux/selectors/claims';\nimport { makeSelectWinningUriForQuery, selectIsResolvingWinningUri } from 'redux/selectors/search';\nimport SearchTopClaim from './view';\n\nconst select = (state, props) => {\n  const winningUri = makeSelectWinningUriForQuery(props.query)(state);\n\n  return {\n    winningUri,\n    winningClaim: winningUri ? makeSelectClaimForUri(winningUri)(state) : undefined,\n    isResolvingWinningUri: props.query ? selectIsResolvingWinningUri(state, props.query) : false,\n    pendingIds: selectPendingIds(state),\n  };\n};\n\nconst perform = (dispatch) => ({\n  beginPublish: (a, b, c) => dispatch(doBeginPublish(a, b, c)),\n  doResolveUris: (uris) => dispatch(doResolveUris(uris)),\n  doOpenModal: (id, props) => dispatch(doOpenModal(id, props)),\n});\n\nexport default connect(select, perform)(SearchTopClaim);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport * as MODALS from 'constants/modal_types';\nimport React from 'react';\nimport { parseURI } from 'util/lbryURI';\nimport ClaimPreview from 'component/claimPreview';\nimport Button from 'component/button';\nimport ClaimEffectiveAmount from 'component/claimEffectiveAmount';\nimport ClaimRepostAuthor from 'component/claimRepostAuthor';\nimport I18nMessage from 'component/i18nMessage';\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport { DOMAIN } from 'config';\n\ntype Props = {\n  doOpenModal: (string, {}) => void,\n  query: string,\n  winningUri: ?string,\n  doResolveUris: (Array<string>) => void,\n  hideLink?: boolean,\n  setChannelActive: (boolean) => void,\n  beginPublish: (PublishType, ?string) => void,\n  pendingIds: Array<string>,\n  isResolvingWinningUri: boolean,\n  winningClaim: ?Claim,\n  isSearching: boolean,\n};\n\nexport default function SearchTopClaim(props: Props) {\n  const {\n    doResolveUris,\n    doOpenModal,\n    query = '',\n    winningUri,\n    winningClaim,\n    hideLink = false,\n    setChannelActive,\n    beginPublish,\n    isResolvingWinningUri,\n    isSearching,\n  } = props;\n  const uriFromQuery = `lbry://${query}`;\n  let name;\n  let channelUriFromQuery;\n  let winningUriIsChannel;\n  try {\n    const { isChannel, streamName, channelName } = parseURI(uriFromQuery);\n    if (!isChannel) {\n      channelUriFromQuery = `lbry://@${query}`;\n      name = streamName;\n    } else {\n      name = channelName;\n    }\n  } catch (e) {}\n\n  if (winningUri) {\n    try {\n      const { isChannel: winnerIsChannel } = parseURI(winningUri);\n      winningUriIsChannel = winnerIsChannel;\n    } catch (e) {}\n  }\n\n  React.useEffect(() => {\n    setChannelActive && winningUriIsChannel && setChannelActive(true);\n  }, [setChannelActive, winningUriIsChannel]);\n\n  React.useEffect(() => {\n    let urisToResolve = [];\n    if (uriFromQuery) {\n      urisToResolve.push(uriFromQuery);\n    }\n\n    if (channelUriFromQuery) {\n      urisToResolve.push(channelUriFromQuery);\n    }\n\n    if (urisToResolve.length > 0) {\n      doResolveUris(urisToResolve);\n    }\n  }, [doResolveUris, uriFromQuery, channelUriFromQuery]);\n\n  return (\n    <div className=\"search__header\">\n      {winningUri && (\n        <div className=\"claim-preview__actions--header\">\n          <a\n            className=\"media__uri\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://help.odysee.tv/category-blockchain/category-staking/increase/\"\n            title={__('Learn more about Credits on %DOMAIN%', { DOMAIN })}\n          >\n            <LbcSymbol prefix={__('Most supported')} />\n          </a>\n        </div>\n      )}\n      {winningUri && winningClaim && (\n        <div className=\"card\">\n          <ClaimPreview\n            hideRepostLabel\n            showNullPlaceholder\n            uri={winningUri}\n            properties={(claim) => (\n              <span className=\"claim-preview__custom-properties\">\n                <ClaimRepostAuthor short uri={winningUri} />\n                <ClaimEffectiveAmount uri={winningUri} />\n              </span>\n            )}\n          />\n        </div>\n      )}\n      {!winningUri && (isSearching || isResolvingWinningUri) && (\n        <div className=\"card\">\n          <ClaimPreview placeholder={'loading'} />\n        </div>\n      )}\n      {!winningUri && !isSearching && !isResolvingWinningUri && uriFromQuery && (\n        <div className=\"card card--section help--inline\">\n          <I18nMessage\n            tokens={{\n              repost: <Button button=\"link\" onClick={() => doOpenModal(MODALS.REPOST, {})} label={__('Repost')} />,\n              publish: (\n                <span>\n                  <Button button=\"link\" onClick={() => beginPublish('file', name)} label={__('publish')} />\n                </span>\n              ),\n            }}\n          >\n            You have found the edge of the internet. %repost% or %publish% your stuff here to claim this spot.\n          </I18nMessage>\n        </div>\n      )}\n      {!hideLink && winningUri && (\n        <div className=\"section__actions--between section__actions--no-margin\">\n          <span />\n          <Button\n            button=\"link\"\n            className=\"search__top-link\"\n            label={\n              <I18nMessage tokens={{ name: <strong>{query}</strong> }}>View competing uploads for %name%</I18nMessage>\n            }\n            navigate={`/$/${PAGES.TOP}?name=${query}`}\n            iconRight={ICONS.ARROW_RIGHT}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\nimport classnames from 'classnames';\nimport Page from 'component/page';\nimport ClaimListDiscover from 'component/claimListDiscover';\nimport ClaimEffectiveAmount from 'component/claimEffectiveAmount';\nimport SearchTopClaim from 'component/searchTopClaim';\nimport * as CS from 'constants/claim_search';\nimport Button from 'component/button';\nimport * as MODALS from 'constants/modal_types';\nimport { SIMPLE_SITE } from 'config';\n\ntype Props = {\n  name: string,\n  beginPublish: (PublishType, ?string) => void,\n  doOpenModal: (string, {}) => void,\n};\n\nfunction TopPage(props: Props) {\n  const { name, beginPublish, doOpenModal } = props;\n  const [channelActive, setChannelActive] = React.useState(false);\n  // if the query was actually '@name', still offer repost for 'name'\n  const queryName = name && name[0] === '@' ? name.slice(1) : name;\n\n  if (!name) {\n    return (\n      <Page className=\"topPage-wrapper\">\n        <div className=\"empty empty--centered\">{__('No results')}</div>\n      </Page>\n    );\n  }\n\n  return (\n    <Page className=\"topPage-wrapper\">\n      <SearchTopClaim query={name} hideLink setChannelActive={setChannelActive} />\n      <ClaimListDiscover\n        name={channelActive ? `@${queryName}` : queryName}\n        defaultFreshness={CS.FRESH_ALL}\n        defaultOrderBy={CS.ORDER_BY_TOP}\n        streamType={SIMPLE_SITE ? CS.CONTENT_ALL : undefined}\n        meta={\n          <div className=\"search__top-links\">\n            <Button button=\"secondary\" onClick={() => doOpenModal(MODALS.REPOST, {})} label={__('Repost Here')} />\n            <Button button=\"secondary\" onClick={() => beginPublish('file', queryName)} label={__('Publish Here')} />\n          </div>\n        }\n        includeSupportAction\n        renderProperties={(claim) => (\n          <span className=\"claim-preview__custom-properties\">\n            {claim.meta.is_controlling && <span className=\"help--inline\">{__('Currently winning')}</span>}\n            <ClaimEffectiveAmount uri={claim.repost_url || claim.canonical_url} />\n          </span>\n        )}\n        header={\n          <div className=\"claim-search__menu-group\">\n            <Button\n              label={queryName}\n              button=\"alt\"\n              onClick={() => setChannelActive(false)}\n              className={classnames('button-toggle', {\n                'button-toggle--active': !channelActive,\n              })}\n            />\n            <Button\n              label={`@${queryName}`}\n              button=\"alt\"\n              onClick={() => setChannelActive(true)}\n              className={classnames('button-toggle', {\n                'button-toggle--active': channelActive,\n              })}\n            />\n          </div>\n        }\n      />\n    </Page>\n  );\n}\n\nexport default TopPage;\n","import { connect } from 'react-redux';\nimport TopPage from './view';\nimport { doBeginPublish } from 'redux/actions/publish';\nimport { doOpenModal } from 'redux/actions/app';\n\nconst select = (state, props) => {\n  const { search } = props.location;\n  const urlParams = new URLSearchParams(search);\n  const name = urlParams.get('name');\n\n  return {\n    name,\n  };\n};\n\nconst perform = (dispatch) => ({\n  beginPublish: (a, b, c) => dispatch(doBeginPublish(a, b, c)),\n  doOpenModal: (id, props) => dispatch(doOpenModal(id, props)),\n});\n\nexport default connect(select, perform)(TopPage);\n"],"names":["props","claim","React","CreditAmount","amount","Number","repost_bid_amount","meta","effective_amount","connect","state","selectClaimForUri","uri","ClaimEffectiveAmount","winningUri","makeSelectWinningUriForQuery","query","winningClaim","makeSelectClaimForUri","undefined","isResolvingWinningUri","selectIsResolvingWinningUri","pendingIds","selectPendingIds","dispatch","beginPublish","a","b","c","doBeginPublish","doResolveUris","uris","_doResolveUris","doOpenModal","id","_doOpenModal","name","channelUriFromQuery","winningUriIsChannel","_props$query","_props$hideLink","hideLink","setChannelActive","isSearching","uriFromQuery","concat","_parseURI","parseURI","isChannel","streamName","channelName","e","winnerIsChannel","urisToResolve","push","length","className","target","rel","href","title","__","DOMAIN","LbcSymbol","prefix","ClaimPreview","hideRepostLabel","showNullPlaceholder","properties","ClaimRepostAuthor","short","placeholder","I18nMessage","tokens","repost","Button","button","onClick","MODALS","label","publish","navigate","PAGES","iconRight","ICONS","_React$useState2","_slicedToArray","channelActive","queryName","slice","Page","SearchTopClaim","ClaimListDiscover","defaultFreshness","CS","defaultOrderBy","streamType","SIMPLE_SITE","includeSupportAction","renderProperties","is_controlling","repost_url","canonical_url","header","classnames","search","location","URLSearchParams","get","TopPage"],"sourceRoot":""}