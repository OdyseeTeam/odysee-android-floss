{"version":3,"file":"modalSendTip-08584239752e1f5675b7.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/walletSendTip/view.jsx","webpack://odysee.com/../ui/component/walletSendTip/index.js","webpack://odysee.com/../ui/modal/modalSendTip/view.jsx","webpack://odysee.com/../ui/modal/modalSendTip/index.js"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport { Form } from 'component/common/form';\nimport LbcMessage from 'component/common/lbc-message';\nimport { Lbryio } from 'lbryinc';\nimport { parseURI } from 'util/lbryURI';\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport * as STRIPE from 'constants/stripe';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport ChannelSelector from 'component/channelSelector';\nimport classnames from 'classnames';\nimport I18nMessage from 'component/i18nMessage';\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport React from 'react';\nimport usePersistedState from 'effects/use-persisted-state';\nimport WalletTipAmountSelector from 'component/walletTipAmountSelector';\n\nimport withCreditCard from 'hocs/withCreditCard';\n\nimport { getStripeEnvironment } from 'util/stripe';\nconst stripeEnvironment = getStripeEnvironment();\n\nconst TAB_BOOST = 'TabBoost';\nconst TAB_FIAT = 'TabFiat';\nconst TAB_LBC = 'TabLBC';\n\ntype SupportParams = { amount: number, claim_id: string, channel_id?: string };\ntype TipParams = { tipAmount: number, tipChannelName: string, channelClaimId: string };\ntype UserParams = { activeChannelName: ?string, activeChannelId: ?string };\n\ntype Props = {\n  activeChannelId?: string,\n  activeChannelName?: string,\n  balance: number,\n  claimId?: string,\n  claimType?: string,\n  channelClaimId?: string,\n  tipChannelName?: string,\n  claimIsMine: boolean,\n  fetchingChannels: boolean,\n  incognito: boolean,\n  instantTipEnabled: boolean,\n  instantTipMax: { amount: number, currency: string },\n  isPending: boolean,\n  isSupport: boolean,\n  title: string,\n  uri: string,\n  isTipOnly?: boolean,\n  hasSelectedTab?: string,\n  customText?: string,\n  doHideModal: () => void,\n  doSendCashTip: (\n    TipParams,\n    anonymous: boolean,\n    UserParams,\n    claimId: string,\n    stripe: ?string,\n    preferredCurrency: string,\n    ?(any) => void\n  ) => string,\n  doSendTip: (SupportParams, boolean) => void, // function that comes from lbry-redux\n  setAmount?: (number) => void,\n  preferredCurrency: string,\n  modalProps?: any,\n};\n\nexport default function WalletSendTip(props: Props) {\n  const {\n    activeChannelId,\n    activeChannelName,\n    balance,\n    claimId,\n    claimType,\n    channelClaimId,\n    tipChannelName,\n    claimIsMine,\n    fetchingChannels,\n    incognito,\n    instantTipEnabled,\n    instantTipMax,\n    isPending,\n    title,\n    uri,\n    isTipOnly,\n    hasSelectedTab,\n    customText,\n    doHideModal,\n    doSendCashTip,\n    doSendTip,\n    setAmount,\n    preferredCurrency,\n    modalProps,\n  } = props;\n\n  /** WHAT TAB TO SHOW **/\n  // if it's your content, we show boost, otherwise default is LBC\n  const defaultTabToShow = claimIsMine ? TAB_BOOST : TAB_FIAT;\n\n  // loads the default tab if nothing else is there yet\n  const [persistentTab, setPersistentTab] = usePersistedState('send-tip-modal', defaultTabToShow);\n  const [activeTab, setActiveTab] = React.useState(persistentTab);\n  const [hasSelected, setSelected] = React.useState(false);\n\n  /** STATE **/\n  const [tipAmount, setTipAmount] = usePersistedState('comment-support:customTip', 1.0);\n  const [isOnConfirmationPage, setConfirmationPage] = React.useState(false);\n  const [tipError, setTipError] = React.useState();\n  const [disableSubmitButton, setDisableSubmitButton] = React.useState();\n\n  /** CONSTS **/\n  const boostThisContentText = getBoostThisContentText();\n  const boostYourContentText = getBoostYourContentText();\n  const isSupport = claimIsMine || activeTab === TAB_BOOST;\n\n  const { icon: fiatIconToUse, symbol: fiatSymbolToUse } = STRIPE.CURRENCY[preferredCurrency];\n\n  // text for modal header\n  const titleText = isSupport\n    ? claimIsMine\n      ? boostYourContentText\n      : boostThisContentText\n    : __('Leave a tip for the creator');\n\n  let channelName;\n  try {\n    ({ channelName } = parseURI(uri));\n  } catch (e) {}\n\n  // icon to use or explainer text to show per tab\n  let explainerText = '';\n  switch (activeTab) {\n    case TAB_BOOST:\n      explainerText = getBoostExplainerText();\n      break;\n    case TAB_FIAT:\n    case TAB_LBC:\n      explainerText = __('Show this creator your appreciation by sending a donation.');\n      break;\n  }\n\n  /** FUNCTIONS **/\n\n  function getBoostExplainerText() {\n    switch (claimType) {\n      case 'stream':\n        return __('This refundable boost will improve the discoverability of this content while active.');\n      case 'channel':\n        return __('This refundable boost will improve the discoverability of this channel while active.');\n      case 'repost':\n        return __('This refundable boost will improve the discoverability of this repost while active.');\n      case 'collection':\n        return __('This refundable boost will improve the discoverability of this playlist while active.');\n      default:\n        return __('This refundable boost will improve the discoverability of this claim while active.');\n    }\n  }\n\n  function getBoostThisContentText() {\n    switch (claimType) {\n      case 'stream':\n        return __('Boost this content');\n      case 'channel':\n        return __('Boost this channel');\n      case 'repost':\n        return __('Boost this repost');\n      case 'collection':\n        return __('Boost this playlist');\n      default:\n        return __('Boost this claim');\n    }\n  }\n\n  function getBoostYourContentText() {\n    switch (claimType) {\n      case 'stream':\n        return __('Boost your content');\n      case 'channel':\n        return __('Boost your channel');\n      case 'repost':\n        return __('Boost your repost');\n      case 'collection':\n        return __('Boost your playlist');\n      default:\n        return __('Boost your claim');\n    }\n  }\n\n  // make call to the backend to send lbc or fiat\n  function sendSupportOrConfirm(instantTipMaxAmount = null) {\n    if (!isOnConfirmationPage && (!instantTipMaxAmount || !instantTipEnabled || tipAmount > instantTipMaxAmount)) {\n      setConfirmationPage(true);\n    } else {\n      const supportParams: SupportParams = {\n        amount: tipAmount,\n        claim_id: claimId || '',\n        channel_id: (!incognito && activeChannelId) || undefined,\n      };\n\n      // send tip/boost\n      doSendTip(supportParams, isSupport);\n      doHideModal();\n    }\n  }\n\n  // when the form button is clicked\n  function handleSubmit() {\n    if (!tipAmount || !claimId) return;\n\n    if (setAmount) {\n      setAmount(tipAmount);\n      doHideModal();\n      return;\n    }\n\n    // send an instant tip (no need to go to an exchange first)\n    if (instantTipEnabled && activeTab !== TAB_FIAT) {\n      if (instantTipMax.currency === 'LBC') {\n        sendSupportOrConfirm(instantTipMax.amount);\n      } else {\n        // Need to convert currency of instant purchase maximum before trying to send support\n        Lbryio.getExchangeRates().then(({ LBC_USD }) => sendSupportOrConfirm(instantTipMax.amount / LBC_USD));\n      }\n      // sending fiat tip\n    } else if (activeTab === TAB_FIAT) {\n      if (!isOnConfirmationPage) {\n        setConfirmationPage(true);\n      } else {\n        const tipParams: TipParams = {\n          tipAmount,\n          tipChannelName: tipChannelName || '',\n          channelClaimId: channelClaimId || '',\n        };\n        const userParams: UserParams = { activeChannelName, activeChannelId };\n\n        // hit backend to send tip\n        doSendCashTip(\n          tipParams,\n          !activeChannelId || incognito,\n          userParams,\n          claimId,\n          stripeEnvironment,\n          preferredCurrency\n        );\n        doHideModal();\n      }\n      // if it's a boost (?)\n    } else {\n      sendSupportOrConfirm();\n    }\n  }\n\n  function buildButtonText() {\n    // test if frontend will show up as isNan\n    function isNan(tipAmount) {\n      // testing for NaN ES5 style https://stackoverflow.com/a/35912757/3973137\n      // also sometimes it's returned as a string\n      // eslint-disable-next-line\n      return tipAmount !== tipAmount || tipAmount === 'NaN';\n    }\n\n    function convertToTwoDecimals(number) {\n      return (Math.round(number * 100) / 100).toFixed(2);\n    }\n\n    const amountToShow = activeTab === TAB_FIAT ? convertToTwoDecimals(tipAmount) : tipAmount;\n\n    // if it's a valid number display it, otherwise do an empty string\n    const displayAmount = !isNan(tipAmount) ? amountToShow : '';\n\n    // build button text based on tab\n    switch (activeTab) {\n      case TAB_BOOST:\n        return titleText;\n      case TAB_FIAT:\n        return __('Send a %amount% Tip', { amount: `${fiatSymbolToUse}${displayAmount}` });\n      case TAB_LBC:\n        return __('Send a %amount% Tip', { amount: `${displayAmount} LBC` });\n      default:\n        return titleText;\n    }\n  }\n\n  React.useEffect(() => {\n    if (!hasSelected && hasSelectedTab && activeTab !== hasSelectedTab) {\n      setActiveTab(claimIsMine ? TAB_BOOST : hasSelectedTab);\n      setSelected(true);\n    }\n  }, [activeTab, claimIsMine, hasSelected, hasSelectedTab, setActiveTab]);\n\n  React.useEffect(() => {\n    if (!hasSelectedTab && activeTab !== hasSelectedTab) {\n      setPersistentTab(claimIsMine ? TAB_BOOST : activeTab);\n    }\n  }, [activeTab, claimIsMine, hasSelectedTab, setPersistentTab]);\n\n  /** RENDER **/\n\n  const tabButtonProps = { isOnConfirmationPage, activeTab, setActiveTab };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      {/* if there is no LBC balance, show user frontend to get credits */}\n      {/* if there is lbc, the main tip/boost gui with the 3 tabs at the top */}\n      <Card\n        title={titleText}\n        className=\"modal--send-tip\"\n        subtitle={\n          <>\n            {!claimIsMine && (\n              <div className=\"section\">\n                {/* tip fiat tab button */}\n                {stripeEnvironment && (\n                  <TabSwitchButton icon={fiatIconToUse} label={__('Tip')} name={TAB_FIAT} {...tabButtonProps} />\n                )}\n\n                {/* tip LBC tab button */}\n                <TabSwitchButton icon={ICONS.LBC} label={__('Tip')} name={TAB_LBC} {...tabButtonProps} />\n\n                {/* support LBC tab button */}\n                {!isTipOnly && (\n                  <TabSwitchButton icon={ICONS.TRENDING} label={__('Boost')} name={TAB_BOOST} {...tabButtonProps} />\n                )}\n              </div>\n            )}\n\n            {/* short explainer under the button */}\n            <div className=\"section__subtitle\">\n              {explainerText}{' '}\n              <Button label={__('Learn more')} button=\"link\" href=\"https://help.odysee.tv/category-monetization/\" />\n            </div>\n          </>\n        }\n        actions={\n          // confirmation modal, allow  user to confirm or cancel transaction\n          isOnConfirmationPage ? (\n            <>\n              <div className=\"section card--inline confirm__wrapper\">\n                <div className=\"section\">\n                  <div className=\"confirm__label\">{__('To --[the tip recipient]--')}</div>\n                  <div className=\"confirm__value\">{channelName || title}</div>\n                  <div className=\"confirm__label\">{__('From --[the tip sender]--')}</div>\n                  <div className=\"confirm__value\">{(!incognito && activeChannelName) || __('Anonymous')}</div>\n                  <div className=\"confirm__label\">{__('Amount')}</div>\n                  <div className=\"confirm__value\">\n                    {activeTab === TAB_FIAT ? (\n                      <p>{`${fiatSymbolToUse} ${(Math.round(tipAmount * 100) / 100).toFixed(2)}`}</p>\n                    ) : (\n                      <LbcSymbol postfix={tipAmount} size={22} />\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"section__actions\">\n                {activeTab === TAB_FIAT ? (\n                  <SubmitCashTipButton handleSubmit={handleSubmit} isPending={isPending} />\n                ) : (\n                  <Button\n                    autoFocus\n                    onClick={handleSubmit}\n                    button=\"primary\"\n                    disabled={isPending}\n                    label={__('Confirm')}\n                  />\n                )}\n                <Button button=\"link\" label={__('Cancel')} onClick={() => setConfirmationPage(false)} />\n              </div>\n            </>\n          ) : !((activeTab === TAB_LBC || activeTab === TAB_BOOST) && balance === 0) ? (\n            <>\n              <ChannelSelector />\n\n              {/* section to pick tip/boost amount */}\n              <WalletTipAmountSelector\n                setTipError={setTipError}\n                tipError={tipError}\n                uri={uri}\n                activeTab={activeTab === TAB_BOOST ? TAB_LBC : activeTab}\n                amount={tipAmount}\n                onChange={(amount) => setTipAmount(amount)}\n                setDisableSubmitButton={setDisableSubmitButton}\n                modalProps={modalProps}\n              />\n\n              {/* send tip/boost button */}\n              <div className=\"section__actions\">\n                <Button\n                  autoFocus\n                  icon={isSupport ? ICONS.TRENDING : ICONS.SUPPORT}\n                  button=\"primary\"\n                  type=\"submit\"\n                  disabled={fetchingChannels || isPending || tipError || !tipAmount || disableSubmitButton}\n                  label={<LbcMessage>{customText || buildButtonText()}</LbcMessage>}\n                />\n                {fetchingChannels && <span className=\"help\">{__('Loading your channels...')}</span>}\n              </div>\n            </>\n          ) : (\n            // if it's LBC and there is no balance, you can prompt to purchase LBC\n            <Card\n              title={\n                <I18nMessage tokens={{ lbc: <LbcSymbol size={22} /> }}>Supporting content requires %lbc%</I18nMessage>\n              }\n              subtitle={\n                <I18nMessage tokens={{ lbc: <LbcSymbol /> }}>\n                  With %lbc%, you can send tips to your favorite creators, or help boost their content for more people\n                  to see.\n                </I18nMessage>\n              }\n              actions={\n                <div className=\"section__actions\">\n                  <Button\n                    icon={ICONS.REWARDS}\n                    button=\"primary\"\n                    label={__('Earn Rewards')}\n                    navigate={`/$/${PAGES.REWARDS}`}\n                  />\n                  {!window.odysee.build.googlePlay && (\n                    <Button\n                      icon={ICONS.BUY}\n                      button=\"secondary\"\n                      label={__('Buy/Swap Credits')}\n                      navigate={`/$/${PAGES.BUY}`}\n                    />\n                  )}\n                </div>\n              }\n            />\n          )\n        }\n      />\n    </Form>\n  );\n}\n\ntype TabButtonProps = {\n  icon: string,\n  label: string,\n  name: string,\n  isOnConfirmationPage: boolean,\n  activeTab: string,\n  setActiveTab: (string) => void,\n};\n\nconst TabSwitchButton = (tabButtonProps: TabButtonProps) => {\n  const { icon, label, name, isOnConfirmationPage, activeTab, setActiveTab } = tabButtonProps;\n  return (\n    <Button\n      key={name}\n      icon={icon}\n      label={label}\n      button=\"alt\"\n      onClick={() => {\n        const tipInputElement = document.getElementById('tip-input');\n        if (tipInputElement) tipInputElement.focus();\n        if (!isOnConfirmationPage) setActiveTab(name);\n      }}\n      className={classnames('button-toggle', { 'button-toggle--active': activeTab === name })}\n    />\n  );\n};\n\nconst SubmitCashTipButton = withCreditCard(\n  ({ isPending, handleSubmit }: { isPending: boolean, handleSubmit: () => void }) => (\n    <Button autoFocus disabled={isPending} onClick={handleSubmit} button=\"primary\" label={__('Confirm')} />\n  )\n);\n","import { connect } from 'react-redux';\nimport {\n  selectTitleForUri,\n  selectClaimForUri,\n  selectClaimIsMineForUri,\n  selectFetchingMyChannels,\n} from 'redux/selectors/claims';\nimport { doHideModal } from 'redux/actions/app';\nimport { doSendTip, doSendCashTip } from 'redux/actions/wallet';\nimport { selectClientSetting, selectPreferredCurrency } from 'redux/selectors/settings';\nimport { selectActiveChannelClaim, selectIncognito } from 'redux/selectors/app';\nimport { selectBalance, selectIsSendingSupport } from 'redux/selectors/wallet';\nimport { withRouter } from 'react-router';\nimport * as SETTINGS from 'constants/settings';\nimport { getChannelIdFromClaim, getChannelNameFromClaim } from 'util/claim';\nimport WalletSendTip from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const claim = selectClaimForUri(state, uri, false);\n  const { claim_id: claimId, value_type: claimType } = claim || {};\n\n  // setup variables for backend tip API\n  const channelClaimId = getChannelIdFromClaim(claim);\n  const tipChannelName = getChannelNameFromClaim(claim);\n\n  const activeChannelClaim = selectActiveChannelClaim(state);\n  const { name: activeChannelName, claim_id: activeChannelId } = activeChannelClaim || {};\n\n  return {\n    activeChannelName,\n    activeChannelId,\n    balance: selectBalance(state),\n    claimId,\n    claimType,\n    channelClaimId,\n    tipChannelName,\n    claimIsMine: selectClaimIsMineForUri(state, uri),\n    fetchingChannels: selectFetchingMyChannels(state),\n    incognito: selectIncognito(state),\n    instantTipEnabled: selectClientSetting(state, SETTINGS.INSTANT_PURCHASE_ENABLED),\n    instantTipMax: selectClientSetting(state, SETTINGS.INSTANT_PURCHASE_MAX),\n    isPending: selectIsSendingSupport(state),\n    title: selectTitleForUri(state, uri),\n    preferredCurrency: selectPreferredCurrency(state),\n  };\n};\n\nconst perform = {\n  doHideModal,\n  doSendTip,\n  doSendCashTip,\n};\n\nexport default withRouter(connect(select, perform)(WalletSendTip));\n","// @flow\nimport React from 'react';\nimport { Modal } from 'modal/modal';\nimport SendTip from 'component/walletSendTip';\n\ntype Props = {\n  uri: string,\n  claimIsMine: boolean,\n  isSupport: boolean,\n  isTipOnly?: boolean,\n  hasSelectedTab?: string,\n  customText?: string,\n  doHideModal: () => void,\n  setAmount?: (number) => void,\n};\n\nclass ModalSendTip extends React.PureComponent<Props> {\n  render() {\n    const { uri, claimIsMine, isTipOnly, hasSelectedTab, customText, doHideModal, setAmount } = this.props;\n\n    return (\n      <Modal onAborted={doHideModal} isOpen type=\"card\">\n        <SendTip\n          uri={uri}\n          claimIsMine={claimIsMine}\n          onCancel={doHideModal}\n          isTipOnly={isTipOnly}\n          hasSelectedTab={hasSelectedTab}\n          customText={customText}\n          setAmount={setAmount}\n          modalProps={this.props}\n        />\n      </Modal>\n    );\n  }\n}\n\nexport default ModalSendTip;\n","import { connect } from 'react-redux';\nimport { doHideModal } from 'redux/actions/app';\nimport ModalSendTip from './view';\n\nconst perform = {\n  doHideModal,\n};\n\nexport default connect(null, perform)(ModalSendTip);\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","stripeEnvironment","getStripeEnvironment","TAB_BOOST","TAB_FIAT","TAB_LBC","TabSwitchButton","tabButtonProps","label","name","isOnConfirmationPage","activeTab","setActiveTab","key","tipInputElement","document","getElementById","focus","SubmitCashTipButton","withCreditCard","_ref2","isPending","handleSubmit","autoFocus","disabled","perform","doHideModal","doSendTip","doSendCashTip","withRouter","connect","state","uri","claim","selectClaimForUri","_ref","claimId","claim_id","claimType","value_type","channelClaimId","getChannelIdFromClaim","tipChannelName","getChannelNameFromClaim","selectActiveChannelClaim","activeChannelName","activeChannelId","balance","selectBalance","claimIsMine","selectClaimIsMineForUri","fetchingChannels","selectFetchingMyChannels","incognito","selectIncognito","instantTipEnabled","selectClientSetting","SETTINGS","instantTipMax","selectIsSendingSupport","selectTitleForUri","preferredCurrency","selectPreferredCurrency","channelName","isTipOnly","hasSelectedTab","customText","setAmount","modalProps","defaultTabToShow","_usePersistedState2","usePersistedState","persistentTab","setPersistentTab","_React$useState2","_React$useState4","hasSelected","setSelected","_usePersistedState4","tipAmount","setTipAmount","_React$useState6","setConfirmationPage","_React$useState8","tipError","setTipError","_React$useState10","disableSubmitButton","setDisableSubmitButton","boostThisContentText","getBoostThisContentText","boostYourContentText","getBoostYourContentText","isSupport","_STRIPE$CURRENCY$pref","STRIPE","fiatIconToUse","fiatSymbolToUse","symbol","titleText","parseURI","explainerText","getBoostExplainerText","sendSupportOrConfirm","instantTipMaxAmount","arguments","length","amount","channel_id","currency","Lbryio","then","LBC_USD","Form","onSubmit","Card","_extends","href","concat","Math","round","toFixed","LbcSymbol","postfix","size","ChannelSelector","WalletTipAmountSelector","onChange","type","LbcMessage","number","amountToShow","displayAmount","isNan","buildButtonText","I18nMessage","tokens","lbc","navigate","PAGES","window","odysee","build","googlePlay","_React$PureComponent","_inherits","ModalSendTip","_super","_createSuper","_classCallCheck","apply","value","_this$props","this","Modal","onAborted","isOpen","SendTip","onCancel"],"sourceRoot":""}