{"version":3,"file":"creatorDashboard-b5f92f82b12d6f4190cc.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/creatorAnalytics/view.jsx","webpack://odysee.com/../ui/component/creatorAnalytics/index.js","webpack://odysee.com/../ui/page/creatorDashboard/index.js","webpack://odysee.com/../ui/page/creatorDashboard/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport { Lbryio } from 'lbryinc';\nimport ClaimPreview from 'component/claimPreview';\nimport Card from 'component/common/card';\nimport Spinner from 'component/spinner';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport Yrbl from 'component/yrbl';\nimport { useHistory } from 'react-router-dom';\nimport analytics from 'analytics';\nimport { getChannelSubCountStr } from 'util/formatMediaDuration';\n\ntype Props = {\n  claim: ?ChannelClaim,\n  fetchingChannels: boolean,\n  doResolveUris: (uris: Array<string>) => void,\n};\n\nconst UNAUTHENTICATED_ERROR = 'unauthenticated';\nconst GENERIC_ERROR = 'error';\n\nexport default function CreatorAnalytics(props: Props) {\n  const { claim, doResolveUris } = props;\n  const history = useHistory();\n  const [stats, setStats] = React.useState();\n  const [error, setError] = React.useState();\n  const [fetchingStats, setFetchingStats] = React.useState(false);\n  const claimId = claim && claim.claim_id;\n  // TODO: put this back when hubs are fixed\n  // const channelHasClaims = claim && claim.meta && claim.meta.claims_in_channel && claim.meta.claims_in_channel > 0 || true;\n  const channelHasClaims = true;\n\n  React.useEffect(() => {\n    setStats(null);\n  }, [claimId]);\n\n  React.useEffect(() => {\n    if (stats) {\n      let { VideoURITopAllTime, VideoURITopCommentNew, VideoURITopNew } = stats;\n      let uris = [];\n      if (VideoURITopAllTime) uris.push(VideoURITopAllTime);\n      if (VideoURITopCommentNew) uris.push(VideoURITopCommentNew);\n      if (VideoURITopNew) uris.push(VideoURITopNew);\n      doResolveUris(uris);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [stats]);\n\n  const channelForEffect = JSON.stringify(claim);\n  React.useEffect(() => {\n    if (claimId && channelForEffect && channelHasClaims) {\n      setFetchingStats(true);\n      Lbryio.call('channel', 'stats', { claim_id: claimId })\n        .then((res) => {\n          setFetchingStats(false);\n          setStats(res);\n        })\n        .catch((error) => {\n          if (error.response?.status === 401) {\n            setError(UNAUTHENTICATED_ERROR);\n            const channelToSend = JSON.parse(channelForEffect);\n            analytics.apiLog.publish(channelToSend);\n          } else {\n            setError(GENERIC_ERROR);\n          }\n\n          setFetchingStats(false);\n        });\n    }\n  }, [claimId, channelForEffect, channelHasClaims, setFetchingStats, setStats]);\n\n  return (\n    <React.Fragment>\n      {!stats && (\n        <div className=\"main--empty\">\n          {fetchingStats ? (\n            <Spinner delayed />\n          ) : (\n            <div>\n              {error && (\n                <Yrbl\n                  type=\"sad\"\n                  title={error === GENERIC_ERROR ? __('No stats found') : __('Error fetching stats')}\n                  subtitle={\n                    error === GENERIC_ERROR\n                      ? __(\n                          'There are no stats for this channel yet, it will take a few views. Make sure you are signed in with the correct email and have data sharing turned on.'\n                        )\n                      : __(\n                          \"You are not able to see this channel's stats. Make sure you are signed in with the correct email and have data sharing turned on.\"\n                        )\n                  }\n                />\n              )}\n\n              {!error && !channelHasClaims ? (\n                <Yrbl\n                  type=\"sad\"\n                  title={__(\"You haven't uploaded anything\")}\n                  subtitle={__('Upload something to start tracking your stats!')}\n                  actions={\n                    <div className=\"section__actions\">\n                      <Button\n                        button=\"primary\"\n                        label={__('Upload Something')}\n                        onClick={() => {\n                          history.push(`/$/${PAGES.UPLOAD}`);\n                        }}\n                      />\n                    </div>\n                  }\n                />\n              ) : (\n                <Yrbl\n                  title={\n                    channelHasClaims\n                      ? __('No recent uploads')\n                      : __(\"You haven't uploaded anything with this channel yet!\")\n                  }\n                  actions={\n                    <div className=\"section__actions\">\n                      <Button\n                        button=\"primary\"\n                        label={__('Upload Something')}\n                        onClick={() => history.push(`/$/${PAGES.UPLOAD}`)}\n                      />\n                    </div>\n                  }\n                />\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {stats && (\n        <div className=\"section\">\n          <div className=\"columns\">\n            <Card\n              iconColor\n              title={<span>{getChannelSubCountStr(stats.ChannelSubs)}</span>}\n              icon={ICONS.SUBSCRIBE}\n              subtitle={\n                <div className=\"card__data-subtitle\">\n                  <span>\n                    {0 > -1 && '+'}{' '}\n                    {__('%follower_count_weekly_change% this week', {\n                      follower_count_weekly_change: stats.ChannelSubChange || 0,\n                    })}\n                  </span>\n                  {stats.ChannelSubChange > 0 && <Icon icon={ICONS.TRENDING} iconColor=\"green\" size={18} />}\n                </div>\n              }\n            />\n            <Card\n              icon={ICONS.EYE}\n              title={<span>{__('%all_content_views% views', { all_content_views: stats.AllContentViews })}</span>}\n              subtitle={\n                <div className=\"card__data-subtitle\">\n                  <span>\n                    {__('+ %all_content_views_weekly_change% this week', {\n                      all_content_views_weekly_change: stats.AllContentViewChange || 0,\n                    })}\n                  </span>\n                  {stats.AllContentViewChange > 0 && <Icon icon={ICONS.TRENDING} iconColor=\"green\" size={18} />}\n                </div>\n              }\n            />\n          </div>\n\n          {stats.VideoURITopNew ? (\n            <Card\n              className=\"section\"\n              title={__('Most viewed recent content')}\n              body={\n                <React.Fragment>\n                  <div className=\"card--inline\">\n                    <ClaimPreview uri={stats.VideoURITopNew} />\n                  </div>\n                  <div className=\"section__subtitle card__data-subtitle\">\n                    <span>\n                      {stats.VideoViewsTopNew === 1\n                        ? __('1 view')\n                        : __('%view_count% views - %view_count_change% this week', {\n                            view_count: stats.VideoViewsTopNew,\n                            view_count_change: stats.VideoViewChangeTopNew,\n                          })}\n                    </span>\n                    {stats.VideoViewChangeTopNew > 0 && <Icon icon={ICONS.TRENDING} iconColor=\"green\" size={18} />}\n                  </div>\n                </React.Fragment>\n              }\n            />\n          ) : (\n            <Card\n              className=\"section\"\n              title={__('Your recent content')}\n              subtitle={\n                !stats.VideoURITopNew &&\n                __(\"No recent uploads found for this channel. Upload something new and track how it's performing here.\")\n              }\n              actions={\n                <div className=\"section__actions\">\n                  <Button\n                    button=\"primary\"\n                    icon={ICONS.PUBLISH}\n                    label={__('Upload')}\n                    onClick={() => history.push(`/$/${PAGES.UPLOAD}`)}\n                  />\n                </div>\n              }\n            />\n          )}\n\n          {stats.VideoURITopCommentNew && stats.VideoCommentTopCommentNew > 0 && (\n            <Card\n              className=\"section\"\n              title={__('Most commented recent content')}\n              body={\n                <React.Fragment>\n                  <div className=\"card--inline\">\n                    <ClaimPreview uri={stats.VideoURITopCommentNew} />\n                  </div>\n                  <div className=\"section__subtitle card__data-subtitle\">\n                    <span>\n                      {stats.VideoCommentTopCommentNew === 1\n                        ? __('1 comment')\n                        : __('%comment_count% comments - %comment_count_change% this week', {\n                            comment_count: stats.VideoCommentTopCommentNew,\n                            comment_count_change: stats.VideoCommentChangeTopCommentNew,\n                          })}\n                    </span>\n                    {stats.VideoCommentChangeTopCommentNew > 0 && (\n                      <Icon icon={ICONS.TRENDING} iconColor=\"green\" size={18} />\n                    )}\n                  </div>\n                </React.Fragment>\n              }\n            />\n          )}\n\n          {stats.VideoURITopAllTime && (\n            <Card\n              className=\"section\"\n              title={__('Most viewed content all time')}\n              body={\n                <React.Fragment>\n                  <div className=\"card--inline\">\n                    <ClaimPreview uri={stats.VideoURITopAllTime} />\n                  </div>\n                  <div className=\"section__subtitle card__data-subtitle\">\n                    <span>\n                      {__('%all_time_top_views% views - %all_time_views_weekly_change% this week', {\n                        all_time_top_views: stats.VideoViewsTopAllTime,\n                        all_time_views_weekly_change: stats.VideoViewChangeTopAllTime,\n                      })}\n                    </span>\n                    {stats.VideoViewChangeTopAllTime > 0 && <Icon icon={ICONS.TRENDING} iconColor=\"green\" size={18} />}\n                  </div>\n                </React.Fragment>\n              }\n            />\n          )}\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n","import { connect } from 'react-redux';\nimport { makeSelectClaimForUri } from 'redux/selectors/claims';\nimport { doResolveUris } from 'redux/actions/claims';\nimport CreatorAnalytics from './view';\n\nconst select = (state, props) => ({\n  claim: makeSelectClaimForUri(props.uri)(state),\n});\n\nconst perform = (dispatch) => ({\n  doResolveUris: (uris) => dispatch(doResolveUris(uris)),\n});\n\nexport default connect(select, perform)(CreatorAnalytics);\n","import { connect } from 'react-redux';\nimport { selectHasChannels, selectFetchingMyChannels } from 'redux/selectors/claims';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport CreatorDashboardPage from './view';\n\nconst select = (state) => ({\n  hasChannels: selectHasChannels(state),\n  fetchingChannels: selectFetchingMyChannels(state),\n  activeChannelClaim: selectActiveChannelClaim(state),\n});\n\nexport default connect(select)(CreatorDashboardPage);\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport Page from 'component/page';\nimport Spinner from 'component/spinner';\nimport Button from 'component/button';\nimport CreatorAnalytics from 'component/creatorAnalytics';\nimport ChannelSelector from 'component/channelSelector';\nimport Yrbl from 'component/yrbl';\n\ntype Props = {\n  hasChannels: boolean,\n  fetchingChannels: boolean,\n  activeChannelClaim: ?ChannelClaim,\n};\n\nexport default function CreatorDashboardPage(props: Props) {\n  const { hasChannels, fetchingChannels, activeChannelClaim } = props;\n\n  return (\n    <Page>\n      {fetchingChannels && (\n        <div className=\"main--empty\">\n          <Spinner delayed />\n        </div>\n      )}\n\n      {!fetchingChannels && !hasChannels && (\n        <Yrbl\n          type=\"happy\"\n          title={__(\"You haven't created a channel yet, let's fix that!\")}\n          actions={\n            <div className=\"section__actions\">\n              <Button button=\"primary\" navigate={`/$/${PAGES.CHANNEL_NEW}`} label={__('Create A Channel')} />\n            </div>\n          }\n        />\n      )}\n\n      {!fetchingChannels && activeChannelClaim && (\n        <React.Fragment>\n          <ChannelSelector hideAnon />\n          <CreatorAnalytics uri={activeChannelClaim.canonical_url} />\n        </React.Fragment>\n      )}\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","UNAUTHENTICATED_ERROR","GENERIC_ERROR","connect","state","claim","makeSelectClaimForUri","uri","dispatch","doResolveUris","uris","_doResolveUris","history","useHistory","_React$useState2","stats","setStats","_React$useState4","error","setError","_React$useState6","fetchingStats","setFetchingStats","claimId","claim_id","channelHasClaims","VideoURITopAllTime","VideoURITopCommentNew","VideoURITopNew","_uris","push","channelForEffect","JSON","stringify","Lbryio","then","res","_error$response","response","channelToSend","parse","analytics","Spinner","delayed","Yrbl","type","label","concat","PAGES","Card","iconColor","getChannelSubCountStr","ChannelSubs","follower_count_weekly_change","ChannelSubChange","size","all_content_views","AllContentViews","all_content_views_weekly_change","AllContentViewChange","ClaimPreview","VideoViewsTopNew","view_count","view_count_change","VideoViewChangeTopNew","VideoCommentTopCommentNew","comment_count","comment_count_change","VideoCommentChangeTopCommentNew","all_time_top_views","VideoViewsTopAllTime","all_time_views_weekly_change","VideoViewChangeTopAllTime","hasChannels","selectHasChannels","fetchingChannels","selectFetchingMyChannels","activeChannelClaim","selectActiveChannelClaim","Page","navigate","ChannelSelector","hideAnon","CreatorAnalytics","canonical_url"],"sourceRoot":""}