{"version":3,"file":"modalRevokeClaim-6f036ae1392dbc0af730.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/modal/modalRevokeClaim/index.js","webpack://odysee.com/../ui/modal/modalRevokeClaim/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","import { connect } from 'react-redux';\nimport { doHideModal } from 'redux/actions/app';\nimport { doAbandonTxo, doAbandonClaim, doResolveUri } from 'redux/actions/claims';\nimport { doToast } from 'redux/actions/notifications';\nimport ModalRevokeClaim from './view';\nimport { selectTransactionItems } from 'redux/selectors/wallet';\n\nconst select = (state) => ({\n  transactionItems: selectTransactionItems(state),\n});\n\nconst perform = (dispatch) => ({\n  toast: (message, isError) => dispatch(doToast({ message, isError })),\n  closeModal: () => dispatch(doHideModal()),\n  abandonTxo: (txo, cb) => dispatch(doAbandonTxo(txo, cb)),\n  abandonClaim: (claim, cb) => dispatch(doAbandonClaim(claim, cb)),\n  doResolveUri: (uri) => dispatch(doResolveUri(uri)),\n});\n\nexport default connect(select, perform)(ModalRevokeClaim);\n","// @flow\nimport React, { useState } from 'react';\nimport { Modal } from 'modal/modal';\nimport { FormField } from 'component/common/form';\nimport * as txnTypes from 'constants/transaction_types';\nimport Card from 'component/common/card';\nimport Button from 'component/button';\nimport I18nMessage from 'component/i18nMessage';\nimport LbcSymbol from 'component/common/lbc-symbol';\n\ntype Props = {\n  closeModal: () => void,\n  abandonTxo: (Txo, () => void) => void,\n  abandonClaim: (Claim, ?() => void) => void,\n  tx: Txo,\n  claim: Claim,\n  cb: () => void,\n  doResolveUri: (string) => void,\n};\n\nexport default function ModalRevokeClaim(props: Props) {\n  const { tx, claim, closeModal, abandonTxo, abandonClaim, cb, doResolveUri } = props;\n  const { value_type: valueType, type, normalized_name: name, is_my_input: isSupport } = tx || claim;\n  const [channelName, setChannelName] = useState('');\n\n  React.useEffect(() => {\n    if (claim) {\n      doResolveUri(claim.permanent_url);\n    }\n  }, [claim, doResolveUri]);\n\n  const shouldConfirmChannel =\n    valueType === txnTypes.CHANNEL || type === txnTypes.CHANNEL || (type === txnTypes.UPDATE && name.startsWith('@'));\n\n  function getButtonLabel(type: string, isSupport: boolean) {\n    if (isSupport && type === txnTypes.SUPPORT) {\n      return __('Confirm Support Removal');\n    } else if (type === txnTypes.SUPPORT) {\n      return __('Confirm Tip Unlock');\n    } else if (type === txnTypes.CHANNEL) {\n      return __('Confirm Channel Removal');\n    }\n    return __('Confirm Removal');\n  }\n\n  function getMsgBody(type: string, isSupport: boolean, name: string) {\n    if (isSupport && type === txnTypes.SUPPORT) {\n      return (\n        <React.Fragment>\n          <p>{__('Are you sure you want to remove this boost?')}</p>\n          <p>\n            <I18nMessage tokens={{ lbc: <LbcSymbol /> }}>\n              These Credits are permanently yours and this boost can be removed at any time. Removing this boost will\n              reduce discoverability and return %lbc% to your spendable balance.\n            </I18nMessage>\n          </p>\n        </React.Fragment>\n      );\n    } else if (type === txnTypes.SUPPORT) {\n      return (\n        <React.Fragment>\n          <p>{__('Are you sure you want to unlock these Credits?')}</p>\n          <p>\n            {__(\n              'These Credits are permanently yours and can be unlocked at any time. Unlocking them allows you to spend them, but reduces discoverability of your content in lookups and search results. It is recommended you leave Credits locked until you need or want to spend them.'\n            )}\n          </p>\n        </React.Fragment>\n      );\n    } else if (shouldConfirmChannel) {\n      return (\n        <React.Fragment>\n          <p>\n            {__('This will permanently remove your channel. Content published under this channel will be orphaned.')}\n          </p>\n          <p>{__('YOUTUBE SYNCED CHANNELS!')}</p>\n          <p>\n            {__(\n              \"If something went wrong with the sync, please don't try to fix it by deleting the channel. Instead reach out to us at help@odysee.com to get it fixed. Once deleted we may not be able to sync it again or fix it.\"\n            )}\n          </p>\n          <p>{__('Are you sure? Type %name% to confirm that you wish to remove the channel.', { name })}</p>\n          <FormField type={'text'} onChange={(e) => setChannelName(e.target.value)} />\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <p>{__('Are you sure you want to remove this?')}</p>\n        <p>\n          <I18nMessage tokens={{ lbc: <LbcSymbol /> }}>\n            This will prevent others from resolving and accessing the content you published. It will return the %lbc% to\n            your spendable balance.\n          </I18nMessage>\n        </p>\n        <p className=\"help error__text\"> {__('FINAL WARNING: This action is permanent and cannot be undone.')}</p>\n      </React.Fragment>\n    );\n  }\n\n  function revokeClaim() {\n    tx ? abandonTxo(tx, cb) : abandonClaim(claim, cb);\n    closeModal();\n  }\n\n  const label = getButtonLabel(type, isSupport);\n\n  return (\n    <Modal isOpen contentLabel={label} type=\"card\" onAborted={closeModal}>\n      <Card\n        title={label}\n        body={getMsgBody(type, isSupport, name)}\n        actions={\n          <div className=\"section__actions\">\n            <Button\n              disabled={shouldConfirmChannel && name !== channelName}\n              button=\"primary\"\n              label={label}\n              onClick={revokeClaim}\n            />\n            <Button button=\"link\" label={__('Cancel')} onClick={closeModal} />\n          </div>\n        }\n      />\n    </Modal>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","connect","state","transactionItems","selectTransactionItems","dispatch","toast","message","isError","doToast","closeModal","doHideModal","abandonTxo","txo","cb","doAbandonTxo","abandonClaim","claim","doAbandonClaim","doResolveUri","uri","_doResolveUri","tx","_ref","valueType","value_type","type","name","normalized_name","isSupport","is_my_input","channelName","setChannelName","permanent_url","shouldConfirmChannel","txnTypes","startsWith","label","getButtonLabel","Modal","isOpen","contentLabel","onAborted","Card","I18nMessage","tokens","lbc","LbcSymbol","FormField","onChange","target","value","getMsgBody","disabled"],"sourceRoot":""}