{"version":3,"file":"ownComments-303f5315a109fded0c84.js","mappings":"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","sources":["webpack://odysee.com/../ui/page/ownComments/view.jsx","webpack://odysee.com/../ui/page/ownComments/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport ChannelSelector from 'component/channelSelector';\nimport ClaimPreview from 'component/claimPreview';\nimport CommentView from 'component/comment';\nimport Card from 'component/common/card';\nimport Empty from 'component/common/empty';\nimport Page from 'component/page';\nimport Spinner from 'component/spinner';\nimport { COMMENT_PAGE_SIZE_TOP_LEVEL } from 'constants/comment';\nimport * as ICONS from 'constants/icons';\nimport useFetched from 'effects/use-fetched';\nimport debounce from 'util/debounce';\n\nfunction scaleToDevicePixelRatio(value) {\n  const devicePixelRatio = window.devicePixelRatio || 1.0;\n  if (devicePixelRatio < 1.0) {\n    return Math.ceil(value / devicePixelRatio);\n  }\n  return Math.ceil(value * devicePixelRatio);\n}\n\ntype Props = {\n  activeChannelClaim: ?ChannelClaim,\n  allComments: ?Array<Comment>,\n  totalComments: number,\n  isFetchingComments: boolean,\n  claimsById: any,\n  doCommentReset: (claimId: string) => void,\n  doCommentListOwn: (channelId: string, page: number, pageSize: number) => void,\n};\n\nexport default function OwnComments(props: Props) {\n  const {\n    activeChannelClaim,\n    allComments,\n    totalComments,\n    isFetchingComments,\n    claimsById,\n    doCommentReset,\n    doCommentListOwn,\n  } = props;\n  const spinnerRef = React.useRef();\n  const [page, setPage] = React.useState(0);\n  const [activeChannelId, setActiveChannelId] = React.useState('');\n\n  // Since we are sharing the key for Discussion and MyComments, don't show\n  // the list until we've gone through the initial reset.\n  const wasResetAndReady = useFetched(isFetchingComments);\n\n  const totalPages = Math.ceil(totalComments / COMMENT_PAGE_SIZE_TOP_LEVEL);\n  const moreBelow = page < totalPages;\n\n  function getCommentsElem(comments: Array<Comment>) {\n    return comments.map((comment) => {\n      const contentClaim = claimsById[comment.claim_id];\n      const isChannel = contentClaim && contentClaim.value_type === 'channel';\n      const isLivestream = Boolean(contentClaim && contentClaim.value_type === 'stream' && !contentClaim.value.source);\n\n      return (\n        <div key={comment.comment_id} className=\"comments-own card__main-actions\">\n          <div className=\"section__actions\">\n            <div className=\"comments-own--claim\">\n              {contentClaim && (\n                <ClaimPreview\n                  uri={contentClaim.canonical_url}\n                  searchParams={{\n                    ...(isChannel ? { view: 'discussion' } : {}),\n                    ...(isLivestream ? {} : { lc: comment.comment_id }),\n                  }}\n                  hideActions\n                  hideMenu\n                  properties={() => null}\n                />\n              )}\n              {!contentClaim && <Empty text={__('Content or channel was deleted.')} />}\n            </div>\n            <CommentView uri={contentClaim?.canonical_url} isTopLevel hideActions comment={comment} />\n          </div>\n        </div>\n      );\n    });\n  }\n\n  // Active channel changed\n  React.useEffect(() => {\n    if (activeChannelClaim && activeChannelClaim.claim_id !== activeChannelId) {\n      setActiveChannelId(activeChannelClaim.claim_id);\n      setPage(0);\n    }\n  }, [activeChannelClaim, activeChannelId]);\n\n  // Reset comments\n  React.useEffect(() => {\n    if (page === 0 && activeChannelId) {\n      doCommentReset(activeChannelId);\n      setPage(1);\n    }\n  }, [page, activeChannelId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Fetch own comments\n  React.useEffect(() => {\n    if (page !== 0 && activeChannelId) {\n      doCommentListOwn(activeChannelId, page, COMMENT_PAGE_SIZE_TOP_LEVEL);\n    }\n  }, [page]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Infinite scroll\n  React.useEffect(() => {\n    function shouldFetchNextPage(page, topLevelTotalPages, window, document, yPrefetchPx = 1000) {\n      if (!spinnerRef || !spinnerRef.current) {\n        return false;\n      }\n\n      const rect = spinnerRef.current.getBoundingClientRect(); // $FlowFixMe\n      const windowH = window.innerHeight || document.documentElement.clientHeight; // $FlowFixMe\n      const windowW = window.innerWidth || document.documentElement.clientWidth;\n\n      const isApproachingViewport = yPrefetchPx !== 0 && rect.top < windowH + scaleToDevicePixelRatio(yPrefetchPx);\n\n      const isInViewport =\n        rect.width > 0 &&\n        rect.height > 0 &&\n        rect.bottom >= 0 &&\n        rect.right >= 0 &&\n        rect.top <= windowH &&\n        rect.left <= windowW;\n\n      return (isInViewport || isApproachingViewport) && page < topLevelTotalPages;\n    }\n\n    const handleCommentScroll = debounce(() => {\n      if (shouldFetchNextPage(page, totalPages, window, document)) {\n        setPage(page + 1);\n      }\n    }, 200);\n\n    if (!isFetchingComments && moreBelow && spinnerRef && spinnerRef.current) {\n      if (shouldFetchNextPage(page, totalPages, window, document, 0)) {\n        setPage(page + 1);\n      } else {\n        window.addEventListener('scroll', handleCommentScroll);\n        return () => window.removeEventListener('scroll', handleCommentScroll);\n      }\n    }\n  }, [page, spinnerRef, isFetchingComments, moreBelow, totalPages]);\n\n  // **************************************************************************\n  // **************************************************************************\n\n  if (!activeChannelClaim) {\n    return null;\n  }\n\n  return (\n    <Page noFooter noSideNavigation settingsPage backout={{ title: __('Your comments'), backLabel: __('Back') }}>\n      <ChannelSelector hideAnon />\n      <Card\n        isBodyList\n        title={\n          totalComments > 0\n            ? totalComments === 1\n              ? __('1 comment')\n              : __('%total_comments% comments', { total_comments: totalComments })\n            : isFetchingComments\n            ? ''\n            : __('No comments')\n        }\n        titleActions={\n          <Button\n            button=\"alt\"\n            icon={ICONS.REFRESH}\n            title={__('Refresh')}\n            onClick={() => {\n              setPage(0);\n            }}\n          />\n        }\n        body={\n          <>\n            {wasResetAndReady && <ul className=\"comments\">{allComments && getCommentsElem(allComments)}</ul>}\n            {(isFetchingComments || moreBelow) && (\n              <div className=\"main--empty\" ref={spinnerRef}>\n                <Spinner type=\"small\" />\n              </div>\n            )}\n          </>\n        }\n      />\n    </Page>\n  );\n}\n","import { connect } from 'react-redux';\nimport { doCommentListOwn, doCommentReset } from 'redux/actions/comments';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport {\n  selectIsFetchingComments,\n  selectCommentsForUri,\n  selectTotalCommentsCountForUri,\n} from 'redux/selectors/comments';\nimport { selectClaimsById } from 'redux/selectors/claims';\n\nimport OwnComments from './view';\n\nconst select = (state) => {\n  const activeChannelClaim = selectActiveChannelClaim(state);\n  const uri = activeChannelClaim && activeChannelClaim.canonical_url;\n\n  return {\n    activeChannelClaim,\n    allComments: selectCommentsForUri(state, uri),\n    totalComments: selectTotalCommentsCountForUri(state, uri),\n    isFetchingComments: selectIsFetchingComments(state),\n    claimsById: selectClaimsById(state),\n  };\n};\n\nconst perform = {\n  doCommentReset,\n  doCommentListOwn,\n};\n\nexport default connect(select, perform)(OwnComments);\n"],"names":["scaleToDevicePixelRatio","value","devicePixelRatio","window","Math","ceil","perform","doCommentReset","doCommentListOwn","connect","state","activeChannelClaim","selectActiveChannelClaim","uri","canonical_url","allComments","selectCommentsForUri","totalComments","selectTotalCommentsCountForUri","isFetchingComments","selectIsFetchingComments","claimsById","selectClaimsById","props","spinnerRef","React","_React$useState2","_slicedToArray","page","setPage","_React$useState4","activeChannelId","setActiveChannelId","wasResetAndReady","useFetched","totalPages","COMMENT_PAGE_SIZE_TOP_LEVEL","moreBelow","claim_id","shouldFetchNextPage","topLevelTotalPages","document","yPrefetchPx","arguments","length","undefined","current","rect","getBoundingClientRect","windowH","innerHeight","documentElement","clientHeight","windowW","innerWidth","clientWidth","isApproachingViewport","top","width","height","bottom","right","left","handleCommentScroll","debounce","addEventListener","removeEventListener","Page","noFooter","noSideNavigation","settingsPage","backout","title","__","backLabel","ChannelSelector","hideAnon","Card","isBodyList","total_comments","titleActions","Button","button","icon","ICONS","onClick","body","className","comments","map","comment","contentClaim","isChannel","value_type","isLivestream","Boolean","source","key","comment_id","ClaimPreview","searchParams","_objectSpread","view","lc","hideActions","hideMenu","properties","Empty","text","CommentView","isTopLevel","getCommentsElem","ref","Spinner","type"],"sourceRoot":""}