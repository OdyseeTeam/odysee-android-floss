{"version":3,"file":"879-763041992c35aafc7233.js","mappings":";09DAIkD,IAc5CA,EAAY,SAAAC,yRAAAC,CAAAF,EAAAC,GAAA,UAAAE,EAAAC,EAAAJ,GAQhB,SAAAA,IAAc,IAAAK,EAK2C,mGAL3CC,CAAA,KAAAN,GACJO,EAAAC,EAARH,EAAAF,EAAAM,KAAA,OAAQ,oBAAAF,EAAAC,EAAAH,GAAA,4BAOiB,WACzB,IAAQK,EAAUL,EAAKM,UAAUC,QAAzBF,MACR,GAAKA,EAAL,CAIA,IAAMG,EAAOH,EAAM,GAEfL,EAAKS,MAAMC,cACbV,EAAKS,MAAMC,aAAaF,GAE1BR,EAAKM,UAAUC,QAAQI,MAAQ,IAP/B,CAQF,IAACT,EAAAC,EAAAH,GAAA,iCAE+B,WAC9BY,EAAAA,GAAAA,OAAAA,eAA6B,CAAEC,WAAY,CAAC,mBAAoBC,MAAK,SAACC,GACpE,IAAMC,EAAOD,GAAUA,EAAOE,UAAU,GACpCD,GAEFhB,EAAKS,MAAMC,aAAa,CAAEM,KAAAA,GAE9B,GACF,IAACd,EAAAC,EAAAH,GAAA,mBAEiB,WAChBA,EAAKM,UAAUC,QAAQW,OACzB,IAAChB,EAAAC,EAAAH,GAAA,gBAhCCA,EAAKM,UAAYa,EAAAA,YACjBnB,EAAKoB,yBAA2BpB,EAAKoB,yBAAyBC,KAAIlB,EAAAH,IAClEA,EAAKsB,8BAAgCtB,EAAKsB,8BAA8BD,KAAIlB,EAAAH,IAC5EA,EAAKuB,gBAAkBvB,EAAKuB,gBAAgBF,KAAIlB,EAAAH,IAAOA,CACzD,CAmEC,SAnEAL,KAAA,EAAA6B,IAAA,SAAAb,MAgCD,WAAS,IAAAc,EAAA,KACPC,EAA8FC,KAAKlB,MAA3FmB,EAAIF,EAAJE,KAAMC,EAAWH,EAAXG,YAAaC,EAAKJ,EAALI,MAAOC,EAAWL,EAAXK,YAAaC,EAAMN,EAANM,OAAQC,EAAKP,EAALO,MAAOC,EAAQR,EAARQ,SAAQC,EAAAT,EAAEU,UAAAA,OAAS,IAAAD,GAAQA,EACnFE,EAAcR,GAAeE,EAEnC,OACEZ,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAACmB,EAAAA,GAAS,CACRR,MAAOA,EACPS,gBAAgB,OAChBC,UAAU,uBACVP,MAAOA,EACPC,SAAUA,EACVN,KAAK,OACLa,SAAS,WACT9B,MAAO0B,GAAeK,EAAG,iBACzBC,YACExB,EAAAA,cAACyB,EAAAA,QAAM,CACLR,UAAWA,EACXS,OAAO,UACPX,SAAUA,EACVY,QAAkB,kBAATlB,EAA2BD,KAAKL,8BAAgCK,KAAKJ,gBAC9EO,MAAOY,EAAG,cAIhBvB,EAAAA,cAAA,SACES,KAAM,OACNmB,MAAO,CAAEC,QAAS,QAClBhB,OAAQA,EACRiB,IAAKtB,KAAKrB,UACV4C,SAAU,iBAAgB,kBAATtB,EAA2B,WAAO,EAAIH,EAAKL,0BAA0B,EACtFmB,gBAA0B,kBAATX,EAA2B,OAAS,OAI7D,oFAACjC,CAAA,CAjFe,CAASwB,EAAAA,eAAmBjB,EAAxCP,EAAY,eACM,CACpByC,WAAW,EACXR,KAAM,SAiFV,8pCClGA,SAAeuB,EAAAA,EAAAA,IAAQ,KAAM,CAC3BC,QAAAA,EAAAA,IADF,ECce,SAAsB3C,GACnC,IACE4C,EASE5C,EATF4C,SACAC,EAQE7C,EARF6C,SACAF,EAOE3C,EAPF2C,QACAG,EAME9C,EANF8C,aACAzB,EAKErB,EALFqB,MAAK0B,EAKH/C,EAJFgD,cAAAA,OAAa,IAAAD,GAAQA,EACrBE,EAGEjD,EAHFiD,KACAC,EAEElD,EAFFkD,OACAC,EACEnD,EADFmD,gBAE+DC,EAAAC,EAA/B3C,EAAAA,SAAeyC,GAAgB,GAA1DG,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAExBI,GAAQC,EAAAA,EAAAA,UAmCd,OACE/C,EAAAA,cAACmB,EAAAA,GAAS,CACRV,KAAMmC,EAAY,WAAa,OAC/BvB,UAAU,uBACVC,UAAQ,EACRiB,KAAMA,EACN5B,MAAOA,EACPnB,MAAO0C,GAAY,GACnBJ,IAAKgB,EACLE,QAjBJ,WAEE,IAAMC,EAASH,EAAM1D,QACjB6D,GAAUA,EAAOH,OAASG,EAAOH,MAAM1D,SACzC6D,EAAOH,MAAM1D,QAAQ8D,QAEzB,EAYI1B,YACExB,EAAAA,cAACyB,EAAAA,QAAM,CAACC,OAAQY,EAAgB,UAAY,YAAaa,KAAMC,EAAAA,KAAYzB,QA5CjF,WACE,GAAIc,GAAmBN,EACrBkB,UAAUC,UACPC,UAAUrB,GACVvC,MAAK,WACJsC,EAAQ,CAAEuB,QAASpB,GAAgBb,EAAG,gBACxC,IAAE,OACK,WACLU,EAAQ,CAAEuB,QAASjC,EAAG,mBAAoBkC,SAAS,GACrD,QACG,CACL,IAAMR,EAASH,EAAM1D,QACjB6D,GAAUA,EAAOH,OAASG,EAAOH,MAAM1D,UACzC6D,EAAOH,MAAM1D,QAAQ8D,SACjBV,GAEFA,EAAOS,EAAOH,MAAM1D,UAIxBsE,SAASC,YAAY,QACrB1B,EAAQ,CAAEuB,QAASpB,GAAgBb,EAAG,gBACxC,CACF,IAuBIqC,OACEnB,GACEzC,EAAAA,cAACyB,EAAAA,QAAM,CAACC,OAAO,OAAOC,QAAS,kBAAMkB,GAAcD,EAAU,EAAEjC,MAAmBY,EAAZqB,EAAe,OAAa,WAK5G,khDCsTA,QArWA,SAA2BtD,GACzB,IACEuE,EAiBEvE,EAjBFuE,IACAC,EAgBExE,EAhBFwE,MACAC,EAeEzE,EAfFyE,QACAC,EAcE1E,EAdF0E,SACAC,EAaE3E,EAbF2E,YACAC,EAYE5E,EAZF4E,eACAC,EAWE7E,EAXF6E,eACAC,EAUE9E,EAVF8E,aACAC,EASE/E,EATF+E,eACqBC,EAQnBhF,EARFiF,oBACAC,EAOElF,EAPFkF,aACAC,EAMEnF,EANFmF,SACAC,EAKEpF,EALFoF,MACA3D,EAIEzB,EAJFyB,SACA4D,EAGErF,EAHFqF,eACAC,EAEEtF,EAFFsF,sBACAC,EACEvF,EADFuF,WAGIC,EAAoBC,KAAKC,UAAUL,GACnCM,EAAoBN,GAAkBO,QAAQP,EAAeQ,QAEHC,EAAAzC,GAAd0C,EAAAA,EAAAA,UAAS,MAAK,GAAzDC,EAAiBF,EAAA,GAAEG,EAAoBH,EAAA,GAEGI,EAAA7C,GAAX0C,EAAAA,EAAAA,UAAS,GAAE,GAA1CI,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAE5BG,EACJV,GAAqBN,EAAeQ,OAJpB,EAIyCS,KAAKC,KAAKlB,EAAeQ,OAJlE,GAIwF,EAEpGW,EAAuDvE,EAAnCsD,EAAsC,aAAtB,iBAEpCkB,EAA+BC,OAAOC,EAAAA,2BAEtCC,EAAsB3E,EAAG,iDAAkD,CAC/E4E,UAAAA,EAAAA,UACAC,MAAOL,IAGHM,EAAwC,kBAAnBlC,GAAyD,qBAAnBA,EAG3DmC,EAA0B,SAACC,GAC/B,OAAIA,GAAOA,EAAIC,WAAW,aAGpBD,GAAOA,EAAIC,WAAW,WAFnBD,EAIIA,EACF,WAAPE,OAAkBF,GACNhF,EAAG,uCAErB,EAmFA,OAhFAmF,EAAAA,EAAAA,YAAU,WACR,IAAM/B,EAAiBI,KAAK4B,MAAM7B,GACR,OAAtBQ,GAA8BX,GAAkBA,EAAeQ,QACjEb,EAAkB,CAChBsC,cAAeN,EAAwB3B,EAAeW,GAAmBuB,KAAKC,eAGpF,GAAG,CAACxB,EAAmBhB,EAAmBQ,IAmE1C9E,EAAAA,WAAgB,WACO,eAAjBoE,GACFmB,EAAqB,KAEzB,GAAG,CAACnB,EAAcE,IAGhBtE,EAAAA,cAAC+G,EAAAA,EAAI,CACH1F,UAAW2F,IAAW,CACpB,iBAAkBjG,GAAwB,IAAZgD,IAEhCkD,QACEjH,EAAAA,cAAA,OAAKqB,UAAU,0BACbrB,EAAAA,cAACA,EAAAA,SAAc,KAGbA,EAAAA,cAACmB,EAAAA,GAAS,CACRV,KAAK,OACL8B,KAAK,gBACL5B,MAAOY,EAAG,SACVX,YAAaW,EAAG,gCAChBR,SAAUA,EACVvB,MAAOsE,EACP/B,SApFZ,SAA2BmF,GACzB5C,EAAkB,CAAER,MAAOoD,EAAMC,OAAO3H,OAC1C,EAmFY6B,UAAU,iBACV+F,IAAI,MACJnG,WAAS,EACToG,aAAa,QAEfrH,EAAAA,cAACsH,EAAAA,EAAW,CAACzD,IAAKA,IAClB7D,EAAAA,cAAAA,EAAAA,SAAA,KACG6E,GACC7E,EAAAA,cAAA,sBACEA,EAAAA,cAAA,wBACEA,EAAAA,cAAA,SAAO4B,MAAO,CAAE2F,aAAc,qBAC3B1C,GACC7E,EAAAA,cAACmB,EAAAA,GAAS,CACRoB,KAAK,eACL5B,MAAOY,EAAG,eACVlB,IAAI,eACJI,KAAK,QACL+G,QAA0B,gBAAjBpD,EACTzC,QAAS,kBAAM2C,EAAkB,CAAEF,aAAc,eAAgB,OAO5EiC,GAAsBpB,IAAsBL,GAC3C5E,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAO4B,MAAO,CAAE6F,UAAW,IACxB5C,GACC7E,EAAAA,cAACmB,EAAAA,GAAS,CACRoB,KAAK,eACL5B,MAAOmF,EACPzF,IAAI,eACJI,KAAK,QACL+G,QAA0B,eAAjBpD,EACTzC,QAAS,kBAAM2C,EAAkB,CAAEF,aAAc,cAAe,KAItEpE,EAAAA,cAAA,OACEqB,UAAW2F,IAAW,2BAA4B,CAChDjG,SAAU8D,GAA+B,eAAjBT,KAG1BpE,EAAAA,cAAA,wBACEA,EAAAA,cAAA,OAAKqB,UAAU,kBACbrB,EAAAA,cAAA,SAAOqB,UAAU,gCACfrB,EAAAA,cAAA,aACG2E,EACE+C,MAlLX,GAkLkBjC,EAAc,GAlLhC,EAkLgDA,GACrCkC,KAAI,SAACC,EAAMC,GACV,IAAMC,EAASF,EAAKf,KAAKkB,cAAgBC,MAAMJ,EAAKf,KAAKkB,cAEnDE,EAAmBH,EAAmD,KAA1ClC,KAAKsC,MAAMN,EAAKf,KAAKkB,aAAe,IAChEI,EAAeL,EACjBF,EAAKf,KAAKkB,aAEVxG,EADoB,IAApB0G,EACG,oBACA,qBADqB,CAAExD,SAAUwD,IAGxC,OACEjI,EAAAA,cAACA,EAAAA,SAAc,CAACK,IAAKuH,EAAKf,KAAKC,cAC7B9G,EAAAA,cAAA,MAAIqB,UAAU,gCACdrB,EAAAA,cAAA,MACE2B,QAAS,kBAAM4D,EAjMjC,GAiMuDE,EAAc,GAAiBoC,EAAE,EACtExG,UAAW2F,IAAW,uBAAwB,CAC5C,iCACE1B,IApMtB,GAoM6CG,EAAc,GAAiBoC,KAG1D7H,EAAAA,cAAA,UACEA,EAAAA,cAACmB,EAAAA,GAAS,CACRV,KAAK,QACL+G,QAASlC,IA1M/B,GA0MsDG,EAAc,GAAiBoC,EAC/DlH,MAAO,KACPoB,SAAU,WAAO,EACjBJ,QAAS,kBAAM4D,EA7MrC,GA6M2DE,EAAc,GAAiBoC,EAAE,EACtExG,UAAU,gCAGdrB,EAAAA,cAAA,UACEA,EAAAA,cAAA,OAAKqB,UAAU,oCACZuG,EAAKf,KAAKuB,WAAWV,MAAM,EAAG,GAAGC,KAAI,SAACU,GAAK,OAC1CrI,EAAAA,cAAA,OAAKK,IAAKgI,EAAOhH,UAAU,qBAAqBiH,IAAKD,GAAS,MAIpErI,EAAAA,cAAA,UACGmI,EACDnI,EAAAA,cAAA,OAAKqB,UAAU,qBAAmB,GAAAoF,OAC5B8B,IAAOX,EAAKf,KAAK2B,YAAYC,KAAKF,UAG1CvI,EAAAA,cAAA,UACEA,EAAAA,cAAC0I,EAAAA,EAAY,CACXpG,eAAa,EACbJ,SAAUoE,EAAwBsB,EAAKf,KAAKC,cAC5C1E,aAAcb,EAAG,mBAM7B,QAKToE,EAAa,GACZ3F,EAAAA,cAAA,kBAAgB2I,MAAM,gDACpB3I,EAAAA,cAAA,wBACEA,EAAAA,cAAC4I,EAAAA,EAAa,CACZC,UAAWlD,EACXmD,mBAAoB,EACpBC,cAAc,IACdC,UAAU,IACVC,gBAAgB,6BAChBC,cAAc,mBACdC,kBAAkB,8CAClBC,cAAc,0CACdC,eAAe,2CACfC,qBAAsB,EACtBC,aAAc,SAACC,GAAC,OAnNXC,EAmNsCD,EAAEE,SAAW,OAlNhFhE,EAAe+D,GADjB,IAA+BA,CAmNqD,EAC1DE,UAAWlE,EAAc,EACzBmE,YAAanE,EAAc,EAC3BoE,mBAAmB,mBAQhCxD,IAAuBpB,IAAsBL,GAC5C5E,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAOqB,UAAU,WAAWO,MAAO,CAAE6F,UAAW,IAC7C5C,GACC7E,EAAAA,cAACmB,EAAAA,GAAS,CACRoB,KAAK,eACL5B,MAAOmF,EACPzF,IAAI,eACJI,KAAK,QACL+G,QAA0B,eAAjBpD,EACTzC,QAAS,kBAAM2C,EAAkB,CAAEF,aAAc,cAAe,KAItEpE,EAAAA,cAAA,OAAKqB,UAAU,iBAAiBO,MAAO,CAAEkI,WAAY,qBAClDvI,EAAG,uBAIT8E,GAAsBzB,GACrB5E,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAOqB,UAAU,WAAWO,MAAO,CAAE6F,UAAW,IAC7C5C,GACC7E,EAAAA,cAACmB,EAAAA,GAAS,CACRoB,KAAK,gBACL5B,MAAOmF,EACPtG,MAAM,SACNa,IAAI,oBACJI,KAAK,QACL+G,QAA0B,eAAjBpD,EACTzC,QAAS,kBAAM2C,EAAkB,CAAEF,aAAc,cAAe,KAItEpE,EAAAA,cAAA,OAAKqB,UAAU,8BACbrB,EAAAA,cAAC+J,EAAAA,EAAO,CAACC,OAAK,MAKnBnF,GACC7E,EAAAA,cAAA,OAAKqB,UAAU,eACbrB,EAAAA,cAAA,SAAO4B,MAAO,CAAE6F,UAAW,IACzBzH,EAAAA,cAACmB,EAAAA,GAAS,CACRoB,KAAK,gBACL5B,MAAOY,EAAG,iBACVd,KAAK,QACL+G,QAA0B,kBAAjBpD,EACTzC,QAAS,kBAAM2C,EAAkB,CAAEF,aAAc,iBAAkB,KAGvEpE,EAAAA,cAACxB,EAAAA,EAAY,CACXuC,SAA2B,kBAAjBqD,EACV1D,YAAiC,iBAAbsD,EAAwBA,EAAWA,aAAQ,EAARA,EAAUzB,KACjEhD,aA5QlB,SAA0BF,GACxBmF,EAAanF,IADmC4K,UAAA9E,OAAA,QAAA+E,IAAAD,UAAA,KAAAA,UAAA,GAElD,EA2QkBpJ,OAAQsJ,EAAAA,YAAc,qCAAkCD,EACxDtJ,YAAaW,EAAG,wCAzQ5B2C,EAEAlE,EAAAA,cAAA,KAAGqB,UAAU,eACXrB,EAAAA,cAACoK,EAAAA,QAAI,CAACjH,KAAMC,EAAAA,OACX8C,EAAqB,IACtBlG,EAAAA,cAACyB,EAAAA,QAAM,CAACC,OAAO,OAAOf,MAAOY,EAAG,gBAAiB8I,KAAK,gDAKxDpG,EAAcqG,EAAAA,GAAAA,YAEdtK,EAAAA,cAAA,KAAGqB,UAAU,iBACXrB,EAAAA,cAACoK,EAAAA,QAAI,CAACjH,KAAMC,EAAAA,OACXa,EAAcqG,EAAAA,GAAAA,IACX/I,EACE,+IAEFA,EACE,wGACC,IACPvB,EAAAA,cAACyB,EAAAA,QAAM,CAACC,OAAO,OAAOf,MAAOY,EAAG,gBAAiB8I,KAAK,gDAKxD3F,IAAUD,EAEVzE,EAAAA,cAAA,KAAGqB,UAAU,iBACXrB,EAAAA,cAACoK,EAAAA,QAAI,CAACjH,KAAMC,EAAAA,OACX7B,EACC,yIACC,IACHvB,EAAAA,cAACyB,EAAAA,QAAM,CAACC,OAAO,OAAOf,MAAOY,EAAG,gBAAiB8I,KAAK,gDAKvDhG,OAAL,EAEIrE,EAAAA,cAAA,KAAGqB,UAAU,QACXrB,EAAAA,cAACoK,EAAAA,QAAI,CAACjH,KAAMC,EAAAA,OACX7B,EACC,sKACA,CAAE4E,UAAAA,EAAAA,UAAWC,MAAOL,IACnB,IACH/F,EAAAA,cAACyB,EAAAA,QAAM,CAACC,OAAO,OAAOf,MAAOY,EAAG,gBAAiB8I,KAAK,qDAuOhE,ECrYA,IAcME,EAAU,CACdhG,oBAAAA,EAAAA,GACAC,aAAAA,EAAAA,IAGF,SAAexC,EAAAA,EAAAA,KAnBA,SAACwI,GAAK,MAAM,CACzB1G,OAAO2G,EAAAA,EAAAA,IAAuBD,EAAO,SACrCxG,UAAUyG,EAAAA,EAAAA,IAAuBD,EAAO,YACxCvG,YAAauG,EAAME,QAAQzG,YAC3BC,eAAgBsG,EAAME,QAAQxG,eAC9BC,eAAgBqG,EAAME,QAAQvG,eAC9BC,aAAcoG,EAAME,QAAQtG,aAC5BC,gBAAgBsG,EAAAA,EAAAA,IAAqBH,GACrCzG,SAAS6G,EAAAA,EAAAA,IAAcJ,GACvBK,YAAYJ,EAAAA,EAAAA,IAAuBD,EAAO,cAC1C/F,UAAUgG,EAAAA,EAAAA,IAAuBD,EAAO,WACxC9F,OAAO+F,EAAAA,EAAAA,IAAuBD,EAAO,WACtC,GAO8BD,EAA/B,CAAwCO,4VCxBxCC,GAAA,kBAAAC,CAAA,MAAAA,EAAA,GAAAC,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAI,gBAAA,SAAAC,EAAAlL,EAAAmL,GAAAD,EAAAlL,GAAAmL,EAAAhM,KAAA,EAAAiM,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAV,EAAAlL,EAAAb,GAAA,OAAA0L,OAAAI,eAAAC,EAAAlL,EAAA,CAAAb,MAAAA,EAAA0M,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAb,EAAAlL,EAAA,KAAA4L,EAAA,aAAAI,GAAAJ,EAAA,SAAAV,EAAAlL,EAAAb,GAAA,OAAA+L,EAAAlL,GAAAb,CAAA,WAAA8M,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,GAAAA,EAAArB,qBAAAyB,EAAAJ,EAAAI,EAAAC,EAAA3B,OAAA4B,OAAAH,EAAAxB,WAAA4B,EAAA,IAAAC,EAAAN,GAAA,WAAApB,EAAAuB,EAAA,WAAArN,MAAAyN,EAAAV,EAAAE,EAAAM,KAAAF,CAAA,UAAAK,EAAAC,EAAA5B,EAAA6B,GAAA,WAAA3M,KAAA,SAAA2M,IAAAD,EAAAlO,KAAAsM,EAAA6B,GAAA,OAAAf,GAAA,OAAA5L,KAAA,QAAA2M,IAAAf,EAAA,EAAArB,EAAAsB,KAAAA,EAAA,IAAAe,EAAA,YAAAT,IAAA,UAAAU,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAvB,EAAAuB,EAAA7B,GAAA,8BAAA8B,EAAAvC,OAAAwC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAA1C,GAAAG,EAAAnM,KAAA0O,EAAAhC,KAAA6B,EAAAG,GAAA,IAAAE,EAAAN,EAAApC,UAAAyB,EAAAzB,UAAAD,OAAA4B,OAAAU,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,SAAA,SAAAC,GAAA/B,EAAAd,EAAA6C,GAAA,SAAAZ,GAAA,YAAAa,QAAAD,EAAAZ,EAAA,gBAAAc,EAAArB,EAAAsB,GAAA,SAAAC,EAAAJ,EAAAZ,EAAAiB,EAAAC,GAAA,IAAAC,EAAArB,EAAAL,EAAAmB,GAAAnB,EAAAO,GAAA,aAAAmB,EAAA9N,KAAA,KAAAb,EAAA2O,EAAAnB,IAAA5N,EAAAI,EAAAJ,MAAA,OAAAA,GAAA,UAAAgP,GAAAhP,IAAA4L,EAAAnM,KAAAO,EAAA,WAAA2O,EAAAE,QAAA7O,EAAAiP,SAAA9O,MAAA,SAAAH,GAAA4O,EAAA,OAAA5O,EAAA6O,EAAAC,EAAA,aAAAjC,GAAA+B,EAAA,QAAA/B,EAAAgC,EAAAC,EAAA,IAAAH,EAAAE,QAAA7O,GAAAG,MAAA,SAAA+O,GAAA9O,EAAAJ,MAAAkP,EAAAL,EAAAzO,EAAA,aAAAkB,GAAA,OAAAsN,EAAA,QAAAtN,EAAAuN,EAAAC,EAAA,IAAAA,EAAAC,EAAAnB,IAAA,KAAAuB,EAAArD,EAAA,gBAAA9L,MAAA,SAAAwO,EAAAZ,GAAA,SAAAwB,IAAA,WAAAT,GAAA,SAAAE,EAAAC,GAAAF,EAAAJ,EAAAZ,EAAAiB,EAAAC,EAAA,WAAAK,EAAAA,EAAAA,EAAAhP,KAAAiP,EAAAA,GAAAA,GAAA,aAAA3B,EAAAV,EAAAE,EAAAM,GAAA,IAAAvC,EAAA,iCAAAwD,EAAAZ,GAAA,iBAAA5C,EAAA,UAAAqE,MAAA,iDAAArE,EAAA,cAAAwD,EAAA,MAAAZ,EAAA,OAAA0B,GAAA,KAAA/B,EAAAiB,OAAAA,EAAAjB,EAAAK,IAAAA,IAAA,KAAA2B,EAAAhC,EAAAgC,SAAA,GAAAA,EAAA,KAAAC,EAAAC,EAAAF,EAAAhC,GAAA,GAAAiC,EAAA,IAAAA,IAAA3B,EAAA,gBAAA2B,CAAA,cAAAjC,EAAAiB,OAAAjB,EAAAmC,KAAAnC,EAAAoC,MAAApC,EAAAK,SAAA,aAAAL,EAAAiB,OAAA,uBAAAxD,EAAA,MAAAA,EAAA,YAAAuC,EAAAK,IAAAL,EAAAqC,kBAAArC,EAAAK,IAAA,gBAAAL,EAAAiB,QAAAjB,EAAAsC,OAAA,SAAAtC,EAAAK,KAAA5C,EAAA,gBAAA+D,EAAArB,EAAAX,EAAAE,EAAAM,GAAA,cAAAwB,EAAA9N,KAAA,IAAA+J,EAAAuC,EAAAuC,KAAA,6BAAAf,EAAAnB,MAAAC,EAAA,gBAAA7N,MAAA+O,EAAAnB,IAAAkC,KAAAvC,EAAAuC,KAAA,WAAAf,EAAA9N,OAAA+J,EAAA,YAAAuC,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAmB,EAAAnB,IAAA,YAAA6B,EAAAF,EAAAhC,GAAA,IAAAwC,EAAAxC,EAAAiB,OAAAA,EAAAe,EAAAnD,SAAA2D,GAAA,QAAArF,IAAA8D,EAAA,OAAAjB,EAAAgC,SAAA,eAAAQ,GAAAR,EAAAnD,SAAA,SAAAmB,EAAAiB,OAAA,SAAAjB,EAAAK,SAAAlD,EAAA+E,EAAAF,EAAAhC,GAAA,UAAAA,EAAAiB,SAAA,WAAAuB,IAAAxC,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAoC,UAAA,oCAAAD,EAAA,aAAAlC,EAAA,IAAAkB,EAAArB,EAAAc,EAAAe,EAAAnD,SAAAmB,EAAAK,KAAA,aAAAmB,EAAA9N,KAAA,OAAAsM,EAAAiB,OAAA,QAAAjB,EAAAK,IAAAmB,EAAAnB,IAAAL,EAAAgC,SAAA,KAAA1B,EAAA,IAAAoC,EAAAlB,EAAAnB,IAAA,OAAAqC,EAAAA,EAAAH,MAAAvC,EAAAgC,EAAAW,YAAAD,EAAAjQ,MAAAuN,EAAA4C,KAAAZ,EAAAa,QAAA,WAAA7C,EAAAiB,SAAAjB,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAlD,GAAA6C,EAAAgC,SAAA,KAAA1B,GAAAoC,GAAA1C,EAAAiB,OAAA,QAAAjB,EAAAK,IAAA,IAAAoC,UAAA,oCAAAzC,EAAAgC,SAAA,KAAA1B,EAAA,UAAAwC,EAAAC,GAAA,IAAAC,EAAA,CAAAC,OAAAF,EAAA,SAAAA,IAAAC,EAAAE,SAAAH,EAAA,SAAAA,IAAAC,EAAAG,WAAAJ,EAAA,GAAAC,EAAAI,SAAAL,EAAA,SAAAM,WAAAC,KAAAN,EAAA,UAAAO,EAAAP,GAAA,IAAAxB,EAAAwB,EAAAQ,YAAA,GAAAhC,EAAA9N,KAAA,gBAAA8N,EAAAnB,IAAA2C,EAAAQ,WAAAhC,CAAA,UAAAvB,EAAAN,GAAA,KAAA0D,WAAA,EAAAJ,OAAA,SAAAtD,EAAAqB,QAAA8B,EAAA,WAAAW,OAAA,YAAA5C,EAAA6C,GAAA,GAAAA,EAAA,KAAAC,EAAAD,EAAA9E,GAAA,GAAA+E,EAAA,OAAAA,EAAAzR,KAAAwR,GAAA,sBAAAA,EAAAd,KAAA,OAAAc,EAAA,IAAAzI,MAAAyI,EAAAtL,QAAA,KAAA0C,GAAA,EAAA8H,EAAA,SAAAA,IAAA,OAAA9H,EAAA4I,EAAAtL,QAAA,GAAAiG,EAAAnM,KAAAwR,EAAA5I,GAAA,OAAA8H,EAAAnQ,MAAAiR,EAAA5I,GAAA8H,EAAAL,MAAA,EAAAK,EAAA,OAAAA,EAAAnQ,WAAA0K,EAAAyF,EAAAL,MAAA,EAAAK,CAAA,SAAAA,EAAAA,KAAAA,CAAA,SAAAA,KAAAb,EAAA,UAAAA,IAAA,OAAAtP,WAAA0K,EAAAoF,MAAA,UAAAhC,EAAAnC,UAAAoC,EAAAjC,EAAAuC,EAAA,eAAArO,MAAA+N,EAAApB,cAAA,IAAAb,EAAAiC,EAAA,eAAA/N,MAAA8N,EAAAnB,cAAA,IAAAmB,EAAAqD,YAAA1E,EAAAsB,EAAAxB,EAAA,qBAAAf,EAAA4F,oBAAA,SAAAC,GAAA,IAAAC,EAAA,mBAAAD,GAAAA,EAAAE,YAAA,QAAAD,IAAAA,IAAAxD,GAAA,uBAAAwD,EAAAH,aAAAG,EAAAvO,MAAA,EAAAyI,EAAAgG,KAAA,SAAAH,GAAA,OAAA3F,OAAA+F,eAAA/F,OAAA+F,eAAAJ,EAAAtD,IAAAsD,EAAAK,UAAA3D,EAAAtB,EAAA4E,EAAA9E,EAAA,sBAAA8E,EAAA1F,UAAAD,OAAA4B,OAAAe,GAAAgD,CAAA,EAAA7F,EAAAmG,MAAA,SAAA/D,GAAA,OAAAqB,QAAArB,EAAA,EAAAU,EAAAI,EAAA/C,WAAAc,EAAAiC,EAAA/C,UAAAU,GAAA,0BAAAb,EAAAkD,cAAAA,EAAAlD,EAAAoG,MAAA,SAAA7E,EAAAC,EAAAC,EAAAC,EAAAyB,QAAA,IAAAA,IAAAA,EAAAkD,SAAA,IAAAC,EAAA,IAAApD,EAAA5B,EAAAC,EAAAC,EAAAC,EAAAC,GAAAyB,GAAA,OAAAnD,EAAA4F,oBAAApE,GAAA8E,EAAAA,EAAA3B,OAAAhQ,MAAA,SAAAC,GAAA,OAAAA,EAAA0P,KAAA1P,EAAAJ,MAAA8R,EAAA3B,MAAA,KAAA7B,EAAAD,GAAA5B,EAAA4B,EAAA9B,EAAA,aAAAE,EAAA4B,EAAAlC,GAAA,0BAAAM,EAAA4B,EAAA,qDAAA7C,EAAAuG,KAAA,SAAAC,GAAA,IAAAC,EAAAvG,OAAAsG,GAAAD,EAAA,WAAAlR,KAAAoR,EAAAF,EAAAlB,KAAAhQ,GAAA,OAAAkR,EAAAG,UAAA,SAAA/B,IAAA,KAAA4B,EAAApM,QAAA,KAAA9E,EAAAkR,EAAAI,MAAA,GAAAtR,KAAAoR,EAAA,OAAA9B,EAAAnQ,MAAAa,EAAAsP,EAAAL,MAAA,EAAAK,CAAA,QAAAA,EAAAL,MAAA,EAAAK,CAAA,GAAA3E,EAAA4C,OAAAA,EAAAZ,EAAA7B,UAAA,CAAA4F,YAAA/D,EAAAwD,MAAA,SAAAoB,GAAA,QAAAC,KAAA,OAAAlC,KAAA,OAAAT,KAAA,KAAAC,WAAAjF,EAAA,KAAAoF,MAAA,OAAAP,SAAA,UAAAf,OAAA,YAAAZ,SAAAlD,EAAA,KAAAkG,WAAArC,QAAAuC,IAAAsB,EAAA,QAAArP,KAAA,WAAAA,EAAAuP,OAAA,IAAA1G,EAAAnM,KAAA,KAAAsD,KAAAyF,OAAAzF,EAAAmF,MAAA,WAAAnF,QAAA2H,EAAA,EAAA6H,KAAA,gBAAAzC,MAAA,MAAA0C,EAAA,KAAA5B,WAAA,GAAAG,WAAA,aAAAyB,EAAAvR,KAAA,MAAAuR,EAAA5E,IAAA,YAAA6E,IAAA,EAAA7C,kBAAA,SAAA8C,GAAA,QAAA5C,KAAA,MAAA4C,EAAA,IAAAnF,EAAA,cAAAoF,EAAAC,EAAAC,GAAA,OAAA9D,EAAA9N,KAAA,QAAA8N,EAAAnB,IAAA8E,EAAAnF,EAAA4C,KAAAyC,EAAAC,IAAAtF,EAAAiB,OAAA,OAAAjB,EAAAK,SAAAlD,KAAAmI,CAAA,SAAAxK,EAAA,KAAAuI,WAAAjL,OAAA,EAAA0C,GAAA,IAAAA,EAAA,KAAAkI,EAAA,KAAAK,WAAAvI,GAAA0G,EAAAwB,EAAAQ,WAAA,YAAAR,EAAAC,OAAA,OAAAmC,EAAA,UAAApC,EAAAC,QAAA,KAAA6B,KAAA,KAAAS,EAAAlH,EAAAnM,KAAA8Q,EAAA,YAAAwC,EAAAnH,EAAAnM,KAAA8Q,EAAA,iBAAAuC,GAAAC,EAAA,SAAAV,KAAA9B,EAAAE,SAAA,OAAAkC,EAAApC,EAAAE,UAAA,WAAA4B,KAAA9B,EAAAG,WAAA,OAAAiC,EAAApC,EAAAG,WAAA,SAAAoC,GAAA,QAAAT,KAAA9B,EAAAE,SAAA,OAAAkC,EAAApC,EAAAE,UAAA,YAAAsC,EAAA,UAAA1D,MAAA,kDAAAgD,KAAA9B,EAAAG,WAAA,OAAAiC,EAAApC,EAAAG,WAAA,KAAAb,OAAA,SAAA5O,EAAA2M,GAAA,QAAAvF,EAAA,KAAAuI,WAAAjL,OAAA,EAAA0C,GAAA,IAAAA,EAAA,KAAAkI,EAAA,KAAAK,WAAAvI,GAAA,GAAAkI,EAAAC,QAAA,KAAA6B,MAAAzG,EAAAnM,KAAA8Q,EAAA,oBAAA8B,KAAA9B,EAAAG,WAAA,KAAAsC,EAAAzC,EAAA,OAAAyC,IAAA,UAAA/R,GAAA,aAAAA,IAAA+R,EAAAxC,QAAA5C,GAAAA,GAAAoF,EAAAtC,aAAAsC,EAAA,UAAAjE,EAAAiE,EAAAA,EAAAjC,WAAA,UAAAhC,EAAA9N,KAAAA,EAAA8N,EAAAnB,IAAAA,EAAAoF,GAAA,KAAAxE,OAAA,YAAA2B,KAAA6C,EAAAtC,WAAA7C,GAAA,KAAAoF,SAAAlE,EAAA,EAAAkE,SAAA,SAAAlE,EAAA4B,GAAA,aAAA5B,EAAA9N,KAAA,MAAA8N,EAAAnB,IAAA,gBAAAmB,EAAA9N,MAAA,aAAA8N,EAAA9N,KAAA,KAAAkP,KAAApB,EAAAnB,IAAA,WAAAmB,EAAA9N,MAAA,KAAAwR,KAAA,KAAA7E,IAAAmB,EAAAnB,IAAA,KAAAY,OAAA,cAAA2B,KAAA,kBAAApB,EAAA9N,MAAA0P,IAAA,KAAAR,KAAAQ,GAAA9C,CAAA,EAAAqF,OAAA,SAAAxC,GAAA,QAAArI,EAAA,KAAAuI,WAAAjL,OAAA,EAAA0C,GAAA,IAAAA,EAAA,KAAAkI,EAAA,KAAAK,WAAAvI,GAAA,GAAAkI,EAAAG,aAAAA,EAAA,YAAAuC,SAAA1C,EAAAQ,WAAAR,EAAAI,UAAAG,EAAAP,GAAA1C,CAAA,kBAAA2C,GAAA,QAAAnI,EAAA,KAAAuI,WAAAjL,OAAA,EAAA0C,GAAA,IAAAA,EAAA,KAAAkI,EAAA,KAAAK,WAAAvI,GAAA,GAAAkI,EAAAC,SAAAA,EAAA,KAAAzB,EAAAwB,EAAAQ,WAAA,aAAAhC,EAAA9N,KAAA,KAAAkS,EAAApE,EAAAnB,IAAAkD,EAAAP,EAAA,QAAA4C,CAAA,YAAA9D,MAAA,0BAAA+D,cAAA,SAAAnC,EAAAf,EAAAE,GAAA,YAAAb,SAAA,CAAAnD,SAAAgC,EAAA6C,GAAAf,WAAAA,EAAAE,QAAAA,GAAA,cAAA5B,SAAA,KAAAZ,SAAAlD,GAAAmD,CAAA,GAAArC,CAAA,UAAA6H,GAAAC,EAAAC,GAAA,IAAAC,EAAA,oBAAAtH,QAAAoH,EAAApH,OAAAE,WAAAkH,EAAA,kBAAAE,EAAA,IAAAC,MAAAC,QAAAJ,KAAAE,EAAAG,GAAAL,KAAAC,GAAAD,GAAA,iBAAAA,EAAA3N,OAAA,CAAA6N,IAAAF,EAAAE,GAAA,IAAAnL,EAAA,EAAAuL,EAAA,oBAAAC,EAAAD,EAAAE,EAAA,kBAAAzL,GAAAiL,EAAA3N,OAAA,CAAAmK,MAAA,IAAAA,MAAA,EAAA9P,MAAAsT,EAAAjL,KAAA,EAAA2B,EAAA,SAAA+J,GAAA,MAAAA,CAAA,EAAAC,EAAAJ,EAAA,WAAA5D,UAAA,6IAAAnD,EAAAoH,GAAA,EAAAC,GAAA,SAAAL,EAAA,WAAAL,EAAAA,EAAA/T,KAAA6T,EAAA,EAAAQ,EAAA,eAAAK,EAAAX,EAAArD,OAAA,OAAA8D,EAAAE,EAAArE,KAAAqE,CAAA,EAAAnK,EAAA,SAAAoK,GAAAF,GAAA,EAAArH,EAAAuH,CAAA,EAAAJ,EAAA,eAAAC,GAAA,MAAAT,EAAA,QAAAA,EAAA,oBAAAU,EAAA,MAAArH,CAAA,aAAAwH,GAAAC,GAAA,gBAAAA,GAAA,GAAAb,MAAAC,QAAAY,GAAA,OAAAC,GAAAD,EAAA,CAAAE,CAAAF,IAAA,SAAAxC,GAAA,uBAAA5F,QAAA,MAAA4F,EAAA5F,OAAAE,WAAA,MAAA0F,EAAA,qBAAA2B,MAAAxK,KAAA6I,EAAA,CAAA2C,CAAAH,IAAAX,GAAAW,IAAA,qBAAAtE,UAAA,wIAAA0E,EAAA,UAAAC,GAAAC,EAAA/F,EAAAC,EAAA+F,EAAAC,EAAAjU,EAAA+M,GAAA,QAAAqC,EAAA2E,EAAA/T,GAAA+M,GAAA5N,EAAAiQ,EAAAjQ,KAAA,OAAAsB,GAAA,YAAAwN,EAAAxN,EAAA,CAAA2O,EAAAH,KAAAjB,EAAA7O,GAAA6R,QAAAhD,QAAA7O,GAAAG,KAAA0U,EAAAC,EAAA,UAAAC,GAAApH,GAAA,sBAAAV,EAAA,KAAA+H,EAAAvK,UAAA,WAAAoH,SAAA,SAAAhD,EAAAC,GAAA,IAAA8F,EAAAjH,EAAAsH,MAAAhI,EAAA+H,GAAA,SAAAH,EAAA7U,GAAA2U,GAAAC,EAAA/F,EAAAC,EAAA+F,EAAAC,EAAA,OAAA9U,EAAA,UAAA8U,EAAAjI,GAAA8H,GAAAC,EAAA/F,EAAAC,EAAA+F,EAAAC,EAAA,QAAAjI,EAAA,CAAAgI,OAAAnK,EAAA,cAAAvH,GAAAmR,EAAAjM,GAAA,gBAAAiM,GAAA,GAAAb,MAAAC,QAAAY,GAAA,OAAAA,CAAA,CAAAY,CAAAZ,IAAA,SAAAA,EAAAjM,GAAA,IAAA8M,EAAA,MAAAb,EAAA,yBAAApI,QAAAoI,EAAApI,OAAAE,WAAAkI,EAAA,uBAAAa,EAAA,KAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,GAAAC,GAAA,EAAAC,GAAA,SAAAJ,GAAAH,EAAAA,EAAA1V,KAAA6U,IAAAnE,KAAA,IAAA9H,EAAA,IAAAqD,OAAAyJ,KAAAA,EAAA,OAAAM,GAAA,cAAAA,GAAAL,EAAAE,EAAA7V,KAAA0V,IAAArF,QAAA0F,EAAA3E,KAAAuE,EAAApV,OAAAwV,EAAA7P,SAAA0C,GAAAoN,GAAA,UAAA5I,GAAA6I,GAAA,EAAAL,EAAAxI,CAAA,iBAAA4I,GAAA,MAAAN,EAAA,SAAAI,EAAAJ,EAAA,SAAAzJ,OAAA6J,KAAAA,GAAA,kBAAAG,EAAA,MAAAL,CAAA,SAAAG,CAAA,EAAAG,CAAArB,EAAAjM,IAAAsL,GAAAW,EAAAjM,IAAA,qBAAA2H,UAAA,6IAAA4F,EAAA,UAAAjC,GAAAL,EAAAuC,GAAA,GAAAvC,EAAA,qBAAAA,EAAA,OAAAiB,GAAAjB,EAAAuC,GAAA,IAAA/B,EAAApI,OAAAC,UAAAmK,SAAArW,KAAA6T,GAAApL,MAAA,uBAAA4L,GAAAR,EAAA/B,cAAAuC,EAAAR,EAAA/B,YAAAxO,MAAA,QAAA+Q,GAAA,QAAAA,EAAAL,MAAAxK,KAAAqK,GAAA,cAAAQ,GAAA,2CAAAiC,KAAAjC,GAAAS,GAAAjB,EAAAuC,QAAA,YAAAtB,GAAAD,EAAA0B,IAAA,MAAAA,GAAAA,EAAA1B,EAAA3O,UAAAqQ,EAAA1B,EAAA3O,QAAA,QAAA0C,EAAA,EAAA4N,EAAA,IAAAxC,MAAAuC,GAAA3N,EAAA2N,EAAA3N,IAAA4N,EAAA5N,GAAAiM,EAAAjM,GAAA,OAAA4N,CAAA,CAqCA,IAAMC,IAAkBC,EAAAA,EAAAA,IAAW,kBAAM,+BAA6E,IAChHC,IAAeD,EAAAA,EAAAA,IAAW,kBAC9B,4EAAiF,IAoiBnF,SAreA,SAAwBrW,GAEtB,IA6LIuW,EA5LF1R,EAsCE7E,EAtCF6E,eACAC,EAqCE9E,EArCF8E,aACA0R,EAoCExW,EApCFwW,UACAC,EAmCEzW,EAnCFyW,eACAC,EAkCE1W,EAlCF0W,iBACAzT,EAiCEjD,EAjCFiD,KACA0T,EAgCE3W,EAhCF2W,WACAC,EA+BE5W,EA/BF4W,cACAC,EA8BE7W,EA9BF6W,WACArS,EA6BExE,EA7BFwE,MACAsS,EA4BE9W,EA5BF8W,IACAC,EA2BE/W,EA3BF+W,SACAC,EA0BEhX,EA1BFgX,sBACAC,EAyBEjX,EAzBFiX,qBACAjS,EAwBEhF,EAxBFgF,kBACAN,EAuBE1E,EAvBF0E,SACAC,EAsBE3E,EAtBF2E,YACA4G,EAqBEvL,EArBFuL,WACA2L,EAoBElX,EApBFkX,eACAC,EAmBEnX,EAnBFmX,aACAC,EAkBEpX,EAlBFoX,aACArS,EAiBE/E,EAjBF+E,eACAsS,EAgBErX,EAhBFqX,KACAjM,EAeEpL,EAfFoL,QACAkM,EAcEtX,EAdFsX,kBACAC,EAaEvX,EAbFuX,MACAC,EAYExX,EAZFwX,qBACAC,EAWEzX,EAXFyX,mBACAC,EAUE1X,EAVF0X,YAEAjT,EAQEzE,EARFyE,QACAkT,GAOE3X,EAPF2X,aACAC,GAME5X,EANF4X,yBACAC,GAKE7X,EALF6X,oBACAC,GAIE9X,EAJF8X,yBACAC,GAGE/X,EAHF+X,eACAzQ,GAEEtH,EAFFsH,cACA0Q,GACEhY,EADFgY,wBAIYC,IACVC,EAAAA,EAAAA,MADFC,SAAYF,OAGRG,GADY,IAAIC,gBAAgBJ,IACDK,IAAI,KAEnCC,IAAWC,EAAAA,GAAAA,MAEXjT,GAAaK,QAAQ+Q,GACrB8B,GAAoBhB,GAAsBA,EAAmBxU,KAC7DyV,GAAkBjB,GAAsBA,EAAmBkB,SAEYvV,GAAAC,GAArB3C,EAAAA,UAAe,GAAM,GAAtE4E,GAAqBlC,GAAA,GAAEwV,GAAsBxV,GAAA,GAICyV,GAAAxV,GAArB3C,EAAAA,UAAe,GAAM,GAA9CoY,GAAQD,GAAA,GAAEE,GAAWF,GAAA,GAErBG,GAA8B3V,IAAf0C,EAAAA,EAAAA,WAAS,GAAM,GAAnB,GAE4CkT,GAAA5V,GAAlB3C,EAAAA,SAAe,IAAG,GAAvD2E,GAAc4T,GAAA,GAAEC,GAAiBD,GAAA,GAClCtT,GAAoBN,IAAkBO,QAAQP,GAAeQ,QAG7DsT,GAAe5N,EAGf6N,GAAoBpC,IAA0BqC,EAAAA,IAA+B7C,EAE7E8C,GAAiBN,KAAgB1R,KAAkB5C,EAEnD6U,KACFvB,GAAwBwB,cAAgBxB,GAAwByB,mBAClExW,IACAyW,EAAAA,EAAAA,aAAYzW,IACZuB,GACAG,EAAcqG,EAAAA,GAAAA,KACd8L,GACAN,IACCO,KACCN,IAAmB2C,MACpB1C,KACCM,IAA0BqC,EAAAA,IAIxBM,MAF8BhD,GAAcC,KAI9CD,IAAejS,EACfK,GAAkBwU,KAAsBD,GACxCC,IAEqDK,GAAAvW,GAArB3C,EAAAA,UAAe,GAAM,GAAlDmZ,GAAUD,GAAA,GAAEE,GAAaF,GAAA,GAE1BG,GACe,kBAAnBlV,GAA0D,qBAAnBA,GAA0D,eAAjBC,EAC5EkV,GAAkC,qBAAnBnV,GAA0D,kBAAjBC,EAExDrD,IAAY+C,IAAUvB,GAAS8W,KAAsBzS,IAAmB0S,KAAiBtV,EACzFuV,KAAWzV,GAAUvB,GAASyU,GAAgBlB,GAqCpD,SACe0D,GAAgBC,EAAAC,GAAA,OAAAC,GAAAlF,MAAC,KAADxK,UAAA,UAAA0P,KAiD9B,OAjD8BA,GAAApF,GAAAxJ,KAAAiG,MAA/B,SAAA4I,EAAgCC,EAAWC,GAAW,IAAAC,EAAAC,EAAAC,EAAAC,EAAArT,EAAAsT,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAxP,KAAAuB,MAAA,SAAAkO,GAAA,cAAAA,EAAA3I,KAAA2I,EAAA7K,MAAA,OACvB,OAA7BuI,IAAuB,GAAMsC,EAAA3I,KAAA,EAAA2I,EAAA7K,KAAA,EAGrB8K,EAAAA,EAAAA,aAAkB,CACtBC,WAAYb,EACZc,SAASC,EAAAA,EAAAA,GAAMd,GAAe,MAC7Bna,MAAK,SAACkH,GACPkT,EAAgBlT,CAClB,IAAE,OAAA2T,EAAA7K,KAAA,qBAAA6K,EAAA3I,KAAA,EAAA2I,EAAAK,GAAAL,EAAA,SAAAA,EAAAK,GAAA,WAIAd,EAAe,CAAFS,EAAA7K,KAAA,SAMX,OALEqK,EAAqBc,mBAAmBhB,GAAe,IACvDG,EACJ,GAAAxT,OAAGsU,EAAAA,GAAyB,sBAAAtU,OAAqBT,OAAO6T,IAAU,cAAApT,OACpDsT,EAAciB,UAAS,kBAAAvU,OAAiBsT,EAAckB,WAAU,kBAAAxU,OAC5EuT,GAAsB,IACtBQ,EAAA7K,KAAA,GAE6BuL,MAAMjB,GAAe,QAA9B,OAAlBC,EAAkBM,EAAAtL,KAAAsL,EAAA7K,KAAG,GAEoBuK,EAAmBiB,OAAM,QAGxE,GAHMtU,EAA+B2T,EAAAtL,KAAqCrI,KACpEsT,EAAuC,GAEzCtT,GAAQA,EAAK1B,OAAS,EAAG,CAAAiV,EAAAvH,GACJhM,GAAI,IAA3B,IAAAuT,EAAA/G,MAAAgH,EAAAD,EAAA9G,KAAAhE,MACwC,gBAD7BgL,EAAQD,EAAA7a,OACJ4b,OAAOC,eAAoE,UAAlCf,EAASc,OAAOC,gBAC9Dd,EAAe,CACnB1T,KAAM,CACJC,aAAcwT,EAASgB,IACvBvT,aACoC,eAAlCuS,EAASc,OAAOC,cACZ9Z,GAAG,kBAAoB+Y,EAASiB,gBAAkB,MACjDjB,EAASkB,SAAW,KAAYlG,WACvCmG,gBAAiBnB,EAASiB,gBAC1BnT,WAAuC,OAA3BkS,EAASoB,cAAyBpB,EAASoB,cAAgB,GACvElT,WAAY8R,EAASqB,UAGzBxB,EAAQ9J,KAAKkK,GAEhB,OAAAlO,GAAA+N,EAAA5Q,EAAA6C,EAAA,SAAA+N,EAAA5G,GAAA,CACH,CAEAgF,GAAkB2B,GAClBjC,IAAuB,GAAO,yBAAAsC,EAAAzI,OAAA,GAAA6H,EAAA,mBAEjCnF,MAAA,KAAAxK,UAAA,CA0F2B,SAAA2R,KAS3B,OAT2BA,GAAArH,GAAAxJ,KAAAiG,MAA5B,SAAA6K,IAAA,IAAAC,EAAA,OAAA/Q,KAAAuB,MAAA,SAAAyP,GAAA,cAAAA,EAAAlK,KAAAkK,EAAApM,MAAA,OACMmM,EAAa9X,EAEb8S,GACFsC,IAAc,GACd1O,EAAQoR,GAAY,IAEpBpR,EAAQoR,GAAY,GACrB,wBAAAC,EAAAhK,OAAA,GAAA8J,EAAA,MACFpH,MAAA,KAAAxK,UAAA,CAED,IA1LAvD,EAAAA,EAAAA,YAAU,WACR2Q,GAAekC,GAEjB,GAAG,CAACA,MAEJ7S,EAAAA,EAAAA,YAAU,WACJqR,IAAqBC,IACvBwB,GAAiBxB,GAAiBD,GAEtC,GAAG,CAACA,GAAmBC,MAEvBtR,EAAAA,EAAAA,YAAU,WACH0Q,IACHD,IAEJ,GAAG,CAACC,GAA0BD,MAE9BzQ,EAAAA,EAAAA,YAAU,WACR,IAAKmQ,EAAO,CACV,IAAMmF,EAAQC,YAAW,WACvB7C,IAAc,EAChB,GAAG,KAEH,OAAO,kBAAM8C,aAAaF,EAAM,CAClC,CACF,GAAG,CAACnF,KAEJnQ,EAAAA,EAAAA,YAAU,WACJ+P,IACF2C,IAAc,GACd9U,EAAkB,CAAEmS,kBAAcvM,IAGtC,GAAG,CAACuM,IAyDFZ,EADEqB,GACY3V,GAAG,uBACRsJ,EAEOtJ,GADZ8C,GAAkBQ,GACH,YAEA,eAEVsU,GACKnZ,EAAAA,cAAC+J,EAAAA,EAAO,CAACtJ,KAAK,UAGZc,GADZ8C,GAAkBQ,GACH,OAEA,WAKrB6B,EAAAA,EAAAA,YAAU,YACJmE,GAAc2L,IAChBE,GAGJ,GAAG,CAACA,KAEJhQ,EAAAA,EAAAA,YAAU,WACHoP,GACHS,GAEJ,GAAG,CAACT,EAAWS,KAGf7P,EAAAA,EAAAA,YAAU,YACJrC,GAAoB+T,IAAiC,MAApBA,GAAS+D,QACxC5Z,IAAS6V,IACXC,GAAY9V,EAGlB,GAAG,CAACA,EAAM6V,GAAUC,GAAahU,KAGjCqC,EAAAA,EAAAA,YAAU,WAER,IAAI7C,EACJ,IACEA,EAAMtB,IAAQ6Z,EAAAA,EAAAA,UAAS,CAAEC,WAAY9Z,EAAMwV,kBAAAA,KAAqB,EAClE,CAAE,MAAOvO,GAAI,CAEb,GAAIuO,IAAqBxV,EAEvB,IACE,IAAM+Z,GAAiBF,EAAAA,EAAAA,UAAS,CAAEC,WAAY9Z,IAAQ,GACtD4T,EAAWmG,EACb,CAAE,MAAO9S,GAAI,CAGf,IAAM+S,EAAU1Y,IAAO2Y,EAAAA,EAAAA,YAAW3Y,GAC9BA,GAAO0Y,GAAW3F,GAAqBrU,IACzC4T,EAAWtS,GACX+S,EAAkBrU,GAClB+B,EAAkB,CAAET,IAAAA,IAExB,GAAG,CAACtB,EAAMwV,GAAmB5B,EAAY7R,EAAmBsS,KAG5DlQ,EAAAA,EAAAA,YAAU,WACJuP,GACFE,EAAWF,EAEf,GAAG,CAACA,EAAYE,KAEhBzP,EAAAA,EAAAA,YAAU,WACmB,WAAvBgR,IACFpT,EAAkB,CAAEH,eAAgB,iBAGxC,GAAG,KAEHuC,EAAAA,EAAAA,YAAU,WACRpC,EAAkB,CAChBmY,QAAS1E,SAAqB7N,EAC9B2P,UAAW7B,SAAmB9N,GAElC,GAAG,CAAC6N,GAAmBC,GAAiB1T,IAapCuG,EACF,OACE7K,EAAAA,cAAA,OAAKqB,UAAU,eACbrB,EAAAA,cAAA,MAAIqB,UAAU,qBAAqBE,GAAG,kBACtCvB,EAAAA,cAAC+J,EAAAA,EAAO,CAAC2S,SAAO,KAKtB,IAAMC,GACJzF,IACAuB,KACCQ,IACD3C,IAA0BqC,EAAAA,IACzBU,KAAsBzS,IACtB0S,KAAiBtV,GAClBmV,GAGF,OACEnZ,EAAAA,cAAA,OAAKqB,UAAW0C,EAAU,IAAO,WAAa,IAC5C/D,EAAAA,cAAA,OAAKqB,UAAU,cACbrB,EAAAA,cAAC+G,EAAAA,EAAI,CAAC1F,UAAU,6BACdrB,EAAAA,cAACyB,EAAAA,QAAM,CACLpB,IAAK,MACL8C,KAAMC,EAAAA,sBACNwZ,SAAU,GACVjc,MAAOY,GAAG,kBACVG,OAAO,MACPC,QAAS,kBAAM2C,EAAkB,CAAEH,eAAgB,mBAAoB,EACvEpD,SAAUkV,EACV5U,UAAW2F,IAAW,gBAAiB,CAAE,wBAA4C,oBAAnB7C,MAEhD,qBAAnBA,GACCnE,EAAAA,cAACyB,EAAAA,QAAM,CACLpB,IAAK,SACL8C,KAAMC,EAAAA,KACNwZ,SAAU,GACVjc,MAAOY,GAAG,iBACVG,OAAO,MACPC,QAAS,kBAAM2C,EAAkB,CAAEH,eAAgB,iBAAkB,EACrEpD,UAAWkE,GACX5D,UAAW2F,IAAW,gBAAiB,CAAE,wBAA4C,kBAAnB7C,MAGlD,qBAAnBA,GACCnE,EAAAA,cAACyB,EAAAA,QAAM,CACLpB,IAAK,OACL8C,KAAMC,EAAAA,KACNwZ,SAAU,GACVjc,MAAOY,GAAG,iBACVG,OAAO,MACPL,UAAU,yCAGZwW,IAAY7X,EAAAA,cAAC6c,EAAAA,EAAe,CAACC,UAAQ,EAACC,aAAW,IACnD/c,EAAAA,cAACgd,GAAAA,EAAO,CAAClZ,MAAOvC,GAAG,sBACjBvB,EAAAA,cAACyB,EAAAA,QAAM,CACLC,OAAO,YACPf,MAAOY,GAAG,qBACVR,SAAU6D,GACVzB,KAAMC,EAAAA,QACNzB,QAAS,kBAAM6X,GAAiBxB,GAAiBD,GAAkB,MAKzE/X,EAAAA,cAAC+G,EAAAA,EAAI,CACHkW,YAAU,EACVC,KACEld,EAAAA,cAAA,OAAKqB,UAAU,eACbrB,EAAAA,cAAC8K,EAAiB,CAChBjG,WAAYA,GACZhB,IAAKoT,GACLlW,SAAU8J,EACVlG,eAAgBA,GAChBC,sBAAuBA,QAM/B5E,EAAAA,cAAC+G,EAAAA,EAAI,CACHkW,YAAU,EACVnZ,MAAOvC,GAAG,eACV2b,KACEld,EAAAA,cAAA,OAAKqB,UAAU,eACbrB,EAAAA,cAACmd,EAAAA,EAAkB,CAACpc,SAAUA,SAKlC8J,GACA7K,EAAAA,cAAA,OAAKqB,UAAW2F,IAAW,CAAE,iBAAkBjG,OACxB,oBAAnBoD,GACoB,qBAAnBA,GAA0D,gBAAjBC,IAC1CpE,EAAAA,cAAC+G,EAAAA,EAAI,CAACkW,YAAU,EAACnZ,MAAOvC,GAAG,QAAS2b,KAAMld,EAAAA,cAACod,EAAAA,EAAwB,QAGrEpd,EAAAA,cAAC+G,EAAAA,EAAI,CACHkW,YAAU,EACVnZ,MAAOvC,GAAG,aACV2b,KACEld,EAAAA,cAAA,OAAKqB,UAAU,eACbrB,EAAAA,cAAC0V,GAAe,OAGpB/Q,eAAgBA,KAGlB3E,EAAAA,cAACqd,GAAAA,EAAuB,CAACC,MAAOpH,IAEZ,kBAAnB/R,GAAsCnE,EAAAA,cAAC4V,GAAY,CAAC7U,SAAUA,KAE/Df,EAAAA,cAAC+G,EAAAA,EAAI,CACHkW,YAAU,EACVnZ,MAAOvC,GAAG,QACV2b,KACEld,EAAAA,cAAA,OAAKqB,UAAU,eACbrB,EAAAA,cAACud,EAAAA,EAAU,CACTC,eAAgBrT,EAAAA,YAChBsT,kBAAgB,EAChBC,YAAU,EACV/c,MAAOY,GAAG,iBACVoc,MAAOpc,GAAG,iBACVqc,YA7VC,EA8VDC,KAAMtc,GACJ,yLAEFX,YAAaW,GAAG,kBAChBuc,SAAU,SAACC,GACT,IAAMC,EAAgB,GACtBD,EAAQhQ,SAAQ,SAACkQ,GACVtH,EAAKuH,MAAK,SAACC,GAAG,OAAKA,EAAI5b,OAAS0b,EAAO1b,IAAI,KAC9Cyb,EAAc3N,KAAK4N,EAEvB,IACA3Z,EAAkB,CAAEqS,KAAM,GAAFlQ,OAAAoN,GAAM8C,GAASqH,IACzC,EACAI,SAAU,SAACC,GACT,IAAMN,EAAUpH,EAAKjP,QAAQ4W,QAAO,SAACH,GAAG,OAAKA,EAAI5b,OAAS8b,EAAW9b,IAAI,IACzE+B,EAAkB,CAAEqS,KAAMoH,GAC5B,EACAQ,WAAY5H,OAMpB3W,EAAAA,cAACwe,EAAAA,EAAwB,CACvBC,cAAY,EACZ1d,SAAUA,GACV2d,sBAA0C,oBAAnBva,GAA2D,qBAAnBA,KAKrEnE,EAAAA,cAAA,eACEA,EAAAA,cAAA,OAAKqB,UAAU,qCACbrB,EAAAA,cAACyB,EAAAA,QAAM,CAACC,OAAO,UAAUC,QA5KyB,WAEhC,OAAAia,GAAAnH,MAAC,KAADxK,UAAA,EA0K+BtJ,MAAOkV,EAAa9U,SAAU4b,KAC/E3c,EAAAA,cAAC6c,EAAAA,EAAe,CAACC,UAAQ,EAAC/b,SAAU4b,GAAkBgC,eAAa,KAErE3e,EAAAA,cAAA,KAAGqB,UAAU,QACToX,IAAiBQ,GAGjBjZ,EAAAA,cAAC4e,EAAAA,EAAW,CACVC,OAAQ,CACNC,wBACE9e,EAAAA,cAACyB,EAAAA,QAAM,CACLC,OAAO,OACP2I,KAAK,2BACL1J,MAAOY,GAAG,+BAAgC,CAAEwd,UAAW5Y,EAAAA,cAG3D6Y,4BACEhf,EAAAA,cAACyB,EAAAA,QAAM,CACLC,OAAO,OACP2I,KAAK,8CACLlD,OAAO,SACPxG,MAAOY,GAAG,4BAIjB,8FApBDvB,EAAAA,cAACif,EAAAA,EAAiB,CAACnb,MAAOA,EAAOwU,YAAaM,QA6B5D,kvCCtgBA,UAAe5W,EAAAA,EAAAA,KA1CA,SAACwI,GACd,IAAM0L,GAAgBgJ,EAAAA,EAAAA,GAAoB1U,GACpCyM,EAAgBf,GAAiBA,EAAciJ,eAAkB,GACjEC,GAAcC,EAAAA,EAAAA,IAA+BpI,EAA/BoI,CAA6C7U,KAAW8U,EAAAA,GAE5E,OAAAC,GAAAA,GAAA,IACKC,EAAAA,EAAAA,IAAwBhV,IAAM,IACjCiV,MAAMC,EAAAA,EAAAA,IAAWlV,GAEjBmV,mBAAmBC,EAAAA,EAAAA,IAAgCpV,EAAOyM,GAC1DmI,YAAAA,EACAnI,aAAAA,EAEAf,cAAAA,EAGA7R,gBAAgBsG,EAAAA,EAAAA,IAAqBH,GACrCxG,UAAUyG,EAAAA,EAAAA,IAAuBD,EAAO,YACxC5D,eAAe6D,EAAAA,EAAAA,IAAuBD,EAAO,iBAC7CgM,gBAAgB/L,EAAAA,EAAAA,IAAuBD,EAAO,kBAC9CqV,kBAAkBC,EAAAA,EAAAA,IAA2BtV,GAC7CqM,OAAOkJ,EAAAA,EAAAA,IAAYvV,GACnBsM,sBAAsBkJ,EAAAA,EAAAA,IAAoBxV,EAAOyV,EAAAA,IACjDlJ,oBAAoBmJ,EAAAA,EAAAA,IAAyB1V,GAC7C2V,WAAWC,EAAAA,EAAAA,IAAgB5V,GAC3B0M,0BAA0BmJ,EAAAA,EAAAA,IAA+B7V,GACzD4M,0BAA0BkJ,EAAAA,EAAAA,IAA+B9V,GACzD8M,yBAAyBiJ,EAAAA,EAAAA,IAA8B/V,GACvDzG,SAAS6G,EAAAA,EAAAA,IAAcJ,IAE3B,IAEgB,SAACgW,GAAQ,MAAM,CAC7Blc,kBAAmB,SAAC9E,GAAK,OAAKghB,GAASjc,EAAAA,EAAAA,IAAoB/E,GAAO,EAClEkX,aAAc,kBAAM8J,GAASC,EAAAA,EAAAA,MAAiB,EAC9CtK,WAAY,SAACtS,GAAG,OAAK2c,GAASE,EAAAA,EAAAA,IAAa7c,GAAK,EAChD6G,QAAS,SAAC1G,EAAU2c,GAAO,OAAKH,GAASI,EAAAA,EAAAA,IAAiB5c,EAAU2c,GAAS,EAC7EpK,qBAAsB,kBAAMiK,GAASK,EAAAA,EAAAA,MAAyB,EAC9DjK,kBAAmB,SAACrU,GAAI,OAAKie,GAASM,EAAAA,EAAAA,IAA+Bve,GAAM,EAC3E4U,oBAAqB,kBAAMqJ,GAASO,EAAAA,EAAAA,MAAwB,EAC7D,GAED,CAAwCC,wrCCpBxC,QAjCA,SAA4B1hB,GAC1B,IAAQ0X,EAA6C1X,EAA7C0X,YAAa1S,EAAgChF,EAAhCgF,kBAAmBvD,EAAazB,EAAbyB,SAC6DkgB,EAAAte,GAAzDue,EAAAA,EAAAA,GAAkB,iCAAiC,GAAM,GAA9FC,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAKxC,OACEjhB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC+G,EAAAA,EAAI,CACH1F,UAAU,oBACV4F,QACEjH,EAAAA,cAACmB,EAAAA,GAAS,CACRV,MAAO0J,EAAAA,aAAegX,EAAiB,WAAa,WACpD5e,KAAK,sBACL3B,YAAaW,EACX,0IAEF/B,MAAOwX,EACPjW,SAAUA,EACVgB,SAAU,SAACvC,GAAK,OACd8E,EAAkB,CAAE0S,aAAc7M,EAAAA,aAAegX,EAAiB3hB,EAAQA,EAAM2H,OAAO3H,OAAQ,EAEjG6hB,kBAAmBlX,EAAAA,aAAiC5I,EAAjB4f,EAAoB,gBAAsB,mBAC7EG,mBArBV,WACEF,GAAmBD,EACrB,EAoBUI,kBAAmBC,EAAAA,OAM/B,ECjCA,SAAexf,EAAAA,EAAAA,KARA,SAACwI,GAAK,MAAM,CACzBwM,aAAavM,EAAAA,EAAAA,IAAuBD,EAAO,eAC5C,IAEe,SAACgW,GAAQ,MAAM,CAC7Blc,kBAAmB,SAAC9E,GAAK,OAAKghB,GAASjc,EAAAA,EAAAA,IAAoB/E,GAAO,EACnE,GAED,CAAwC2d,isCCHxC,SAASsE,EAAqBC,GAC5B,OAAOC,OAAO/b,KAAKgc,MAAMF,EAAKG,UAAY,KAC5C,CAkGA,QAzFiC,SAACviB,GAChC,IAhB4BwiB,EAgBpBC,EAAuEziB,EAAvEyiB,YAAaC,EAA0D1iB,EAA1D0iB,YAAaC,EAA6C3iB,EAA7C2iB,SAAUC,EAAmC5iB,EAAnC4iB,YAAa5d,EAAsBhF,EAAtBgF,kBAEU5B,EAAAC,EAA3B3C,EAAAA,SAAe+hB,GAAY,GAA5DI,EAAYzf,EAAA,GAAE0f,EAAe1f,EAAA,GAE9B2f,EAAuB,WAC3B,OAAO9Z,MAAS+Z,IAAI,IAAK,QAAQA,IAAI,KAAM,WAAWC,QAAQ,QAAQC,QACxE,EAEMC,EAAe,WACnB,IAAMC,GAAsBP,EAC5BC,EAAgBM,GAChBC,EAAwBD,EAAqBL,IAAyB,UACxE,EAEMM,EAA0B,SAACnjB,GAE7B8E,EADY,YAAV9E,EACgB,CAAEwiB,iBAAa9X,GAEf,CAAE8X,YAAaP,EAAqBjiB,IAE1D,EAEMojB,EAIFrhB,EAJc4gB,EAKZ,iJAHA,4IAcN,OARAniB,EAAAA,WAAgB,WACV+hB,GAEFzd,EAAkB,CAAE0d,YAAaP,EAAqBY,MAG1D,GAAG,IAGDriB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKqB,UAAU,eACbrB,EAAAA,cAAA,SAAO6iB,QAAQ,oBAAoBjhB,MAAO,CAAE6F,UAAW,IACpDlG,EAAG,iCAGNvB,EAAAA,cAAA,OAAKqB,UAAW,yEACdrB,EAAAA,cAACmB,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,UACLxB,UAAU,EACVgB,SAAU0gB,EACVjb,SAAU2a,EACVxhB,MAAOY,EAAG,aAGZvB,EAAAA,cAAA,OAAKqB,UAAW,wBACdrB,EAAAA,cAACmB,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,iBACLxB,UAAU,EACVgB,SAAU0gB,EACVjb,QAAS2a,EACTxhB,MAAOY,EAAG,qBAGb4gB,GACCniB,EAAAA,cAAA,OAAKqB,UAAU,gDACbrB,EAAAA,cAAC8iB,EAAAA,EAAc,CACbC,OAAQb,EACR7gB,UAAU,kDACV2hB,kBAAkB,sBAClBjhB,SAAU4gB,EACVnjB,MAAOwiB,GAxFOF,EAwF4BE,EAvFjD,IAAIiB,KAAsB,IAAjBnB,SAuFuD5X,EACzDgZ,OAAQjB,EAAW,gBAAkB,iBACrCkB,cAAY,EACZC,UAAW,KACXC,QAAS9a,MAAS+Z,IAAI,KAAM,WAAWE,aAM/CxiB,EAAAA,cAAA,KAAGqB,UAAW,yBAA0BuhB,IAIhD,EC1FA,SAAe5gB,EAAAA,EAAAA,KAXA,SAACwI,GAAK,MAAM,CACzBuX,aAAauB,EAAAA,EAAAA,IAAkB9Y,GAC/BwX,aAAavX,EAAAA,EAAAA,IAAuBD,EAAO,eAC3CyX,UAAUjC,EAAAA,EAAAA,IAAoBxV,EAAOyV,EAAAA,IACrCiC,aAAaqB,EAAAA,EAAAA,IAAe/Y,GAC7B,IAEe,SAACgW,GAAQ,MAAM,CAC7Blc,kBAAmB,SAAC9E,GAAK,OAAKghB,GAASjc,EAAAA,EAAAA,IAAoB/E,GAAO,EACnE,GAED,CAAwC4d,qEChBxC,MAAAoG,EAAAC,EAAA,qDAEkB,SAACnkB,GACjB,IAAMqB,EAAQrB,EAAMokB,WACdriB,EAAY/B,EAAM+J,gBAAkB,QAE1C,OACEsa,EAAA,QAAAC,cAAA,MAAIviB,UAAWA,GACZV,EAGN,oECXD,MAAA6iB,EAAAC,EAAA,qDAEiB,SAACnkB,GAChB,IAAI4J,EAAgB5J,EAAM4J,cACtB2a,EAAoBvkB,EAAMukB,kBAExBliB,EAAUrC,EAAMqC,QAChB0I,EAAO/K,EAAM+K,KAEfyZ,EAAY,QAAUxkB,EAAMmK,MAC7BnK,EAAMykB,iBAAmB,IAAMzkB,EAAMykB,iBAAmB,IACvDC,EAAc,KAuBlB,OArBI1kB,EAAMoK,WACRsa,EAAc,OACdF,EAAY,QAAUxkB,EAAMmK,KAAO,wBAGjCP,OAD4B,IAAnBA,EACOA,EAAgB,IAAM5J,EAAM2J,gBAE5B3J,EAAM2J,qBAGU,IAAvB4a,OAGiC,IAA/BvkB,EAAM2kB,sBACfJ,EAAoBA,EAAoB,IAAMvkB,EAAM2kB,qBAGtDJ,EAAoBvkB,EAAM2kB,qBAK1BN,EAAA,QAAAC,cAAA,MAAIviB,UAAW6H,GACXya,EAAA,QAAAC,cAAA,KAAGjiB,QAASA,EACTuiB,KAAK,SACL7iB,UAAWwiB,EACXxZ,KAAMA,EACN8Z,SAAS,IACT,aAAYL,EACZ,eAAcE,EACdI,WAAYziB,GACZrC,EAAMmK,MAIlB,mBClDD,SAAA+E,EAAAjD,GAAA,OAAAiD,EAAA,mBAAA9C,QAAA,iBAAAA,OAAAE,SAAA,SAAAL,GAAA,cAAAA,CAAA,WAAAA,GAAA,OAAAA,GAAA,mBAAAG,QAAAH,EAAAwF,cAAArF,QAAAH,IAAAG,OAAAP,UAAA,gBAAAI,CAAA,EAAAiD,EAAAjD,EAAA,2SAEAiY,EAAAC,EAAA,kBACAA,EAAA,YACAA,EAAA,YACAA,EAAA,+DAGqBY,EAAAA,SAAAA,GAwCnB,SAAAA,EAAY/kB,gGAAOR,CAAA,KAAAulB,GAAA,IAAAxlB,gKAAAylB,CAAA,MAAAD,EAAAnT,WAAAhG,OAAAwC,eAAA2W,IAAAplB,KAAA,KACXK,IADW,OAAAT,EAwBnB0lB,mBAAqB,SAAAC,GAAO,IAClB9a,EAAa7K,EAAK2L,MAAlBd,SACR8a,EAAIC,eAAiBD,EAAIC,iBAAoBD,EAAIE,aAAc,EAC3Dhb,EAAW,GACb7K,EAAK8lB,mBAAmBjb,EAAW,EAAG8a,EAEzC,EA9BkB3lB,EAgCnB+lB,eAAiB,SAAAJ,GAAO,IACd9a,EAAa7K,EAAK2L,MAAlBd,SACAb,EAAchK,EAAKS,MAAnBuJ,UAER2b,EAAIC,eAAiBD,EAAIC,iBAAoBD,EAAIE,aAAc,EAC3Dhb,EAAWb,EAAY,GACzBhK,EAAK8lB,mBAAmBjb,EAAW,EAAG8a,EAEzC,EAxCkB3lB,EA0CnB8lB,mBAAqB,SAACjb,EAAU8a,GAC9BA,EAAIC,eAAiBD,EAAIC,iBAAoBD,EAAIE,aAAc,EAE3D7lB,EAAK2L,MAAMd,WAAaA,IAE5B7K,EAAKgmB,SAAS,CAACnb,SAAUA,IAGzB7K,EAAKimB,aAAapb,GACnB,EAnDkB7K,EAgEnBimB,aAAe,SAACC,QAC0B,IAA7BlmB,EAAKS,MAAMiK,cACkB,mBAA7B1K,EAAKS,MAAMiK,cACpB1K,EAAKS,MAAMiK,aAAa,CAACG,SAAUqb,GAEtC,EArEkBlmB,EA8FnBmmB,WAAa,WACX,IAAMC,EAAQ,GADG1kB,EAQb1B,EAAKS,MALPwJ,EAHevI,EAGfuI,mBACAD,EAJetI,EAIfsI,UACAS,EALe/I,EAKf+I,qBACAoa,EANenjB,EAMfmjB,WACAra,EAPe9I,EAOf8I,eAGMK,EAAa7K,EAAK2L,MAAlBd,SAER,GAAIb,GAAaC,EAEf,IAAK,IAAIoc,EAAQ,EAAGA,EAAQrc,EAAWqc,IACrCD,EAAM5U,KAAKxR,EAAKsmB,eAAeD,QAG5B,CAEL,IAAIE,EAAatc,EAAqB,EAClCuc,EAAavc,EAAqBsc,EAMlC1b,EAAWb,EAAYC,EAAqB,EAE9Csc,EAAYtc,GADZuc,EAAYxc,EAAYa,GAGjBA,EAAWZ,EAAqB,IAEvCuc,EAAYvc,GADZsc,EAAY1b,IAId,IAAI4b,OAAA,EACA7b,OAAA,EACA8b,OAAA,EACAC,EAAiB,SAACN,GAAD,OAAWrmB,EAAKsmB,eAAeD,EAA/B,EAErB,IAAKI,EAAQ,EAAGA,EAAQzc,EAAWyc,KAEjC7b,EAAO6b,EAAQ,IAKHhc,GAQRG,EAAOZ,EAAYS,GASlBgc,GAAS5b,EAAW0b,GAAcE,GAAS5b,EAAW2b,EAhBzDJ,EAAM5U,KAAKmV,EAAeF,IAyBxB5B,GAAcuB,EAAMA,EAAM9f,OAAS,KAAOogB,IAC5CA,EACE5B,EAAA,QAAAC,cAAC6B,EAAA,QAAD,CACEplB,IAAKilB,EACL5B,WAAYA,EACZra,eAAgBA,IAGpB4b,EAAM5U,KAAKkV,GAGhB,CAED,OAAON,CACR,EAnLCpmB,EAAK2L,MAAQ,CACXd,SAAUpK,EAAMsK,YAActK,EAAMsK,YAC1BtK,EAAMqK,UAAcrK,EAAMqK,UAC1B,GANK9K,CAQlB,kXAEmB,IAAA6mB,EAC8BllB,KAAKlB,MAA7CsK,EADU8b,EACV9b,YAAa+b,EADHD,EACGC,4BAEO,IAAjB/b,GAAiC+b,GAC1CnlB,KAAKskB,aAAalb,EAErB,mDAEyBgc,QACY,IAAzBA,EAAUjc,WAA8BnJ,KAAKlB,MAAMqK,YAAcic,EAAUjc,WACpFnJ,KAAKqkB,SAAS,CAACnb,SAAUkc,EAAUjc,WAEtC,qCA+BWkc,GAAW,IAAAC,EACctlB,KAAKlB,MAAhCymB,EADaD,EACbC,YAAald,EADAid,EACAjd,UACrB,GAAIkd,GACFF,IAAcrlB,KAAKgK,MAAMd,UACzBmc,GAAa,GACbA,EAAYhd,EAEZ,OAAOkd,EAAYF,EAAY,EAElC,wCAScX,GAAO,IACZxb,EAAalJ,KAAKgK,MAAlBd,SADYsc,EAQhBxlB,KAAKlB,MALP4J,EAHkB8c,EAGlB9c,cACA2a,EAJkBmC,EAIlBnC,kBACA5a,EALkB+c,EAKlB/c,gBACAgb,EANkB+B,EAMlB/B,oBACAF,EAPkBiC,EAOlBjC,iBAGF,OAAOJ,EAAA,QAAAC,cAACqC,EAAA,QAAD,CACL5lB,IAAK6kB,EACLvjB,QAASnB,KAAKmkB,mBAAmBzkB,KAAK,KAAMglB,GAC5Cxb,SAAUA,IAAawb,EACvBhc,cAAeA,EACf2a,kBAAmBA,EACnB5a,gBAAiBA,EACjBgb,oBAAqBA,EACrBF,iBAAkBA,EAClB1Z,KAAM7J,KAAKulB,YAAYb,GACvBzb,KAAMyb,EAAQ,GACjB,kCA4FQ,IAAAgB,EAWH1lB,KAAKlB,MATP6mB,EAFKD,EAELC,kBACAhd,EAHK+c,EAGL/c,kBACAC,EAJK8c,EAIL9c,cACAP,EALKqd,EAKLrd,UACAgB,EANKqc,EAMLrc,mBACAuc,EAPKF,EAOLE,sBACArd,EARKmd,EAQLnd,cACAsd,EATKH,EASLG,kBACArd,EAVKkd,EAULld,UAGMU,EAAalJ,KAAKgK,MAAlBd,SAEF4c,EAAkBnd,GAAkC,IAAbO,EAAA,IAAqByc,EAAsB,IAClFI,EAAcnd,GAAiBM,IAAab,EAAY,EAAzB,IAAiCsd,EAAsB,IAE5F,OACExC,EAAA,QAAAC,cAAA,MAAIviB,UAAWwI,GACb8Z,EAAA,QAAAC,cAAA,MAAIviB,UAAWilB,GACb3C,EAAA,QAAAC,cAAA,KAAGjiB,QAASnB,KAAK+jB,mBACdljB,UAAW+kB,EACX/b,KAAM7J,KAAKulB,YAAYrc,EAAW,GAClCya,SAAS,IACTD,KAAK,SACLE,WAAY5jB,KAAK+jB,oBACjBxb,IAIJvI,KAAKwkB,aAENrB,EAAA,QAAAC,cAAA,MAAIviB,UAAWklB,GACb5C,EAAA,QAAAC,cAAA,KAAGjiB,QAASnB,KAAKokB,eACdvjB,UAAWglB,EACXhc,KAAM7J,KAAKulB,YAAYrc,EAAW,GAClCya,SAAS,IACTD,KAAK,SACLE,WAAY5jB,KAAKokB,gBACjB5b,IAKV,OA7QkBqb,CAA0Bb,EAAAgD,WAA1BnC,EACZoC,UAAY,CACjB5d,UAAwB6d,EAAA,QAAUC,OAAOC,WACzC9d,mBAAwB4d,EAAA,QAAUC,OAAOC,WACzCtd,qBAAwBod,EAAA,QAAUC,OAAOC,WACzC7d,cAAwB2d,EAAA,QAAUG,KAClC7d,UAAwB0d,EAAA,QAAUG,KAClCnD,WAAwBgD,EAAA,QAAUG,KAClCd,YAAwBW,EAAA,QAAUI,KAClCvd,aAAwBmd,EAAA,QAAUI,KAClCld,YAAwB8c,EAAA,QAAUC,OAClChd,UAAwB+c,EAAA,QAAUC,OAClChB,uBAAwBe,EAAA,QAAUK,KAClCld,mBAAwB6c,EAAA,QAAUM,OAClC9d,cAAwBwd,EAAA,QAAUM,OAClCnD,kBAAwB6C,EAAA,QAAUM,OAClC/d,gBAAwByd,EAAA,QAAUM,OAClC/C,oBAAwByC,EAAA,QAAUM,OAClC7d,kBAAwBud,EAAA,QAAUM,OAClC5d,cAAwBsd,EAAA,QAAUM,OAClCZ,sBAAwBM,EAAA,QAAUM,OAClCX,kBAAwBK,EAAA,QAAUM,OAClCb,kBAAwBO,EAAA,QAAUM,OAClC3d,eAAwBqd,EAAA,QAAUM,QAvBjB3C,EA0BZ4C,aAAe,CACpBpe,UAAwB,GACxBC,mBAAwB,EACxBQ,qBAAwB,EACxBL,gBAAwB,WACxBE,kBAAwB,WACxBC,cAAwB,OACxBL,cAAwB,WACxBC,UAAwB,OACxB0a,WAAwB,MACxByC,kBAAwB,WACxBR,wBAAwB,aArCPtB,mBCRrB,MAAA6C,EAAAzD,EAAA,+CAEe0D,EAAA","sources":["webpack://odysee.com/../ui/component/common/file-selector.jsx","webpack://odysee.com/../ui/component/copyableText/index.js","webpack://odysee.com/../ui/component/copyableText/view.jsx","webpack://odysee.com/../ui/component/publish/livestream/publishLivestream/view.jsx","webpack://odysee.com/../ui/component/publish/livestream/publishLivestream/index.js","webpack://odysee.com/../ui/component/publish/livestream/livestreamForm/view.jsx","webpack://odysee.com/../ui/component/publish/livestream/livestreamForm/index.js","webpack://odysee.com/../ui/component/publish/shared/publishDescription/view.jsx","webpack://odysee.com/../ui/component/publish/shared/publishDescription/index.js","webpack://odysee.com/../ui/component/publish/shared/publishStreamReleaseDate/view.jsx","webpack://odysee.com/../ui/component/publish/shared/publishStreamReleaseDate/index.js","webpack://odysee.com/../react_components/BreakView.js","webpack://odysee.com/../react_components/PageView.js","webpack://odysee.com/../react_components/PaginationBoxView.js","webpack://odysee.com/../react_components/index.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { remote } from 'electron';\nimport Button from 'component/button';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  type: string,\n  currentPath?: ?string,\n  onFileChosen: (WebFile) => void,\n  label?: string,\n  placeholder?: string,\n  accept?: string,\n  error?: string,\n  disabled?: boolean,\n  autoFocus?: boolean,\n};\n\nclass FileSelector extends React.PureComponent<Props> {\n  static defaultProps = {\n    autoFocus: false,\n    type: 'file',\n  };\n\n  fileInput: React.ElementRef<any>;\n\n  constructor() {\n    super();\n    this.fileInput = React.createRef();\n    this.handleFileInputSelection = this.handleFileInputSelection.bind(this);\n    this.handleDirectoryInputSelection = this.handleDirectoryInputSelection.bind(this);\n    this.fileInputButton = this.fileInputButton.bind(this);\n  }\n\n  handleFileInputSelection = () => {\n    const { files } = this.fileInput.current;\n    if (!files) {\n      return;\n    }\n\n    const file = files[0];\n\n    if (this.props.onFileChosen) {\n      this.props.onFileChosen(file);\n    }\n    this.fileInput.current.value = null; // clear the file input\n  };\n\n  handleDirectoryInputSelection = () => {\n    remote.dialog.showOpenDialog({ properties: ['openDirectory'] }).then((result) => {\n      const path = result && result.filePaths[0];\n      if (path) {\n        // $FlowFixMe\n        this.props.onFileChosen({ path });\n      }\n    });\n  };\n\n  fileInputButton = () => {\n    this.fileInput.current.click();\n  };\n\n  input: ?HTMLInputElement;\n\n  render() {\n    const { type, currentPath, label, placeholder, accept, error, disabled, autoFocus = false } = this.props;\n    const placeHolder = currentPath || placeholder;\n\n    return (\n      <React.Fragment>\n        <FormField\n          label={label}\n          webkitdirectory=\"true\"\n          className=\"form-field--copyable\"\n          error={error}\n          disabled={disabled}\n          type=\"text\"\n          readOnly=\"readonly\"\n          value={placeHolder || __('Choose a file')}\n          inputButton={\n            <Button\n              autoFocus={autoFocus}\n              button=\"primary\"\n              disabled={disabled}\n              onClick={type === 'openDirectory' ? this.handleDirectoryInputSelection : this.fileInputButton}\n              label={__('Browse')}\n            />\n          }\n        />\n        <input\n          type={'file'}\n          style={{ display: 'none' }}\n          accept={accept}\n          ref={this.fileInput}\n          onChange={() => (type === 'openDirectory' ? () => {} : this.handleFileInputSelection())}\n          webkitdirectory={type === 'openDirectory' ? 'True' : null}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default FileSelector;\n","import { connect } from 'react-redux';\nimport { doToast } from 'redux/actions/notifications';\nimport CopyableText from './view';\n\nexport default connect(null, {\n  doToast,\n})(CopyableText);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport { FormField } from 'component/common/form';\nimport Button from 'component/button';\nimport React, { useRef } from 'react';\n\ntype Props = {\n  copyable: string,\n  onlyCopy: boolean,\n  snackMessage: ?string,\n  doToast: ({ message: string }) => void,\n  label?: string,\n  primaryButton?: boolean,\n  name?: string,\n  onCopy?: (string) => string,\n  enableInputMask?: boolean,\n};\n\nexport default function CopyableText(props: Props) {\n  const {\n    copyable,\n    onlyCopy,\n    doToast,\n    snackMessage,\n    label,\n    primaryButton = false,\n    name,\n    onCopy,\n    enableInputMask,\n  } = props;\n  const [maskInput, setMaskInput] = React.useState(enableInputMask);\n\n  const input = useRef();\n\n  function handleCopyText() {\n    if (enableInputMask || onlyCopy) {\n      navigator.clipboard\n        .writeText(copyable)\n        .then(() => {\n          doToast({ message: snackMessage || __('Text copied') });\n        })\n        .catch(() => {\n          doToast({ message: __('Failed to copy.'), isError: true });\n        });\n    } else {\n      const topRef = input.current;\n      if (topRef && topRef.input && topRef.input.current) {\n        topRef.input.current.select();\n        if (onCopy) {\n          // Allow clients to change the selection before making the copy.\n          onCopy(topRef.input.current);\n        }\n      }\n\n      document.execCommand('copy');\n      doToast({ message: snackMessage || __('Text copied') });\n    }\n  }\n\n  function onFocus() {\n    // We have to go a layer deep since the input is inside the form component\n    const topRef = input.current;\n    if (topRef && topRef.input && topRef.input.current) {\n      topRef.input.current.select();\n    }\n  }\n\n  return (\n    <FormField\n      type={maskInput ? 'password' : 'text'}\n      className=\"form-field--copyable\"\n      readOnly\n      name={name}\n      label={label}\n      value={copyable || ''}\n      ref={input}\n      onFocus={onFocus}\n      inputButton={\n        <Button button={primaryButton ? 'primary' : 'secondary'} icon={ICONS.COPY} onClick={handleCopyText} />\n      }\n      helper={\n        enableInputMask && (\n          <Button button=\"link\" onClick={() => setMaskInput(!maskInput)} label={maskInput ? __('Show') : __('Hide')} />\n        )\n      }\n    />\n  );\n}\n","// @flow\nimport { SITE_NAME, WEB_PUBLISH_SIZE_LIMIT_GB, SIMPLE_SITE } from 'config';\nimport { BITRATE } from 'constants/publish';\nimport * as ICONS from 'constants/icons';\nimport React, { useState, useEffect } from 'react';\nimport Card from 'component/common/card';\nimport { FormField } from 'component/common/form';\nimport Spinner from 'component/spinner';\nimport PublishName from '../../shared/publishName';\nimport CopyableText from 'component/copyableText';\nimport moment from 'moment';\nimport classnames from 'classnames';\nimport ReactPaginate from 'react-paginate';\nimport FileSelector from 'component/common/file-selector';\nimport Button from 'component/button';\nimport Icon from 'component/common/icon';\n\ntype Props = {\n  uri: ?string,\n  disabled: boolean,\n  livestreamData: Array<LivestreamReplayItem>,\n  isCheckingLivestreams: boolean,\n  inEditMode: boolean,\n  // --- redux ---\n  title: ?string,\n  filePath: string | WebFile,\n  fileBitrate: number,\n  fileSizeTooBig: boolean,\n  isStillEditing: boolean,\n  liveCreateType: LiveCreateType,\n  liveEditType: LiveEditType,\n  balance: number,\n  publishing: boolean,\n  duration: number,\n  isVid: boolean,\n  doUpdatePublishForm: (UpdatePublishState) => void,\n  doUpdateFile: (file: WebFile, clearName: boolean) => void,\n  doToast: ({ message: string, isError?: boolean }) => void,\n};\n\nfunction PublishLivestream(props: Props) {\n  const {\n    uri,\n    title,\n    balance,\n    filePath,\n    fileBitrate,\n    fileSizeTooBig,\n    liveCreateType,\n    liveEditType,\n    isStillEditing,\n    doUpdatePublishForm: updatePublishForm,\n    doUpdateFile,\n    duration,\n    isVid,\n    disabled,\n    livestreamData,\n    isCheckingLivestreams,\n    inEditMode,\n  } = props;\n\n  const livestreamDataStr = JSON.stringify(livestreamData);\n  const hasLivestreamData = livestreamData && Boolean(livestreamData.length);\n\n  const [selectedFileIndex, setSelectedFileIndex] = useState(null);\n  const PAGE_SIZE = 4;\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const totalPages =\n    hasLivestreamData && livestreamData.length > PAGE_SIZE ? Math.ceil(livestreamData.length / PAGE_SIZE) : 1;\n\n  const replayTitleLabel = !inEditMode ? __('Select Replay') : __('Use Replay');\n\n  const TV_PUBLISH_SIZE_LIMIT_GB_STR = String(WEB_PUBLISH_SIZE_LIMIT_GB);\n\n  const UPLOAD_SIZE_MESSAGE = __('%SITE_NAME% uploads are limited to %limit% GB.', {\n    SITE_NAME,\n    limit: TV_PUBLISH_SIZE_LIMIT_GB_STR,\n  });\n\n  const showReplaySelector = liveCreateType === 'choose_replay' || liveCreateType === 'edit_placeholder';\n  // assert(inEditMode ? liveCreateType === 'edit_placeholder' : true, liveCreateType);\n\n  const normalizeUrlForProtocol = (url) => {\n    if (url && url.startsWith('https://')) {\n      return url;\n    } else {\n      if (url && url.startsWith('http://')) {\n        return url;\n      } else if (url) {\n        return `https://${url}`;\n      } else return __('Click Check for Replays to update...');\n    }\n  };\n\n  // update remoteUrl when replay selected\n  useEffect(() => {\n    const livestreamData = JSON.parse(livestreamDataStr);\n    if (selectedFileIndex !== null && livestreamData && livestreamData.length) {\n      updatePublishForm({\n        remoteFileUrl: normalizeUrlForProtocol(livestreamData[selectedFileIndex].data.fileLocation),\n      });\n    }\n  }, [selectedFileIndex, updatePublishForm, livestreamDataStr]);\n\n  function handlePaginateReplays(page) {\n    setCurrentPage(page);\n  }\n\n  function handleTitleChange(event) {\n    updatePublishForm({ title: event.target.value });\n  }\n\n  function handleFileChange(file: WebFile, clearName = true) {\n    doUpdateFile(file, clearName);\n  }\n\n  function getUploadMessage() {\n    if (fileSizeTooBig) {\n      return (\n        <p className=\"help--error\">\n          <Icon icon={ICONS.INFO} />\n          {UPLOAD_SIZE_MESSAGE}{' '}\n          <Button button=\"link\" label={__('Upload Guide')} href=\"https://help.odysee.tv/category-uploading/\" />\n        </p>\n      );\n    }\n\n    if (fileBitrate > BITRATE.RECOMMENDED) {\n      return (\n        <p className=\"help--warning\">\n          <Icon icon={ICONS.INFO} />\n          {fileBitrate > BITRATE.MAX\n            ? __(\n                'Your video has a bitrate over ~16 Mbps and cannot be processed at this time. We suggest transcoding to provide viewers the best experience.'\n              )\n            : __(\n                'Your video has a bitrate over 8 Mbps. We suggest transcoding to provide viewers the best experience.'\n              )}{' '}\n          <Button button=\"link\" label={__('Upload Guide')} href=\"https://help.odysee.tv/category-uploading/\" />\n        </p>\n      );\n    }\n\n    if (isVid && !duration) {\n      return (\n        <p className=\"help--warning\">\n          <Icon icon={ICONS.INFO} />\n          {__(\n            'Your video may not be the best format. Use MP4s in H264/AAC format and a friendly bitrate (under 8 Mbps) for more reliable streaming.'\n          )}{' '}\n          <Button button=\"link\" label={__('Upload Guide')} href=\"https://help.odysee.tv/category-uploading/\" />\n        </p>\n      );\n    }\n\n    if (!isStillEditing) {\n      return (\n        <p className=\"help\">\n          <Icon icon={ICONS.INFO} />\n          {__(\n            'For video content, use MP4s in H264/AAC format and a friendly bitrate (under 8 Mbps) for more reliable streaming. %SITE_NAME% uploads are restricted to %limit% GB.',\n            { SITE_NAME, limit: TV_PUBLISH_SIZE_LIMIT_GB_STR }\n          )}{' '}\n          <Button button=\"link\" label={__('Upload Guide')} href=\"https://help.odysee.tv/category-uploading/\" />\n        </p>\n      );\n    }\n  }\n\n  React.useEffect(() => {\n    if (liveEditType !== 'use_replay') {\n      setSelectedFileIndex(null);\n    }\n  }, [liveEditType, updatePublishForm]);\n\n  return (\n    <Card\n      className={classnames({\n        'card--disabled': disabled || balance === 0,\n      })}\n      actions={\n        <div className=\"publish-row--no-margin\">\n          <React.Fragment>\n            {/* Decide whether to show file upload or replay selector */}\n            {}\n            <FormField\n              type=\"text\"\n              name=\"content_title\"\n              label={__('Title')}\n              placeholder={__('Descriptive titles work best')}\n              disabled={disabled}\n              value={title}\n              onChange={handleTitleChange}\n              className=\"fieldset-group\"\n              max=\"200\"\n              autoFocus\n              autoComplete=\"off\"\n            />\n            <PublishName uri={uri} />\n            <>\n              {inEditMode && (\n                <fieldset-group>\n                  <fieldset-section>\n                    <label style={{ marginBottom: 'var(--spacing-s)' }}>\n                      {inEditMode && (\n                        <FormField\n                          name=\"reuse-replay\"\n                          label={__('Update only')}\n                          key=\"reuse-replay\"\n                          type=\"radio\"\n                          checked={liveEditType === 'update_only'}\n                          onClick={() => updatePublishForm({ liveEditType: 'update_only' })}\n                        />\n                      )}\n                    </label>\n                  </fieldset-section>\n                </fieldset-group>\n              )}\n              {showReplaySelector && hasLivestreamData && !isCheckingLivestreams && (\n                <>\n                  <label style={{ marginTop: 0 }}>\n                    {inEditMode && (\n                      <FormField\n                        name=\"show-replays\"\n                        label={replayTitleLabel}\n                        key=\"show-replays\"\n                        type=\"radio\"\n                        checked={liveEditType === 'use_replay'}\n                        onClick={() => updatePublishForm({ liveEditType: 'use_replay' })}\n                      />\n                    )}\n                  </label>\n                  <div\n                    className={classnames('replay-picker__container', {\n                      disabled: inEditMode && liveEditType !== 'use_replay',\n                    })}\n                  >\n                    <fieldset-section>\n                      <div className=\"table__wrapper\">\n                        <table className=\"table table--livestream-data\">\n                          <tbody>\n                            {livestreamData\n                              .slice((currentPage - 1) * PAGE_SIZE, currentPage * PAGE_SIZE)\n                              .map((item, i) => {\n                                const useStr = item.data.fileDuration && isNaN(item.data.fileDuration);\n                                // $FlowIgnore (confirmed a number)\n                                const durationMinutes = !useStr ? Math.floor(item.data.fileDuration / 60) : null;\n                                const durationElem = useStr\n                                  ? item.data.fileDuration\n                                  : durationMinutes === 1\n                                  ? __('%duration% minute', { duration: durationMinutes })\n                                  : __('%duration% minutes', { duration: durationMinutes });\n\n                                return (\n                                  <React.Fragment key={item.data.fileLocation}>\n                                    <tr className=\"livestream-data__row-spacer\" />\n                                    <tr\n                                      onClick={() => setSelectedFileIndex((currentPage - 1) * PAGE_SIZE + i)}\n                                      className={classnames('livestream-data__row', {\n                                        'livestream-data__row--selected':\n                                          selectedFileIndex === (currentPage - 1) * PAGE_SIZE + i,\n                                      })}\n                                    >\n                                      <td>\n                                        <FormField\n                                          type=\"radio\"\n                                          checked={selectedFileIndex === (currentPage - 1) * PAGE_SIZE + i}\n                                          label={null}\n                                          onChange={() => {}}\n                                          onClick={() => setSelectedFileIndex((currentPage - 1) * PAGE_SIZE + i)}\n                                          className=\"livestream-data__row-radio\"\n                                        />\n                                      </td>\n                                      <td>\n                                        <div className=\"livestream-data__thumb-container\">\n                                          {item.data.thumbnails.slice(0, 3).map((thumb) => (\n                                            <img key={thumb} className=\"livestream___thumb\" src={thumb} />\n                                          ))}\n                                        </div>\n                                      </td>\n                                      <td>\n                                        {durationElem}\n                                        <div className=\"table__item-label\">\n                                          {`${moment(item.data.uploadedAt).from(moment())}`}\n                                        </div>\n                                      </td>\n                                      <td>\n                                        <CopyableText\n                                          primaryButton\n                                          copyable={normalizeUrlForProtocol(item.data.fileLocation)}\n                                          snackMessage={__('Url copied.')}\n                                        />\n                                      </td>\n                                    </tr>\n                                  </React.Fragment>\n                                );\n                              })}\n                          </tbody>\n                        </table>\n                      </div>\n                    </fieldset-section>\n                    {totalPages > 1 && (\n                      <fieldset-group class=\"fieldset-group--smushed fieldgroup--paginate\">\n                        <fieldset-section>\n                          <ReactPaginate\n                            pageCount={totalPages}\n                            pageRangeDisplayed={2}\n                            previousLabel=\"‹\"\n                            nextLabel=\"›\"\n                            activeClassName=\"pagination__item--selected\"\n                            pageClassName=\"pagination__item\"\n                            previousClassName=\"pagination__item pagination__item--previous\"\n                            nextClassName=\"pagination__item pagination__item--next\"\n                            breakClassName=\"pagination__item pagination__item--break\"\n                            marginPagesDisplayed={2}\n                            onPageChange={(e) => handlePaginateReplays(e.selected + 1)}\n                            forcePage={currentPage - 1}\n                            initialPage={currentPage - 1}\n                            containerClassName=\"pagination\"\n                          />\n                        </fieldset-section>\n                      </fieldset-group>\n                    )}\n                  </div>\n                </>\n              )}\n              {showReplaySelector && !hasLivestreamData && !isCheckingLivestreams && (\n                <>\n                  <label className=\"disabled\" style={{ marginTop: 0 }}>\n                    {inEditMode && (\n                      <FormField\n                        name=\"show-replays\"\n                        label={replayTitleLabel}\n                        key=\"show-replays\"\n                        type=\"radio\"\n                        checked={liveEditType === 'use_replay'}\n                        onClick={() => updatePublishForm({ liveEditType: 'use_replay' })}\n                      />\n                    )}\n                  </label>\n                  <div className=\"empty disabled\" style={{ marginLeft: 'var(--spacing-m)' }}>\n                    {__('No replays found.')}\n                  </div>\n                </>\n              )}\n              {showReplaySelector && isCheckingLivestreams && (\n                <>\n                  <label className=\"disabled\" style={{ marginTop: 0 }}>\n                    {inEditMode && (\n                      <FormField\n                        name=\"replay-source\"\n                        label={replayTitleLabel}\n                        value=\"choose\"\n                        key=\"show-replays-spin\"\n                        type=\"radio\"\n                        checked={liveEditType === 'use_replay'}\n                        onClick={() => updatePublishForm({ liveEditType: 'use_replay' })}\n                      />\n                    )}\n                  </label>\n                  <div className=\"main empty--centered-tight\">\n                    <Spinner small />\n                  </div>\n                </>\n              )}\n\n              {inEditMode && (\n                <div className=\"file-upload\">\n                  <label style={{ marginTop: 0 }}>\n                    <FormField\n                      name=\"replay-source\"\n                      label={__('Upload Replay')}\n                      type=\"radio\"\n                      checked={liveEditType === 'upload_replay'}\n                      onClick={() => updatePublishForm({ liveEditType: 'upload_replay' })}\n                    />\n                  </label>\n                  <FileSelector\n                    disabled={liveEditType !== 'upload_replay'}\n                    currentPath={typeof filePath === 'string' ? filePath : filePath?.name}\n                    onFileChosen={handleFileChange}\n                    accept={SIMPLE_SITE ? 'video/mp4,video/x-m4v,video/*' : undefined}\n                    placeholder={__('Select video replay file to upload')}\n                  />\n                  {getUploadMessage()}\n                </div>\n              )}\n            </>\n            {}\n          </React.Fragment>\n        </div>\n      }\n    />\n  );\n}\n\nexport default PublishLivestream;\n","import { connect } from 'react-redux';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport { selectIsStillEditing, selectPublishFormValue } from 'redux/selectors/publish';\nimport { doUpdateFile, doUpdatePublishForm } from 'redux/actions/publish';\nimport PublishLivestream from './view';\n\nconst select = (state) => ({\n  title: selectPublishFormValue(state, 'title'),\n  filePath: selectPublishFormValue(state, 'filePath'),\n  fileBitrate: state.publish.fileBitrate,\n  fileSizeTooBig: state.publish.fileSizeTooBig,\n  liveCreateType: state.publish.liveCreateType,\n  liveEditType: state.publish.liveEditType,\n  isStillEditing: selectIsStillEditing(state),\n  balance: selectBalance(state),\n  publishing: selectPublishFormValue(state, 'publishing'),\n  duration: selectPublishFormValue(state, 'fileDur'),\n  isVid: selectPublishFormValue(state, 'fileVid'),\n});\n\nconst perform = {\n  doUpdatePublishForm,\n  doUpdateFile,\n};\n\nexport default connect(select, perform)(PublishLivestream);\n","// @flow\nimport type { DoPublishDesktop } from 'redux/actions/publish';\n\n/*\n  On submit, this component calls publish, which dispatches doPublishDesktop.\n  doPublishDesktop calls lbry-redux Lbry publish method using lbry-redux publish state as params.\n  Publish simply instructs the SDK to find the file path on disk and publish it with the provided metadata.\n  On web, the Lbry publish method call is overridden in platform/web/api-setup, using a function in platform/web/publish.\n  File upload is carried out in the background by that function.\n */\n\nimport { SITE_NAME, SIMPLE_SITE } from 'config';\nimport * as ICONS from 'constants/icons';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport Lbry from 'lbry';\nimport { buildURI, isURIValid, isNameValid } from 'util/lbryURI';\nimport * as THUMBNAIL_STATUSES from 'constants/thumbnail_upload_statuses';\nimport { BITRATE } from 'constants/publish';\nimport Button from 'component/button';\nimport ChannelSelector from 'component/channelSelector';\nimport classnames from 'classnames';\nimport TagsSelect from 'component/tagsSelect';\nimport PublishDescription from 'component/publish/shared/publishDescription';\nimport PublishAdditionalOptions from 'component/publish/shared/publishAdditionalOptions';\nimport PublishFormErrors from 'component/publish/shared/publishFormErrors';\nimport PublishStreamReleaseDate from 'component/publish/shared/publishStreamReleaseDate';\nimport PublishLivestream from 'component/publish/livestream/publishLivestream';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\nimport Spinner from 'component/spinner';\nimport { toHex } from 'util/hex';\nimport { lazyImport } from 'util/lazyImport';\nimport { NEW_LIVESTREAM_REPLAY_API } from 'constants/livestream';\nimport { useIsMobile } from 'effects/use-screensize';\nimport Tooltip from 'component/common/tooltip';\nimport PublishProtectedContent from 'component/publishProtectedContent';\n\nconst SelectThumbnail = lazyImport(() => import('component/selectThumbnail' /* webpackChunkName: \"selectThumbnail\" */));\nconst PublishPrice = lazyImport(() =>\n  import('component/publish/shared/publishPrice' /* webpackChunkName: \"publish\" */)\n);\n\ntype Props = {\n  liveCreateType: LiveCreateType,\n  liveEditType: LiveEditType,\n  tags: Array<Tag>,\n  publish: DoPublishDesktop,\n  filePath: string | WebFile,\n  fileText: string,\n  fileBitrate: number,\n  bid: ?number,\n  bidError: ?string,\n  editingURI: ?string,\n  title: ?string,\n  thumbnail: ?string,\n  thumbnailError: ?boolean,\n  uploadThumbnailStatus: ?string,\n  releaseTimeError: ?string,\n  thumbnailPath: ?string,\n  description: ?string,\n  language: string,\n  nsfw: boolean,\n  fee: {\n    amount: string,\n    currency: string,\n  },\n  name: ?string,\n  nameError: ?string,\n  winningBidForClaimUri: number,\n  myClaimForUri: ?StreamClaim,\n  licenseType: string,\n  otherLicenseDescription: ?string,\n  licenseUrl: ?string,\n  // useLBRYUploader: ?boolean,\n  publishing: boolean,\n  publishSuccess: boolean,\n  publishError?: boolean,\n  balance: number,\n  isStillEditing: boolean,\n  claimToEdit: ?Claim,\n  clearPublish: () => void,\n  resolveUri: (string) => void,\n  resetThumbnailStatus: () => void,\n  // Add back type\n  updatePublishForm: (UpdatePublishState) => void,\n  checkAvailability: (string) => void,\n  modal: { id: string, modalProps: {} },\n  enablePublishPreview: boolean,\n  activeChannelClaim: ?ChannelClaim,\n  user: ?User,\n  isLivestreamClaim: boolean,\n  isPostClaim: boolean,\n  permanentUrl: ?string,\n  isClaimingInitialRewards: boolean,\n  claimInitialRewards: () => void,\n  hasClaimedInitialRewards: boolean,\n  setClearStatus: (boolean) => void,\n  // disabled?: boolean,\n  remoteFileUrl?: string,\n  memberRestrictionStatus: MemberRestrictionStatus,\n};\n\nfunction LivestreamForm(props: Props) {\n  // Detect upload type from query in URL\n  const {\n    liveCreateType,\n    liveEditType,\n    thumbnail,\n    thumbnailError,\n    releaseTimeError,\n    name,\n    editingURI,\n    myClaimForUri,\n    resolveUri,\n    title,\n    bid,\n    bidError,\n    uploadThumbnailStatus,\n    resetThumbnailStatus,\n    updatePublishForm,\n    filePath,\n    fileBitrate,\n    publishing,\n    publishSuccess,\n    publishError,\n    clearPublish,\n    isStillEditing,\n    tags,\n    publish,\n    checkAvailability,\n    modal,\n    enablePublishPreview,\n    activeChannelClaim,\n    description,\n    // user,\n    balance,\n    permanentUrl,\n    isClaimingInitialRewards,\n    claimInitialRewards,\n    hasClaimedInitialRewards,\n    setClearStatus,\n    remoteFileUrl,\n    memberRestrictionStatus,\n  } = props;\n\n  const {\n    location: { search },\n  } = useHistory();\n  const urlParams = new URLSearchParams(search);\n  const createTypeShortcut = urlParams.get('s');\n\n  const isMobile = useIsMobile();\n\n  const inEditMode = Boolean(editingURI);\n  const activeChannelName = activeChannelClaim && activeChannelClaim.name;\n  const activeChannelId = activeChannelClaim && activeChannelClaim.claim_id;\n\n  const [isCheckingLivestreams, setCheckingLivestreams] = React.useState(false);\n\n  // Used to check if the url name has changed:\n  // A new file needs to be provided\n  const [prevName, setPrevName] = React.useState(false);\n\n  const [waitForFile] = useState(false);\n\n  const [livestreamData, setLivestreamData] = React.useState([]);\n  const hasLivestreamData = livestreamData && Boolean(livestreamData.length);\n\n  const TAGS_LIMIT = 5;\n  const formDisabled = publishing;\n\n  // const nameEdited = isStillEditing && name !== prevName;\n  const thumbnailUploaded = uploadThumbnailStatus === THUMBNAIL_STATUSES.COMPLETE && thumbnail;\n\n  const waitingForFile = waitForFile && !remoteFileUrl && !filePath;\n  // If they are editing, they don't need a new file chosen\n  const formValidLessFile =\n    (!memberRestrictionStatus.isApplicable || memberRestrictionStatus.isSelectionValid) &&\n    name &&\n    isNameValid(name) &&\n    title &&\n    fileBitrate < BITRATE.MAX &&\n    bid &&\n    thumbnail &&\n    !bidError &&\n    !(thumbnailError && !thumbnailUploaded) &&\n    !releaseTimeError &&\n    !(uploadThumbnailStatus === THUMBNAIL_STATUSES.IN_PROGRESS);\n\n  const isOverwritingExistingClaim = !editingURI && myClaimForUri;\n\n  const formValid = isOverwritingExistingClaim\n    ? false\n    : editingURI && !filePath // if we're editing we don't need a file\n    ? isStillEditing && formValidLessFile && !waitingForFile\n    : formValidLessFile;\n\n  const [previewing, setPreviewing] = React.useState(false);\n\n  const requiresReplayUrl =\n    liveCreateType === 'choose_replay' || (liveCreateType === 'edit_placeholder' && liveEditType === 'use_replay');\n  const requiresFile = liveCreateType === 'edit_placeholder' && liveEditType === 'upload_replay';\n\n  const disabled = !title || !name || (requiresReplayUrl && !remoteFileUrl) || (requiresFile && !filePath);\n  const isClear = !title && !name && !description && !thumbnail;\n\n  useEffect(() => {\n    setClearStatus(isClear);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [isClear]);\n\n  useEffect(() => {\n    if (activeChannelName && activeChannelId) {\n      fetchLivestreams(activeChannelId, activeChannelName);\n    }\n  }, [activeChannelName, activeChannelId]);\n\n  useEffect(() => {\n    if (!hasClaimedInitialRewards) {\n      claimInitialRewards();\n    }\n  }, [hasClaimedInitialRewards, claimInitialRewards]);\n\n  useEffect(() => {\n    if (!modal) {\n      const timer = setTimeout(() => {\n        setPreviewing(false);\n      }, 250);\n\n      return () => clearTimeout(timer);\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    if (publishError) {\n      setPreviewing(false);\n      updatePublishForm({ publishError: undefined });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [publishError]);\n\n  // move this to lbryinc OR to a file under ui, and/or provide a standardized livestreaming config.\n  async function fetchLivestreams(channelId, channelName) {\n    setCheckingLivestreams(true);\n    let signedMessage;\n    try {\n      await Lbry.channel_sign({\n        channel_id: channelId,\n        hexdata: toHex(channelName || ''),\n      }).then((data) => {\n        signedMessage = data;\n      });\n    } catch (e) {\n      throw e;\n    }\n    if (signedMessage) {\n      const encodedChannelName = encodeURIComponent(channelName || '');\n      const newEndpointUrl =\n        `${NEW_LIVESTREAM_REPLAY_API}?channel_claim_id=${String(channelId)}` +\n        `&signature=${signedMessage.signature}&signature_ts=${signedMessage.signing_ts}&channel_name=${\n          encodedChannelName || ''\n        }`;\n\n      const responseFromNewApi = await fetch(newEndpointUrl);\n\n      const data: Array<ReplayListResponse> = (await responseFromNewApi.json()).data;\n      const newData: Array<LivestreamReplayItem> = [];\n\n      if (data && data.length > 0) {\n        for (const dataItem of data) {\n          if (dataItem.Status.toLowerCase() === 'inprogress' || dataItem.Status.toLowerCase() === 'ready') {\n            const objectToPush = {\n              data: {\n                fileLocation: dataItem.URL,\n                fileDuration:\n                  dataItem.Status.toLowerCase() === 'inprogress'\n                    ? __('Processing...(') + dataItem.PercentComplete + '%)'\n                    : (dataItem.Duration / 1000000000).toString(),\n                percentComplete: dataItem.PercentComplete,\n                thumbnails: dataItem.ThumbnailURLs !== null ? dataItem.ThumbnailURLs : [],\n                uploadedAt: dataItem.Created,\n              },\n            };\n            newData.push(objectToPush);\n          }\n        }\n      }\n\n      setLivestreamData(newData);\n      setCheckingLivestreams(false);\n    }\n  }\n\n  let submitLabel;\n\n  if (isClaimingInitialRewards) {\n    submitLabel = __('Claiming credits...');\n  } else if (publishing) {\n    if (isStillEditing || inEditMode) {\n      submitLabel = __('Saving...');\n    } else {\n      submitLabel = __('Creating...');\n    }\n  } else if (previewing) {\n    submitLabel = <Spinner type=\"small\" />;\n  } else {\n    if (isStillEditing || inEditMode) {\n      submitLabel = __('Save');\n    } else {\n      submitLabel = __('Create');\n    }\n  }\n\n  // if you enter the page and it is stuck in publishing, \"stop it.\"\n  useEffect(() => {\n    if (publishing || publishSuccess) {\n      clearPublish();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clearPublish]);\n\n  useEffect(() => {\n    if (!thumbnail) {\n      resetThumbnailStatus();\n    }\n  }, [thumbnail, resetThumbnailStatus]);\n\n  // Save previous name of the editing claim\n  useEffect(() => {\n    if (isStillEditing && (!prevName || !prevName.trim() === '')) {\n      if (name !== prevName) {\n        setPrevName(name);\n      }\n    }\n  }, [name, prevName, setPrevName, isStillEditing]);\n\n  // Every time the channel or name changes, resolve the uris to find winning bid amounts\n  useEffect(() => {\n    // We are only going to store the full uri, but we need to resolve the uri with and without the channel name\n    let uri;\n    try {\n      uri = name && buildURI({ streamName: name, activeChannelName }, true);\n    } catch (e) {}\n\n    if (activeChannelName && name) {\n      // resolve without the channel name so we know the winning bid for it\n      try {\n        const uriLessChannel = buildURI({ streamName: name }, true);\n        resolveUri(uriLessChannel);\n      } catch (e) {}\n    }\n\n    const isValid = uri && isURIValid(uri);\n    if (uri && isValid && checkAvailability && name) {\n      resolveUri(uri);\n      checkAvailability(name);\n      updatePublishForm({ uri });\n    }\n  }, [name, activeChannelName, resolveUri, updatePublishForm, checkAvailability]);\n\n  // because publish editingUri is channel_short/claim_long and we don't have that, resolve it.\n  useEffect(() => {\n    if (editingURI) {\n      resolveUri(editingURI);\n    }\n  }, [editingURI, resolveUri]);\n\n  useEffect(() => {\n    if (createTypeShortcut === 'Replay') {\n      updatePublishForm({ liveCreateType: 'choose_replay' });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- on mount only\n  }, []);\n\n  useEffect(() => {\n    updatePublishForm({\n      channel: activeChannelName || undefined,\n      channelId: activeChannelId || undefined,\n    });\n  }, [activeChannelName, activeChannelId, updatePublishForm]);\n\n  async function handlePublish() {\n    let outputFile = filePath;\n\n    if (enablePublishPreview) {\n      setPreviewing(true);\n      publish(outputFile, true);\n    } else {\n      publish(outputFile, false);\n    }\n  }\n\n  if (publishing) {\n    return (\n      <div className=\"main--empty\">\n        <h1 className=\"section__subtitle\">{__('Publishing...')}</h1>\n        <Spinner delayed />\n      </div>\n    );\n  }\n\n  const isFormIncomplete =\n    isClaimingInitialRewards ||\n    formDisabled ||\n    !formValid ||\n    uploadThumbnailStatus === THUMBNAIL_STATUSES.IN_PROGRESS ||\n    (requiresReplayUrl && !remoteFileUrl) ||\n    (requiresFile && !filePath) ||\n    previewing;\n\n  // Editing claim uri\n  return (\n    <div className={balance < 0.01 ? 'disabled' : ''}>\n      <div className=\"card-stack\">\n        <Card className=\"publish-livestream-header\">\n          <Button\n            key={'New'}\n            icon={ICONS.LIVESTREAM_MONOCHROME}\n            iconSize={18}\n            label={__('New Livestream')}\n            button=\"alt\"\n            onClick={() => updatePublishForm({ liveCreateType: 'new_placeholder' })}\n            disabled={editingURI}\n            className={classnames('button-toggle', { 'button-toggle--active': liveCreateType === 'new_placeholder' })}\n          />\n          {liveCreateType !== 'edit_placeholder' && (\n            <Button\n              key={'Replay'}\n              icon={ICONS.MENU}\n              iconSize={18}\n              label={__('Choose Replay')}\n              button=\"alt\"\n              onClick={() => updatePublishForm({ liveCreateType: 'choose_replay' })}\n              disabled={!hasLivestreamData}\n              className={classnames('button-toggle', { 'button-toggle--active': liveCreateType === 'choose_replay' })}\n            />\n          )}\n          {liveCreateType === 'edit_placeholder' && (\n            <Button\n              key={'Edit'}\n              icon={ICONS.EDIT}\n              iconSize={18}\n              label={__('Edit / Update')}\n              button=\"alt\"\n              className=\"button-toggle button-toggle--active\"\n            />\n          )}\n          {!isMobile && <ChannelSelector hideAnon isTabHeader />}\n          <Tooltip title={__('Check for Replays')}>\n            <Button\n              button=\"secondary\"\n              label={__('Check for Replays')}\n              disabled={isCheckingLivestreams}\n              icon={ICONS.REFRESH}\n              onClick={() => fetchLivestreams(activeChannelId, activeChannelName)}\n            />\n          </Tooltip>\n        </Card>\n\n        <Card\n          background\n          body={\n            <div className=\"publish-row\">\n              <PublishLivestream\n                inEditMode={inEditMode}\n                uri={permanentUrl}\n                disabled={publishing}\n                livestreamData={livestreamData}\n                isCheckingLivestreams={isCheckingLivestreams}\n              />\n            </div>\n          }\n        />\n\n        <Card\n          background\n          title={__('Description')}\n          body={\n            <div className=\"publish-row\">\n              <PublishDescription disabled={disabled} />\n            </div>\n          }\n        />\n\n        {!publishing && (\n          <div className={classnames({ 'card--disabled': disabled })}>\n            {(liveCreateType === 'new_placeholder' ||\n              (liveCreateType === 'edit_placeholder' && liveEditType === 'update_only')) && (\n              <Card background title={__('Date')} body={<PublishStreamReleaseDate />} />\n            )}\n\n            <Card\n              background\n              title={__('Thumbnail')}\n              body={\n                <div className=\"publish-row\">\n                  <SelectThumbnail />\n                </div>\n              }\n              livestreamData={livestreamData}\n            />\n\n            <PublishProtectedContent claim={myClaimForUri} />\n\n            {liveCreateType === 'choose_replay' && <PublishPrice disabled={disabled} />}\n\n            <Card\n              background\n              title={__('Tags')}\n              body={\n                <div className=\"publish-row\">\n                  <TagsSelect\n                    suggestMature={!SIMPLE_SITE}\n                    disableAutoFocus\n                    hideHeader\n                    label={__('Selected Tags')}\n                    empty={__('No tags added')}\n                    limitSelect={TAGS_LIMIT}\n                    help={__(\n                      \"Add tags that are relevant to your content so those who're looking for it can find it more easily. If your content is best suited for mature audiences, ensure it is tagged 'mature'.\"\n                    )}\n                    placeholder={__('gaming, crypto')}\n                    onSelect={(newTags) => {\n                      const validatedTags = [];\n                      newTags.forEach((newTag) => {\n                        if (!tags.some((tag) => tag.name === newTag.name)) {\n                          validatedTags.push(newTag);\n                        }\n                      });\n                      updatePublishForm({ tags: [...tags, ...validatedTags] });\n                    }}\n                    onRemove={(clickedTag) => {\n                      const newTags = tags.slice().filter((tag) => tag.name !== clickedTag.name);\n                      updatePublishForm({ tags: newTags });\n                    }}\n                    tagsChosen={tags}\n                  />\n                </div>\n              }\n            />\n\n            <PublishAdditionalOptions\n              isLivestream\n              disabled={disabled}\n              showSchedulingOptions={liveCreateType === 'new_placeholder' || liveCreateType === 'edit_placeholder'}\n              // ^--- the name is wrong. should be \"hide\" instead\n            />\n          </div>\n        )}\n        <section>\n          <div className=\"section__actions publish__actions\">\n            <Button button=\"primary\" onClick={handlePublish} label={submitLabel} disabled={isFormIncomplete} />\n            <ChannelSelector hideAnon disabled={isFormIncomplete} isPublishMenu />\n          </div>\n          <p className=\"help\">\n            {!formDisabled && !formValid ? (\n              <PublishFormErrors title={title} waitForFile={waitingForFile} />\n            ) : (\n              <I18nMessage\n                tokens={{\n                  odysee_terms_of_service: (\n                    <Button\n                      button=\"link\"\n                      href=\"https://odysee.com/$/tos\"\n                      label={__('%site_name% Terms of Service', { site_name: SITE_NAME })}\n                    />\n                  ),\n                  odysee_community_guidelines: (\n                    <Button\n                      button=\"link\"\n                      href=\"https://help.odysee.tv/communityguidelines/\"\n                      target=\"_blank\"\n                      label={__('Community Guidelines')}\n                    />\n                  ),\n                }}\n              >\n                By continuing, you accept the %odysee_terms_of_service% and %odysee_community_guidelines%.\n              </I18nMessage>\n            )}\n          </p>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default LivestreamForm;\n","import { connect } from 'react-redux';\nimport { doResetThumbnailStatus, doClearPublish, doUpdatePublishForm, doPublishDesktop } from 'redux/actions/publish';\nimport { doResolveUri, doCheckPublishNameAvailability } from 'redux/actions/claims';\nimport {\n  selectPublishFormValues,\n  selectIsStillEditing,\n  selectMemberRestrictionStatus,\n  selectPublishFormValue,\n  selectMyClaimForUri,\n} from 'redux/selectors/publish';\nimport { selectIsStreamPlaceholderForUri } from 'redux/selectors/claims';\nimport * as RENDER_MODES from 'constants/file_render_modes';\nimport * as SETTINGS from 'constants/settings';\nimport { doClaimInitialRewards } from 'redux/actions/rewards';\nimport {\n  selectUnclaimedRewardValue,\n  selectIsClaimingInitialRewards,\n  selectHasClaimedInitialRewards,\n} from 'redux/selectors/rewards';\nimport { selectModal, selectActiveChannelClaim, selectIncognito } from 'redux/selectors/app';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport { makeSelectFileRenderModeForUri } from 'redux/selectors/content';\nimport { selectUser } from 'redux/selectors/user';\nimport { selectBalance } from 'redux/selectors/wallet';\nimport LivestreamForm from './view';\n\nconst select = (state) => {\n  const myClaimForUri = selectMyClaimForUri(state);\n  const permanentUrl = (myClaimForUri && myClaimForUri.permanent_url) || '';\n  const isPostClaim = makeSelectFileRenderModeForUri(permanentUrl)(state) === RENDER_MODES.MARKDOWN;\n\n  return {\n    ...selectPublishFormValues(state),\n    user: selectUser(state),\n    // The winning claim for a short lbry uri\n    isLivestreamClaim: selectIsStreamPlaceholderForUri(state, permanentUrl),\n    isPostClaim,\n    permanentUrl,\n    // My previously published claims under this short lbry uri\n    myClaimForUri,\n    // If I clicked the \"edit\" button, have I changed the uri?\n    // Need this to make it easier to find the source on previously published content\n    isStillEditing: selectIsStillEditing(state),\n    filePath: selectPublishFormValue(state, 'filePath'),\n    remoteFileUrl: selectPublishFormValue(state, 'remoteFileUrl'),\n    publishSuccess: selectPublishFormValue(state, 'publishSuccess'),\n    totalRewardValue: selectUnclaimedRewardValue(state),\n    modal: selectModal(state),\n    enablePublishPreview: selectClientSetting(state, SETTINGS.ENABLE_PUBLISH_PREVIEW),\n    activeChannelClaim: selectActiveChannelClaim(state),\n    incognito: selectIncognito(state),\n    isClaimingInitialRewards: selectIsClaimingInitialRewards(state),\n    hasClaimedInitialRewards: selectHasClaimedInitialRewards(state),\n    memberRestrictionStatus: selectMemberRestrictionStatus(state),\n    balance: selectBalance(state),\n  };\n};\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n  clearPublish: () => dispatch(doClearPublish()),\n  resolveUri: (uri) => dispatch(doResolveUri(uri)),\n  publish: (filePath, preview) => dispatch(doPublishDesktop(filePath, preview)),\n  resetThumbnailStatus: () => dispatch(doResetThumbnailStatus()),\n  checkAvailability: (name) => dispatch(doCheckPublishNameAvailability(name)),\n  claimInitialRewards: () => dispatch(doClaimInitialRewards()),\n});\n\nexport default connect(select, perform)(LivestreamForm);\n","// @flow\nimport { SIMPLE_SITE } from 'config';\nimport { FF_MAX_CHARS_IN_DESCRIPTION } from 'constants/form-field';\nimport React from 'react';\nimport { FormField } from 'component/common/form';\nimport usePersistedState from 'effects/use-persisted-state';\nimport Card from 'component/common/card';\n\ntype Props = {\n  disabled: boolean,\n  // --- redux ---\n  description: ?string,\n  updatePublishForm: (UpdatePublishState) => void,\n};\n\nfunction PublishDescription(props: Props) {\n  const { description, updatePublishForm, disabled } = props;\n  const [advancedEditor, setAdvancedEditor] = usePersistedState('publish-form-description-mode', false);\n  function toggleMarkdown() {\n    setAdvancedEditor(!advancedEditor);\n  }\n\n  return (\n    <>\n      <Card\n        className=\"card--description\"\n        actions={\n          <FormField\n            type={!SIMPLE_SITE && advancedEditor ? 'markdown' : 'textarea'}\n            name=\"content_description\"\n            placeholder={__(\n              'What is your content about? Use this space to include any other relevant details you may like to share about your content and channel.'\n            )}\n            value={description}\n            disabled={disabled}\n            onChange={(value) =>\n              updatePublishForm({ description: !SIMPLE_SITE && advancedEditor ? value : value.target.value })\n            }\n            quickActionLabel={!SIMPLE_SITE && (advancedEditor ? __('Simple Editor') : __('Advanced Editor'))}\n            quickActionHandler={toggleMarkdown}\n            textAreaMaxLength={FF_MAX_CHARS_IN_DESCRIPTION}\n          />\n        }\n      />\n    </>\n  );\n}\n\nexport default PublishDescription;\n","import { connect } from 'react-redux';\nimport { selectPublishFormValue } from 'redux/selectors/publish';\nimport { doUpdatePublishForm } from 'redux/actions/publish';\nimport PublishDescription from './view';\n\nconst select = (state) => ({\n  description: selectPublishFormValue(state, 'description'),\n});\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n});\n\nexport default connect(select, perform)(PublishDescription);\n","// @flow\nimport React from 'react';\nimport { FormField } from 'component/common/form';\nimport DateTimePicker from 'react-datetime-picker';\nimport moment from 'moment';\n\nfunction linuxTimestampToDate(linuxTimestamp: number) {\n  return new Date(linuxTimestamp * 1000);\n}\n\nfunction dateToLinuxTimestamp(date: Date) {\n  return Number(Math.round(date.getTime() / 1000));\n}\n\ntype Props = {\n  isScheduled: boolean,\n  releaseTime: ?number,\n  clock24h: boolean,\n  appLanguage: ?string,\n  updatePublishForm: (UpdatePublishState) => void,\n};\nconst PublishStreamReleaseDate = (props: Props) => {\n  const { isScheduled, releaseTime, clock24h, appLanguage, updatePublishForm } = props;\n\n  const [publishLater, setPublishLater] = React.useState(isScheduled);\n\n  const getPlus30MinutesDate = () => {\n    return moment().add('1', 'hour').add('30', 'minutes').startOf('hour').toDate();\n  };\n\n  const handleToggle = () => {\n    const shouldPublishLater = !publishLater;\n    setPublishLater(shouldPublishLater);\n    onDateTimePickerChanged(shouldPublishLater ? getPlus30MinutesDate() : 'DEFAULT');\n  };\n\n  const onDateTimePickerChanged = (value) => {\n    if (value === 'DEFAULT') {\n      updatePublishForm({ releaseTime: undefined });\n    } else {\n      updatePublishForm({ releaseTime: dateToLinuxTimestamp(value) });\n    }\n  };\n\n  const helpText = !publishLater\n    ? __(\n        'Confirmation process takes a few minutes, but then you can go live anytime. The stream is not shown anywhere until you are broadcasting.'\n      )\n    : __(\n        'Your scheduled streams will appear on your channel page and for your followers. Chat will not be active until 5 minutes before the start time.'\n      );\n\n  React.useEffect(() => {\n    if (isScheduled) {\n      // TODO: this is doPrepareEdit's responsibility, not the component's.\n      updatePublishForm({ releaseTime: dateToLinuxTimestamp(getPlus30MinutesDate()) });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- on mount only\n  }, []);\n\n  return (\n    <>\n      <div className=\"publish-row\">\n        <label htmlFor=\"date-picker-input\" style={{ marginTop: 0 }}>\n          {__('When do you want to go live?')}\n        </label>\n\n        <div className={'w-full flex flex-col mt-s md:mt-0 md:h-12 md:items-center md:flex-row'}>\n          <FormField\n            type=\"radio\"\n            name=\"anytime\"\n            disabled={false}\n            onChange={handleToggle}\n            checked={!publishLater}\n            label={__('Anytime')}\n          />\n\n          <div className={'md:ml-m mt-s md:mt-0'}>\n            <FormField\n              type=\"radio\"\n              name=\"scheduled_time\"\n              disabled={false}\n              onChange={handleToggle}\n              checked={publishLater}\n              label={__('Scheduled Time')}\n            />\n          </div>\n          {publishLater && (\n            <div className=\"form-field-date-picker mb-0 controls md:ml-m\">\n              <DateTimePicker\n                locale={appLanguage}\n                className=\"date-picker-input w-full md:w-auto mt-s md:mt-0\"\n                calendarClassName=\"form-field-calendar\"\n                onChange={onDateTimePickerChanged}\n                value={releaseTime ? linuxTimestampToDate(releaseTime) : undefined}\n                format={clock24h ? 'y-MM-dd HH:mm' : 'y-MM-dd h:mm a'}\n                disableClock\n                clearIcon={null}\n                minDate={moment().add('30', 'minutes').toDate()}\n              />\n            </div>\n          )}\n        </div>\n\n        <p className={'form-field__hint mt-m'}>{helpText}</p>\n      </div>\n    </>\n  );\n};\n\nexport default PublishStreamReleaseDate;\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { selectPublishFormValue, selectIsScheduled } from 'redux/selectors/publish';\nimport { doUpdatePublishForm } from 'redux/actions/publish';\nimport { selectClientSetting, selectLanguage } from 'redux/selectors/settings';\nimport PublishStreamReleaseDate from './view';\n\nconst select = (state) => ({\n  isScheduled: selectIsScheduled(state),\n  releaseTime: selectPublishFormValue(state, 'releaseTime'),\n  clock24h: selectClientSetting(state, SETTINGS.CLOCK_24H),\n  appLanguage: selectLanguage(state),\n});\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n});\n\nexport default connect(select, perform)(PublishStreamReleaseDate);\n","'use strict';\n\nimport React from 'react';\n\nconst BreakView = (props) => {\n  const label = props.breakLabel;\n  const className = props.breakClassName || 'break';\n\n  return (\n    <li className={className}>\n      {label}\n    </li>\n  );\n}\n\nexport default BreakView;\n","'use strict';\n\nimport React from 'react';\n\nconst PageView = (props) => {\n  let pageClassName = props.pageClassName;\n  let pageLinkClassName = props.pageLinkClassName;\n\n  const onClick = props.onClick;\n  const href = props.href;\n\n  let ariaLabel = 'Page ' + props.page +\n    (props.extraAriaContext ? ' ' + props.extraAriaContext : '');\n  let ariaCurrent = null;\n\n  if (props.selected) {\n    ariaCurrent = 'page';\n    ariaLabel = 'Page ' + props.page + ' is your current page';\n\n    if (typeof(pageClassName) !== 'undefined') {\n      pageClassName = pageClassName + ' ' + props.activeClassName;\n    } else {\n      pageClassName = props.activeClassName;\n    }\n\n    if (typeof(pageLinkClassName) !== 'undefined') {\n      pageLinkClassName = pageLinkClassName;\n\n      if (typeof(props.activeLinkClassName) !== 'undefined') {\n        pageLinkClassName = pageLinkClassName + ' ' + props.activeLinkClassName;\n      }\n    } else {\n      pageLinkClassName = props.activeLinkClassName;\n    }\n  }\n\n  return (\n      <li className={pageClassName}>\n          <a onClick={onClick}\n             role=\"button\"\n             className={pageLinkClassName}\n             href={href}\n             tabIndex=\"0\"\n             aria-label={ariaLabel}\n             aria-current={ariaCurrent}\n             onKeyPress={onClick}>\n            {props.page}\n          </a>\n      </li>\n  )\n}\n\nexport default PageView;\n","'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PageView from './PageView';\nimport BreakView from './BreakView';\n\n\nexport default class PaginationBoxView extends Component {\n  static propTypes = {\n    pageCount             : PropTypes.number.isRequired,\n    pageRangeDisplayed    : PropTypes.number.isRequired,\n    marginPagesDisplayed  : PropTypes.number.isRequired,\n    previousLabel         : PropTypes.node,\n    nextLabel             : PropTypes.node,\n    breakLabel            : PropTypes.node,\n    hrefBuilder           : PropTypes.func,\n    onPageChange          : PropTypes.func,\n    initialPage           : PropTypes.number,\n    forcePage             : PropTypes.number,\n    disableInitialCallback: PropTypes.bool,\n    containerClassName    : PropTypes.string,\n    pageClassName         : PropTypes.string,\n    pageLinkClassName     : PropTypes.string,\n    activeClassName       : PropTypes.string,\n    activeLinkClassName   : PropTypes.string,\n    previousClassName     : PropTypes.string,\n    nextClassName         : PropTypes.string,\n    previousLinkClassName : PropTypes.string,\n    nextLinkClassName     : PropTypes.string,\n    disabledClassName     : PropTypes.string,\n    breakClassName        : PropTypes.string\n  };\n\n  static defaultProps = {\n    pageCount             : 10,\n    pageRangeDisplayed    : 2,\n    marginPagesDisplayed  : 3,\n    activeClassName       : \"selected\",\n    previousClassName     : \"previous\",\n    nextClassName         : \"next\",\n    previousLabel         : \"Previous\",\n    nextLabel             : \"Next\",\n    breakLabel            : \"...\",\n    disabledClassName     : \"disabled\",\n    disableInitialCallback: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: props.initialPage ? props.initialPage :\n                props.forcePage   ? props.forcePage :\n                0\n    };\n  }\n\n  componentDidMount() {\n    const { initialPage, disableInitialCallback } = this.props;\n    // Call the callback with the initialPage item:\n    if (typeof(initialPage) !== 'undefined' && !disableInitialCallback) {\n      this.callCallback(initialPage);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (typeof(nextProps.forcePage) !== 'undefined' && this.props.forcePage !== nextProps.forcePage) {\n      this.setState({selected: nextProps.forcePage});\n    }\n  }\n\n  handlePreviousPage = evt => {\n    const { selected } = this.state;\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected > 0) {\n      this.handlePageSelected(selected - 1, evt);\n    }\n  };\n\n  handleNextPage = evt => {\n    const { selected } = this.state;\n    const { pageCount } = this.props;\n\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected < pageCount - 1) {\n      this.handlePageSelected(selected + 1, evt);\n    }\n  };\n\n  handlePageSelected = (selected, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    if (this.state.selected === selected) return;\n\n    this.setState({selected: selected});\n\n    // Call the callback with the new selected item:\n    this.callCallback(selected);\n  };\n\n  hrefBuilder(pageIndex) {\n    const { hrefBuilder, pageCount } = this.props;\n    if (hrefBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return hrefBuilder(pageIndex + 1);\n    }\n  }\n\n  callCallback = (selectedItem) => {\n    if (typeof(this.props.onPageChange) !== \"undefined\" &&\n        typeof(this.props.onPageChange) === \"function\") {\n      this.props.onPageChange({selected: selectedItem});\n    }\n  };\n\n  getPageElement(index) {\n    const { selected } = this.state;\n    const {\n      pageClassName,\n      pageLinkClassName,\n      activeClassName,\n      activeLinkClassName,\n      extraAriaContext\n    } = this.props;\n\n    return <PageView\n      key={index}\n      onClick={this.handlePageSelected.bind(null, index)}\n      selected={selected === index}\n      pageClassName={pageClassName}\n      pageLinkClassName={pageLinkClassName}\n      activeClassName={activeClassName}\n      activeLinkClassName={activeLinkClassName}\n      extraAriaContext={extraAriaContext}\n      href={this.hrefBuilder(index)}\n      page={index + 1} />\n  }\n\n  pagination = () => {\n    const items = [];\n    const {\n      pageRangeDisplayed,\n      pageCount,\n      marginPagesDisplayed,\n      breakLabel,\n      breakClassName\n    } = this.props;\n\n    const { selected } = this.state;\n\n    if (pageCount <= pageRangeDisplayed) {\n\n      for (let index = 0; index < pageCount; index++) {\n        items.push(this.getPageElement(index));\n      }\n\n    } else {\n\n      let leftSide  = (pageRangeDisplayed / 2);\n      let rightSide = (pageRangeDisplayed - leftSide);\n\n      // If the selected page index is on the default right side of the pagination,\n      // we consider that the new right side is made up of it (= only one break element).\n      // If the selected page index is on the default left side of the pagination,\n      // we consider that the new left side is made up of it (= only one break element).\n      if (selected > pageCount - pageRangeDisplayed / 2) {\n        rightSide = pageCount - selected;\n        leftSide  = pageRangeDisplayed - rightSide;\n      }\n      else if (selected < pageRangeDisplayed / 2) {\n        leftSide  = selected;\n        rightSide = pageRangeDisplayed - leftSide;\n      }\n\n      let index;\n      let page;\n      let breakView;\n      let createPageView = (index) => this.getPageElement(index);\n\n      for (index = 0; index < pageCount; index++) {\n\n        page = index + 1;\n\n        // If the page index is lower than the margin defined,\n        // the page has to be displayed on the left side of\n        // the pagination.\n        if (page <= marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is greater than the page count\n        // minus the margin defined, the page has to be\n        // displayed on the right side of the pagination.\n        if (page > pageCount - marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is near the selected page index\n        // and inside the defined range (pageRangeDisplayed)\n        // we have to display it (it will create the center\n        // part of the pagination).\n        if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index doesn't meet any of the conditions above,\n        // we check if the last item of the current \"items\" array\n        // is a break element. If not, we add a break element, else,\n        // we do nothing (because we don't want to display the page).\n        if (breakLabel && items[items.length - 1] !== breakView) {\n          breakView = (\n            <BreakView\n              key={index}\n              breakLabel={breakLabel}\n              breakClassName={breakClassName}\n            />\n          );\n          items.push(breakView);\n        }\n      }\n    }\n\n    return items;\n  };\n\n  render() {\n    const {\n      disabledClassName,\n      previousClassName,\n      nextClassName,\n      pageCount,\n      containerClassName,\n      previousLinkClassName,\n      previousLabel,\n      nextLinkClassName,\n      nextLabel\n    } = this.props;\n\n    const { selected } = this.state;\n\n    const previousClasses = previousClassName + (selected === 0 ? ` ${disabledClassName}` : '');\n    const nextClasses = nextClassName + (selected === pageCount - 1 ? ` ${disabledClassName}` : '');\n\n    return (\n      <ul className={containerClassName}>\n        <li className={previousClasses}>\n          <a onClick={this.handlePreviousPage}\n             className={previousLinkClassName}\n             href={this.hrefBuilder(selected - 1)}\n             tabIndex=\"0\"\n             role=\"button\"\n             onKeyPress={this.handlePreviousPage}>\n            {previousLabel}\n          </a>\n        </li>\n\n        {this.pagination()}\n\n        <li className={nextClasses}>\n          <a onClick={this.handleNextPage}\n             className={nextLinkClassName}\n             href={this.hrefBuilder(selected + 1)}\n             tabIndex=\"0\"\n             role=\"button\"\n             onKeyPress={this.handleNextPage}>\n            {nextLabel}\n          </a>\n        </li>\n      </ul>\n    );\n  }\n};\n","import PaginationBoxView from './PaginationBoxView';\n\nexport default PaginationBoxView;\n"],"names":["FileSelector","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","_defineProperty","_assertThisInitialized","call","files","fileInput","current","file","props","onFileChosen","value","remote","properties","then","result","path","filePaths","click","React","handleFileInputSelection","bind","handleDirectoryInputSelection","fileInputButton","key","_this2","_this$props","this","type","currentPath","label","placeholder","accept","error","disabled","_this$props$autoFocus","autoFocus","placeHolder","FormField","webkitdirectory","className","readOnly","__","inputButton","Button","button","onClick","style","display","ref","onChange","connect","doToast","copyable","onlyCopy","snackMessage","_props$primaryButton","primaryButton","name","onCopy","enableInputMask","_React$useState2","_slicedToArray","maskInput","setMaskInput","input","useRef","onFocus","topRef","select","icon","ICONS","navigator","clipboard","writeText","message","isError","document","execCommand","helper","uri","title","balance","filePath","fileBitrate","fileSizeTooBig","liveCreateType","liveEditType","isStillEditing","updatePublishForm","doUpdatePublishForm","doUpdateFile","duration","isVid","livestreamData","isCheckingLivestreams","inEditMode","livestreamDataStr","JSON","stringify","hasLivestreamData","Boolean","length","_useState2","useState","selectedFileIndex","setSelectedFileIndex","_useState4","currentPage","setCurrentPage","totalPages","Math","ceil","replayTitleLabel","TV_PUBLISH_SIZE_LIMIT_GB_STR","String","WEB_PUBLISH_SIZE_LIMIT_GB","UPLOAD_SIZE_MESSAGE","SITE_NAME","limit","showReplaySelector","normalizeUrlForProtocol","url","startsWith","concat","useEffect","parse","remoteFileUrl","data","fileLocation","Card","classnames","actions","event","target","max","autoComplete","PublishName","marginBottom","checked","marginTop","slice","map","item","i","useStr","fileDuration","isNaN","durationMinutes","floor","durationElem","thumbnails","thumb","src","moment","uploadedAt","from","CopyableText","class","ReactPaginate","pageCount","pageRangeDisplayed","previousLabel","nextLabel","activeClassName","pageClassName","previousClassName","nextClassName","breakClassName","marginPagesDisplayed","onPageChange","e","page","selected","forcePage","initialPage","containerClassName","marginLeft","Spinner","small","arguments","undefined","SIMPLE_SITE","Icon","href","BITRATE","perform","state","selectPublishFormValue","publish","selectIsStillEditing","selectBalance","publishing","PublishLivestream","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","_typeof","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","_e2","f","normalCompletion","didErr","step","_e3","_toConsumableArray","arr","_arrayLikeToArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","apply","_arrayWithHoles","_i","_s","_e","_x","_r","_arr","_n","_d","_iterableToArrayLimit","_nonIterableRest","minLen","toString","test","len","arr2","SelectThumbnail","lazyImport","PublishPrice","submitLabel","thumbnail","thumbnailError","releaseTimeError","editingURI","myClaimForUri","resolveUri","bid","bidError","uploadThumbnailStatus","resetThumbnailStatus","publishSuccess","publishError","clearPublish","tags","checkAvailability","modal","enablePublishPreview","activeChannelClaim","description","permanentUrl","isClaimingInitialRewards","claimInitialRewards","hasClaimedInitialRewards","setClearStatus","memberRestrictionStatus","search","useHistory","location","createTypeShortcut","URLSearchParams","get","isMobile","useIsMobile","activeChannelName","activeChannelId","claim_id","setCheckingLivestreams","_React$useState4","prevName","setPrevName","waitForFile","_React$useState6","setLivestreamData","formDisabled","thumbnailUploaded","THUMBNAIL_STATUSES","waitingForFile","formValidLessFile","isApplicable","isSelectionValid","isNameValid","formValid","_React$useState8","previewing","setPreviewing","requiresReplayUrl","requiresFile","isClear","fetchLivestreams","_x2","_x3","_fetchLivestreams","_callee","channelId","channelName","signedMessage","encodedChannelName","newEndpointUrl","responseFromNewApi","newData","_iterator","_step","dataItem","objectToPush","_context","Lbry","channel_id","hexdata","toHex","t0","encodeURIComponent","NEW_LIVESTREAM_REPLAY_API","signature","signing_ts","fetch","json","Status","toLowerCase","URL","PercentComplete","Duration","percentComplete","ThumbnailURLs","Created","_handlePublish","_callee2","outputFile","_context2","timer","setTimeout","clearTimeout","trim","buildURI","streamName","uriLessChannel","isValid","isURIValid","channel","delayed","isFormIncomplete","iconSize","ChannelSelector","hideAnon","isTabHeader","Tooltip","background","body","PublishDescription","PublishStreamReleaseDate","PublishProtectedContent","claim","TagsSelect","suggestMature","disableAutoFocus","hideHeader","empty","limitSelect","help","onSelect","newTags","validatedTags","newTag","some","tag","onRemove","clickedTag","filter","tagsChosen","PublishAdditionalOptions","isLivestream","showSchedulingOptions","isPublishMenu","I18nMessage","tokens","odysee_terms_of_service","site_name","odysee_community_guidelines","PublishFormErrors","selectMyClaimForUri","permanent_url","isPostClaim","makeSelectFileRenderModeForUri","RENDER_MODES","_objectSpread","selectPublishFormValues","user","selectUser","isLivestreamClaim","selectIsStreamPlaceholderForUri","totalRewardValue","selectUnclaimedRewardValue","selectModal","selectClientSetting","SETTINGS","selectActiveChannelClaim","incognito","selectIncognito","selectIsClaimingInitialRewards","selectHasClaimedInitialRewards","selectMemberRestrictionStatus","dispatch","doClearPublish","doResolveUri","preview","doPublishDesktop","doResetThumbnailStatus","doCheckPublishNameAvailability","doClaimInitialRewards","LivestreamForm","_usePersistedState2","usePersistedState","advancedEditor","setAdvancedEditor","quickActionLabel","quickActionHandler","textAreaMaxLength","FF_MAX_CHARS_IN_DESCRIPTION","dateToLinuxTimestamp","date","Number","round","getTime","linuxTimestamp","isScheduled","releaseTime","clock24h","appLanguage","publishLater","setPublishLater","getPlus30MinutesDate","add","startOf","toDate","handleToggle","shouldPublishLater","onDateTimePickerChanged","helpText","htmlFor","DateTimePicker","locale","calendarClassName","Date","format","disableClock","clearIcon","minDate","selectIsScheduled","selectLanguage","_react","require","breakLabel","_react2","createElement","pageLinkClassName","ariaLabel","extraAriaContext","ariaCurrent","activeLinkClassName","role","tabIndex","onKeyPress","PaginationBoxView","_possibleConstructorReturn","handlePreviousPage","evt","preventDefault","returnValue","handlePageSelected","handleNextPage","setState","callCallback","selectedItem","pagination","items","index","getPageElement","leftSide","rightSide","_index","breakView","createPageView","_BreakView2","_props","disableInitialCallback","nextProps","pageIndex","_props2","hrefBuilder","_props3","_PageView2","_props4","disabledClassName","previousLinkClassName","nextLinkClassName","previousClasses","nextClasses","Component","propTypes","_propTypes2","number","isRequired","node","func","bool","string","defaultProps","_PaginationBoxView","_PaginationBoxView2"],"sourceRoot":""}