{"version":3,"file":"signIn-aaf50315cf2ac8b1dc63.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/loginGraphic/index.jsx","webpack://odysee.com/../ui/component/userSignOutButton/view.jsx","webpack://odysee.com/../ui/component/userSignOutButton/index.js","webpack://odysee.com/../ui/component/userEmailVerify/view.jsx","webpack://odysee.com/../ui/component/userEmailVerify/index.js","webpack://odysee.com/../ui/component/userPasswordReset/view.jsx","webpack://odysee.com/../ui/component/userPasswordReset/index.js","webpack://odysee.com/../ui/constants/email.js","webpack://odysee.com/../ui/component/userEmailReturning/view.jsx","webpack://odysee.com/../ui/component/userEmailReturning/index.js","webpack://odysee.com/../ui/component/userSignInPassword/index.js","webpack://odysee.com/../ui/component/userSignInPassword/view.jsx","webpack://odysee.com/../ui/component/userSignIn/view.jsx","webpack://odysee.com/../ui/component/userSignIn/index.js","webpack://odysee.com/../ui/page/signIn/index.js","webpack://odysee.com/../ui/page/signIn/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport React from 'react';\nimport { SITE_NAME, LOGIN_IMG_URL } from 'config';\n\nfunction LoginGraphic(props: any) {\n  const alt = __('%SITE_NAME% login', { SITE_NAME });\n\n  return (\n    <div className=\"signup-image\">\n      <img alt={alt} src={LOGIN_IMG_URL} />\n    </div>\n  );\n}\n\nexport default LoginGraphic;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\n\ntype Props = {\n  button: string,\n  label?: string,\n  doSignOut: () => void,\n  doClearEmailEntry: () => void,\n  doClearPasswordEntry: () => void,\n};\n\nfunction UserSignOutButton(props: Props) {\n  const { button = 'link', doSignOut, doClearEmailEntry, doClearPasswordEntry, label } = props;\n\n  return (\n    <Button\n      button={button}\n      label={label || __('Sign Out')}\n      onClick={() => {\n        doClearPasswordEntry();\n        doClearEmailEntry();\n        doSignOut();\n      }}\n    />\n  );\n}\n\nexport default UserSignOutButton;\n","import { connect } from 'react-redux';\nimport { doSignOut } from 'redux/actions/app';\nimport { doClearEmailEntry, doClearPasswordEntry } from 'redux/actions/user';\nimport UserSignOutButton from './view';\n\nconst select = state => ({});\n\nexport default connect(select, {\n  doSignOut,\n  doClearEmailEntry,\n  doClearPasswordEntry,\n})(UserSignOutButton);\n","// @flow\nimport * as React from 'react';\nimport Button from 'component/button';\nimport UserSignOutButton from 'component/userSignOutButton';\nimport I18nMessage from 'component/i18nMessage';\nimport Card from 'component/common/card';\nimport { SITE_HELP_EMAIL } from 'config';\nconst THIRTY_SECONDS_IN_MS = 30000;\ntype Props = {\n  email: string,\n  isReturningUser: boolean,\n  resendVerificationEmail: (string) => void,\n  resendingEmail: boolean,\n  checkEmailVerified: () => void,\n  toast: (string) => void,\n  user: {\n    has_verified_email: boolean,\n  },\n};\n\ntype State = {\n  wait: boolean,\n};\n\nclass UserEmailVerify extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.emailVerifyCheckInterval = null;\n    this.state = { wait: false };\n    (this: any).handleResendVerificationEmail = this.handleResendVerificationEmail.bind(this);\n  }\n\n  componentDidMount() {\n    this.emailVerifyCheckInterval = setInterval(() => {\n      this.checkIfVerified();\n    }, 5000);\n  }\n\n  componentDidUpdate() {\n    const { user } = this.props;\n\n    if (this.emailVerifyCheckInterval && user && user.has_verified_email) {\n      clearInterval(this.emailVerifyCheckInterval);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.emailVerifyCheckInterval) {\n      clearInterval(this.emailVerifyCheckInterval);\n    }\n  }\n\n  handleResendVerificationEmail() {\n    const { email, resendVerificationEmail, toast } = this.props;\n    if (!this.state.wait) {\n      resendVerificationEmail(email);\n      toast(__('New email sent.'));\n      this.setState({\n        wait: true,\n      });\n      setTimeout(() => this.setState({ wait: false }), THIRTY_SECONDS_IN_MS);\n    } else {\n      toast(__('Please wait a bit longer before requesting again.'));\n    }\n  }\n\n  checkIfVerified() {\n    const { checkEmailVerified } = this.props;\n    checkEmailVerified();\n  }\n\n  emailVerifyCheckInterval: ?IntervalID;\n\n  render() {\n    const { email, isReturningUser, resendingEmail } = this.props;\n\n    return (\n      <div className=\"main__sign-up\">\n        <Card\n          title={isReturningUser ? __('Check Your email') : __('Confirm your account')}\n          subtitle={\n            <p>\n              {__(\n                'We just sent an email to %email% with a link for you to %verify_text%. Remember to check other email folders like spam or promotions.',\n                {\n                  email,\n                  verify_text: isReturningUser ? __('log in') : __('verify your account'),\n                }\n              )}\n            </p>\n          }\n          actions={\n            <React.Fragment>\n              <div className=\"section__actions\">\n                <Button\n                  button=\"primary\"\n                  label={__('Resend Link')}\n                  onClick={this.handleResendVerificationEmail}\n                  disabled={resendingEmail}\n                />\n                <UserSignOutButton label={__('Start Over')} />\n              </div>\n              <p className=\"help--card-actions\">\n                <I18nMessage\n                  tokens={{\n                    help_link: <Button button=\"link\" href={`mailto:${SITE_HELP_EMAIL}`} label={`${SITE_HELP_EMAIL}`} />,\n                    chat_link: <Button button=\"link\" href=\"https://chat.odysee.com\" label={__('chat')} />,\n                  }}\n                >\n                  Email %help_link% or join our %chat_link% if you encounter any trouble verifying.\n                </I18nMessage>\n              </p>\n            </React.Fragment>\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default UserEmailVerify;\n","import { connect } from 'react-redux';\nimport { doUserResendVerificationEmail, doUserCheckEmailVerified } from 'redux/actions/user';\nimport {\n  selectEmailToVerify,\n  selectEmailAlreadyExists,\n  selectUser,\n  selectResendingVerificationEmail,\n} from 'redux/selectors/user';\nimport { doToast } from 'redux/actions/notifications';\nimport UserEmailVerify from './view';\n\nconst select = state => ({\n  email: selectEmailToVerify(state),\n  isReturningUser: selectEmailAlreadyExists(state),\n  user: selectUser(state),\n  resendingEmail: selectResendingVerificationEmail(state),\n});\n\nconst perform = dispatch => ({\n  resendVerificationEmail: email => dispatch(doUserResendVerificationEmail(email)),\n  checkEmailVerified: () => dispatch(doUserCheckEmailVerified()),\n  toast: message => dispatch(doToast({ message })),\n});\n\nexport default connect(select, perform)(UserEmailVerify);\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Card from 'component/common/card';\nimport Spinner from 'component/spinner';\nimport { Form, FormField } from 'component/common/form';\nimport { EMAIL_REGEX } from 'constants/email';\nimport ErrorText from 'component/common/error-text';\nimport Button from 'component/button';\nimport Nag from 'component/nag';\n\ntype Props = {\n  user: ?User,\n  doToast: ({ message: string }) => void,\n  doUserPasswordReset: (string) => void,\n  doClearPasswordEntry: () => void,\n  doClearEmailEntry: () => void,\n  passwordResetPending: boolean,\n  passwordResetSuccess: boolean,\n  passwordResetError: ?string,\n  emailToVerify: ?string,\n};\n\nfunction UserPasswordReset(props: Props) {\n  const {\n    doUserPasswordReset,\n    passwordResetPending,\n    passwordResetError,\n    passwordResetSuccess,\n    doToast,\n    doClearPasswordEntry,\n    doClearEmailEntry,\n    emailToVerify,\n  } = props;\n  const { location, push, goBack } = useHistory();\n  const [email, setEmail] = React.useState(emailToVerify || '');\n  const valid = email.match(EMAIL_REGEX);\n  const restartAtSignInPage = location.pathname === `/$/${PAGES.AUTH_SIGNIN}`;\n\n  function handleSubmit() {\n    if (email) {\n      doUserPasswordReset(email);\n    }\n  }\n\n  function handleRestart() {\n    setEmail('');\n    doClearPasswordEntry();\n    doClearEmailEntry();\n    if (restartAtSignInPage) {\n      push(`/$/${PAGES.AUTH_SIGNIN}`);\n    } else {\n      goBack();\n    }\n  }\n\n  React.useEffect(() => {\n    if (passwordResetSuccess) {\n      doToast({\n        message: __('Email sent!'),\n      });\n    }\n  }, [passwordResetSuccess, doToast]);\n\n  return (\n    <section className=\"main__sign-in\">\n      <Card\n        title={__('Reset your password')}\n        actions={\n          <div>\n            <Form onSubmit={handleSubmit} className=\"section\">\n              <FormField\n                autoFocus\n                disabled={passwordResetSuccess}\n                placeholder={__('yourstruly@example.com')}\n                type=\"email\"\n                name=\"sign_in_email\"\n                id=\"username\"\n                autoComplete=\"on\"\n                label={__('Email')}\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n\n              <div className=\"section__actions\">\n                <Button\n                  button=\"primary\"\n                  type=\"submit\"\n                  label={passwordResetPending ? __('Resetting') : __('Reset Password')}\n                  disabled={!email || !valid || passwordResetPending || passwordResetSuccess}\n                />\n                <Button button=\"link\" label={__('Cancel')} onClick={handleRestart} />\n                {passwordResetPending && <Spinner type=\"small\" />}\n              </div>\n            </Form>\n          </div>\n        }\n        nag={\n          <React.Fragment>\n            {passwordResetError && <Nag type=\"error\" relative message={<ErrorText>{passwordResetError}</ErrorText>} />}\n            {passwordResetSuccess && (\n              <Nag type=\"helpful\" relative message={__('Check your email for a link to reset your password.')} />\n            )}\n          </React.Fragment>\n        }\n      />\n    </section>\n  );\n}\n\nexport default UserPasswordReset;\n","import { connect } from 'react-redux';\nimport {\n  selectPasswordResetSuccess,\n  selectPasswordResetIsPending,\n  selectPasswordResetError,\n  selectEmailToVerify,\n} from 'redux/selectors/user';\nimport { doUserPasswordReset, doClearPasswordEntry, doClearEmailEntry } from 'redux/actions/user';\nimport { doToast } from 'redux/actions/notifications';\nimport UserSignIn from './view';\n\nconst select = state => ({\n  passwordResetSuccess: selectPasswordResetSuccess(state),\n  passwordResetIsPending: selectPasswordResetIsPending(state),\n  passwordResetError: selectPasswordResetError(state),\n  emailToVerify: selectEmailToVerify(state),\n});\n\nexport default connect(select, {\n  doUserPasswordReset,\n  doToast,\n  doClearPasswordEntry,\n  doClearEmailEntry,\n})(UserSignIn);\n","export const EMAIL_REGEX = /^[^@]+@[^@]+$/;\n","// @flow\nimport { SITE_NAME, SIMPLE_SITE } from 'config';\nimport * as PAGES from 'constants/pages';\nimport React, { useState } from 'react';\nimport { FormField, Form } from 'component/common/form';\nimport Button from 'component/button';\nimport { EMAIL_REGEX } from 'constants/email';\nimport { useHistory } from 'react-router-dom';\nimport UserEmailVerify from 'component/userEmailVerify';\nimport Card from 'component/common/card';\nimport Nag from 'component/nag';\nimport classnames from 'classnames';\nimport LoginGraphic from 'component/loginGraphic';\n\ntype Props = {\n  user: ?User,\n  errorMessage: ?string,\n  emailToVerify: ?string,\n  emailDoesNotExist: boolean,\n  doClearEmailEntry: () => void,\n  doUserSignIn: (string, ?string) => void,\n  doUserCheckIfEmailExists: (string) => void,\n  doSetWalletSyncPreference: (boolean) => void,\n  doSetClientSetting: (string, boolean, ?boolean) => void,\n  isPending: boolean,\n};\n\nfunction UserEmailReturning(props: Props) {\n  const {\n    user,\n    errorMessage,\n    doUserCheckIfEmailExists,\n    emailToVerify,\n    doClearEmailEntry,\n    emailDoesNotExist,\n    doSetWalletSyncPreference,\n    isPending,\n  } = props;\n  const { push, location } = useHistory();\n  const urlParams = new URLSearchParams(location.search);\n  const emailFromUrl = urlParams.get('email');\n  const emailExistsFromUrl = urlParams.get('email_exists');\n  const defaultEmail = emailFromUrl ? decodeURIComponent(emailFromUrl) : '';\n  const hasPasswordSet = user && user.password_set;\n\n  const [email, setEmail] = useState(defaultEmail);\n  const [syncEnabled, setSyncEnabled] = useState(true);\n\n  const valid = email.match(EMAIL_REGEX);\n  const showEmailVerification = emailToVerify || hasPasswordSet;\n\n  function handleSubmit() {\n    doUserCheckIfEmailExists(email);\n  }\n\n  function handleChangeToSignIn() {\n    doClearEmailEntry();\n    let url = `/$/${PAGES.AUTH}`;\n    const urlParams = new URLSearchParams(location.search);\n\n    urlParams.delete('email_exists');\n    urlParams.delete('email');\n    if (email) {\n      urlParams.set('email', encodeURIComponent(email));\n    }\n\n    push(`${url}?${urlParams.toString()}`);\n  }\n\n  return (\n    <div\n      className={classnames('main__sign-in', {\n        'main__sign-up--graphic': SIMPLE_SITE && !showEmailVerification,\n      })}\n    >\n      {showEmailVerification ? (\n        <UserEmailVerify />\n      ) : (\n        <Card\n          title={__('Log in to %SITE_NAME%', { SITE_NAME })}\n          actions={\n            <div>\n              <Form onSubmit={handleSubmit} className=\"section\">\n                <FormField\n                  autoFocus={!emailExistsFromUrl}\n                  placeholder={__('yourstruly@example.com')}\n                  type=\"email\"\n                  id=\"username\"\n                  autoComplete=\"on\"\n                  name=\"sign_in_email\"\n                  label={__('Email')}\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n\n                {}\n\n                <div className=\"section__actions\">\n                  <Button\n                    autoFocus={emailExistsFromUrl}\n                    button=\"primary\"\n                    type=\"submit\"\n                    label={__('Log In')}\n                    disabled={!email || !valid || isPending}\n                  />\n                  <Button button=\"link\" onClick={handleChangeToSignIn} label={__('Sign Up')} />\n                </div>\n              </Form>\n            </div>\n          }\n          nag={\n            <>\n              {!emailDoesNotExist && emailExistsFromUrl && (\n                <Nag type=\"helpful\" relative message={__('That email is already in use. Did you mean to log in?')} />\n              )}\n              {emailDoesNotExist && (\n                <Nag\n                  type=\"helpful\"\n                  relative\n                  message={__(\"We can't find that email. Did you mean to sign up?\")}\n                  actionText={__('Sign Up')}\n                />\n              )}\n              {!emailExistsFromUrl && !emailDoesNotExist && errorMessage && (\n                <Nag type=\"error\" relative message={errorMessage} />\n              )}\n            </>\n          }\n          secondPane={SIMPLE_SITE && <LoginGraphic />}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default UserEmailReturning;\n","import { connect } from 'react-redux';\nimport {\n  selectEmailNewErrorMessage,\n  selectEmailToVerify,\n  selectEmailDoesNotExist,\n  selectEmailAlreadyExists,\n  selectUser,\n  selectEmailNewIsPending,\n} from 'redux/selectors/user';\nimport { doUserCheckIfEmailExists, doClearEmailEntry } from 'redux/actions/user';\nimport { doSetWalletSyncPreference } from 'redux/actions/settings';\nimport UserEmailReturning from './view';\n\nconst select = state => ({\n  errorMessage: selectEmailNewErrorMessage(state),\n  emailToVerify: selectEmailToVerify(state),\n  emailDoesNotExist: selectEmailDoesNotExist(state),\n  emailExists: selectEmailAlreadyExists(state),\n  isPending: selectEmailNewIsPending(state),\n  user: selectUser(state),\n});\n\nexport default connect(select, {\n  doUserCheckIfEmailExists,\n  doClearEmailEntry,\n  doSetWalletSyncPreference,\n})(UserEmailReturning);\n","import { connect } from 'react-redux';\nimport {\n  selectUser,\n  selectUserIsPending,\n  selectEmailToVerify,\n  selectEmailNewErrorMessage,\n  selectEmailNewIsPending,\n} from 'redux/selectors/user';\nimport { doUserSignIn, doClearEmailEntry } from 'redux/actions/user';\nimport UserSignIn from './view';\n\nconst select = state => ({\n  user: selectUser(state),\n  userFetchPending: selectUserIsPending(state),\n  emailToVerify: selectEmailToVerify(state),\n  errorMessage: selectEmailNewErrorMessage(state),\n  isPending: selectEmailNewIsPending(state),\n});\n\nexport default connect(select, {\n  doUserSignIn,\n  doClearEmailEntry,\n})(UserSignIn);\n","// @flow\nimport { SITE_NAME } from 'config';\nimport React, { useState } from 'react';\nimport { FormField, Form } from 'component/common/form';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport Nag from 'component/nag';\nimport UserPasswordReset from 'component/userPasswordReset';\n\ntype Props = {\n  errorMessage: ?string,\n  emailToVerify: ?string,\n  doClearEmailEntry: () => void,\n  doUserSignIn: (string, ?string) => void,\n  onHandleEmailOnly: () => void,\n  isPending: boolean,\n};\n\nexport default function UserSignInPassword(props: Props) {\n  const { errorMessage, doUserSignIn, emailToVerify, onHandleEmailOnly, isPending } = props;\n  const [password, setPassword] = useState('');\n  const [forgotPassword, setForgotPassword] = React.useState(false);\n\n  function handleSubmit() {\n    if (emailToVerify) {\n      doUserSignIn(emailToVerify, password);\n    }\n  }\n\n  function handleChangeToSignIn() {\n    onHandleEmailOnly();\n  }\n\n  return (\n    <div className=\"main__sign-in\">\n      {forgotPassword ? (\n        <UserPasswordReset />\n      ) : (\n        <Card\n          title={__('Enter your %SITE_NAME% password', { SITE_NAME })}\n          subtitle={__('Logging in as %email%', { email: emailToVerify })}\n          actions={\n            <Form onSubmit={handleSubmit} className=\"section\">\n              <FormField\n                autoFocus\n                type=\"password\"\n                name=\"sign_in_password\"\n                id=\"password\"\n                autoComplete=\"on\"\n                label={__('Password')}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                helper={<Button button=\"link\" label={__('Forgot Password?')} onClick={() => setForgotPassword(true)} />}\n              />\n\n              <div className=\"section__actions\">\n                <Button button=\"primary\" type=\"submit\" label={__('Continue')} disabled={!password || isPending} />\n                <Button button=\"link\" onClick={handleChangeToSignIn} label={__('Use Magic Link')} />\n              </div>\n            </Form>\n          }\n          nag={errorMessage && <Nag type=\"error\" relative message={errorMessage} />}\n        />\n      )}\n    </div>\n  );\n}\n","// @flow\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport UserEmailReturning from 'component/userEmailReturning';\nimport UserSignInPassword from 'component/userSignInPassword';\nimport Spinner from 'component/spinner';\n\ntype Props = {\n  user: ?User,\n  history: { push: (string) => void, replace: (string) => void },\n  location: { search: string },\n  userFetchPending: boolean,\n  doUserSignIn: (string) => void,\n  emailToVerify: ?string,\n  passwordExists: boolean,\n};\n\nfunction UserSignIn(props: Props) {\n  const { user, location, history, doUserSignIn, userFetchPending, emailToVerify, passwordExists } = props;\n  const { search } = location;\n  const urlParams = new URLSearchParams(search);\n  const [emailOnlyLogin, setEmailOnlyLogin] = React.useState(false);\n  const hasVerifiedEmail = user && user.has_verified_email;\n  const redirect = urlParams.get('redirect');\n  const showLoading = userFetchPending;\n  const showEmail = !passwordExists || emailOnlyLogin;\n  const showPassword = !showEmail && emailToVerify && passwordExists;\n\n  React.useEffect(() => {\n    if (hasVerifiedEmail || (!showEmail && !showPassword && !showLoading)) {\n      history.replace(redirect || '/');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- @see TODO_NEED_VERIFICATION\n  }, [showEmail, showPassword, showLoading, hasVerifiedEmail]);\n\n  React.useEffect(() => {\n    if (emailToVerify && emailOnlyLogin) {\n      doUserSignIn(emailToVerify);\n    }\n  }, [emailToVerify, emailOnlyLogin, doUserSignIn]);\n\n  return (\n    <section>\n      {(showEmail || showPassword) && (\n        <div>\n          {showEmail && <UserEmailReturning />}\n          {showPassword && <UserSignInPassword onHandleEmailOnly={() => setEmailOnlyLogin(true)} />}\n        </div>\n      )}\n      {!showEmail && !showPassword && showLoading && (\n        <div className=\"main--empty\">\n          <Spinner delayed />\n        </div>\n      )}\n    </section>\n  );\n}\n\nexport default withRouter(UserSignIn);\n","import { connect } from 'react-redux';\nimport { selectUser, selectUserIsPending, selectEmailToVerify, selectPasswordExists } from 'redux/selectors/user';\nimport { doUserSignIn } from 'redux/actions/user';\nimport UserSignIn from './view';\n\nconst select = state => ({\n  user: selectUser(state),\n  userFetchPending: selectUserIsPending(state),\n  emailToVerify: selectEmailToVerify(state),\n  passwordExists: selectPasswordExists(state),\n});\n\nexport default connect(select, {\n  doUserSignIn,\n})(UserSignIn);\n","import SignInPage from './view';\n\nexport default SignInPage;\n","// @flow\nimport React from 'react';\nimport UserSignIn from 'component/userSignIn';\nimport Page from 'component/page';\n\nexport default function SignInPage() {\n  return (\n    <Page authPage noFooter>\n      <UserSignIn />\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","alt","SITE_NAME","src","LOGIN_IMG_URL","_props$button","doSignOut","doClearEmailEntry","doClearPasswordEntry","label","connect","state","UserSignOutButton","UserEmailVerify","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","call","_assertThisInitialized","emailVerifyCheckInterval","wait","handleResendVerificationEmail","bind","key","value","_this2","this","setInterval","checkIfVerified","user","has_verified_email","clearInterval","_this3","_this$props","email","resendVerificationEmail","toast","setState","setTimeout","checkEmailVerified","_this$props2","isReturningUser","resendingEmail","Card","verify_text","disabled","I18nMessage","tokens","help_link","href","concat","SITE_HELP_EMAIL","chat_link","selectEmailToVerify","selectEmailAlreadyExists","selectUser","selectResendingVerificationEmail","dispatch","doUserResendVerificationEmail","doUserCheckEmailVerified","message","doToast","doUserPasswordReset","passwordResetPending","passwordResetError","passwordResetSuccess","emailToVerify","_useHistory","useHistory","location","push","goBack","_React$useState2","setEmail","valid","match","EMAIL_REGEX","restartAtSignInPage","pathname","PAGES","Form","onSubmit","FormField","autoFocus","placeholder","type","name","autoComplete","onChange","target","Spinner","Nag","relative","ErrorText","selectPasswordResetSuccess","passwordResetIsPending","selectPasswordResetIsPending","selectPasswordResetError","UserSignIn","errorMessage","doUserCheckIfEmailExists","emailDoesNotExist","isPending","doSetWalletSyncPreference","urlParams","URLSearchParams","search","emailFromUrl","get","emailExistsFromUrl","defaultEmail","decodeURIComponent","hasPasswordSet","password_set","_useState4","showEmailVerification","SIMPLE_SITE","url","set","encodeURIComponent","toString","actionText","LoginGraphic","selectEmailNewErrorMessage","selectEmailDoesNotExist","emailExists","selectEmailNewIsPending","UserEmailReturning","userFetchPending","selectUserIsPending","doUserSignIn","onHandleEmailOnly","password","setPassword","forgotPassword","setForgotPassword","UserPasswordReset","helper","withRouter","history","passwordExists","emailOnlyLogin","setEmailOnlyLogin","hasVerifiedEmail","redirect","showLoading","showEmail","showPassword","replace","UserSignInPassword","delayed","selectPasswordExists","Page","authPage","noFooter"],"sourceRoot":""}