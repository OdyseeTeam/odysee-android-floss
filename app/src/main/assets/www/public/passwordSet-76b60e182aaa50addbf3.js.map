{"version":3,"file":"passwordSet-76b60e182aaa50addbf3.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/userPasswordSet/view.jsx","webpack://odysee.com/../ui/component/userPasswordSet/index.js","webpack://odysee.com/../ui/page/passwordSet/index.js","webpack://odysee.com/../ui/page/passwordSet/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport { Lbryio } from 'lbryinc';\nimport { useHistory } from 'react-router';\nimport Card from 'component/common/card';\nimport { Form, FormField } from 'component/common/form';\nimport ErrorText from 'component/common/error-text';\nimport Button from 'component/button';\nimport Nag from 'component/nag';\nimport Spinner from 'component/spinner';\n\ntype Props = {\n  user: ?User,\n  doClearEmailEntry: () => void,\n  doUserFetch: () => void,\n  doToast: ({ message: string }) => void,\n  history: { push: (string) => void },\n  location: { search: string },\n  passwordSetPending: boolean,\n  passwordSetError: ?string,\n};\n\nfunction UserPasswordReset(props: Props) {\n  const { doClearEmailEntry, doToast, doUserFetch } = props;\n  const { location, push } = useHistory();\n  const urlParams = new URLSearchParams(location.search);\n  const email = urlParams.get('email');\n  const authToken = urlParams.get('auth_token');\n  const verificationToken = urlParams.get('verification_token');\n  const [password, setPassword] = React.useState('');\n  const [error, setError] = React.useState();\n  const [loading, setLoading] = React.useState(false);\n\n  function handleSubmit() {\n    setLoading(true);\n\n    Lbryio.call('user_email', 'confirm', {\n      email: email,\n      verification_token: verificationToken,\n    })\n      .then(() =>\n        Lbryio.call(\n          'user_password',\n          'set',\n          {\n            auth_token: authToken,\n            new_password: password,\n          },\n          'post'\n        )\n      )\n      .then(doUserFetch)\n      .then(() => {\n        setLoading(false);\n        doToast({\n          message: __('Password successfully changed!'),\n        });\n        push(`/`);\n      })\n      .catch((error) => {\n        setLoading(false);\n        setError(error.message);\n      });\n  }\n\n  function handleRestart() {\n    doClearEmailEntry();\n    push(`/$/${PAGES.AUTH_SIGNIN}`);\n  }\n\n  return (\n    <section className=\"main__sign-in\">\n      <Card\n        title={__('Choose a new password')}\n        subtitle={__('Setting a new password for %email%', { email })}\n        actions={\n          <div>\n            <Form onSubmit={handleSubmit} className=\"section\">\n              <FormField\n                autoFocus\n                type=\"password\"\n                name=\"password_set\"\n                label={__('New Password')}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n\n              <div className=\"section__actions\">\n                <Button\n                  button=\"primary\"\n                  type=\"submit\"\n                  label={loading ? __('Updating Password') : __('Update Password')}\n                  disabled={!password || loading}\n                />\n                <Button button=\"link\" label={__('Cancel')} onClick={handleRestart} />\n                {loading && <Spinner type=\"small\" />}\n              </div>\n            </Form>\n          </div>\n        }\n        nag={error && <Nag type=\"error\" relative message={<ErrorText>{error}</ErrorText>} />}\n      />\n    </section>\n  );\n}\n\nexport default UserPasswordReset;\n","import { connect } from 'react-redux';\nimport { doClearEmailEntry, doUserFetch } from 'redux/actions/user';\nimport { doToast } from 'redux/actions/notifications';\nimport UserSignIn from './view';\n\nconst select = state => ({\n  // passwordSetSuccess: selectPasswordSetSuccess(state),\n  // passwordSetIsPending: selectPasswordSetIsPending(state),\n  // passwordSetError: selectPasswordSetError(state),\n});\n\nexport default connect(select, {\n  doToast,\n  doClearEmailEntry,\n  doUserFetch,\n})(UserSignIn);\n","import PasswordSetPage from './view';\n\nexport default PasswordSetPage;\n","// @flow\nimport React from 'react';\nimport UserPasswordSet from 'component/userPasswordSet';\nimport Page from 'component/page';\n\nexport default function PasswordSetPage() {\n  return (\n    <Page authPage>\n      <UserPasswordSet />\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","doClearEmailEntry","doToast","doUserFetch","_useHistory","useHistory","location","push","urlParams","URLSearchParams","search","email","get","authToken","verificationToken","_React$useState2","password","setPassword","_React$useState4","error","setError","_React$useState6","loading","setLoading","Card","Form","onSubmit","Lbryio","verification_token","then","auth_token","new_password","message","FormField","autoFocus","type","name","label","value","onChange","target","disabled","concat","PAGES","Spinner","Nag","relative","ErrorText","connect","state","UserSignIn","Page","authPage","UserPasswordSet"],"sourceRoot":""}