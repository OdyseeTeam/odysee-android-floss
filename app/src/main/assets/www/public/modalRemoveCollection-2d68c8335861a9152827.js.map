{"version":3,"file":"modalRemoveCollection-2d68c8335861a9152827.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/modal/modalRemoveCollection/view.jsx","webpack://odysee.com/../ui/modal/modalRemoveCollection/index.js"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Modal } from 'modal/modal';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  collectionId: string,\n  simplify?: boolean,\n  // --- redux ---\n  hasClaim: boolean,\n  collectionName: string,\n  redirect: ?string,\n  collectionKey: ?string,\n  doHideModal: () => void,\n  doCollectionDelete: (id: string, collectionKey: ?string, keepPrivate: boolean) => void,\n};\n\nfunction ModalRemoveCollection(props: Props) {\n  const { simplify, hasClaim, collectionId, collectionName, redirect, collectionKey, doHideModal, doCollectionDelete } =\n    props;\n\n  const { replace } = useHistory();\n\n  const [confirmName, setConfirmName] = useState('');\n  const [keepPrivate, setKeepPrivate] = useState(false);\n\n  function getBody() {\n    if (simplify) {\n      return (\n        <>\n          <p>{__('This will permanently delete the list.')}</p>\n          <p>{`\"${collectionName}\"`}</p>\n        </>\n      );\n    } else {\n      return hasClaim ? (\n        <>\n          <p>{__('This will permanently delete the list.')}</p>\n          <p>{__('Type \"%list_name%\" to confirm.', { list_name: collectionName })}</p>\n          <FormField\n            value={confirmName}\n            type={'text'}\n            onChange={(e) => setConfirmName(e.target.value)}\n            style={{ marginBottom: 'var(--spacing-s)' }}\n          />\n          <FormField\n            name=\"keep-private\"\n            type=\"checkbox\"\n            label={__('Delete publish but keep private playlist')}\n            checked={keepPrivate}\n            onChange={() => setKeepPrivate((prev) => !prev)}\n          />\n        </>\n      ) : (\n        <I18nMessage tokens={{ title: <cite>{`\"${collectionName}\"`}</cite> }}>\n          Are you sure you'd like to delete %title%?\n        </I18nMessage>\n      );\n    }\n  }\n\n  return (\n    <Modal isOpen contentLabel={__('Confirm Playlist Unpublish')} type=\"card\" onAborted={doHideModal}>\n      <Card\n        title={__('Delete Playlist')}\n        body={\n          <>\n            {getBody()}\n            <p className=\"help error__text\">{__('This action is permanent and cannot be undone')}</p>\n          </>\n        }\n        actions={\n          <div className=\"section__actions\">\n            <Button\n              button=\"primary\"\n              label={__('Delete')}\n              disabled={!simplify && hasClaim && collectionName !== confirmName}\n              onClick={() => {\n                if (redirect) replace(redirect);\n                doCollectionDelete(collectionId, hasClaim ? undefined : collectionKey, keepPrivate);\n                doHideModal();\n              }}\n            />\n            <Button button=\"link\" label={__('Cancel')} onClick={doHideModal} />\n          </div>\n        }\n      />\n    </Modal>\n  );\n}\n\nexport default ModalRemoveCollection;\n","import { connect } from 'react-redux';\nimport { selectHasClaimForId } from 'redux/selectors/claims';\nimport { doCollectionDelete } from 'redux/actions/collections';\nimport {\n  selectCollectionTitleForId,\n  selectCollectionKeyForId,\n  selectCollectionIsMine,\n} from 'redux/selectors/collections';\nimport { doHideModal } from 'redux/actions/app';\nimport ModalRemoveCollection from './view';\n\nconst select = (state, props) => {\n  const { collectionId } = props;\n\n  return {\n    hasClaim: selectHasClaimForId(state, collectionId),\n    collectionIsMine: selectCollectionIsMine(state, collectionId),\n    collectionName: selectCollectionTitleForId(state, collectionId),\n    collectionKey: selectCollectionKeyForId(state, collectionId),\n  };\n};\n\nconst perform = {\n  doHideModal,\n  doCollectionDelete,\n};\n\nexport default connect(select, perform)(ModalRemoveCollection);\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","simplify","hasClaim","collectionId","collectionName","redirect","collectionKey","doHideModal","doCollectionDelete","replace","useHistory","confirmName","setConfirmName","_useState4","keepPrivate","setKeepPrivate","Modal","isOpen","contentLabel","type","onAborted","Card","concat","list_name","FormField","value","onChange","target","marginBottom","name","label","checked","prev","I18nMessage","tokens","disabled","perform","connect","state","selectHasClaimForId","collectionIsMine","selectCollectionIsMine","selectCollectionTitleForId","selectCollectionKeyForId","ModalRemoveCollection"],"sourceRoot":""}