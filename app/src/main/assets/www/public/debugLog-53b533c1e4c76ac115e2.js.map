{"version":3,"file":"debugLog-53b533c1e4c76ac115e2.js","mappings":"o8CAiFA,QAtEA,SAAkBA,GAChB,IAAQC,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,gBAE2BC,EAAAC,EAArBC,EAAAA,UAAe,GAAM,GAAtCC,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GACuBK,EAAAJ,EAAjBC,EAAAA,SAAe,GAAE,GAApCI,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAiDtB,OAPAH,EAAAA,WAAgB,WACVI,IAAUR,EAASU,SACrBD,EAAST,EAASU,QAClBJ,GAAQ,GAEZ,GAAG,CAACE,EAAOR,IAGTI,EAAAA,cAAA,OAAKO,UAAWC,IAAW,YAAa,CAAE,kBAAmBP,KAC1DL,EAASa,KAAI,SAACC,EAAGC,GAAK,OACrBX,EAAAA,cAAA,OAAKO,UAAU,mBAAmBK,IAAKD,IAlDrBE,EAmDAH,aAlDCI,OAAyB,WAAhBC,EAAOF,GAAoBb,EAAAA,cAAA,SAAIa,EAAKG,SAAehB,EAAAA,cAAA,SAAIa,GAGzF,SAAqBA,GACnB,IAAII,EAGJ,GAAIJ,aAAgBC,OAASD,EAAKI,MAChC,GAAIJ,EAAKI,iBAAiBH,MACxBG,EAAQJ,EAAKI,MAAMC,gBAEnB,IACED,EAAQE,KAAKC,UAAUP,EAAKI,MAAO,KAAM,EAC3C,CAAE,MAAAI,GAAO,CAIb,OAAOJ,EAAQjB,EAAAA,cAAA,WAAMiB,GAAe,IACtC,CAiCSK,CAAYZ,GA/BrB,SAA2BG,GACzB,GAAIA,aAAgBC,OAASD,EAAKU,MAAO,CACvC,IACMC,EAD0BX,EAAKU,MAAME,MAAM,MACXC,QAAO,SAAChB,GAC5C,QACGA,EAAEiB,WAAW,YACbjB,EAAEkB,SAAS,kBACXlB,EAAEkB,SAAS,gBACXlB,EAAEkB,SAAS,cACXlB,EAAEkB,SAAS,YACXlB,EAAEkB,SAAS,mBACXlB,EAAEkB,SAAS,yBAEhB,IAEA,OAAO5B,EAAAA,cAAA,WAAMwB,EAAMK,MAAM,EAAG,GAAGC,KAAK,MACtC,CACF,CAeSC,CAAkBrB,IArD3B,IAAwBG,CAsDZ,IAERb,EAAAA,cAAA,OAAKO,UAAU,sBACbP,EAAAA,cAACgC,EAAAA,QAAM,CAACC,OAAO,OAAOC,MAAO,QAASC,QAAS,kBAAMtC,GAAiB,IACtEG,EAAAA,cAACgC,EAAAA,QAAM,CAACC,OAAO,YAAYC,MAAO,IAAKC,QAAS,kBAAMjC,GAAQ,EAAM,KAI5E,E,0BCtEMkC,EAAU,CACdvC,gBAAAA,EAAAA,IAGF,SAAewC,EAAAA,EAAAA,KARA,SAACC,GAAK,MAAM,CACzB1C,UAAU2C,EAAAA,EAAAA,IAAeD,GAC1B,GAM8BF,EAA/B,CAAwCI,E","sources":["webpack://odysee.com/../ui/component/debugLog/view.jsx","webpack://odysee.com/../ui/component/debugLog/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport classnames from 'classnames';\nimport Button from 'component/button';\nimport './style.lazy.scss';\n\ntype Props = {\n  debugLog: Array<string | Error>,\n  doClearDebugLog: () => void,\n};\n\nfunction DebugLog(props: Props) {\n  const { debugLog, doClearDebugLog } = props;\n\n  const [show, setShow] = React.useState(false);\n  const [count, setCount] = React.useState(0);\n\n  function getMessageElem(info: string | Error) {\n    return info instanceof Error || typeof info === 'object' ? <p>{info.message}</p> : <p>{info}</p>;\n  }\n\n  function getDataElem(info: string | Error) {\n    let cause;\n\n    // $FlowFixMe\n    if (info instanceof Error && info.cause) {\n      if (info.cause instanceof Error) {\n        cause = info.cause.toString();\n      } else {\n        try {\n          cause = JSON.stringify(info.cause, null, 2);\n        } catch {}\n      }\n    }\n\n    return cause ? <pre>{cause}</pre> : null;\n  }\n\n  function getStackTraceElem(info: string | Error) {\n    if (info instanceof Error && info.stack) {\n      const allLines: Array<string> = info.stack.split('\\n');\n      const lines: Array<string> = allLines.filter((x) => {\n        return (\n          !x.startsWith('Error: ') &&\n          !x.includes('ui/asserts.js') &&\n          !x.includes('at doAssert') &&\n          !x.includes('at assert') &&\n          !x.includes('at eval') &&\n          !x.includes('/node_modules/') &&\n          !x.includes('bindActionCreators.js')\n        );\n      });\n\n      return <pre>{lines.slice(0, 3).join('\\n')}</pre>;\n    }\n  }\n\n  React.useEffect(() => {\n    if (count !== debugLog.length) {\n      setCount(debugLog.length);\n      setShow(true);\n    }\n  }, [count, debugLog]);\n\n  return (\n    <div className={classnames('debug-log', { 'debug-log--open': show })}>\n      {debugLog.map((x, index) => (\n        <div className=\"debug-log__entry\" key={index}>\n          {getMessageElem(x)}\n          {getDataElem(x)}\n          {getStackTraceElem(x)}\n        </div>\n      ))}\n      <div className=\"debug-log__actions\">\n        <Button button=\"link\" label={'Clear'} onClick={() => doClearDebugLog()} />\n        <Button button=\"secondary\" label={'X'} onClick={() => setShow(false)} />\n      </div>\n    </div>\n  );\n}\n\nexport default DebugLog;\n","import { connect } from 'react-redux';\nimport DebugLog from './view';\nimport { doClearDebugLog } from 'redux/actions/notifications';\nimport { selectDebugLog } from 'redux/selectors/notifications';\n\nconst select = (state) => ({\n  debugLog: selectDebugLog(state),\n});\n\nconst perform = {\n  doClearDebugLog,\n};\n\nexport default connect(select, perform)(DebugLog);\n"],"names":["props","debugLog","doClearDebugLog","_React$useState2","_slicedToArray","React","show","setShow","_React$useState4","count","setCount","length","className","classnames","map","x","index","key","info","Error","_typeof","message","cause","toString","JSON","stringify","_unused","getDataElem","stack","lines","split","filter","startsWith","includes","slice","join","getStackTraceElem","Button","button","label","onClick","perform","connect","state","selectDebugLog","DebugLog"],"sourceRoot":""}