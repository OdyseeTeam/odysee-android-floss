{"version":3,"file":"modalAutoGenerateThumbnail-e9c37019be8caa362379.js","mappings":"4PAqGA,QAxFA,SAAoCA,GAClC,IAEIC,EAFIC,EAA4CF,EAA5CE,WAAYC,EAAgCH,EAAhCG,SAAUC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,UAChCC,GAAYC,EAAAA,EAAAA,UA2DlB,SAASC,IACPH,EAAU,CAAEI,SAAS,EAAMC,QAASC,EAAG,6CACzC,CAEA,OA5DEV,EADsB,iBAAbE,GACES,EAAAA,EAAAA,IAAqBT,GAErBU,IAAIC,gBAAgBX,GA2D/BY,EAAAA,cAACC,EAAAA,GAAK,CACJC,QAAM,EACNC,MAAOP,EAAG,oBACVQ,aAAcR,EAAG,4BACjBS,KAAK,UACLC,mBAAoBV,EAAG,UACvBW,YA9DJ,WACE,IAAMC,EAAc,SAACC,GACnB,IAAMC,EAmBV,SAAyBD,GACvB,IAAME,EAASpB,EAAUqB,QACzB,IAAKD,EACH,OAGF,IAAME,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQL,EAAOM,WACtBJ,EAAOK,OAASP,EAAOQ,YACPN,EAAOO,WAAW,MAC1BC,UAAUV,EAAQ,EAAG,EAAGE,EAAOG,MAAOH,EAAOK,QACrD,IAAMI,EAAUT,EAAOU,UAAU,aAAcd,GACzCe,EAAUF,EAAQG,QAAQ,2BAA4B,IAE5D,OADAZ,EAAOa,SACAC,EAAOC,KAAKJ,EAAS,SAC9B,CAlCwBK,CAAgBpB,GAGpC,MAAO,CAAEC,YAAAA,EAAaoB,KADT,IAAIC,KAAK,CAACrB,GAAc,iBAAkB,CAAEL,KAAM,eAEjE,EAEI2B,EAAMxB,EAAY,GAClBwB,EAAIF,MAAQE,EAAIF,KAAKG,KAAOC,EAAAA,iCAC9BF,EAAMxB,EAAY,KAGhBwB,EAAItB,aACNrB,EAAO2C,EAAIF,MACX3C,KAEAM,GAEJ,EA4CI0C,UAAWhD,GAEXa,EAAAA,cAAA,KAAGoC,UAAU,qBAAqBxC,EAAG,2DAA2D,KAChGI,EAAAA,cAAA,SACEoC,UAAU,4BACVC,IAAK9C,EACL+C,IAAKpD,EACLqD,iBAhCN,WACE,IAAM5B,EAASpB,EAAUqB,QACzB,GAAKD,EAAL,CAIA,IACMM,EAAaN,EAAOM,WACpBE,EAAcR,EAAOQ,YAC3BR,EAAOK,MAHY,IAInBL,EAAOO,OAASsB,KAAKC,MAAMtB,GAJR,IAIoCF,GANvD,CAOF,EAsBMxB,QAASA,EACTiD,UAAQ,IAIhB,ECvFA,SAAeC,EAAAA,EAAAA,IAAQ,MANP,SAACC,GAAQ,MAAM,CAC7BzD,WAAY,kBAAMyD,GAASC,EAAAA,EAAAA,MAAc,EACzCxD,OAAQ,SAACyC,GAAI,OAAKc,GAASE,EAAAA,EAAAA,IAAkB,KAAMhB,EAAM,KAAM,KAAM,aAAa,EAClFxC,UAAW,SAACyD,GAAO,OAAKH,GAASI,EAAAA,EAAAA,IAAQD,GAAS,EACnD,GAED,CAAsCE,E","sources":["webpack://odysee.com/../ui/modal/modalAutoGenerateThumbnail/view.jsx","webpack://odysee.com/../ui/modal/modalAutoGenerateThumbnail/index.js"],"sourcesContent":["// @flow\nimport React, { useRef } from 'react';\nimport { Modal } from 'modal/modal';\nimport { formatFileSystemPath } from 'util/url';\nimport { THUMBNAIL_CDN_SIZE_LIMIT_BYTES } from 'config';\n\ntype Props = {\n  upload: (WebFile) => void,\n  filePath: string,\n  closeModal: () => void,\n  showToast: ({}) => void,\n};\n\nfunction ModalAutoGenerateThumbnail(props: Props) {\n  const { closeModal, filePath, upload, showToast } = props;\n  const playerRef = useRef();\n  let videoSrc;\n  if (typeof filePath === 'string') {\n    videoSrc = formatFileSystemPath(filePath);\n  } else {\n    videoSrc = URL.createObjectURL(filePath);\n  }\n\n  function uploadImage() {\n    const generateImg = (quality: number) => {\n      const imageBuffer = captureSnapshot(quality);\n      // $FlowFixMe\n      const file = new File([imageBuffer], 'thumbnail.jpeg', { type: 'image/jpeg' });\n      return { imageBuffer, file };\n    };\n\n    let img = generateImg(1.0);\n    if (img.file && img.file.size > THUMBNAIL_CDN_SIZE_LIMIT_BYTES) {\n      img = generateImg(0.8);\n    }\n\n    if (img.imageBuffer) {\n      upload(img.file);\n      closeModal();\n    } else {\n      onError();\n    }\n  }\n\n  function captureSnapshot(quality: number): ?Buffer {\n    const player = playerRef.current;\n    if (!player) {\n      return;\n    }\n\n    const canvas = document.createElement('canvas');\n    canvas.width = player.videoWidth;\n    canvas.height = player.videoHeight;\n    const context = canvas.getContext('2d');\n    context.drawImage(player, 0, 0, canvas.width, canvas.height);\n    const dataURL = canvas.toDataURL('image/jpeg', quality);\n    const rawData = dataURL.replace(/data:image\\/\\w+;base64,/i, '');\n    canvas.remove();\n    return Buffer.from(rawData, 'base64');\n  }\n\n  function resize(): void {\n    const player = playerRef.current;\n    if (!player) {\n      return;\n    }\n\n    const fixedWidth = 450;\n    const videoWidth = player.videoWidth;\n    const videoHeight = player.videoHeight;\n    player.width = fixedWidth;\n    player.height = Math.floor(videoHeight * (fixedWidth / videoWidth));\n  }\n\n  function onError(): void {\n    showToast({ isError: true, message: __(\"Something didn't work. Please try again.\") });\n  }\n\n  return (\n    <Modal\n      isOpen\n      title={__('Upload thumbnail')}\n      contentLabel={__('Confirm Thumbnail Upload')}\n      type=\"confirm\"\n      confirmButtonLabel={__('Upload')}\n      onConfirmed={uploadImage}\n      onAborted={closeModal}\n    >\n      <p className=\"section__subtitle\">{__('Pause at any time to select a thumbnail from your video')}.</p>\n      <video\n        className=\"video-thumbnail-generator\"\n        ref={playerRef}\n        src={videoSrc}\n        onLoadedMetadata={resize}\n        onError={onError}\n        controls\n      />\n    </Modal>\n  );\n}\n\nexport default ModalAutoGenerateThumbnail;\n","import { connect } from 'react-redux';\nimport { doHideModal } from 'redux/actions/app';\nimport { doUploadThumbnail } from 'redux/actions/publish';\nimport { doToast } from 'redux/actions/notifications';\nimport ModalAutoGenerateThumbnail from './view';\n\nconst perform = (dispatch) => ({\n  closeModal: () => dispatch(doHideModal()),\n  upload: (file) => dispatch(doUploadThumbnail(null, file, null, null, 'Generated')),\n  showToast: (options) => dispatch(doToast(options)),\n});\n\nexport default connect(null, perform)(ModalAutoGenerateThumbnail);\n"],"names":["props","videoSrc","closeModal","filePath","upload","showToast","playerRef","useRef","onError","isError","message","__","formatFileSystemPath","URL","createObjectURL","React","Modal","isOpen","title","contentLabel","type","confirmButtonLabel","onConfirmed","generateImg","quality","imageBuffer","player","current","canvas","document","createElement","width","videoWidth","height","videoHeight","getContext","drawImage","dataURL","toDataURL","rawData","replace","remove","Buffer","from","captureSnapshot","file","File","img","size","THUMBNAIL_CDN_SIZE_LIMIT_BYTES","onAborted","className","ref","src","onLoadedMetadata","Math","floor","controls","connect","dispatch","doHideModal","doUploadThumbnail","options","doToast","ModalAutoGenerateThumbnail"],"sourceRoot":""}