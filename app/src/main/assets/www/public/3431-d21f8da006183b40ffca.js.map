{"version":3,"file":"3431-d21f8da006183b40ffca.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/expandable.jsx","webpack://odysee.com/../ui/component/comment/view.jsx","webpack://odysee.com/../ui/component/comment/index.js","webpack://odysee.com/../ui/component/commentReactions/index.js","webpack://odysee.com/../ui/component/commentReactions/view.jsx","webpack://odysee.com/../ui/component/commentsReplies/index.js","webpack://odysee.com/../ui/component/commentsReplies/view.jsx","webpack://odysee.com/../ui/component/common/card.jsx"],"sourcesContent":["// @flow\nimport React from 'react';\nimport classnames from 'classnames';\nimport Button from 'component/button';\n\nimport { ExpandableContext } from 'contexts/expandable';\nimport { useOnResize } from 'effects/use-on-resize';\n\nconst COLLAPSED_HEIGHT = 220;\n\ntype Props = {\n  children: React$Node | Array<React$Node>,\n};\n\nexport default function Expandable(props: Props) {\n  const { children } = props;\n  // $FlowIgnore\n  const { props: childProps } = children;\n  const containsImage = childProps && childProps.content && childProps.content.includes('![');\n\n  const ref = React.useRef();\n\n  const [expanded, setExpanded] = React.useState(false);\n  const [disabled, disableExpanded] = React.useState(false);\n  const [childRect, setRect] = React.useState();\n\n  const childOverflows = childRect && childRect.height > COLLAPSED_HEIGHT;\n\n  function handleClick() {\n    setExpanded(!expanded);\n  }\n\n  // Update the rect when children changes,\n  // this is needed when there is an image or claim embed\n  // to be loaded ! :D\n  React.useLayoutEffect(() => {\n    if (ref.current) {\n      const childElem = ref.current.children[0];\n      setRect(childElem.getBoundingClientRect());\n    }\n  }, [children]);\n\n  const expandableRef = React.useCallback((node) => {\n    if (node) {\n      const childElem = node.children[0];\n      setRect(childElem.getBoundingClientRect());\n      ref.current = node;\n    }\n  }, []);\n\n  // Update the childRect initially & when the window size changes.\n  useOnResize(() => expandableRef(ref.current));\n\n  return (\n    <ExpandableContext.Provider value={{ setExpanded, disableExpanded }}>\n      <div\n        className={classnames('expandable', {\n          'expandable--open': expanded,\n          'expandable--closed-fade': !expanded && (childOverflows || containsImage),\n        })}\n        ref={expandableRef}\n      >\n        {children}\n      </div>\n\n      {(childOverflows || containsImage) && !disabled && (\n        <Button\n          button=\"link\"\n          className=\"expandable__button\"\n          label={expanded ? __('Less') : __('More')}\n          onClick={handleClick}\n        />\n      )}\n    </ExpandableContext.Provider>\n  );\n}\n","/**\n * Comment component.\n *\n * Notes:\n * - Filtration is not done at this component level. Comments are filtered\n *   in the selector through `filterComments()`. This saves the need to handle\n *   it from the render loop, but also means we cannot render it differently\n *   (e.g. displaying as \"Comment has been blocked\") since the component doesn't\n *   see it.\n */\n\n// @flow\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport * as KEYCODES from 'constants/keycodes';\nimport { COMMENT_HIGHLIGHTED } from 'constants/classnames';\nimport { INLINE_PLAYER_WRAPPER_CLASS } from 'constants/player';\nimport {\n  SORT_BY,\n  COMMENT_PAGE_SIZE_REPLIES,\n  LINKED_COMMENT_QUERY_PARAM,\n  THREAD_COMMENT_QUERY_PARAM,\n} from 'constants/comment';\nimport { FF_MAX_CHARS_IN_COMMENT } from 'constants/form-field';\nimport { SITE_NAME, SIMPLE_SITE, ENABLE_COMMENT_REACTIONS } from 'config';\nimport React, { useEffect, useState } from 'react';\nimport { parseURI } from 'util/lbryURI';\nimport DateTime from 'component/dateTime';\nimport Button from 'component/button';\nimport Expandable from 'component/common/expandable';\nimport MarkdownPreview from 'component/common/markdown-preview';\nimport CommentBadge from 'component/common/comment-badge';\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport { Menu, MenuButton } from '@reach/menu-button';\nimport Icon from 'component/common/icon';\nimport { FormField, Form } from 'component/common/form';\nimport classnames from 'classnames';\nimport usePersistedState from 'effects/use-persisted-state';\nimport CommentReactions from 'component/commentReactions';\nimport CommentsReplies from 'component/commentsReplies';\nimport { useHistory } from 'react-router';\nimport CommentMenuList from 'component/commentMenuList';\nimport CreditAmount from 'component/common/credit-amount';\nimport OptimizedImage from 'component/optimizedImage';\nimport { getChannelFromClaim } from 'util/claim';\nimport { parseSticker } from 'util/comments';\nimport { useIsMobile } from 'effects/use-screensize';\nimport MembershipBadge from 'component/membershipBadge';\nimport Spinner from 'component/spinner';\nimport { lazyImport } from 'util/lazyImport';\n\nconst CommentCreate = lazyImport(() => import('component/commentCreate' /* webpackChunkName: \"comments\" */));\n\n// ****************************************************************************\n// ****************************************************************************\n\nexport type Props = {|\n  comment: Comment,\n  uri?: string,\n  forceDisplayDeadComment?: boolean,\n  linkedCommentId?: string,\n  threadCommentId?: ?string,\n  isTopLevel?: boolean,\n  hideActions?: boolean,\n  hideContextMenu?: boolean,\n  supportDisabled?: boolean,\n  setQuickReply?: (any) => void,\n  quickReply?: any,\n  threadLevel?: number,\n  threadDepthLevel?: number,\n  disabled?: boolean,\n|};\n\ntype StateProps = {|\n  fetchedReplies: Array<Comment>,\n  othersReacts: ?{ like: number, dislike: number },\n  linkedCommentAncestors: { [string]: Array<string> },\n  totalReplyPages: number,\n  repliesFetching: boolean,\n  activeChannelClaim: ?ChannelClaim,\n  claim: StreamClaim,\n  authorTitle: ?string,\n  channelAge?: any,\n  myChannelIds: ?Array<string>,\n  hasChannels: boolean,\n  odyseeMembership: ?string,\n  creatorMembership: ?string,\n  commentingEnabled: boolean,\n  playingUri: PlayingUri,\n  stakedLevel: number,\n|};\n\ntype DispatchProps = {|\n  doClearPlayingUri: () => void,\n  doClearPlayingSource: () => void,\n  updateComment: (string, string) => void,\n  fetchReplies: (string, string, number, number, number) => void,\n  doToast: (ToastParams) => void,\n|};\n\n// ****************************************************************************\n// Comment\n// ****************************************************************************\n\nfunction CommentView(props: Props & StateProps & DispatchProps) {\n  const {\n    comment,\n    myChannelIds,\n    forceDisplayDeadComment = false,\n    doClearPlayingUri,\n    claim,\n    uri,\n    updateComment,\n    fetchReplies,\n    totalReplyPages,\n    linkedCommentId,\n    threadCommentId,\n    linkedCommentAncestors,\n    commentingEnabled,\n    hasChannels,\n    doToast,\n    isTopLevel,\n    hideActions,\n    hideContextMenu,\n    othersReacts,\n    playingUri,\n    stakedLevel,\n    supportDisabled,\n    setQuickReply,\n    quickReply,\n    odyseeMembership,\n    creatorMembership,\n    fetchedReplies,\n    repliesFetching,\n    threadLevel = 0,\n    threadDepthLevel = 0,\n    doClearPlayingSource,\n    authorTitle,\n    channelAge,\n    disabled,\n  } = props;\n\n  const commentElemRef = React.useRef();\n\n  const {\n    channel_url: authorUri,\n    channel_name: author,\n    channel_id: channelId,\n    comment_id: commentId,\n    comment: message,\n    is_fiat: isFiat,\n    is_global_mod: isGlobalMod,\n    is_moderator: isModerator,\n    is_pinned: isPinned,\n    support_amount: supportAmount,\n    replies: numDirectReplies,\n    timestamp,\n  } = comment;\n  const claimName = authorTitle || author;\n\n  const timePosted = timestamp * 1000;\n  const commentIsMine = channelId && myChannelIds && myChannelIds.includes(channelId);\n\n  const isMobile = useIsMobile();\n  const ROUGH_HEADER_HEIGHT = isMobile ? 56 : 60; // @see: --header-height\n\n  const lastThreadLevel = threadDepthLevel - 1;\n  // Mobile: 0, 1, 2 -> new thread....., so each 3 comments\n  const openNewThread = threadLevel > 0 && threadLevel % lastThreadLevel === 0;\n\n  const {\n    push,\n    replace,\n    location: { pathname, search },\n  } = useHistory();\n\n  const urlParams = new URLSearchParams(search);\n  const isLinkedComment = linkedCommentId && linkedCommentId === commentId;\n  const isThreadComment = threadCommentId && threadCommentId === commentId;\n  const isInLinkedCommentChain =\n    linkedCommentId &&\n    linkedCommentAncestors[linkedCommentId] &&\n    linkedCommentAncestors[linkedCommentId].includes(commentId);\n  const showRepliesOnMount = isThreadComment || isInLinkedCommentChain || (threadLevel === 0 && !!comment.replies);\n\n  const [isReplying, setReplying] = React.useState(false);\n  const [isEditing, setEditing] = useState(false);\n  const [editedMessage, setCommentValue] = useState(message);\n  const [charCount, setCharCount] = useState(editedMessage.length);\n  const [showReplies, setShowReplies] = useState(showRepliesOnMount);\n  const [page, setPage] = useState(showRepliesOnMount ? 1 : 0);\n  const [advancedEditor] = usePersistedState('comment-editor-mode', false);\n  const [displayDeadComment, setDisplayDeadComment] = React.useState(forceDisplayDeadComment);\n  const likesCount = (othersReacts && othersReacts.like) || 0;\n  const dislikesCount = (othersReacts && othersReacts.dislike) || 0;\n  const totalLikesAndDislikes = likesCount + dislikesCount;\n  const contentChannelClaim = getChannelFromClaim(claim);\n  const commentByOwnerOfContent = contentChannelClaim && contentChannelClaim.permanent_url === authorUri;\n  const slimedToDeath =\n    !commentByOwnerOfContent && totalLikesAndDislikes >= 5 && dislikesCount / totalLikesAndDislikes > 0.8;\n  const stickerFromMessage = parseSticker(message);\n\n  const isSprout = channelAge && Math.round((new Date() - channelAge) / (1000 * 60 * 60 * 24)) < 7;\n\n  let channelOwnerOfContent;\n  try {\n    if (uri) {\n      const { channelName } = parseURI(uri);\n      if (channelName) {\n        channelOwnerOfContent = channelName;\n      }\n    }\n  } catch (e) {}\n\n  useEffect(() => {\n    if (isEditing) {\n      setCharCount(editedMessage.length);\n\n      // a user will try and press the escape key to cancel editing their comment\n      const handleEscape = (event) => {\n        if (event.keyCode === KEYCODES.ESCAPE) {\n          setEditing(false);\n        }\n      };\n\n      window.addEventListener('keydown', handleEscape);\n\n      // removes the listener so it doesn't cause problems elsewhere in the app\n      return () => {\n        window.removeEventListener('keydown', handleEscape);\n      };\n    }\n  }, [author, authorUri, editedMessage, isEditing, setEditing]);\n\n  useEffect(() => {\n    if (uri && page > 0) {\n      fetchReplies(uri, commentId, page, COMMENT_PAGE_SIZE_REPLIES, SORT_BY.OLDEST);\n    }\n  }, [page, uri, commentId, fetchReplies]);\n\n  function handleEditMessageChanged(event) {\n    setCommentValue(!SIMPLE_SITE && advancedEditor ? event : event.target.value);\n  }\n\n  function handleEditComment(isEditing: boolean) {\n    if (playingUri.source === 'comment' && commentElemRef.current) {\n      const claimLink = commentElemRef.current.querySelector(`.${INLINE_PLAYER_WRAPPER_CLASS}`);\n\n      if (isEditing && playingUri.sourceId === claimLink?.id) {\n        doClearPlayingUri();\n      } else {\n        doClearPlayingSource();\n      }\n    }\n\n    setEditing(isEditing);\n  }\n\n  function handleSubmit() {\n    updateComment(commentId, editedMessage);\n    if (setQuickReply) setQuickReply({ ...quickReply, comment_id: commentId, comment: editedMessage });\n    setEditing(false);\n    doClearPlayingSource();\n  }\n\n  function handleCommentReply() {\n    if (!hasChannels) {\n      push(`/$/${PAGES.CHANNEL_NEW}?redirect=${pathname}`);\n      doToast({ message: __('A channel is required to comment on %SITE_NAME%', { SITE_NAME }) });\n    } else {\n      setReplying(!isReplying);\n    }\n    doClearPlayingSource();\n  }\n\n  function handleTimeClick() {\n    urlParams.set(LINKED_COMMENT_QUERY_PARAM, commentId);\n    replace(`${pathname}?${urlParams.toString()}`);\n  }\n\n  function handleOpenNewThread() {\n    urlParams.set(LINKED_COMMENT_QUERY_PARAM, commentId);\n    urlParams.set(THREAD_COMMENT_QUERY_PARAM, commentId);\n    console.log('THREAD_COMMENT_QUERY_PARAM: ', THREAD_COMMENT_QUERY_PARAM);\n    console.log('commentId: ', commentId);\n    console.log('pathname: ', pathname);\n    console.log('urlParams: ', urlParams.toString());\n    if (window.cordova) {\n      window.odysee.functions.history.push({ pathname: pathname, search: urlParams.toString() });\n    } else {\n      push({ pathname, search: urlParams.toString() });\n    }\n  }\n\n  const handleShowMore = React.useCallback(() => setPage((prev) => prev + 1), []);\n\n  const linkedCommentRef = React.useCallback(\n    (node) => {\n      if (node) commentElemRef.current = node;\n      if (node !== null && window.pendingLinkedCommentScroll) {\n        delete window.pendingLinkedCommentScroll;\n\n        const mobileChatElem = document.querySelector('.MuiPaper-root .card--enable-overflow');\n        const elem = (isMobile && mobileChatElem) || window;\n\n        if (elem) {\n          // $FlowFixMe\n          elem.scrollTo({\n            // $FlowFixMe\n            top: node.getBoundingClientRect().top + (mobileChatElem ? 0 : elem.scrollY) - ROUGH_HEADER_HEIGHT,\n            left: 0,\n            behavior: 'smooth',\n          });\n        }\n      }\n    },\n    [ROUGH_HEADER_HEIGHT, isMobile]\n  );\n\n  return (\n    <li\n      className={classnames('comment', {\n        'comment--top-level': isTopLevel,\n        'comment--reply': !isTopLevel,\n      })}\n      id={commentId}\n    >\n      <div className=\"comment__thumbnail-wrapper\">\n        {authorUri ? (\n          <ChannelThumbnail uri={authorUri} xsmall className=\"comment__author-thumbnail\" checkMembership={false} />\n        ) : (\n          <ChannelThumbnail xsmall className=\"comment__author-thumbnail\" checkMembership={false} />\n        )}\n\n        {numDirectReplies > 0 && showReplies && (\n          <Button className=\"comment__threadline\" aria-label=\"Hide Replies\" onClick={() => setShowReplies(false)} />\n        )}\n      </div>\n\n      <div className=\"comment__content\" ref={isLinkedComment || isThreadComment ? linkedCommentRef : commentElemRef}>\n        <div\n          className={classnames('comment__body-container', {\n            [COMMENT_HIGHLIGHTED]: isLinkedComment || (isThreadComment && !linkedCommentId),\n            'comment--slimed': slimedToDeath && !displayDeadComment,\n          })}\n        >\n          <div className=\"comment__meta\">\n            <div className=\"comment__meta-information\">\n              {!author ? (\n                <span className=\"comment__author\">{__('Anonymous')}</span>\n              ) : (\n                <Menu>\n                  <MenuButton\n                    className={classnames('button--uri-indicator comment__author', {\n                      'comment__author--creator': commentByOwnerOfContent,\n                    })}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    {claimName}\n                  </MenuButton>\n\n                  <CommentMenuList\n                    uri={uri}\n                    commentId={commentId}\n                    authorUri={authorUri}\n                    commentIsMine={commentIsMine}\n                    isPinned={isPinned}\n                    isTopLevel={isTopLevel}\n                    isUserLabel\n                    handleEditComment={() => handleEditComment(true)}\n                    setQuickReply={setQuickReply}\n                    className={classnames('comment__author', {\n                      'comment__author--creator': commentByOwnerOfContent,\n                    })}\n                  />\n                </Menu>\n              )}\n              {isSprout && <CommentBadge label={__('Sprout')} icon={ICONS.BADGE_SPROUT} size={14} />}\n              {isGlobalMod && <CommentBadge label={__('Admin')} icon={ICONS.BADGE_ADMIN} />}\n              {isModerator && <CommentBadge label={__('Moderator')} icon={ICONS.BADGE_MOD} />}\n              {odyseeMembership && <MembershipBadge membershipName={odyseeMembership} linkPage />}\n              {creatorMembership && <MembershipBadge membershipName={creatorMembership} linkPage uri={uri} />}\n              <Button\n                className=\"comment__time\"\n                onClick={handleTimeClick}\n                label={<DateTime date={timePosted} timeAgo />}\n              />\n\n              {supportAmount > 0 && <CreditAmount isFiat={isFiat} amount={supportAmount} superChatLight size={12} />}\n\n              {isPinned && (\n                <span className=\"comment__pin\">\n                  <Icon icon={ICONS.PIN} size={14} />\n                  {channelOwnerOfContent\n                    ? __('Pinned by @%channel%', { channel: channelOwnerOfContent })\n                    : __('Pinned by creator')}\n                </span>\n              )}\n            </div>\n            {!hideContextMenu && (\n              <div className=\"comment__menu\">\n                <Menu>\n                  <MenuButton className=\"menu__button\">\n                    <Icon size={18} icon={ICONS.MORE_VERTICAL} />\n                  </MenuButton>\n                  <CommentMenuList\n                    uri={uri}\n                    isTopLevel={isTopLevel}\n                    isPinned={isPinned}\n                    commentId={commentId}\n                    authorUri={authorUri}\n                    commentIsMine={commentIsMine}\n                    handleEditComment={() => handleEditComment(true)}\n                    supportAmount={supportAmount}\n                    setQuickReply={setQuickReply}\n                  />\n                </Menu>\n              </div>\n            )}\n          </div>\n          <div>\n            {isEditing ? (\n              <Form onSubmit={handleSubmit}>\n                <FormField\n                  className=\"comment__edit-input\"\n                  type={!SIMPLE_SITE && advancedEditor ? 'markdown' : 'textarea'}\n                  name=\"editing_comment\"\n                  value={editedMessage}\n                  charCount={charCount}\n                  onChange={handleEditMessageChanged}\n                  textAreaMaxLength={FF_MAX_CHARS_IN_COMMENT}\n                  handleSubmit={handleSubmit}\n                />\n                <div className=\"section__actions section__actions--no-margin\">\n                  <Button\n                    button=\"primary\"\n                    type=\"submit\"\n                    label={__('Done')}\n                    requiresAuth={IS_WEB}\n                    disabled={message === editedMessage}\n                  />\n                  <Button button=\"link\" label={__('Cancel')} onClick={() => handleEditComment(false)} />\n                </div>\n              </Form>\n            ) : (\n              <>\n                <div className=\"comment__message\">\n                  {slimedToDeath && !displayDeadComment ? (\n                    <div onClick={() => setDisplayDeadComment(true)} className=\"comment__dead\">\n                      {__('This comment was slimed to death. (Click to view)')} <Icon icon={ICONS.SLIME_ACTIVE} />\n                    </div>\n                  ) : stickerFromMessage ? (\n                    <div className=\"sticker__comment\">\n                      <OptimizedImage src={stickerFromMessage.url} waitLoad loading=\"lazy\" />\n                    </div>\n                  ) : (\n                    <Expandable>\n                      <MarkdownPreview\n                        content={message}\n                        promptLinks\n                        parentCommentId={commentId}\n                        stakedLevel={stakedLevel}\n                        hasMembership={Boolean(odyseeMembership)}\n                      />\n                    </Expandable>\n                  )}\n                </div>\n\n                {!hideActions && (\n                  <div className={classnames('comment__actions', { 'comment__actions--disabled': disabled })}>\n                    <Button\n                      requiresAuth={IS_WEB}\n                      label={commentingEnabled ? __('Reply') : __('Log in to reply')}\n                      className=\"comment__action\"\n                      onClick={handleCommentReply}\n                      icon={ICONS.REPLY}\n                      iconSize={isMobile && 12}\n                    />\n                    {ENABLE_COMMENT_REACTIONS && <CommentReactions uri={uri} commentId={commentId} />}\n                  </div>\n                )}\n\n                {numDirectReplies > 0 && !hideActions && (\n                  <div className={classnames('comment__actions', { 'comment__actions--disabled': disabled })}>\n                    {!showReplies ? (\n                      openNewThread ? (\n                        <Button\n                          label={__('Continue Thread')}\n                          button=\"link\"\n                          onClick={handleOpenNewThread}\n                          iconRight={ICONS.ARROW_RIGHT}\n                        />\n                      ) : (\n                        <Button\n                          label={\n                            numDirectReplies < 2\n                              ? __('Show reply')\n                              : __('Show %count% replies', { count: numDirectReplies })\n                          }\n                          button=\"link\"\n                          onClick={() => {\n                            setShowReplies(true);\n                            if (page === 0) {\n                              setPage(1);\n                            }\n                          }}\n                          iconRight={ICONS.DOWN}\n                        />\n                      )\n                    ) : (\n                      <Button\n                        label={__('Hide replies')}\n                        button=\"link\"\n                        onClick={() => setShowReplies(false)}\n                        iconRight={ICONS.UP}\n                      />\n                    )}\n                  </div>\n                )}\n\n                {isReplying && (\n                  <CommentCreate\n                    isReply\n                    uri={uri}\n                    parentId={commentId}\n                    onDoneReplying={() => {\n                      if (openNewThread) {\n                        handleOpenNewThread();\n                      } else {\n                        setShowReplies(true);\n                      }\n                      setReplying(false);\n                    }}\n                    onCancelReplying={() => {\n                      setReplying(false);\n                    }}\n                    supportDisabled={supportDisabled}\n                  />\n                )}\n              </>\n            )}\n          </div>\n        </div>\n\n        {showReplies &&\n          (repliesFetching && (!fetchedReplies || fetchedReplies.length === 0) ? (\n            <div className=\"empty empty--centered-tight\">\n              <Spinner type=\"small\" />\n            </div>\n          ) : (\n            <CommentsReplies\n              threadLevel={threadLevel}\n              uri={uri}\n              parentId={commentId}\n              linkedCommentId={linkedCommentId}\n              threadCommentId={threadCommentId}\n              numDirectReplies={numDirectReplies}\n              onShowMore={handleShowMore}\n              hasMore={page < totalReplyPages}\n              threadDepthLevel={threadDepthLevel}\n            />\n          ))}\n      </div>\n    </li>\n  );\n}\n\nexport default CommentView;\n","// @flow\nimport type { Props } from './view';\nimport CommentView from './view';\nimport { connect } from 'react-redux';\nimport {\n  selectStakedLevelForChannelUri,\n  selectClaimForUri,\n  selectHasChannels,\n  selectMyClaimIdsRaw,\n  selectTitleForUri,\n  selectDateForUri,\n} from 'redux/selectors/claims';\nimport { doCommentUpdate, doCommentList } from 'redux/actions/comments';\nimport { doToast } from 'redux/actions/notifications';\nimport { doClearPlayingUri, doClearPlayingSource } from 'redux/actions/content';\nimport {\n  selectFetchedCommentAncestors,\n  selectOthersReactsForComment,\n  makeSelectTotalReplyPagesForParentId,\n  selectIsFetchingCommentsForParentId,\n  selectRepliesForParentId,\n} from 'redux/selectors/comments';\nimport {\n  selectOdyseeMembershipForChannelId,\n  selectMembershipForCreatorOnlyIdAndChannelId,\n} from 'redux/selectors/memberships';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport { selectPlayingUri } from 'redux/selectors/content';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\nimport { getChannelIdFromClaim } from 'util/claim';\n\nconst select = (state, props) => {\n  const { comment, uri } = props;\n  const { comment_id, channel_url, channel_id } = comment || {};\n\n  const activeChannelClaim = selectActiveChannelClaim(state);\n  const activeChannelId = activeChannelClaim && activeChannelClaim.claim_id;\n  const reactionKey = activeChannelId ? `${comment_id}:${activeChannelId}` : comment_id;\n\n  const claim = selectClaimForUri(state, uri);\n  const creatorId = getChannelIdFromClaim(claim);\n  const channelAge = selectDateForUri(state, channel_url);\n\n  return {\n    myChannelIds: selectMyClaimIdsRaw(state),\n    claim,\n    commentingEnabled: Boolean(selectUserVerifiedEmail(state)),\n    othersReacts: selectOthersReactsForComment(state, reactionKey),\n    activeChannelClaim,\n    hasChannels: selectHasChannels(state),\n    playingUri: selectPlayingUri(state),\n    stakedLevel: selectStakedLevelForChannelUri(state, channel_url),\n    linkedCommentAncestors: selectFetchedCommentAncestors(state),\n    totalReplyPages: makeSelectTotalReplyPagesForParentId(comment_id)(state),\n    odyseeMembership: selectOdyseeMembershipForChannelId(state, channel_id) || '',\n    creatorMembership: selectMembershipForCreatorOnlyIdAndChannelId(state, creatorId || '', channel_id) || '',\n    repliesFetching: selectIsFetchingCommentsForParentId(state, comment_id),\n    fetchedReplies: selectRepliesForParentId(state, comment_id),\n    authorTitle: channel_url ? selectTitleForUri(state, channel_url) : null,\n    channelAge,\n  };\n};\n\nconst perform = {\n  doClearPlayingUri,\n  doClearPlayingSource,\n  updateComment: doCommentUpdate,\n  fetchReplies: doCommentList,\n  doToast,\n};\n\nexport default connect<_, Props, _, _, _, _>(select, perform)(CommentView);\n","import { connect } from 'react-redux';\nimport CommentReactions from './view';\nimport { selectClaimIsMine, selectClaimForUri } from 'redux/selectors/claims';\nimport { doResolveUri } from 'redux/actions/claims';\nimport { doToast } from 'redux/actions/notifications';\nimport { selectMyReactsForComment, selectOthersReactsForComment } from 'redux/selectors/comments';\nimport { doCommentReact } from 'redux/actions/comments';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\n\nconst select = (state, props) => {\n  const activeChannelClaim = selectActiveChannelClaim(state);\n  const activeChannelId = activeChannelClaim && activeChannelClaim.claim_id;\n  const reactionKey = activeChannelId ? `${props.commentId}:${activeChannelId}` : props.commentId;\n  const claim = selectClaimForUri(state, props.uri);\n\n  return {\n    claim,\n    claimIsMine: selectClaimIsMine(state, claim),\n    myReacts: selectMyReactsForComment(state, reactionKey),\n    othersReacts: selectOthersReactsForComment(state, reactionKey),\n    activeChannelId,\n  };\n};\n\nconst perform = (dispatch) => ({\n  resolve: (uri) => dispatch(doResolveUri(uri)),\n  react: (commentId, type) => dispatch(doCommentReact(commentId, type)),\n  doToast: (params) => dispatch(doToast(params)),\n});\n\nexport default connect(select, perform)(CommentReactions);\n","// @flow\nimport { ENABLE_CREATOR_REACTIONS, SIMPLE_SITE } from 'config';\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport * as REACTION_TYPES from 'constants/reactions';\nimport React from 'react';\nimport classnames from 'classnames';\nimport Button from 'component/button';\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport { useHistory } from 'react-router';\nimport { useIsMobile } from 'effects/use-screensize';\n\ntype Props = {\n  myReacts: Array<string>,\n  othersReacts: any,\n  react: (string, string) => void,\n  commentId: string,\n  pendingCommentReacts: Array<string>,\n  claimIsMine: boolean,\n  activeChannelId: ?string,\n  uri: string,\n  claim: ?ChannelClaim,\n  doToast: ({ message: string }) => void,\n  hideCreatorLike: boolean,\n  resolve: (string) => void,\n};\n\nexport default function CommentReactions(props: Props) {\n  const {\n    myReacts,\n    othersReacts,\n    commentId,\n    react,\n    claimIsMine,\n    uri,\n    claim,\n    activeChannelId,\n    doToast,\n    hideCreatorLike,\n    resolve,\n  } = props;\n  const {\n    push,\n    location: { pathname },\n  } = useHistory();\n\n  const isMobile = useIsMobile();\n\n  React.useEffect(() => {\n    if (!claim) {\n      resolve(uri);\n    }\n  }, [claim, resolve, uri]);\n\n  const canCreatorReact =\n    claim &&\n    claimIsMine &&\n    (claim.value_type === 'channel'\n      ? claim.claim_id === activeChannelId\n      : claim.signing_channel && claim.signing_channel.claim_id === activeChannelId);\n  const authorUri =\n    claim && claim.value_type === 'channel'\n      ? claim.canonical_url\n      : claim && claim.signing_channel && claim.signing_channel.canonical_url;\n\n  const getCountForReact = (type) => {\n    let count = 0;\n    if (othersReacts && othersReacts[type]) {\n      count += othersReacts[type];\n    }\n    if (myReacts && myReacts.includes(type)) {\n      count += 1;\n    }\n    return count;\n  };\n  const shouldHide = !canCreatorReact && hideCreatorLike;\n  const creatorLiked = getCountForReact(REACTION_TYPES.CREATOR_LIKE) > 0;\n  const likeIcon = SIMPLE_SITE\n    ? myReacts && myReacts.includes(REACTION_TYPES.LIKE)\n      ? ICONS.FIRE_ACTIVE\n      : ICONS.FIRE\n    : ICONS.UPVOTE;\n  const dislikeIcon = SIMPLE_SITE\n    ? myReacts && myReacts.includes(REACTION_TYPES.DISLIKE)\n      ? ICONS.SLIME_ACTIVE\n      : ICONS.SLIME\n    : ICONS.DOWNVOTE;\n\n  function handleCommentLike() {\n    if (activeChannelId) {\n      react(commentId, REACTION_TYPES.LIKE);\n    } else {\n      promptForChannel();\n    }\n  }\n\n  function handleCommentDislike() {\n    if (activeChannelId) {\n      react(commentId, REACTION_TYPES.DISLIKE);\n    } else {\n      promptForChannel();\n    }\n  }\n\n  function promptForChannel() {\n    push(`/$/${PAGES.CHANNEL_NEW}?redirect=${pathname}&lc=${commentId}`);\n    doToast({ message: __('A channel is required to throw fire and slime') });\n  }\n\n  return (\n    <>\n      <Button\n        requiresAuth={IS_WEB}\n        title={__('Upvote')}\n        icon={likeIcon}\n        iconSize={isMobile && 12}\n        className={classnames('comment__action button-like', {\n          'comment__action--active': myReacts && myReacts.includes(REACTION_TYPES.LIKE),\n        })}\n        onClick={handleCommentLike}\n        label={<span className=\"comment__reaction-count\">{getCountForReact(REACTION_TYPES.LIKE)}</span>}\n      />\n      <Button\n        requiresAuth={IS_WEB}\n        title={__('Downvote')}\n        icon={dislikeIcon}\n        iconSize={isMobile && 12}\n        className={classnames('comment__action button-dislike', {\n          'comment__action--active': myReacts && myReacts.includes(REACTION_TYPES.DISLIKE),\n        })}\n        onClick={handleCommentDislike}\n        label={<span className=\"comment__reaction-count\">{getCountForReact(REACTION_TYPES.DISLIKE)}</span>}\n      />\n\n      {!shouldHide && ENABLE_CREATOR_REACTIONS && (canCreatorReact || creatorLiked) && (\n        <Button\n          disabled={!canCreatorReact || !claimIsMine}\n          requiresAuth={IS_WEB}\n          title={claimIsMine ? __('You loved this') : __('Creator loved this')}\n          icon={creatorLiked ? ICONS.CREATOR_LIKE : ICONS.SUBSCRIBE}\n          className={classnames('comment__action comment__action--creator-like')}\n          onClick={() => react(commentId, REACTION_TYPES.CREATOR_LIKE)}\n        >\n          {creatorLiked && (\n            <ChannelThumbnail xsmall uri={authorUri} hideStakedIndicator className=\"comment__creator-like\" allowGifs />\n          )}\n        </Button>\n      )}\n    </>\n  );\n}\n","// @flow\nimport type { Props } from './view';\nimport CommentsReplies from './view';\nimport { connect } from 'react-redux';\nimport { selectIsFetchingCommentsForParentId, selectRepliesForParentId } from 'redux/selectors/comments';\n\nconst select = (state, props) => {\n  const { parentId } = props;\n\n  return {\n    fetchedReplies: selectRepliesForParentId(state, parentId),\n    isFetching: selectIsFetchingCommentsForParentId(state, parentId),\n  };\n};\n\nexport default connect<_, Props, _, _, _, _>(select, {})(CommentsReplies);\n","// @flow\nimport Button from 'component/button';\nimport CommentView from 'component/comment';\nimport React from 'react';\nimport Spinner from 'component/spinner';\n\n// ****************************************************************************\n// ****************************************************************************\n\nexport type Props = {|\n  uri?: string,\n  parentId: CommentId,\n  linkedCommentId?: string,\n  threadCommentId?: ?string,\n  numDirectReplies: number, // Total replies for parentId as reported by 'comment[replies]'. Includes blocked items.\n  hasMore: boolean,\n  supportDisabled?: boolean,\n  threadDepthLevel?: number,\n  onShowMore?: () => void,\n  threadLevel: number,\n|};\n\ntype StateProps = {|\n  fetchedReplies: Array<Comment>,\n  isFetching: boolean,\n|};\n\ntype DispatchProps = {||};\n\n// ****************************************************************************\n// CommentsReplies\n// ****************************************************************************\n\nexport default function CommentsReplies(props: Props & StateProps & DispatchProps) {\n  const {\n    uri,\n    fetchedReplies,\n    linkedCommentId,\n    threadCommentId,\n    numDirectReplies,\n    hasMore,\n    supportDisabled,\n    threadDepthLevel,\n    onShowMore,\n    threadLevel,\n    isFetching,\n  } = props;\n\n  return !numDirectReplies ? null : (\n    <div className=\"comment__replies-container\">\n      <ul className=\"comment__replies\">\n        {fetchedReplies.map((comment) => (\n          <CommentView\n            key={comment.comment_id}\n            uri={uri}\n            comment={comment}\n            linkedCommentId={linkedCommentId}\n            threadCommentId={threadCommentId}\n            supportDisabled={supportDisabled}\n            threadLevel={threadLevel + 1}\n            threadDepthLevel={threadDepthLevel}\n          />\n        ))}\n      </ul>\n\n      {fetchedReplies.length > 0 &&\n        hasMore &&\n        (isFetching ? (\n          <span className=\"comment__actions--nested comment__replies-loading--more\">\n            <Spinner text={__('Loading')} type=\"small\" />\n          </span>\n        ) : (\n          <div className=\"comment__actions--nested\">\n            <Button\n              button=\"link\"\n              label={__('Show more')}\n              onClick={() => onShowMore && onShowMore()}\n              className=\"button--uri-indicator\"\n            />\n          </div>\n        ))}\n    </div>\n  );\n}\n","// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n"],"names":["COLLAPSED_HEIGHT","Expandable","props","children","childProps","containsImage","content","includes","ref","React","_React$useState2","_slicedToArray","expanded","setExpanded","_React$useState4","disabled","disableExpanded","_React$useState6","childRect","setRect","childOverflows","height","current","childElem","getBoundingClientRect","expandableRef","node","useOnResize","ExpandableContext","value","className","classnames","Button","button","label","__","onClick","CommentCreate","lazyImport","_classnames","channelOwnerOfContent","comment","myChannelIds","_props$forceDisplayDe","forceDisplayDeadComment","doClearPlayingUri","claim","uri","updateComment","fetchReplies","totalReplyPages","linkedCommentId","threadCommentId","linkedCommentAncestors","commentingEnabled","hasChannels","doToast","isTopLevel","hideActions","hideContextMenu","othersReacts","playingUri","stakedLevel","supportDisabled","setQuickReply","quickReply","odyseeMembership","creatorMembership","fetchedReplies","repliesFetching","_props$threadLevel","threadLevel","_props$threadDepthLev","threadDepthLevel","doClearPlayingSource","authorTitle","channelAge","commentElemRef","authorUri","channel_url","author","channel_name","channelId","channel_id","commentId","comment_id","message","isFiat","is_fiat","isGlobalMod","is_global_mod","isModerator","is_moderator","isPinned","is_pinned","supportAmount","support_amount","numDirectReplies","replies","claimName","timePosted","timestamp","commentIsMine","isMobile","useIsMobile","ROUGH_HEADER_HEIGHT","openNewThread","_useHistory","useHistory","push","replace","_useHistory$location","location","pathname","search","urlParams","URLSearchParams","isLinkedComment","isThreadComment","isInLinkedCommentChain","showRepliesOnMount","isReplying","setReplying","_useState2","useState","isEditing","setEditing","_useState4","editedMessage","setCommentValue","_useState6","length","charCount","setCharCount","_useState8","showReplies","setShowReplies","_useState10","page","setPage","advancedEditor","usePersistedState","displayDeadComment","setDisplayDeadComment","likesCount","like","dislikesCount","dislike","totalLikesAndDislikes","contentChannelClaim","getChannelFromClaim","commentByOwnerOfContent","permanent_url","slimedToDeath","stickerFromMessage","parseSticker","isSprout","Math","round","Date","channelName","parseURI","e","_handleEditComment","source","claimLink","querySelector","concat","INLINE_PLAYER_WRAPPER_CLASS","sourceId","id","handleSubmit","_objectSpread","handleOpenNewThread","set","LINKED_COMMENT_QUERY_PARAM","THREAD_COMMENT_QUERY_PARAM","console","log","toString","window","cordova","odysee","functions","history","useEffect","handleEscape","event","keyCode","KEYCODES","addEventListener","removeEventListener","COMMENT_PAGE_SIZE_REPLIES","SORT_BY","handleShowMore","prev","linkedCommentRef","pendingLinkedCommentScroll","mobileChatElem","document","elem","scrollTo","top","scrollY","left","behavior","ChannelThumbnail","xsmall","checkMembership","_defineProperty","COMMENT_HIGHLIGHTED","Menu","MenuButton","stopPropagation","CommentMenuList","isUserLabel","handleEditComment","CommentBadge","icon","ICONS","size","MembershipBadge","membershipName","linkPage","DateTime","date","timeAgo","CreditAmount","amount","superChatLight","Icon","channel","Form","onSubmit","FormField","type","SIMPLE_SITE","name","onChange","target","textAreaMaxLength","FF_MAX_CHARS_IN_COMMENT","requiresAuth","IS_WEB","OptimizedImage","src","url","waitLoad","loading","MarkdownPreview","promptLinks","parentCommentId","hasMembership","Boolean","PAGES","SITE_NAME","iconSize","ENABLE_COMMENT_REACTIONS","CommentReactions","iconRight","count","isReply","parentId","onDoneReplying","onCancelReplying","CommentsReplies","onShowMore","hasMore","Spinner","perform","doCommentUpdate","doCommentList","connect","state","_ref","activeChannelClaim","selectActiveChannelClaim","activeChannelId","claim_id","reactionKey","selectClaimForUri","creatorId","getChannelIdFromClaim","selectDateForUri","selectMyClaimIdsRaw","selectUserVerifiedEmail","selectOthersReactsForComment","selectHasChannels","selectPlayingUri","selectStakedLevelForChannelUri","selectFetchedCommentAncestors","makeSelectTotalReplyPagesForParentId","selectOdyseeMembershipForChannelId","selectMembershipForCreatorOnlyIdAndChannelId","selectIsFetchingCommentsForParentId","selectRepliesForParentId","selectTitleForUri","CommentView","claimIsMine","selectClaimIsMine","myReacts","selectMyReactsForComment","dispatch","resolve","doResolveUri","react","doCommentReact","params","_doToast","hideCreatorLike","canCreatorReact","value_type","signing_channel","canonical_url","getCountForReact","shouldHide","creatorLiked","REACTION_TYPES","likeIcon","dislikeIcon","promptForChannel","title","ENABLE_CREATOR_REACTIONS","hideStakedIndicator","allowGifs","isFetching","map","key","text","FirstPaneWrapper","singlePane","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","locked","status","unlocked","purchased","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","expandable","undefined","role","style","sectionIcon"],"sourceRoot":""}