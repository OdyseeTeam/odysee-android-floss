{"version":3,"file":"modalBlockChannel-f8bfbf324e0bd055708b.js","mappings":"svCA+KA,IAAMA,EAAmB,SAACC,GACxB,IAAQC,EAAyBD,EAAzBC,WAAYC,EAAaF,EAAbE,SAEpB,OAAOD,EAAaC,EAAWC,EAAAA,cAAA,OAAKC,UAAU,oBAAoBF,EACpE,EAUMG,EAAe,SAACL,GACpB,IAAQM,EAAoDN,EAApDM,YAAaC,EAAuCP,EAAvCO,WAAYL,EAA2BF,EAA3BE,SAAUM,EAAiBR,EAAjBQ,aAerCC,EAAkB,SAACC,GACvB,OACEP,EAAAA,cAACQ,EAAAA,EAAO,CAACC,MAAOC,EAAG,mCACjBV,EAAAA,cAAA,OACEC,UAAWU,IAAW,2BAA4B,CAChDC,OAAuB,WAAfL,EAAIM,OACZC,SAAyB,aAAfP,EAAIM,OACdE,UAA0B,cAAfR,EAAIM,UAGjBb,EAAAA,cAACgB,EAAAA,QAAI,CAACC,KAAqB,WAAfV,EAAIM,OAAsBK,EAAAA,KAAaA,EAAAA,UAI3D,EAqBA,OAAOf,EACLH,EAAAA,cAAA,MAAIC,UAAU,eACXI,GAAgBL,EAAAA,cAACM,EAAe,CAACO,OAAQR,IAC1CL,EAAAA,cAAA,QAAMmB,wBAAyB,CAAEC,OAZrC,SAAqBrB,GACnB,IAAK,IAAIsB,KAAStB,SAAe,QAAPuB,EAARvB,EAAUF,aAAK,IAAAyB,OAAP,EAARA,EAAiBvB,SAAU,KAAAuB,EAAAC,EACeC,EAA1D,GAAgD,iBAArCzB,SAAe,QAAPwB,EAARxB,EAAUF,aAAK,IAAA0B,OAAP,EAARA,EAAiBxB,SAASsB,IACnC,OAAOtB,SAAe,QAAPyB,EAARzB,EAAUF,aAAK,IAAA2B,OAAP,EAARA,EAAiBzB,SAASsB,EAErC,CACA,OAAOtB,CACT,CAK6C0B,CAAY1B,OAGvDC,EAAAA,cAAA,MAAIC,UAAWU,IAAW,cAAe,CAAE,qBAAsBP,KAAgBL,EAErF,EAEA,QArNA,SAAcF,GACZ,IACEY,EAwBEZ,EAxBFY,MACAiB,EAuBE7B,EAvBF6B,SACAC,EAsBE9B,EAtBF8B,aACAC,EAqBE/B,EArBF+B,GACAC,EAoBEhC,EApBFgC,KACAC,EAmBEjC,EAnBFiC,QACAb,EAkBEpB,EAlBFoB,KACAhB,EAiBEJ,EAjBFI,UAAS8B,EAiBPlC,EAhBFM,YAAAA,OAAW,IAAA4B,GAAQA,EAAAC,EAgBjBnC,EAfFoC,WAAAA,OAAU,IAAAD,GAAQA,EAAAE,EAehBrC,EAbFO,WAAAA,OAAU,IAAA8B,GAAQA,EAClBC,EAYEtC,EAZFsC,cACAC,EAWEvC,EAXFuC,IACAC,EAUExC,EAVFyC,QACAvC,EASEF,EATFE,SACAwC,EAQE1C,EARF0C,WACAC,EAOE3C,EAPF2C,WACAC,EAME5C,EANF4C,WACAC,EAKE7C,EALF6C,gBACA5C,EAIED,EAJFC,WACA6C,EAGE9C,EAHF8C,cACAtC,EAEER,EAFFQ,aACAuC,EACE/C,EADF+C,WAGqDC,EAAAC,GAAvBC,EAAAA,EAAAA,UAASZ,GAAc,GAAhDa,EAAQH,EAAA,GAAEI,EAAWJ,EAAA,GACtBK,OAA+BC,IAAlBhB,EAEnB,OACEnC,EAAAA,cAAA,WACEoD,KAAMf,EAAU,cAAWc,EAC3BlD,UAAWU,IAAWV,EAAW,OAAQ,CACvC,mBAAoBoD,QAAQd,GAC5B,mBAAoBE,IAEtBb,GAAIA,EACJU,QAAS,SAACgB,GACJjB,IACFA,IACAiB,EAAEC,kBAEN,GAECb,GACC1C,EAAAA,cAAA,OACEC,UAAU,aACVuD,MAAO,CACLd,gBACE,uEAAyEA,EAAkB,OAInG1C,EAAAA,cAACJ,EAAgB,CAACE,WAAYA,IAC1BW,GAASiB,IACT1B,EAAAA,cAAA,OACEC,UAAWU,IAAW,wBAAyB,CAC7C,qBAAsB6B,EACtB,qBAAsBI,KAGxB5C,EAAAA,cAAA,OAAKC,UAAWU,IAAW,sBAAuB,CAAE,iCAAkCsB,KACnFhB,GAAQjB,EAAAA,cAACgB,EAAAA,QAAI,CAACyC,aAAW,EAACxC,KAAMA,IAEjCjB,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAACE,EAAY,CAACC,YAAaA,EAAaC,WAAYA,EAAYC,aAAcA,GAC3EI,GAGFiB,GACC1B,EAAAA,cAAA,OAAKC,UAAWU,IAAW,iBAAkB,CAAE,wBAAyBP,KACrEsB,MAMPC,GAAgBuB,IAChBlD,EAAAA,cAAA,OAAKC,UAAU,iCACZ0B,GACC3B,EAAAA,cAAA,OACEC,UAAWU,IAAW,sBAAuB,CAC3C,6BAA8BP,KAG/BuB,GAGJuB,GACClD,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,MACP,gBAAeX,EACf,aAAuBtC,EAAXsC,EAAc,OAAa,QACvC/B,KAAM+B,EAAW9B,EAAAA,SAAiBA,EAAAA,IAClCoB,QAAS,kBAAMW,GAAaD,EAAS,MAO9CL,KAIFO,GAAeA,GAAcF,IAC9BhD,EAAAA,cAAAA,EAAAA,SAAA,KACG6B,GACC7B,EAAAA,cAAA,OACEC,UAAWU,IAAW,aAAc,CAClC,wBAAyBF,IAAUiB,EACnC,mBAAoBO,KAGrBJ,GAGJC,GAAW9B,EAAAA,cAAA,OAAKC,UAAU,sBAAsB6B,GAChD/B,GAAYC,EAAAA,cAAA,OAAKC,UAAU,sBAAsBF,IAIrDqC,GAGFG,GAAcvC,EAAAA,cAAA,OAAKC,UAAU,qBAAqBsC,GAGzD,C,kDCxKA,IAAIqB,EAAa,4DAsDjB,SAASC,EAAMC,EAAI,GAAIC,EAAO,MAC5B,IAAIC,EAAS,KAQb,OANAF,GAAOA,EAAI,IAAIG,QAAQ,gBAAiB,SACpCA,QAAQL,GAAY,SAASM,EAAGC,EAAGC,IACrCA,EAAQC,EAAUD,MACPJ,GAAUA,GAAU,GAAKM,WAAWH,EAAG,IAAMC,EAC1D,IAEOJ,GAAWA,GAAUK,EAAUN,IAAW,EACnD,CAEA,SAASM,EAAUP,GACjB,OAAOD,EAAMC,IAAQD,EAAMC,EAAIS,cAAcN,QAAQ,KAAM,IAC7D,CA7DAJ,EAAMW,WACNX,EAAMY,GAAK,KAEXZ,EAAM,MACNA,EAAM,MACNA,EAAMa,GACNb,EAAMc,YAAc,KAEpBd,EAAMe,YACNf,EAAMgB,GACNhB,EAAM,IAAM,EAEZA,EAAMiB,OACNjB,EAAMkB,IACNlB,EAAMmB,EAAe,IAAXnB,EAAMgB,GAEhBhB,EAAMoB,OACNpB,EAAMqB,IACNrB,EAAMsB,EAAc,GAAVtB,EAAMmB,EAEhBnB,EAAMuB,KACNvB,EAAMwB,GACNxB,EAAMyB,EAAc,GAAVzB,EAAMsB,EAEhBtB,EAAM0B,IACN1B,EAAM2B,EAAc,GAAV3B,EAAMyB,EAEhBzB,EAAM4B,KACN5B,EAAM6B,GACN7B,EAAM8B,EAAc,EAAV9B,EAAM2B,EAEhB3B,EAAM+B,MACN/B,EAAMgC,EACI,QAAVhC,EAAM2B,EAEN3B,EAAMiC,KACNjC,EAAMkC,GACNlC,EAAMmC,EAAc,OAAVnC,EAAM2B,EA0BhB,U,klCC7DA,IAAMS,EAAU,sGACVC,EAA+B,OCRrC,QDqBe,SAA2BrG,GACxC,IAAQsG,EAAyFtG,EAAzFsG,KAAMC,EAAmFvG,EAAnFuG,MAAOC,EAA4ExG,EAA5EwG,YAAaC,EAA+DzG,EAA/DyG,SAAUC,EAAqD1G,EAArD0G,MAAOC,EAA8C3G,EAA9C2G,SAAUC,EAAoC5G,EAApC4G,UAAWC,EAAyB7G,EAAzB6G,qBACtBC,EAAA7D,EAAlB9C,EAAAA,UAAgB,GAAE,GAA3C4G,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACsBG,EAAAhE,EAAlB9C,EAAAA,SAAe,IAAG,GAA3C+G,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAyC5B,OAvCA9G,EAAAA,WAAgB,WACd,IAAMiH,EAAqB,SAACC,IACR,IAAdN,GACFC,GAAa,GAEXE,IAAaG,GACfF,EAAYE,GAEdT,GAAW,EACb,EAEMU,EAAmB,SAACC,GACpBA,IAAYR,IACdC,EAAYO,GACZX,EAAUW,IAERL,GACFC,EAAY,GAEhB,EAEA,GAAKT,EAAL,CAKA,IAAMa,EAAUC,EAAcd,EAAO,KACrC,GAAIe,OAAOC,UAAUH,IAAYA,EAAU,EAErCA,GADQV,GAAwBR,GAElCe,EAAmBvG,EAAG,4BAEtByG,EAAiBC,QAGnBH,EAAmBvG,EAAG,qBAXxB,MAFEyG,GAAkB,EAetB,GAAG,CAACZ,EAAOK,EAAUG,EAAUL,EAAsBD,IAGnDzG,EAAAA,cAACwH,EAAAA,GAAS,CACRrB,KAAMA,EACNsB,KAAK,OACLnB,SAAUA,EACVF,MACEpG,EAAAA,cAAAA,EAAAA,SAAA,KACGoG,GAAS1F,EAAG,2CACbV,EAAAA,cAACgB,EAAAA,QAAI,CAAC0G,kBAAmBhH,EAAGuF,GAAUhG,UAAU,aAAagB,KAAMC,EAAAA,KAAYyG,SAAO,EAACC,KAAM,MAGjGvB,YAAaA,GAAe,+BAC5BE,MAAOA,EACPC,SAAUA,EACVqB,MAAOd,GAGb,C,iyCEvEA,IAAMe,EAAM,CACVC,SAAU,WACVC,UAAW,YACXC,MAAO,SAGHC,EAAQ,CACZC,UAAW,YACXC,QAAS,WCZX,IAUMC,EAAU,CACdC,YAAAA,EAAAA,GACAC,kBAAAA,EAAAA,GACAC,yBAAAA,EAAAA,GACAC,6BAAAA,EAAAA,IAGF,SAAeC,EAAAA,EAAAA,KAjBA,SAACC,EAAO9I,GACrB,IAAM+I,GAAeC,EAAAA,EAAAA,IAAkBF,EAAO9I,EAAMiJ,YACpD,MAAO,CACLC,oBAAoBC,EAAAA,EAAAA,IAAyBL,GAC7CC,aAAAA,EACAK,oBAAoBC,EAAAA,EAAAA,IAAkBP,EAAOC,GAC7CO,0BAA0BC,EAAAA,EAAAA,IAA+BT,GAE7D,GAS+BN,EAA/B,EDwBe,SAA2BxI,GACxC,IA0G6BwJ,EAzG3BC,EAUEzJ,EAVFyJ,aACAC,EASE1J,EATF0J,mBACAR,EAQElJ,EARFkJ,mBACAH,EAOE/I,EAPF+I,aACAK,EAMEpJ,EANFoJ,mBACAE,EAKEtJ,EALFsJ,yBACAb,EAIEzI,EAJFyI,YACAC,EAGE1I,EAHF0I,kBACAC,EAEE3I,EAFF2I,yBACAC,EACE5I,EADF4I,6BAGIe,GAAsBC,EAAAA,EAAAA,IAAoBb,GAC1Cc,EAAsBX,GAAsBI,EAAyBJ,EAAmBY,UACxFC,EAAuBb,GAAsBW,GAAuBA,EAAoBG,OACxFC,EACJf,GACAS,GACAE,GACAK,OAAOC,OAAON,EAAoBO,YAAYC,SAASV,EAAoBG,UAECQ,EAAArH,GAAxDsH,EAAAA,EAAAA,GAAkB,wBAAyBtC,EAAIC,UAAS,GAAvEsC,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GACiFI,EAAAzH,GAAjEsH,EAAAA,EAAAA,GAAkB,8BAA+BlC,EAAMC,WAAU,GAA5FqC,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACoEG,EAAA5H,GAA1DsH,EAAAA,EAAAA,GAAkB,iCAAkC,OAAM,GAA3FO,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACkB/D,EAAA7D,EAAlB9C,EAAAA,UAAgB,GAAE,GAA/C6K,EAAUlE,EAAA,GAAEmE,EAAanE,EAAA,GAE1BoE,GAAwBjB,IAA6BF,EACrDoB,EAAiB/B,GAAsBa,EACvCmB,EAAsBT,IAActC,EAAME,SAAWyC,EAAa,EAuBxE,SAASK,EAAW3E,EAAOH,GACzB,OACEpG,EAAAA,cAAC0D,EAAAA,QAAM,CACLyH,IAAK5E,EACLH,MAAO1F,EAAG0F,GACVzC,OAAO,MACPrB,QAAS,kBAAMgI,EAAO/D,EAAM,EAC5BtG,UAAWU,IAAW,gBAAiB,CAAE,wBAAyB0J,IAAQ9D,KAGhF,CAmBA,SAAS6E,EAAiB7E,EAAOH,GAA6C,IAAtCE,EAAQ+E,UAAAC,OAAA,QAAAnI,IAAAkI,UAAA,IAAAA,UAAA,GAAUE,EAAaF,UAAAC,OAAA,QAAAnI,IAAAkI,UAAA,GAAAA,UAAA,GAAG,GACxE,OACErL,EAAAA,cAACwH,EAAAA,GAAS,CACRC,KAAK,QACLtB,KAAMI,EACN4E,IAAK5E,EACLH,MAAmC1F,EAA5B4F,GAAYiF,EAAmBA,EAAoBnF,GAC1DE,SAAUA,EACVkF,QAAShB,IAAcjE,EACvBC,SAAU,kBAAMiE,EAAalE,EAAM,GAGzC,CA8DA,OAxHAvG,EAAAA,WAAgB,YAEZ+K,GACCV,IAAQvC,EAAIE,YAAc8B,GAC1BO,IAAQvC,EAAIG,QAAU2B,IAEvBU,EAAOxC,EAAIC,UAGRiD,GAAkBR,IAActC,EAAME,SACzCqC,EAAavC,EAAMC,UAEvB,GAAG,IA4GC4C,IAAyBC,GAE3BzC,EAAkBe,EAAcC,GAChCjB,IACO,MAIPtI,EAAAA,cAACyL,EAAAA,GAAK,CAACC,QAAM,EAACjE,KAAK,OAAOkE,UAAWrD,GACnCtI,EAAAA,cAAC4L,EAAAA,EAAI,CACHnL,MAAOC,EAAG,iBACVgB,UA5DuB2H,EA4DOC,EA3D3BtJ,EAAAA,cAAC6L,EAAAA,QAAY,CAACxC,IAAKA,EAAKyC,UAAQ,EAACC,aAAW,EAACC,cAAY,EAACvE,KAAK,WA4DlE3F,QACE9B,EAAAA,cAAAA,EAAAA,SAAA,MACI+K,GACA/K,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAAA,OAAKC,UAAU,WACbD,EAAAA,cAAA,aAAQU,EAAG,eACXV,EAAAA,cAAA,OAAKC,UAAU,uBACZiL,EAAWpD,EAAIC,SAAU,YACzB+B,GAA4BoB,EAAWpD,EAAIE,UAAW,aACtD4B,GAAwBsB,EAAWpD,EAAIG,MAAO,gBAhHjE,SAA0BoC,GACxB,OAAQA,GACN,KAAKvC,EAAIC,SACP,OAAO,KACT,KAAKD,EAAIE,UACP,OACEhI,EAAAA,cAAA,KAAGC,UAAU,QACVuJ,EACG9I,EAAG,6CAA8C,CAAEuL,QAASzC,EAAoBrD,OAChFzF,EAAG,iDAGb,KAAKoH,EAAIG,MACP,OAAO,KAEb,CAkGmBiE,CAAiB7B,MAM1BrK,EAAAA,cAAA,OAAKC,UAAU,qCACbD,EAAAA,cAAA,aAAQU,EAAG,4CACXV,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAAA,gBACGoL,EAAiBlD,EAAMC,UAAW,aAClCiD,EACClD,EAAME,QACN,qDACC4C,EACD,qDAGHR,IAActC,EAAME,SAlG/BpI,EAAAA,cAACmM,EAAAA,EAAiB,CAChBhG,KAAK,WACLI,MAAOoE,EACPnE,SAAU,SAAClD,GAAC,OAAKsH,EAAgBtH,EAAE8I,OAAO7F,MAAM,EAChDE,UAAW,SAAC4F,GAAc,OAAKvB,EAAcuB,EAAe,MAkGxDrM,EAAAA,cAAA,OAAKC,UAAU,yBACbD,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAAC0D,EAAAA,QAAM,CAACC,OAAO,UAAUyC,MAAO1F,EAAG,SAAU4B,QA/E3D,WACE,IAAMgK,EAAW9B,IAActC,EAAME,SAAWyC,EAAa,EAAIA,OAAa1H,EAE9E,OAAQkH,GACN,KAAKvC,EAAIC,SACPQ,EAAkBe,EAAcC,EAAoB+C,GACpD,MAEF,KAAKxE,EAAIE,UACHe,GAAsBS,GACxBf,EACEa,EACAC,EACAC,EAAoB+C,cACpBxD,EAAmBY,SACnB2C,GAGJ,MAEF,KAAKxE,EAAIG,MACHc,GACFP,EAAyBc,EAAcC,EAAoBR,EAAmBY,SAAU2C,GAK9FhE,GACF,EAmDiFhC,SAAU2E,IAC7EjL,EAAAA,cAAC0D,EAAAA,QAAM,CAACC,OAAO,OAAOyC,MAAO1F,EAAG,UAAW4B,QAASgG,IA3FzDS,EACL/I,EAAAA,cAAA,OAAKC,UAAU,+BACbD,EAAAA,cAACwM,EAAAA,EAAgB,CAACC,QAAM,EAACC,YAAU,EAACrD,IAAKN,EAAmBwD,gBAC5DvM,EAAAA,cAAA,OAAKC,UAAU,qCACZS,EAAG,kBACJV,EAAAA,cAAA,YAAO+I,EAAmB5C,QAG5B,UA4FR,G","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../node_modules/parse-duration/index.mjs","webpack://odysee.com/../ui/component/formFieldDuration/view.jsx","webpack://odysee.com/../ui/component/formFieldDuration/index.js","webpack://odysee.com/../ui/modal/modalBlockChannel/view.jsx","webpack://odysee.com/../ui/modal/modalBlockChannel/index.js"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig\r\n\r\n\r\n/**\r\n * conversion ratios\r\n */\r\n\r\nparse.nanosecond =\r\nparse.ns = 1 / 1e6\r\n\r\nparse['µs'] =\r\nparse['μs'] =\r\nparse.us =\r\nparse.microsecond = 1 / 1e3\r\n\r\nparse.millisecond =\r\nparse.ms =\r\nparse[''] = 1\r\n\r\nparse.second =\r\nparse.sec =\r\nparse.s = parse.ms * 1000\r\n\r\nparse.minute =\r\nparse.min =\r\nparse.m = parse.s * 60\r\n\r\nparse.hour =\r\nparse.hr =\r\nparse.h = parse.m * 60\r\n\r\nparse.day =\r\nparse.d = parse.h * 24\r\n\r\nparse.week =\r\nparse.wk =\r\nparse.w = parse.d * 7\r\n\r\nparse.month =\r\nparse.b =\r\nparse.d * (365.25 / 12)\r\n\r\nparse.year =\r\nparse.yr =\r\nparse.y = parse.d * 365.25\r\n\r\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\r\n\r\nfunction parse(str='', format='ms'){\r\n  var result = null\r\n  // ignore commas/placeholders\r\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2')\r\n  str.replace(durationRE, function(_, n, units){\r\n    units = unitRatio(units)\r\n    if (units) result = (result || 0) + parseFloat(n, 10) * units\r\n  })\r\n\r\n  return result && (result / (unitRatio(format) || 1))\r\n}\r\n\r\nfunction unitRatio(str) {\r\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\r\n}\r\n\r\nexport default parse\r\n","// @flow\nimport type { Node } from 'react';\nimport React from 'react';\nimport parseDuration from 'parse-duration';\nimport { FormField } from 'component/common/form';\nimport Icon from 'component/common/icon';\nimport * as ICONS from 'constants/icons';\n\n// prettier-ignore\nconst TOOLTIP = 'Units:\\n • s:  seconds\\n • m:  minutes \\n • h:  hours\\n • d:  days\\n • month:  months\\n • y:  years';\nconst ONE_HUNDRED_YEARS_IN_SECONDS = 3154000000;\n\ntype Props = {\n  name: string,\n  label?: string | Node,\n  placeholder?: string | number,\n  disabled?: boolean,\n  value: string | number,\n  onChange: (any) => void,\n  onResolve: (valueInSeconds: number) => void, // Returns parsed/resolved value in seconds; \"-1\" for invalid input.\n  maxDurationInSeconds?: number,\n};\n\nexport default function FormFieldDuration(props: Props) {\n  const { name, label, placeholder, disabled, value, onChange, onResolve, maxDurationInSeconds } = props;\n  const [valueSec, setValueSec] = React.useState(-1);\n  const [valueErr, setValueErr] = React.useState('');\n\n  React.useEffect(() => {\n    const handleInvalidInput = (errMsg: string) => {\n      if (valueSec !== -1) {\n        setValueSec(-1);\n      }\n      if (valueErr !== errMsg) {\n        setValueErr(errMsg);\n      }\n      onResolve(-1);\n    };\n\n    const handleValidInput = (seconds) => {\n      if (seconds !== valueSec) {\n        setValueSec(seconds);\n        onResolve(seconds);\n      }\n      if (valueErr) {\n        setValueErr('');\n      }\n    };\n\n    if (!value) {\n      handleValidInput(-1); // Reset\n      return;\n    }\n\n    const seconds = parseDuration(value, 's');\n    if (Number.isInteger(seconds) && seconds > 0) {\n      const max = maxDurationInSeconds || ONE_HUNDRED_YEARS_IN_SECONDS;\n      if (seconds > max) {\n        handleInvalidInput(__('Value exceeded maximum.'));\n      } else {\n        handleValidInput(seconds);\n      }\n    } else {\n      handleInvalidInput(__('Invalid duration.'));\n    }\n  }, [value, valueSec, valueErr, maxDurationInSeconds, onResolve]);\n\n  return (\n    <FormField\n      name={name}\n      type=\"text\"\n      disabled={disabled}\n      label={\n        <>\n          {label || __('Duration --[period e.g. ban duration]--')}\n          <Icon customTooltipText={__(TOOLTIP)} className=\"icon--help\" icon={ICONS.HELP} tooltip size={16} />\n        </>\n      }\n      placeholder={placeholder || '30s, 10m, 1h, 2d, 3month, 1y'}\n      value={value}\n      onChange={onChange}\n      error={valueErr}\n    />\n  );\n}\n","import FormFieldDuration from './view';\n\nexport default FormFieldDuration;\n","// @flow\nimport React from 'react';\nimport classnames from 'classnames';\nimport Button from 'component/button';\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport ClaimPreview from 'component/claimPreview';\nimport Card from 'component/common/card';\nimport { FormField } from 'component/common/form';\nimport FormFieldDuration from 'component/formFieldDuration';\nimport usePersistedState from 'effects/use-persisted-state';\nimport { Modal } from 'modal/modal';\nimport { getChannelFromClaim } from 'util/claim';\n\nconst TAB = {\n  PERSONAL: 'personal',\n  MODERATOR: 'moderator',\n  ADMIN: 'admin',\n};\n\nconst BLOCK = {\n  PERMANENT: 'permanent',\n  TIMEOUT: 'timeout',\n};\n\ntype Props = {\n  contentUri: string,\n  commenterUri: string,\n  offendingCommentId?: string,\n  // --- redux ---\n  activeChannelClaim: ?ChannelClaim,\n  contentClaim: ?Claim,\n  contentClaimIsMine: ?boolean,\n  moderationDelegatorsById: { [string]: { global: boolean, delegators: { name: string, claimId: string } } },\n  doHideModal: () => void,\n  doCommentModBlock: (commenterUri: string, offendingCommentId: ?string, timeoutSec: ?number) => void,\n  doCommentModBlockAsAdmin: (\n    commenterUri: string,\n    offendingCommentId: ?string,\n    blockerId: ?string,\n    timeoutSec: ?number\n  ) => void,\n  doCommentModBlockAsModerator: (\n    commenterUri: string,\n    offendingCommentId: ?string,\n    creatorUri: string,\n    blockerId: ?string,\n    timeoutSec: ?number\n  ) => void,\n};\n\nexport default function ModalBlockChannel(props: Props) {\n  const {\n    commenterUri,\n    offendingCommentId,\n    activeChannelClaim,\n    contentClaim,\n    contentClaimIsMine,\n    moderationDelegatorsById,\n    doHideModal,\n    doCommentModBlock,\n    doCommentModBlockAsAdmin,\n    doCommentModBlockAsModerator,\n  } = props;\n\n  const contentChannelClaim = getChannelFromClaim(contentClaim);\n  const activeModeratorInfo = activeChannelClaim && moderationDelegatorsById[activeChannelClaim.claim_id];\n  const activeChannelIsAdmin = activeChannelClaim && activeModeratorInfo && activeModeratorInfo.global;\n  const activeChannelIsModerator =\n    activeChannelClaim &&\n    contentChannelClaim &&\n    activeModeratorInfo &&\n    Object.values(activeModeratorInfo.delegators).includes(contentChannelClaim.claim_id);\n\n  const [tab, setTab] = usePersistedState('ModalBlockChannel:tab', TAB.PERSONAL);\n  const [blockType, setBlockType] = usePersistedState('ModalBlockChannel:blockType', BLOCK.PERMANENT);\n  const [timeoutInput, setTimeoutInput] = usePersistedState('ModalBlockChannel:timeoutInput', '10m');\n  const [timeoutSec, setTimeoutSec] = React.useState(-1);\n\n  const isPersonalTheOnlyTab = !activeChannelIsModerator && !activeChannelIsAdmin;\n  const isTimeoutAvail = contentClaimIsMine || activeChannelIsModerator;\n  const blockButtonDisabled = blockType === BLOCK.TIMEOUT && timeoutSec < 1;\n\n  // **************************************************************************\n  // **************************************************************************\n\n  // Check settings validity on mount.\n  React.useEffect(() => {\n    if (\n      isPersonalTheOnlyTab ||\n      (tab === TAB.MODERATOR && !activeChannelIsModerator) ||\n      (tab === TAB.ADMIN && !activeChannelIsAdmin)\n    ) {\n      setTab(TAB.PERSONAL);\n    }\n\n    if (!isTimeoutAvail && blockType === BLOCK.TIMEOUT) {\n      setBlockType(BLOCK.PERMANENT);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // **************************************************************************\n  // **************************************************************************\n\n  function getTabElem(value, label) {\n    return (\n      <Button\n        key={value}\n        label={__(label)}\n        button=\"alt\"\n        onClick={() => setTab(value)}\n        className={classnames('button-toggle', { 'button-toggle--active': tab === value })}\n      />\n    );\n  }\n\n  function getTabHelperElem(tab) {\n    switch (tab) {\n      case TAB.PERSONAL:\n        return null;\n      case TAB.MODERATOR:\n        return (\n          <p className=\"help\">\n            {contentChannelClaim\n              ? __('Block this channel on behalf of %creator%.', { creator: contentChannelClaim.name })\n              : __('Block this channel on behalf of the creator.')}\n          </p>\n        );\n      case TAB.ADMIN:\n        return null;\n    }\n  }\n\n  function getBlockTypeElem(value, label, disabled = false, disabledLabel = '') {\n    return (\n      <FormField\n        type=\"radio\"\n        name={value}\n        key={value}\n        label={disabled && disabledLabel ? __(disabledLabel) : __(label)}\n        disabled={disabled}\n        checked={blockType === value}\n        onChange={() => setBlockType(value)}\n      />\n    );\n  }\n\n  function getTimeoutDurationElem() {\n    return (\n      <FormFieldDuration\n        name=\"time_out\"\n        value={timeoutInput}\n        onChange={(e) => setTimeoutInput(e.target.value)}\n        onResolve={(valueInSeconds) => setTimeoutSec(valueInSeconds)}\n      />\n    );\n  }\n\n  function getCommenterPreview(uri) {\n    return <ClaimPreview uri={uri} hideMenu hideActions nonClickable type=\"small\" />;\n  }\n\n  function getActiveChannelElem() {\n    return activeChannelClaim ? (\n      <div className=\"block-modal--active-channel\">\n        <ChannelThumbnail xsmall noLazyLoad uri={activeChannelClaim.permanent_url} />\n        <div className=\"block-modal--active-channel-label\">\n          {__('Interacting as')}\n          <span>{activeChannelClaim.name}</span>\n        </div>\n      </div>\n    ) : null;\n  }\n\n  function handleBlock() {\n    const duration = blockType === BLOCK.TIMEOUT && timeoutSec > 0 ? timeoutSec : undefined;\n\n    switch (tab) {\n      case TAB.PERSONAL:\n        doCommentModBlock(commenterUri, offendingCommentId, duration);\n        break;\n\n      case TAB.MODERATOR:\n        if (activeChannelClaim && contentChannelClaim) {\n          doCommentModBlockAsModerator(\n            commenterUri,\n            offendingCommentId,\n            contentChannelClaim.permanent_url,\n            activeChannelClaim.claim_id,\n            duration\n          );\n        }\n        break;\n\n      case TAB.ADMIN:\n        if (activeChannelClaim) {\n          doCommentModBlockAsAdmin(commenterUri, offendingCommentId, activeChannelClaim.claim_id, duration);\n        }\n        break;\n    }\n\n    doHideModal();\n  }\n\n  // **************************************************************************\n  // **************************************************************************\n\n  if (isPersonalTheOnlyTab && !isTimeoutAvail) {\n    // There's only 1 option. Just execute it and don't show the modal.\n    doCommentModBlock(commenterUri, offendingCommentId);\n    doHideModal();\n    return null;\n  }\n\n  return (\n    <Modal isOpen type=\"card\" onAborted={doHideModal}>\n      <Card\n        title={__('Block Channel')}\n        subtitle={getCommenterPreview(commenterUri)}\n        actions={\n          <>\n            {!isPersonalTheOnlyTab && (\n              <div className=\"section__actions\">\n                <div className=\"section\">\n                  <label>{__('Block list')}</label>\n                  <div className=\"block-modal--values\">\n                    {getTabElem(TAB.PERSONAL, 'Personal')}\n                    {activeChannelIsModerator && getTabElem(TAB.MODERATOR, 'Moderator')}\n                    {activeChannelIsAdmin && getTabElem(TAB.ADMIN, 'Global Admin')}\n                    {getTabHelperElem(tab)}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div className=\"section section--vertical-compact\">\n              <label>{__('Duration --[period e.g. ban duration]--')}</label>\n              <div className=\"block-modal--values\">\n                <fieldset>\n                  {getBlockTypeElem(BLOCK.PERMANENT, 'Permanent')}\n                  {getBlockTypeElem(\n                    BLOCK.TIMEOUT,\n                    'Timeout --[time-based ban instead of permanent]--',\n                    !isTimeoutAvail,\n                    'Timeout (only available on content that you own)'\n                  )}\n                </fieldset>\n                {blockType === BLOCK.TIMEOUT && getTimeoutDurationElem()}\n              </div>\n            </div>\n\n            <div className=\"block-modal--finalize\">\n              <div className=\"section__actions\">\n                <Button button=\"primary\" label={__('Block')} onClick={handleBlock} disabled={blockButtonDisabled} />\n                <Button button=\"link\" label={__('Cancel')} onClick={doHideModal} />\n                {getActiveChannelElem()}\n              </div>\n            </div>\n          </>\n        }\n      />\n    </Modal>\n  );\n}\n","import { connect } from 'react-redux';\nimport { selectClaimForUri, selectClaimIsMine } from 'redux/selectors/claims';\nimport { doHideModal } from 'redux/actions/app';\nimport { doCommentModBlock, doCommentModBlockAsAdmin, doCommentModBlockAsModerator } from 'redux/actions/comments';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport { selectModerationDelegatorsById } from 'redux/selectors/comments';\n\nimport ModalBlockChannel from './view';\n\nconst select = (state, props) => {\n  const contentClaim = selectClaimForUri(state, props.contentUri);\n  return {\n    activeChannelClaim: selectActiveChannelClaim(state),\n    contentClaim,\n    contentClaimIsMine: selectClaimIsMine(state, contentClaim),\n    moderationDelegatorsById: selectModerationDelegatorsById(state),\n  };\n};\n\nconst perform = {\n  doHideModal,\n  doCommentModBlock,\n  doCommentModBlockAsAdmin,\n  doCommentModBlockAsModerator,\n};\n\nexport default connect(select, perform)(ModalBlockChannel);\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","durationRE","parse","str","format","result","replace","_","n","units","unitRatio","parseFloat","toLowerCase","nanosecond","ns","us","microsecond","millisecond","ms","second","sec","s","minute","min","m","hour","hr","h","day","d","week","wk","w","month","b","year","yr","y","TOOLTIP","ONE_HUNDRED_YEARS_IN_SECONDS","name","label","placeholder","disabled","value","onChange","onResolve","maxDurationInSeconds","_React$useState2","valueSec","setValueSec","_React$useState4","valueErr","setValueErr","handleInvalidInput","errMsg","handleValidInput","seconds","parseDuration","Number","isInteger","FormField","type","customTooltipText","tooltip","size","error","TAB","PERSONAL","MODERATOR","ADMIN","BLOCK","PERMANENT","TIMEOUT","perform","doHideModal","doCommentModBlock","doCommentModBlockAsAdmin","doCommentModBlockAsModerator","connect","state","contentClaim","selectClaimForUri","contentUri","activeChannelClaim","selectActiveChannelClaim","contentClaimIsMine","selectClaimIsMine","moderationDelegatorsById","selectModerationDelegatorsById","uri","commenterUri","offendingCommentId","contentChannelClaim","getChannelFromClaim","activeModeratorInfo","claim_id","activeChannelIsAdmin","global","activeChannelIsModerator","Object","values","delegators","includes","_usePersistedState2","usePersistedState","tab","setTab","_usePersistedState4","blockType","setBlockType","_usePersistedState6","timeoutInput","setTimeoutInput","timeoutSec","setTimeoutSec","isPersonalTheOnlyTab","isTimeoutAvail","blockButtonDisabled","getTabElem","key","getBlockTypeElem","arguments","length","disabledLabel","checked","Modal","isOpen","onAborted","Card","ClaimPreview","hideMenu","hideActions","nonClickable","creator","getTabHelperElem","FormFieldDuration","target","valueInSeconds","duration","permanent_url","ChannelThumbnail","xsmall","noLazyLoad"],"sourceRoot":""}