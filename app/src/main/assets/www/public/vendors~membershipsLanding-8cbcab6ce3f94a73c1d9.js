(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~membershipsLanding"],{

/***/ "../node_modules/balance-text/balancetext.js":
/*!***************************************************!*\
  !*** ../node_modules/balance-text/balancetext.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License. *\n */\n\n/**\n * balancetext.js\n *\n * Author: Randy Edmunds\n */\n\n/* global define, module */\n\n/*\n * Copyright (c) 2007-2009 unscriptable.com and John M. Hann\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the “Software”), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * Except as contained in this notice, the name(s) of the above\n * copyright holders (unscriptable.com and John M. Hann) shall not be\n * used in advertising or otherwise to promote the sale, use or other\n * dealings in this Software without prior written authorization.\n *\n * http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/\n *\n * Tested to work on (lowest browser):\n * - Sarari 4\n * - Chrome 16\n * - Firefox 10\n * - IE 9\n * - Edge 13\n */\n\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function () {\n  /**\n   * Line breaking global vars\n   */\n  var breakMatches, wsnwMatches, wsnwOffset;\n  /**\n   * Selectors and elements to watch;\n   * calling $.balanceText(elements) adds \"elements\" to this list.\n   */\n\n  var watching = {\n    sel: [],\n    // default class to watch\n    el: []\n  };\n  /**\n   * Have handlers been initialized?\n   */\n\n  var handlersInitialized = false;\n  /**\n   * Is this a polyfill?\n   */\n\n  var polyfilled = false;\n  /**\n   * Do nothing\n   */\n\n  function noop() {}\n  /**\n   * Loop that works with array-likes\n   * @param {Array-like} elements - List of elements to run a function on\n   * @param {Function}   callback - The function to call on each supplied element\n   */\n\n\n  function forEach(elements, callback) {\n    Array.prototype.forEach.call(elements, callback);\n  }\n  /**\n   * Polyfill for $(document).ready()\n   *\n   * @param {Function} fn - The function to execute when the document is ready\n   */\n\n\n  function ready(fn) {\n    if (document.readyState !== \"loading\") {\n      fn();\n    } else if (document.addEventListener) {\n      document.addEventListener(\"DOMContentLoaded\", fn);\n    } else {\n      document.attachEvent(\"onreadystatechange\", function () {\n        if (document.readyState !== \"loading\") {\n          fn();\n        }\n      });\n    }\n  }\n  /**\n   * Debounces a function over a threshold\n   *\n   * @param {Function} func      - The function to debounce\n   * @param {number}   threshold - time in ms\n   * @param {boolean}  execAsap  - when true, execute immediately\n   * @param args\n   * @return {Function} Debounced function\n   */\n\n\n  function debounce(func, threshold, execAsap) {\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n\n    var timeout;\n    return function () {\n      var obj = this;\n\n      function delayed() {\n        if (!execAsap) {\n          func.apply(obj, args);\n        }\n\n        timeout = null;\n      }\n\n      if (timeout) {\n        clearTimeout(timeout);\n      } else if (execAsap) {\n        func.apply(obj, args);\n      }\n\n      timeout = setTimeout(delayed, threshold || 100);\n    };\n  }\n  /**\n   * Determine whether the document supports TextWrap\n   * @return {boolean}\n   */\n\n\n  function hasTextWrap() {\n    if (typeof window === \"undefined\") {\n      return false;\n    }\n\n    var style = document.documentElement.style;\n    return style.textWrap || style.WebkitTextWrap || style.MozTextWrap || style.MsTextWrap;\n  }\n  /**\n   * Object for tracking next whitespace params\n   */\n  // eslint-disable-next-line camelcase\n\n\n  function NextWS_params() {\n    this.reset();\n  }\n\n  NextWS_params.prototype.reset = function () {\n    this.index = 0;\n    this.width = 0;\n  };\n  /**\n   * Check if index is contained in previously calculated list of white-space:nowrap ranges\n   *\n   * @param {number} index - the index of the character to check\n   * @return {boolean}\n   */\n\n\n  function isWhiteSpaceNoWrap(index) {\n    // Is index inside 1 of the ranges?\n    // start and end are breakable, but not inside range\n    return wsnwMatches.some(function (range) {\n      return range.start < index && index < range.end;\n    });\n  }\n  /**\n   * Recursively calculate white-space:nowrap offsets for line.\n   *\n   * @param {Node}    el         - the element to act on\n   * @param {boolean} includeTag - include length of tag itself\n   */\n\n\n  function recursiveCalcNoWrapOffsetsForLine(el, includeTag) {\n    if (el.nodeType === el.ELEMENT_NODE) {\n      // Found an embedded tag\n      var style = window.getComputedStyle(el);\n\n      if (style.whiteSpace === \"nowrap\") {\n        // Tag with white-space:nowrap - add match, skip children\n        var len = el.outerHTML.length;\n        wsnwMatches.push({\n          start: wsnwOffset,\n          end: wsnwOffset + len\n        });\n        wsnwOffset += len;\n      } else {\n        // Tag without white-space:nowrap - recursively check children of tag\n        forEach(el.childNodes, function (child) {\n          recursiveCalcNoWrapOffsetsForLine(child, true);\n        });\n\n        if (includeTag) {\n          // Length of opening tag, attributes, and closing tag\n          wsnwOffset += el.outerHTML.length - el.innerHTML.length;\n        }\n      }\n    } else if (el.nodeType === el.COMMENT_NODE) {\n      wsnwOffset += el.length + 7; // delimiter: <!-- -->\n    } else if (el.nodeType === el.PROCESSING_INSTRUCTION_NODE) {\n      wsnwOffset += el.length + 2; // delimiter: < >\n    } else {\n      // Text node: add length\n      wsnwOffset += el.length;\n    }\n  }\n  /**\n   * Calculate white-space:nowrap offsets for line.\n   *\n   * @param {Node}    el             - the element to act on\n   * @param {string}  oldWS          - \"old\" whitespace setting for temporarily resetting\n   * @param {number}  lineCharOffset - char offset of current line from start of text\n   */\n\n\n  function calcNoWrapOffsetsForLine(el, oldWS, lineCharOffset) {\n    // For first line (lineCharOffset === 0), calculate start and end offsets for each\n    // white-space:nowrap element in the line.\n    if (lineCharOffset === 0) {\n      // Reset whiteSpace setting when breakMatches is being calculated\n      // so white-space:nowrap can be detected in text\n      el.style.whiteSpace = oldWS;\n      wsnwOffset = 0;\n      wsnwMatches = [];\n      recursiveCalcNoWrapOffsetsForLine(el, false); // Restore temporary whitespace setting to recalc width\n\n      el.style.whiteSpace = \"nowrap\";\n    } else {\n      // For all other lines, update the offsets for current line\n      // 1. Ignore matches less than offset\n      // 2. Subtract offset from remaining matches\n      var newMatches = [];\n      wsnwMatches.forEach(function (match) {\n        if (match.start > lineCharOffset) {\n          newMatches.push({\n            start: match.start - lineCharOffset,\n            end: match.end - lineCharOffset\n          });\n        }\n      });\n      wsnwMatches = newMatches;\n    }\n  }\n  /**\n   * Strip balance-text tags from an element inserted in previous run\n   *\n   * @param {Node} el - the element to act on\n   */\n\n\n  function removeTags(el) {\n    // Remove soft-hyphen breaks\n    var brs = el.querySelectorAll('br[data-owner=\"balance-text-hyphen\"]');\n    forEach(brs, function (br) {\n      br.outerHTML = \"\";\n    }); // Replace other breaks with whitespace\n\n    brs = el.querySelectorAll('br[data-owner=\"balance-text\"]');\n    forEach(brs, function (br) {\n      br.outerHTML = \" \";\n    }); // Restore hyphens inserted for soft-hyphens\n\n    var spans = el.querySelectorAll('span[data-owner=\"balance-text-softhyphen\"]');\n\n    if (spans.length > 0) {\n      forEach(spans, function (span) {\n        var textNode = document.createTextNode(\"\\xAD\");\n        span.parentNode.insertBefore(textNode, span);\n        span.parentNode.removeChild(span);\n      });\n    } // Remove spans inserted for justified text\n\n\n    spans = el.querySelectorAll('span[data-owner=\"balance-text-justify\"]');\n\n    if (spans.length > 0) {\n      var txt = \"\";\n      forEach(spans, function (span) {\n        txt += span.textContent;\n        span.parentNode.removeChild(span);\n      });\n      el.innerHTML = txt;\n    }\n  }\n  /**\n   * Checks to see if we should justify the balanced text with the\n   * element based on the textAlign property in the computed CSS\n   *\n   * @param {Node} el - element to check\n   * @return {boolean}\n   */\n\n\n  var isJustified = function isJustified(el) {\n    var style = el.currentStyle || window.getComputedStyle(el, null);\n    return style.textAlign === \"justify\";\n  };\n  /**\n   * Add whitespace after words in text to justify the string to\n   * the specified size.\n   * @param {Node}    el       - the element to justify\n   * @param {string}  txt      - text string\n   * @param {number}  conWidth - container width\n   * @return {string} Justified text\n   */\n\n\n  function justify(el, txt, conWidth) {\n    txt = txt.trim();\n    var words = txt.split(\" \").length;\n    txt = \"\".concat(txt, \" \"); // if we don't have at least 2 words, no need to justify.\n\n    if (words < 2) {\n      return txt;\n    } // Find width of text in the DOM\n\n\n    var tmp = document.createElement(\"span\");\n    tmp.innerHTML = txt;\n    el.appendChild(tmp);\n    var size = tmp.offsetWidth;\n    tmp.parentNode.removeChild(tmp); // Figure out our word spacing and return the element\n\n    var wordSpacing = Math.floor((conWidth - size) / (words - 1));\n    tmp.style.wordSpacing = \"\".concat(wordSpacing, \"px\");\n    tmp.setAttribute(\"data-owner\", \"balance-text-justify\");\n    var div = document.createElement(\"div\");\n    div.appendChild(tmp);\n    return div.innerHTML;\n  }\n  /**\n   * Returns true iff char at index is a break char outside of HTML < > tags.\n   * Break char can be: whitespace (except non-breaking-space: u00a0),\n   * hypen, emdash (u2014), endash (u2013), or soft-hyphen (u00ad).\n   *\n   * @param {string} txt   - the text to check\n   * @param {number} index - the index of the character to check\n   * @return {boolean}\n   */\n\n\n  function isBreakChar(txt, index) {\n    var re = /([^\\S\\u00a0]|-|\\u2014|\\u2013|\\u00ad)(?![^<]*>)/g;\n    var match;\n\n    if (!breakMatches) {\n      // Only calc break matches once per line\n      breakMatches = [];\n      match = re.exec(txt);\n\n      while (match !== null) {\n        if (!isWhiteSpaceNoWrap(match.index)) {\n          breakMatches.push(match.index);\n        }\n\n        match = re.exec(txt);\n      }\n    }\n\n    return breakMatches.indexOf(index) !== -1;\n  }\n  /**\n   * In the current implementation, an index is a break\n   * opportunity in txt iff it is:\n   * - 0 or txt.length\n   * - index of a non-whitespace char immediately preceded by a\n   *   whitespace, hyphen, soft-hyphen, em-dash, or en-dash char.\n   *\n   * Thus, it doesn't honour \"white-space\" or any other Unicode\n   * line-breaking classes.)\n   *\n   * @precondition 0 <= index && index <= txt.length\n   *\n   * @param {string} txt   - the text to check\n   * @param {number} index - the index to check\n   * @return {boolean}\n   */\n\n\n  function isBreakOpportunity(txt, index) {\n    return index === 0 || index === txt.length || isBreakChar(txt, index - 1) && !isBreakChar(txt, index);\n  }\n  /**\n   * Finds the first break opportunity (@see isBreakOpportunity)\n   * in txt that's both after-or-equal-to index c in the direction dir\n   * and resulting in line width equal to or past clamp(desWidth,\n   * 0, conWidth) in direction dir.  Sets ret.index and ret.width\n   * to the corresponding index and line width (from the start of\n   * txt to ret.index).\n   *\n   * @param {Node}    el       - element\n   * @param {string}  txt      - text string\n   * @param {number}  conWidth - container width\n   * @param {number}  desWidth - desired width\n   * @param {number}  dir      - direction (-1 or +1)\n   * @param {number}  c        - char index (0 <= c && c <= txt.length)\n   * @param {Object}  ret      - return {index: {number}, width: {number}} of previous/next break\n   */\n\n\n  function findBreakOpportunity(el, txt, conWidth, desWidth, dir, c, ret) {\n    var w;\n\n    if (txt && typeof txt === \"string\") {\n      for (;;) {\n        while (!isBreakOpportunity(txt, c)) {\n          c += dir;\n        }\n\n        el.innerHTML = txt.substr(0, c);\n        w = el.offsetWidth;\n\n        if (dir < 0) {\n          if (w <= desWidth || w <= 0 || c === 0) {\n            break;\n          }\n        } else if (desWidth <= w || conWidth <= w || c === txt.length) {\n          break;\n        }\n\n        c += dir;\n      }\n    }\n\n    ret.index = c;\n    ret.width = w;\n  }\n  /**\n   * Detects the width of a non-breaking space character, given the height of\n   * the element with no-wrap applied.\n   *\n   * @param {Node}   el - element\n   * @param {number} h  - height\n   * @return {number}\n   */\n\n\n  function getSpaceWidth(el, h) {\n    var container = document.createElement(\"div\");\n    container.style.display = \"block\";\n    container.style.position = \"absolute\";\n    container.style.bottom = 0;\n    container.style.right = 0;\n    container.style.width = 0;\n    container.style.height = 0;\n    container.style.margin = 0;\n    container.style.padding = 0;\n    container.style.visibility = \"hidden\";\n    container.style.overflow = \"hidden\";\n    var space = document.createElement(\"span\");\n    space.style.fontSize = \"2000px\";\n    space.innerHTML = \"&nbsp;\";\n    container.appendChild(space);\n    el.appendChild(container);\n    var dims = space.getBoundingClientRect();\n    container.parentNode.removeChild(container);\n    var spaceRatio = dims.height / dims.width;\n    return h / spaceRatio;\n  }\n  /**\n   * Get a list of elements regardless of input\n   *\n   * @param {string|Node|Array-like} elements - The selector to query, one or more elements\n   * @return {Array<{Node}>}\n   */\n\n\n  function getElementsList(elements) {\n    if (!elements) {\n      return [];\n    } // is selector\n\n\n    if (typeof elements === \"string\") {\n      return document.querySelectorAll(elements);\n    } // is single element\n\n\n    if (elements.tagName && elements.querySelectorAll) {\n      return [elements];\n    }\n\n    return elements;\n  }\n  /**\n   *  When a browser has native support for the text-wrap property,\n   * the text balanceText plugin will let the browser handle it natively,\n   * otherwise it will apply its own text balancing code.\n   *\n   * @param {string|Node|Array-like} elements - the list of elements to balance\n   */\n\n\n  function balanceText(elements) {\n    forEach(getElementsList(elements), function (el) {\n      // In a lower level language, this algorithm takes time\n      // comparable to normal text layout other than the fact\n      // that we do two passes instead of one, so we should\n      // be able to do without this limit.\n      var maxTextWidth = 5000; // strip balance-text generated tags\n\n      removeTags(el); // save settings\n\n      var oldWS = el.style.whiteSpace;\n      var oldFloat = el.style[\"float\"];\n      var oldDisplay = el.style.display;\n      var oldPosition = el.style.position;\n      var oldLH = el.style.lineHeight; // remove line height before measuring container size\n\n      el.style.lineHeight = \"normal\";\n      var containerWidth = el.offsetWidth;\n      var containerHeight = el.offsetHeight; // temporary settings\n\n      el.style.whiteSpace = \"nowrap\";\n      el.style[\"float\"] = \"none\";\n      el.style.display = \"inline\";\n      el.style.position = \"static\";\n      var nowrapWidth = el.offsetWidth;\n      var nowrapHeight = el.offsetHeight; // An estimate of the average line width reduction due\n      // to trimming trailing space that we expect over all\n      // lines other than the last.\n\n      var spaceWidth = oldWS === \"pre-wrap\" ? 0 : getSpaceWidth(el, nowrapHeight);\n\n      if (containerWidth > 0 && // prevent divide by zero\n      nowrapWidth > containerWidth && // text is more than 1 line\n      nowrapWidth < maxTextWidth) {\n        // text is less than arbitrary limit (make this a param?)\n        var remainingText = el.innerHTML;\n        var newText = \"\";\n        var lineText = \"\";\n        var shouldJustify = isJustified(el);\n        var totLines = Math.round(containerHeight / nowrapHeight);\n        var remLines = totLines;\n        var lineCharOffset = 0; // loop vars\n\n        var desiredWidth, guessIndex, le, ge, splitIndex, isHyphen, isSoftHyphen; // Determine where to break:\n\n        while (remLines > 1) {\n          // clear whitespace match cache for each line\n          breakMatches = null; // Must calc white-space:nowrap offsets before first call to findBreakOpportunity()\n\n          calcNoWrapOffsetsForLine(el, oldWS, lineCharOffset);\n          desiredWidth = Math.round((nowrapWidth + spaceWidth) / remLines - spaceWidth); // Guessed char index\n\n          guessIndex = Math.round((remainingText.length + 1) / remLines) - 1;\n          le = new NextWS_params(); // Find a breaking space somewhere before (or equal to) desired width,\n          // not necessarily the closest to the desired width.\n\n          findBreakOpportunity(el, remainingText, containerWidth, desiredWidth, -1, guessIndex, le); // Find first breaking char after (or equal to) desired width.\n\n          ge = new NextWS_params();\n          guessIndex = le.index;\n          findBreakOpportunity(el, remainingText, containerWidth, desiredWidth, +1, guessIndex, ge); // Find first breaking char before (or equal to) desired width.\n\n          le.reset();\n          guessIndex = ge.index;\n          findBreakOpportunity(el, remainingText, containerWidth, desiredWidth, -1, guessIndex, le); // Find closest string to desired length\n\n          if (le.index === 0) {\n            splitIndex = ge.index;\n          } else if (containerWidth < ge.width || le.index === ge.index) {\n            splitIndex = le.index;\n          } else {\n            splitIndex = Math.abs(desiredWidth - le.width) < Math.abs(ge.width - desiredWidth) ? le.index : ge.index;\n          } // Break string\n\n\n          lineText = remainingText.substr(0, splitIndex).replace(/\\s$/, \"\");\n          isSoftHyphen = Boolean(lineText.match(/\\u00ad$/));\n\n          if (isSoftHyphen) {\n            // Replace soft-hyphen causing break with explicit hyphen\n            lineText = lineText.replace(/\\u00ad$/, '<span data-owner=\"balance-text-softhyphen\">-</span>');\n          }\n\n          if (shouldJustify) {\n            newText += justify(el, lineText, containerWidth);\n          } else {\n            newText += lineText;\n            isHyphen = isSoftHyphen || Boolean(lineText.match(/(-|\\u2014|\\u2013)$/));\n            newText += isHyphen ? '<br data-owner=\"balance-text-hyphen\" />' : '<br data-owner=\"balance-text\" aria-hidden=\"true\" />';\n          }\n\n          remainingText = remainingText.substr(splitIndex);\n          lineCharOffset = splitIndex; // update counters\n\n          remLines--;\n          el.innerHTML = remainingText;\n          nowrapWidth = el.offsetWidth;\n        }\n\n        if (shouldJustify) {\n          el.innerHTML = newText + justify(el, remainingText, containerWidth);\n        } else {\n          el.innerHTML = newText + remainingText;\n        }\n      } // restore settings\n\n\n      el.style.whiteSpace = oldWS;\n      el.style[\"float\"] = oldFloat;\n      el.style.display = oldDisplay;\n      el.style.position = oldPosition;\n      el.style.lineHeight = oldLH;\n    });\n  }\n  /**\n   * Call the balanceText plugin on elements that it's watching.\n   */\n\n\n  function updateWatched() {\n    var selectors = watching.sel.join(\",\");\n    var selectedElements = getElementsList(selectors);\n    var elements = Array.prototype.concat.apply(watching.el, selectedElements);\n    balanceText(elements);\n  }\n  /**\n   * Initialize the events for which to re-apply BalanceText.  They are:\n   * - Document ready\n   * - Document full load\n   * - Window resize\n   */\n\n\n  function initHandlers() {\n    if (handlersInitialized) {\n      return;\n    } // Apply on DOM ready\n\n\n    ready(updateWatched); // Reapply on full load\n\n    window.addEventListener(\"load\", updateWatched); // Reapply on resize\n\n    window.addEventListener(\"resize\", debounce(updateWatched));\n    handlersInitialized = true;\n  }\n  /**\n   * Apply the BalanceText routine on the document and watch the list\n   * of elements.  On window resize, re-apply BalanceText to the given elements\n   *\n   * @param {string|Node|Array-like} elements - the elements to watch after applying BalanceText\n   */\n\n\n  function balanceTextAndWatch(elements) {\n    if (typeof elements === \"string\") {\n      watching.sel.push(elements);\n    } else {\n      forEach(getElementsList(elements), function (el) {\n        watching.el.push(el);\n      });\n    }\n\n    initHandlers();\n    updateWatched();\n  }\n  /**\n   * Stop watching elements\n   *\n   * @param {string|Node|Array-like} elements\n   */\n\n\n  function unwatch(elements) {\n    if (typeof elements === \"string\") {\n      watching.sel = watching.sel.filter(function (el) {\n        return el !== elements;\n      });\n    } else {\n      elements = getElementsList(elements);\n      watching.el = watching.el.filter(function (el) {\n        return elements.indexOf(el) === -1;\n      });\n    }\n  }\n  /**\n   * Treat this app as a polyfill.  Watch for changes to the .balance-text selector\n   */\n\n\n  function polyfill() {\n    if (polyfilled) {\n      return;\n    }\n\n    watching.sel.push(\".balance-text\");\n    initHandlers();\n    polyfilled = true;\n  }\n  /**\n   * Public interface\n   *\n   * @param {string|Node|Array-like} elements - elements to balance\n   * @param {Object}                 options  - processing options\n   *  - {boolean} watch - watch elements for resize\n   */\n\n\n  function publicInterface(elements, options) {\n    if (!elements) {\n      // empty call means polyfill (watch for changes)\n      polyfill();\n    } else if (options && options.watch === true) {\n      balanceTextAndWatch(elements);\n    } else if (options && options.watch === false) {\n      unwatch(elements);\n    } else {\n      balanceText(elements);\n    }\n  }\n\n  publicInterface.updateWatched = updateWatched;\n\n  if (hasTextWrap()) {\n    noop.updateWatched = noop;\n    return noop;\n  }\n\n  return publicInterface;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/balance-text/balancetext.js\n");

/***/ }),

/***/ "../node_modules/react-balance-text/dist/index.js":
/*!********************************************************!*\
  !*** ../node_modules/react-balance-text/dist/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"../node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _balanceText2 = __webpack_require__(/*! balance-text */ \"../node_modules/balance-text/balancetext.js\");\n\nvar _balanceText3 = _interopRequireDefault(_balanceText2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar BalanceText = function (_React$Component) {\n  _inherits(BalanceText, _React$Component);\n\n  function BalanceText() {\n    _classCallCheck(this, BalanceText);\n\n    var _this = _possibleConstructorReturn(this, (BalanceText.__proto__ || Object.getPrototypeOf(BalanceText)).call(this));\n\n    _this._handleResize = _this._handleResize.bind(_this);\n    _this.state = {\n      visible: false\n    };\n    return _this;\n  }\n\n  _createClass(BalanceText, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('resize', this._handleResize);\n\n      this._makeVisible();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this._balanceText();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this._handleResize);\n    }\n  }, {\n    key: '_makeVisible',\n    value: function _makeVisible() {\n      var _this2 = this;\n\n      this.setState({\n        visible: true\n      });\n      setTimeout(function () {\n        return _this2._balanceText();\n      }, 0);\n    }\n  }, {\n    key: '_balanceText',\n    value: function _balanceText() {\n      var container = this.container;\n\n      if (!container) {\n        return;\n      }\n\n      (0, _balanceText3[\"default\"])(container);\n    }\n  }, {\n    key: '_handleResize',\n    value: function _handleResize() {\n      if (!this.props.resize) {\n        return;\n      }\n\n      this._balanceText();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          children = _props.children,\n          style = _props.style,\n          className = _props.className;\n      var visible = this.state.visible;\n\n      var combinedStyle = _extends({}, style, {\n        visibility: visible ? 'visible' : 'hidden'\n      });\n\n      return _react2[\"default\"].createElement('div', {\n        style: combinedStyle,\n        className: className\n      }, _react2[\"default\"].createElement('span', {\n        ref: function ref(container) {\n          return _this3.container = container;\n        }\n      }, children));\n    }\n  }]);\n\n  return BalanceText;\n}(_react2[\"default\"].Component);\n\nBalanceText.defaultProps = {\n  children: '',\n  style: {},\n  resize: true\n};\nBalanceText.propTypes = {\n  children: _propTypes2[\"default\"].node,\n  className: _propTypes2[\"default\"].string,\n  style: _propTypes2[\"default\"].oneOfType([_propTypes2[\"default\"].arrayOf(_propTypes2[\"default\"].any), _propTypes2[\"default\"].any]),\n  resize: _propTypes2[\"default\"].bool\n};\nexports[\"default\"] = BalanceText;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/react-balance-text/dist/index.js\n");

/***/ })

}]);