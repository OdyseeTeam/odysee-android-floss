{"version":3,"file":"modalUpgrade-6f3afe89f88a0c02da7e.js","mappings":"utCAkFA,MChFA,EDQ2B,SAACA,GAC1B,IAAQC,EAAuBD,EAAvBC,mBACwCC,EAAAC,GAAZC,EAAAA,EAAAA,UAAS,IAAG,GAAzCC,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GACwBK,EAAAJ,GAAZC,EAAAA,EAAAA,UAAS,IAAG,GAAjDI,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACmCG,EAAAP,GAAfC,EAAAA,EAAAA,WAAS,GAAM,GAApEO,EAAsBD,EAAA,GAAEE,EAAyBF,EAAA,GACWG,EAAAV,GAAfC,EAAAA,EAAAA,WAAS,GAAM,GAA5DU,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAE1CG,EACJC,EAAAA,cAAA,UACIhB,GAAsBiB,EAAG,wDAAyD,CAAEC,YAAad,KAGjGe,EACJH,EAAAA,cAAA,KAAGI,UAAU,QACXJ,EAAAA,cAACK,EAAAA,EAAW,CACVC,OAAQ,CACNC,cACEP,EAAAA,cAACQ,EAAAA,QAAM,CAACC,OAAO,OAAOC,MAAOT,EAAG,iBAAkBU,KAAK,sDAG5D,4DA4BL,OAtBAC,EAAAA,EAAAA,YAAU,WAORjB,GAA0B,GAC1BkB,MAPuB,mEACP,CACdC,OAAQ,MACRC,QAAS,CAAEC,OAAQ,oCAKlBC,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACC,GACL7B,EAAc6B,EAASE,UACvB5B,EAAkB0B,EAASG,MAC3B1B,GAA0B,GAC1BG,GAAsB,EACxB,IAAE,OACK,WACLH,GAA0B,GAC1BG,GAAsB,EACxB,GACJ,GAAG,IAECJ,EACKM,EAAAA,cAAA,SAAIC,EAAG,eAGZJ,EAEAG,EAAAA,cAAA,WACGD,EACAI,GAMLH,EAAAA,cAAA,OAAKI,UAAU,kBACZL,EACDC,EAAAA,cAAA,SACEA,EAAAA,cAACsB,EAAAA,EAAe,CAACC,QAAShC,KAE3BY,EAGP,C,kxDE3EA,IAAMqB,GAAsD,IAA7CC,UAAUC,UAAUC,QAAQ,YAiC3C,QA1BkB,SAAAC,I,qRAAAC,CAAAC,EAAAF,GAAA,I,MAAAG,EAAAC,EAAAF,GAAA,SAAAA,IAAA,O,4FAAAG,CAAA,KAAAH,GAAAC,EAAAG,MAAA,KAAAC,UAAA,CAuBf,O,EAvBeL,G,EAAA,EAAAM,IAAA,SAAAC,MAChB,WACE,IAAAC,EAAyCC,KAAKxD,MAAtCyD,EAAeF,EAAfE,gBAAiBC,EAAWH,EAAXG,YAEzB,OACEzC,EAAAA,cAAC0C,EAAAA,GAAK,CACJtC,UAAWoB,EAAS,GAAK,0BACzBmB,QAAM,EACNC,aAAc3C,EAAG,qBACjB4C,MAAO5C,EAAG,mBACV6C,KAAK,UACLC,mBAAoB9C,EAAG,WACvB+C,iBAAkB/C,EAAG,QACrBgD,YAAaT,EACbU,UAAWT,GAEXzC,EAAAA,cAAA,SACGC,EAAG,gDAAiD,IACpDA,EAAG,mEAEND,EAAAA,cAACmD,EAAAA,EAAkB,CAACnE,oBAAkB,IAG5C,M,8EAAC8C,CAAA,CAvBe,CAAS9B,EAAAA,eCE3B,SAAeoD,EAAAA,EAAAA,KAVA,WAAH,MAAU,CAAC,CAAC,IAER,SAAAC,GAAQ,MAAK,CAC3Bb,gBAAiB,kBAAMa,GAASC,EAAAA,EAAAA,MAAoB,EACpDb,YAAa,WACXY,GAASE,EAAAA,EAAAA,OACTF,GAASG,EAAAA,EAAAA,MACX,EACD,GAED,CAGE1B,E","sources":["webpack://odysee.com/../ui/component/lastReleaseChanges/view.jsx","webpack://odysee.com/../ui/component/lastReleaseChanges/index.js","webpack://odysee.com/../ui/modal/modalUpgrade/view.jsx","webpack://odysee.com/../ui/modal/modalUpgrade/index.js"],"sourcesContent":["// @flow\nimport React, { useState, useEffect } from 'react';\nimport MarkdownPreview from 'component/common/markdown-preview';\nimport Button from 'component/button';\nimport I18nMessage from 'component/i18nMessage';\n\ntype Props = {\n  hideReleaseVersion?: boolean,\n};\n\nconst LastReleaseChanges = (props: Props) => {\n  const { hideReleaseVersion } = props;\n  const [releaseTag, setReleaseTag] = useState('');\n  const [releaseChanges, setReleaseChanges] = useState('');\n  const [fetchingReleaseChanges, setFetchingReleaseChanges] = useState(false);\n  const [fetchReleaseFailed, setFetchReleaseFailed] = useState(false);\n\n  const releaseVersionTitle = (\n    <p>\n      {!hideReleaseVersion && __('A new version %release_tag% of LBRY is ready for you.', { release_tag: releaseTag })}\n    </p>\n  );\n  const seeReleaseNotes = (\n    <p className=\"help\">\n      <I18nMessage\n        tokens={{\n          release_notes: (\n            <Button button=\"link\" label={__('release notes')} href=\"https://github.com/lbryio/lbry-desktop/releases\" />\n          ),\n        }}\n      >\n        Want to know what has changed? See the %release_notes%.\n      </I18nMessage>\n    </p>\n  );\n\n  useEffect(() => {\n    const lastReleaseUrl = 'https://api.github.com/repos/lbryio/lbry-desktop/releases/latest';\n    const options = {\n      method: 'GET',\n      headers: { Accept: 'application/vnd.github.v3+json' },\n    };\n\n    setFetchingReleaseChanges(true);\n    fetch(lastReleaseUrl, options)\n      .then((response) => response.json())\n      .then((response) => {\n        setReleaseTag(response.tag_name);\n        setReleaseChanges(response.body);\n        setFetchingReleaseChanges(false);\n        setFetchReleaseFailed(false);\n      })\n      .catch(() => {\n        setFetchingReleaseChanges(false);\n        setFetchReleaseFailed(true);\n      });\n  }, []);\n\n  if (fetchingReleaseChanges) {\n    return <p>{__('Loading...')}</p>;\n  }\n\n  if (fetchReleaseFailed) {\n    return (\n      <div>\n        {releaseVersionTitle}\n        {seeReleaseNotes}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"release__notes\">\n      {releaseVersionTitle}\n      <p>\n        <MarkdownPreview content={releaseChanges} />\n      </p>\n      {seeReleaseNotes}\n    </div>\n  );\n};\n\nexport default LastReleaseChanges;\n","import LastReleaseChanges from './view';\n\nexport default LastReleaseChanges;\n","// @flow\nimport React from 'react';\nimport { Modal } from 'modal/modal';\nimport LastReleaseChanges from 'component/lastReleaseChanges';\n\nconst IS_MAC = navigator.userAgent.indexOf('Mac OS X') !== -1;\n\ntype Props = {\n  downloadUpgrade: () => void,\n  skipUpgrade: () => void,\n};\n\nclass ModalUpgrade extends React.PureComponent<Props> {\n  render() {\n    const { downloadUpgrade, skipUpgrade } = this.props;\n\n    return (\n      <Modal\n        className={IS_MAC ? '' : 'main-wrapper--scrollbar'}\n        isOpen\n        contentLabel={__('Upgrade available')}\n        title={__('LBRY leveled up')}\n        type=\"confirm\"\n        confirmButtonLabel={__('Upgrade')}\n        abortButtonLabel={__('Skip')}\n        onConfirmed={downloadUpgrade}\n        onAborted={skipUpgrade}\n      >\n        <p>\n          {__('An updated version of LBRY is now available.')}{' '}\n          {__('Your version is out of date and may be unreliable or insecure.')}\n        </p>\n        <LastReleaseChanges hideReleaseVersion />\n      </Modal>\n    );\n  }\n}\n\nexport default ModalUpgrade;\n","import { connect } from 'react-redux';\nimport { doDownloadUpgrade, doSkipUpgrade, doHideModal } from 'redux/actions/app';\nimport ModalUpgrade from './view';\n\nconst select = () => ({});\n\nconst perform = dispatch => ({\n  downloadUpgrade: () => dispatch(doDownloadUpgrade()),\n  skipUpgrade: () => {\n    dispatch(doHideModal());\n    dispatch(doSkipUpgrade());\n  },\n});\n\nexport default connect(\n  select,\n  perform\n)(ModalUpgrade);\n"],"names":["props","hideReleaseVersion","_useState2","_slicedToArray","useState","releaseTag","setReleaseTag","_useState4","releaseChanges","setReleaseChanges","_useState6","fetchingReleaseChanges","setFetchingReleaseChanges","_useState8","fetchReleaseFailed","setFetchReleaseFailed","releaseVersionTitle","React","__","release_tag","seeReleaseNotes","className","I18nMessage","tokens","release_notes","Button","button","label","href","useEffect","fetch","method","headers","Accept","then","response","json","tag_name","body","MarkdownPreview","content","IS_MAC","navigator","userAgent","indexOf","_React$PureComponent","_inherits","ModalUpgrade","_super","_createSuper","_classCallCheck","apply","arguments","key","value","_this$props","this","downloadUpgrade","skipUpgrade","Modal","isOpen","contentLabel","title","type","confirmButtonLabel","abortButtonLabel","onConfirmed","onAborted","LastReleaseChanges","connect","dispatch","doDownloadUpgrade","doHideModal","doSkipUpgrade"],"sourceRoot":""}