{"version":3,"file":"help-15224bb7056e196d3518.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/copyableText/index.js","webpack://odysee.com/../ui/component/copyableText/view.jsx","webpack://odysee.com/../ui/page/help/index.js","webpack://odysee.com/../ui/page/help/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","import { connect } from 'react-redux';\nimport { doToast } from 'redux/actions/notifications';\nimport CopyableText from './view';\n\nexport default connect(null, {\n  doToast,\n})(CopyableText);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport { FormField } from 'component/common/form';\nimport Button from 'component/button';\nimport React, { useRef } from 'react';\n\ntype Props = {\n  copyable: string,\n  onlyCopy: boolean,\n  snackMessage: ?string,\n  doToast: ({ message: string }) => void,\n  label?: string,\n  primaryButton?: boolean,\n  name?: string,\n  onCopy?: (string) => string,\n  enableInputMask?: boolean,\n};\n\nexport default function CopyableText(props: Props) {\n  const {\n    copyable,\n    onlyCopy,\n    doToast,\n    snackMessage,\n    label,\n    primaryButton = false,\n    name,\n    onCopy,\n    enableInputMask,\n  } = props;\n  const [maskInput, setMaskInput] = React.useState(enableInputMask);\n\n  const input = useRef();\n\n  function handleCopyText() {\n    if (enableInputMask || onlyCopy) {\n      navigator.clipboard\n        .writeText(copyable)\n        .then(() => {\n          doToast({ message: snackMessage || __('Text copied') });\n        })\n        .catch(() => {\n          doToast({ message: __('Failed to copy.'), isError: true });\n        });\n    } else {\n      const topRef = input.current;\n      if (topRef && topRef.input && topRef.input.current) {\n        topRef.input.current.select();\n        if (onCopy) {\n          // Allow clients to change the selection before making the copy.\n          onCopy(topRef.input.current);\n        }\n      }\n\n      document.execCommand('copy');\n      doToast({ message: snackMessage || __('Text copied') });\n    }\n  }\n\n  function onFocus() {\n    // We have to go a layer deep since the input is inside the form component\n    const topRef = input.current;\n    if (topRef && topRef.input && topRef.input.current) {\n      topRef.input.current.select();\n    }\n  }\n\n  return (\n    <FormField\n      type={maskInput ? 'password' : 'text'}\n      className=\"form-field--copyable\"\n      readOnly\n      name={name}\n      label={label}\n      value={copyable || ''}\n      ref={input}\n      onFocus={onFocus}\n      inputButton={\n        <Button button={primaryButton ? 'primary' : 'secondary'} icon={ICONS.COPY} onClick={handleCopyText} />\n      }\n      helper={\n        enableInputMask && (\n          <Button button=\"link\" onClick={() => setMaskInput(!maskInput)} label={maskInput ? __('Show') : __('Hide')} />\n        )\n      }\n    />\n  );\n}\n","import HelpPage from './view';\nimport { connect } from 'react-redux';\nimport { doOpenModal } from 'redux/actions/app';\nimport { selectHomepageAnnouncement } from 'redux/selectors/settings';\nimport { selectUser } from 'redux/selectors/user';\n\nconst select = (state) => ({\n  announcement: selectHomepageAnnouncement(state),\n  user: selectUser(state),\n});\n\nconst perform = {\n  doOpenModal,\n};\n\nexport default connect(select, perform)(HelpPage);\n","// @flow\nimport { SITE_NAME, SITE_HELP_EMAIL } from 'config';\nimport * as ICONS from 'constants/icons';\nimport * as React from 'react';\nimport Button from 'component/button';\nimport Page from 'component/page';\nimport Card from 'component/common/card';\nimport I18nMessage from 'component/i18nMessage';\nimport { getAuthToken } from 'util/saved-passwords';\nimport CopyableText from 'component/copyableText';\n\nimport * as MODALS from 'constants/modal_types';\n\ntype Props = {\n  announcement: string,\n  doOpenModal: (string, ?{}) => void,\n  user: any,\n};\n\nexport default function HelpPage(props: Props) {\n  const { announcement, doOpenModal, user } = props;\n\n  const canViewToken = process.env.ENABLE_WIP_FEATURES || (user && user.internal_feature);\n\n  const authToken = canViewToken && getAuthToken();\n\n  return (\n    <Page className=\"card-stack\">\n      {announcement && (\n        <Card\n          title={__(\"What's New\")}\n          subtitle={__('See what are the latest features and changes in Odysee.')}\n          actions={\n            <div className=\"section__actions\">\n              <Button\n                label={__(\"What's New\")}\n                icon={ICONS.FEEDBACK}\n                button=\"secondary\"\n                onClick={() => doOpenModal(MODALS.ANNOUNCEMENTS)}\n              />\n            </div>\n          }\n        />\n      )}\n\n      <Card\n        title={__('Visit the %SITE_NAME% Help Hub', { SITE_NAME })}\n        subtitle={__('Our support posts answer many common questions.')}\n        actions={\n          <div className=\"section__actions\">\n            <Button\n              href=\"https://help.odysee.tv/\"\n              label={__('View %SITE_NAME% Help Hub', { SITE_NAME })}\n              icon={ICONS.HELP}\n              button=\"secondary\"\n            />\n          </div>\n        }\n      />\n\n      <Card\n        title={__('Find assistance')}\n        subtitle={\n          <I18nMessage tokens={{ channel: <strong>#support</strong>, help_email: SITE_HELP_EMAIL }}>\n            Live help is available most hours in the %channel% channel of our Discord chat room. Or you can always email\n            us at %help_email%.\n          </I18nMessage>\n        }\n        actions={\n          <div className=\"section__actions\">\n            <Button\n              button=\"secondary\"\n              label={__('Join our Discord')}\n              icon={ICONS.CHAT}\n              href=\"https://chat.odysee.com\"\n            />\n            <Button button=\"secondary\" label={__('Email Us')} icon={ICONS.WEB} href={`mailto:${SITE_HELP_EMAIL}`} />\n          </div>\n        }\n      />\n\n      <Card\n        title={__('Email change and account deletion')}\n        subtitle={\n          <I18nMessage tokens={{ channel: <strong>#support</strong>, help_email: SITE_HELP_EMAIL }}>\n            Email address changes and account removal are processed manually on request via email. Email must come from\n            the original email being changed, or we'll need need to verify ownership another way.\n          </I18nMessage>\n        }\n        actions={\n          <Button button=\"secondary\" label={__('Email Us')} icon={ICONS.WEB} href={`mailto:${SITE_HELP_EMAIL}`} />\n        }\n      />\n\n      <Card\n        title={__('Report a bug or suggest something')}\n        subtitle={__('Did you find something wrong? Think Odysee could add something useful and cool?')}\n        actions={\n          <div className=\"section__actions\">\n            <Button navigate=\"/$/report\" label={__('Submit Feedback')} icon={ICONS.FEEDBACK} button=\"secondary\" />\n          </div>\n        }\n      />\n\n      {canViewToken && authToken && (\n        <Card\n          className=\"section\"\n          title={__('Your Access Token')}\n          actions={\n            <>\n              <CopyableText\n                primaryButton\n                enableInputMask\n                name=\"access-token\"\n                label={__('Authentication Token - do not share, this works like a password!')}\n                copyable={authToken}\n                snackMessage={__('Copied token')}\n              />\n            </>\n          }\n        />\n      )}\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","connect","doToast","copyable","onlyCopy","snackMessage","label","_props$primaryButton","primaryButton","name","onCopy","enableInputMask","_React$useState2","maskInput","setMaskInput","input","useRef","FormField","type","readOnly","value","ref","onFocus","topRef","current","select","inputButton","navigator","clipboard","writeText","then","message","isError","document","execCommand","helper","perform","doOpenModal","state","announcement","selectHomepageAnnouncement","user","selectUser","canViewToken","process","ENABLE_WIP_FEATURES","internal_feature","authToken","getAuthToken","Page","Card","MODALS","SITE_NAME","href","I18nMessage","tokens","channel","help_email","SITE_HELP_EMAIL","concat","navigate","CopyableText"],"sourceRoot":""}