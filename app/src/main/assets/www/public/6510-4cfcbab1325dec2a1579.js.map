{"version":3,"file":"6510-4cfcbab1325dec2a1579.js","mappings":"gbAoDA,MChDA,EDMA,SAA2BA,GACzB,IAAQC,EAA2BD,EAA3BC,UAAWC,EAAgBF,EAAhBE,YAEnB,OAAKD,SAAAA,EAAWE,QAAWF,SAAAA,EAAWG,YAKpCC,EAAAA,cAAA,OAAKC,UAAU,sBACbD,EAAAA,cAAA,gBACEA,EAAAA,cAAA,aAAQE,EAAG,uBACXF,EAAAA,cAAA,OAAKC,UAAU,2BACZL,aAAS,EAATA,EAAWE,SACVE,EAAAA,cAAA,OAAKG,MAAOD,EAAG,iBACbF,EAAAA,cAACI,EAAAA,GAAS,CACRC,MAAOH,EAAG,gBACVI,KAAK,eACLC,KAAK,WACLC,QAASZ,EAAUE,OAAOW,YAC1BC,SAAUb,IAAgBc,EAAAA,GAC1BC,SAAU,kBAAMhB,EAAUE,OAAOe,gBAAe,SAACC,GAAI,OAAMA,CAAI,GAAC,MAKrElB,aAAS,EAATA,EAAWG,cACVC,EAAAA,cAAA,OAAKG,MAAOD,EAAG,8BACbF,EAAAA,cAACI,EAAAA,GAAS,CACRC,MAAOH,EAAG,6BACVI,KAAK,oBACLC,KAAK,WACLC,QAASZ,EAAUG,YAAYgB,gBAC/BH,SAAU,kBAAMhB,EAAUG,YAAYiB,oBAAmB,SAACF,GAAI,OAAMA,CAAI,GAAC,QA5B9E,IAoCX,E,smCEeA,QA/CA,SAAmBnB,GACjB,IAAQsB,EAAwCtB,EAAxCsB,UAAWC,EAA6BvB,EAA7BuB,aAAcC,EAAexB,EAAfwB,WAE3BC,EAA4BpB,EAAAA,SAC0DqB,EAAAC,EAAhDtB,EAAAA,SAAeiB,EAAUM,IAAIZ,EAAAA,KAAgB,IAAG,GAArFa,EAAcH,EAAA,GAAEI,EAAiBJ,EAAA,GAClCK,EAAwB1B,EAAAA,aAC5B2B,EAAAA,EAAAA,IAAS,SAACC,GAAC,OAAKV,EAAa,CAAEW,IAAKlB,EAAAA,GAAamB,MAAOF,GAAI,GAAE,KAC9D,IAGF,OACE5B,EAAAA,cAAA,OACEC,UAAW8B,IAAW,iBAAkB,CACtC,6BAA8BZ,IAEhChB,MAAOD,EAAG,0FAERiB,GAAcnB,EAAAA,cAAA,aAAQE,EAAG,SAC3BF,EAAAA,cAAA,OAAKC,UAAU,+BACbD,EAAAA,cAACI,EAAAA,GAAS,CACR4B,IAAKZ,EACLa,YAAa/B,EAAG,eAChBK,KAAK,OACLN,UAAU,wBACVK,KAAK,YACLwB,MAAON,EACPZ,SAAU,SAACsB,GACTT,EAAkBS,EAAEC,OAAOL,OAC3BJ,EAAsBQ,EAAEC,OAAOL,MACjC,IAEF9B,EAAAA,cAACoC,EAAAA,QAAI,CAACC,KAAMC,EAAAA,MACZtC,EAAAA,cAACuC,EAAAA,QAAM,CACLF,KAAMC,EAAAA,OACN,aAAYpC,EAAG,SACfsC,OAAO,MACPvC,UAAU,wBACVwC,QAAS,WACPhB,EAAkB,IAClBP,EAAa,CAAEW,IAAKlB,EAAAA,GAAamB,MAAO,IAC1C,KAKV,E,yjCC1Ce,SAASY,EAAuBC,EAA6BC,EAAiBC,GAC3F,IAAAC,GAA6BC,EAAAA,EAAAA,MAArBC,EAAMF,EAANE,OAAQC,EAAQH,EAARG,SAEmFC,EAAA5B,GAArE6B,EAAAA,EAAAA,GAAkB,GAADC,OAAIR,EAAO,KAAAQ,OAAIH,EAASI,UAAYR,GAAgB,GAA5FS,EAAOJ,EAAA,GAAEK,EAAUL,EAAA,GAIzBM,EAAAlC,GAH2C6B,EAAAA,EAAAA,GAAkB,GAADC,OACxDR,EAAO,WAAAQ,OAAUH,EAASI,UAC7BR,GACD,GAHMY,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAMpCG,EAAQhB,EAAeiB,MAAK,SAACC,GAAC,OAAKA,CAAC,IAwBxC,OArBKF,IAGDA,EAFa,QAAXX,EAEMS,EAGAH,GAIZtD,EAAAA,WAAgB,WACduD,EAAWI,EACb,GAAG,CAACA,EAAOJ,IAEXvD,EAAAA,WAAgB,WACC,QAAXgD,GACFU,EAAkBC,EAGtB,GAAG,IAEIA,CACT,C,2BCrDMG,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,OAChBA,EAAAA,EAAAA,IAAgB,M,ukCCmlBtB,QAhjBA,SAAyBnE,GACvB,IA8DgBoE,EAAAC,EA7DdC,EAwBEtE,EAxBFsE,YACAC,EAuBEvE,EAvBFuE,UACAC,EAsBExE,EAtBFwE,iBACAC,EAqBEzE,EArBFyE,UACAC,EAoBE1E,EApBF0E,WACAC,EAmBE3E,EAnBF2E,kBACAC,EAkBE5E,EAlBF4E,UACAC,EAiBE7E,EAjBF6E,OACAC,EAgBE9E,EAhBF8E,QACAC,EAeE/E,EAfF+E,eACAC,EAcEhF,EAdFgF,mBACAC,EAaEjF,EAbFiF,iBACAC,EAYElF,EAZFkF,cACAC,EAWEnF,EAXFmF,kBACAC,EAUEpF,EAVFoF,WACAC,EASErF,EATFqF,WACAC,EAQEtF,EARFsF,mBACApF,EAOEF,EAPFE,YACAqF,EAMEvF,EANFuF,KACAC,EAKExF,EALFwF,QACAC,EAIEzF,EAJFyF,YACAC,EAGE1F,EAHF0F,iBAEAC,GACE3F,EAFF4F,gBAEE5F,EADF2F,cAGIE,GAAWC,EAAAA,EAAAA,MACX7F,EAAYI,EAAAA,WAAiB0F,EAAAA,GACnC5C,GAA2BC,EAAAA,EAAAA,MAAnB4C,EAAI7C,EAAJ6C,KAAM1C,EAAQH,EAARG,SACN2C,EAAqB3C,EAArB2C,OAAQvC,EAAaJ,EAAbI,SACyEH,EAAA5B,GAAzD6B,EAAAA,EAAAA,GAAkB,YAADC,OAAaH,EAASI,WAAY,GAAM,GAAlFwC,EAAQ3C,EAAA,GAAE4C,GAAW5C,EAAA,GACtBjC,GAAY,IAAI8E,gBAAgBH,GAChCI,GAAiB9B,GAAajD,GAAUM,IAAIZ,EAAAA,KAAiBwD,EAC7D8B,GAAmBpG,GAAeoB,GAAUM,IAAIZ,EAAAA,IAChDuF,GACJ7B,GAAe1D,EAAAA,GAAAA,SAAuBsF,KAAqBA,IAAqB3B,GAAqB,KACjG6B,GAAgBlF,GAAUM,IAAIZ,EAAAA,KAAoB,KAClDyF,GAAc5B,GAAUvD,GAAUM,IAAIZ,EAAAA,KAAmB,KACzD0F,GAAkBpF,GAAUM,IAAIZ,EAAAA,IAChC2F,GAAkBD,GAAkBA,GAAgBE,MAAM,KAAOxB,EACjEyB,GAAiBvF,GAAUM,IAAI,eAAiBgD,GAAa5D,EAAAA,GAC7D8F,KAAiBrC,GAAaA,IAAczD,EAAAA,IAAoByD,IAAczD,EAAAA,IAC9E+F,GAAiBrD,EAASsD,SAASC,EAAAA,UACnCC,GAAmBxD,EAASsD,SAASC,EAAAA,cAAsBvD,EAASsD,SAASC,EAAAA,WAC7EE,GAAoBJ,IAAkBG,GAC4DrD,GAAAlC,GAA9D6B,EAAAA,EAAAA,GAAkB,iBAADC,OAAkBH,EAASI,WAAY,GAAM,GAAjG0D,GAAavD,GAAA,GAAEwD,GAAgBxD,GAAA,GAEhCyD,GAAgBvE,EAAuB,CAACzB,GAAUM,IAAIZ,EAAAA,KAAoBA,EAAAA,GAAAA,KAAkB,UAAW,MACQuG,GAAA5F,GAAjE6B,EAAAA,EAAAA,GAAkB,qBAADC,OAAsBH,EAASI,UAAY,MAAK,GAA9G8D,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GACqEG,GAAA/F,GAAjE6B,EAAAA,EAAAA,GAAkB,qBAADC,OAAsBH,EAASI,UAAY,MAAK,GAA9GiE,GAAkBD,GAAA,GAAEE,GAAqBF,GAAA,GACsBhG,GAAAC,EAAlCtB,EAAAA,SAAemH,IAAmB,GAA/DK,GAAUnG,GAAA,GAAEoG,GAAapG,GAAA,GACsCqG,GAAApG,EAAlCtB,EAAAA,SAAesH,IAAmB,GAA/DK,GAAUD,GAAA,GAAEE,GAAaF,GAAA,GAC1BG,GAAiC7H,EAAAA,aACrC2B,EAAAA,EAAAA,IAAS,SAACmG,GAAC,OAAKV,GAAsBU,EAAE,GAAE,KAC1C,IAEIC,GAAiC/H,EAAAA,aACrC2B,EAAAA,EAAAA,IAAS,SAACmG,GAAC,OAAKP,GAAsBO,EAAE,GAAE,KAC1C,IA4BIE,IAZgB3C,GAIA,OAAlBc,IACAxF,EAAAA,GAGoB0E,GAEF1E,EAAAA,GAEH+B,EACjB,CAAC+B,EAASxD,GAAUM,IAAIZ,EAAAA,IAAkB+D,GAC1C,YACA/D,EAAAA,KAUF,SAASO,GAAa+G,GACpB,IAAMC,EAcR,SAAkBC,GAChB,IAAMC,EAAe,IAAIrC,gBAAgB9C,EAAS2C,QAMlD,OALAjF,EAAAA,GAAAA,SAAgB,SAAC0H,GAEU,OAArBpH,GAAUM,IAAI8G,IAAaD,EAAaE,IAAID,EAAGpH,GAAUM,IAAI8G,GACnE,IAEQF,EAAMtG,KACZ,KAAKlB,EAAAA,GACHyH,EAAaE,IAAI3H,EAAAA,GAAiBwH,EAAMrG,OACxC,MACF,KAAKnB,EAAAA,GACCwH,EAAMrG,QAAUnB,EAAAA,GAAAA,OAAAA,IAClByH,EAAY,OAAQzH,EAAAA,IAEpByH,EAAaE,IAAI3H,EAAAA,GAAgBwH,EAAMrG,OAEzC,MACF,KAAKnB,EAAAA,GACCwH,EAAMrG,QAAUqC,GAAoBgE,EAAMrG,QAAUnB,EAAAA,GACtDyH,EAAY,OAAQzH,EAAAA,IAEpByH,EAAaE,IAAI3H,EAAAA,GAAcwH,EAAMrG,OAEvC,MACF,KAAKnB,EAAAA,GAEDwH,EAAMrG,QAAUnB,EAAAA,IAChBwH,EAAMrG,QAAUnB,EAAAA,IAChBwH,EAAMrG,QAAUnB,EAAAA,IAEhByH,EAAY,OAAQzH,EAAAA,IACpByH,EAAaE,IAAI3H,EAAAA,GAAgBwH,EAAMrG,QAC9BqG,EAAMrG,QAAUnB,EAAAA,GACzByH,EAAY,OAAQzH,EAAAA,IAEpByH,EAAaE,IAAI3H,EAAAA,GAAgBwH,EAAMrG,OAEzC,MACF,KAAKnB,EAAAA,GACCwH,EAAMrG,QAAUnB,EAAAA,GAAAA,IAClByH,EAAY,OAAQzH,EAAAA,IAEpByH,EAAaE,IAAI3H,EAAAA,GAAiBwH,EAAMrG,OAE1C,MACF,KAAKnB,EAAAA,GACHyH,EAAaE,IAAI3H,EAAAA,GAAiBwH,EAAMrG,OACxC,MACF,KAAKnB,EAAAA,GACCwH,EAAMrG,QAAUnB,EAAAA,GACdsD,IAAgBtD,EAAAA,GAClByH,EAAY,OAAQzH,EAAAA,IAEpByH,EAAaE,IAAI3H,EAAAA,GAAawH,EAAMrG,OAE7BqG,EAAMrG,QAAUnB,EAAAA,IACrBsD,IAAgBtD,EAAAA,GAClByH,EAAY,OAAQzH,EAAAA,IAKtByH,EAAaE,IAAI3H,EAAAA,GAAawH,EAAMrG,OAEtC,MACF,KAAKnB,EAAAA,GACCwH,EAAMrG,QAAUnB,EAAAA,GAClByH,EAAY,OAAQzH,EAAAA,IAEpByH,EAAaE,IAAI3H,EAAAA,GAAmBwH,EAAMrG,OAIhD,MAAO,IAAAsB,OAAIgF,EAAaG,aAAgBjD,EAAe,IAAMA,EAAe,GAC9E,CAzFckD,CAASP,GACrB9C,EAAQ,GACRQ,EAAKuC,EACP,CAwFA,OAnGAlI,EAAAA,WAAgB,WACV2E,GACFmB,IAAY,EAGhB,GAAG,IA+FD9F,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKC,UAAU,sCACbD,EAAAA,cAAA,OAAKC,UAAU,wBACbD,EAAAA,cAAA,OAAKC,UAAU,sBACXmF,GACApF,EAAAA,cAAA,OAAKC,UAAU,4BACZU,EAAAA,GAAAA,KAAsB,SAACJ,GAAI,OAC1BP,EAAAA,cAACuC,EAAAA,QAAM,CACLV,IAAKtB,EACLiC,OAAO,MACPC,QAAS,SAACP,GAAC,OACThB,GAAa,CACXW,IAAKlB,EAAAA,GACLmB,MAAOvB,GACP,EAEJN,UAAW8B,IAAW,gCAADqB,OAAiC7C,GAAQ,CAC5D,wBAAyByH,KAAezH,IAE1CG,SAAU+D,EACVpC,MAAMoG,EAAAA,EAAAA,IAAclI,GACpBmI,UAAUD,EAAAA,EAAAA,IAAclI,KAAU+B,EAAAA,IAAY,QAAKqG,EACnDtI,MAAOH,GAAGuI,EAAAA,EAAAA,IAAclI,KACxB,KAIRP,EAAAA,cAAA,OAAKC,UAAU,iCACG0I,IAAf3D,IAA6BJ,GAC5B5E,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACuC,EAAAA,QAAM,CACLE,QAAS,WACPwC,EAAmB2D,EAAAA,IAAsB,EAC3C,EACApG,OAAO,MACPvC,UAAW8B,IAAW,mCAAoC,CACxD,wBAAyBiD,IAE3B,aAAY9E,EAAG,yBACfmC,KAAMC,EAAAA,aAERtC,EAAAA,cAACuC,EAAAA,QAAM,CACLE,QAAS,WACPwC,EAAmB2D,EAAAA,IAAsB,EAC3C,EACApG,OAAO,MACPvC,UAAW8B,IAAW,mCAAoC,CACxD,yBAA0BiD,IAE5B,aAAY9E,EAAG,yBACfmC,KAAMC,EAAAA,cAKdtC,EAAAA,cAAAA,EAAAA,SAAA,KACG8G,IACC9G,EAAAA,cAAA,OAAKC,UAAU,oDACbD,EAAAA,cAACI,EAAAA,GAAS,CACRC,MAAOH,EAAG,kBACVI,KAAK,iBACLC,KAAK,WACLC,QAASuG,GACTnG,SAAU,kBAAMoG,IAAkBD,GAAc,MAKxD/G,EAAAA,cAAA,OAAKC,UAAU,qCACX0E,GACA3E,EAAAA,cAACuC,EAAAA,QAAM,CACLC,OAAO,MACP,aAAYtC,EAAG,QACfD,UAAW8B,IAAW,uDAAwD,CAC5E,wBA5MhB8G,QACEhJ,GACEoB,GAAUM,IAAIZ,EAAAA,KACdM,GAAUM,IAAIZ,EAAAA,OACZf,SAAAA,EAAWkJ,kBAAmB7H,GAAUM,IAAIZ,EAAAA,KAC9CM,GAAUM,IAAIZ,EAAAA,KACdM,GAAUM,IAAIZ,EAAAA,KACdM,GAAUM,IAAIZ,EAAAA,MACdf,SAAiB,QAARmE,EAATnE,EAAWE,cAAM,IAAAiE,OAAR,EAATA,EAAmBtD,eACnBb,SAAsB,QAAboE,EAATpE,EAAWG,mBAAW,IAAAiE,OAAb,EAATA,EAAwBjD,kBAoMZ,oDAAqD8E,IAEvDxD,KAAMC,EAAAA,QACNG,QAAS,kBAAMqD,IAAaD,EAAS,KAIxCjG,aAAS,EAATA,EAAWkJ,kBAAmB9I,EAAAA,cAAC+I,EAAS,CAAC5H,YAAU,EAACF,UAAWA,GAAWC,aAAcA,OAG5FgE,IAASM,GAAYxF,EAAAA,cAAA,OAAKC,UAAU,+BAA+BiF,IAGtElF,EAAAA,cAAA,OACEC,UAAW8B,IAAW,gCAAiC,CACrD,yCAA0C8D,KAG5C7F,EAAAA,cAAA,OAAKC,UAAU,yBACbD,EAAAA,cAAA,OAAKC,UAAU,uBAEZ+H,KAAerH,EAAAA,IACdX,EAAAA,cAAA,OAAKC,UAAU,iCACbD,EAAAA,cAACI,EAAAA,GAAS,CACRH,UAAW8B,IAAW,yBAA0B,CAC9C,mCAAoCiE,KAAmB7B,IAEzD5D,KAAK,SACLD,KAAK,gBACLD,MAAOH,EAAG,aACV4B,MAAOkE,GACPpF,SAAU,SAACsB,GAAC,OACVhB,GAAa,CACXW,IAAKlB,EAAAA,GACLmB,MAAOI,EAAEC,OAAOL,OAChB,GAGHnB,EAAAA,GAAAA,KAAmB,SAACqI,GAAI,OACvBhJ,EAAAA,cAAA,UAAQ6B,IAAKmH,EAAMlH,MAAOkH,GAEvBA,IAASrI,EAAAA,IAAgBT,EAAG,SAE3B8I,IAASrI,EAAAA,IACPqI,IAASrI,EAAAA,IACTqI,IAASrI,EAAAA,IACTT,EAAG,SAAUuI,EAAAA,EAAAA,IAAcO,IAE9BA,IAASrI,EAAAA,IAAgBT,EAAG,YAC5B8I,IAASrI,EAAAA,IAAoBT,EAAG,WAC1B,MAOhBuG,IACCzG,EAAAA,cAAA,OACEC,UAAW8B,IAAW,gCAAiC,CACrD,0CAA2CkE,MAG7CjG,EAAAA,cAACI,EAAAA,GAAS,CACRH,UAAW8B,IAAW,yBAA0B,CAC9C,mCAAoCkE,KAEtC1F,KAAK,SACLD,KAAK,YACLD,MAAOH,EAAG,gBACV4B,MAAOmE,IAAoBtF,EAAAA,GAC3BC,SAAU,SAACsB,GAAC,OACVhB,GAAa,CACXW,IAAKlB,EAAAA,GACLmB,MAAOI,EAAEC,OAAOL,OAChB,GAGHlC,EAAUqJ,aAAaC,KAAI,SAAC3I,GAC3B,GAAIA,IAASI,EAAAA,IAAqBJ,IAASI,EAAAA,KAAqB2F,GAC9D,OACEtG,EAAAA,cAAA,UAAQ6B,IAAKtB,EAAMuB,MAAOvB,GAEvBA,IAASI,EAAAA,IAAuBT,EAAG,YACnCK,IAASI,EAAAA,IAAoBT,EAAG,WAChCK,IAASI,EAAAA,IAAmBT,EAAG,UAC/BK,IAASI,EAAAA,IAAiBT,EAAG,SAC7BK,IAASI,EAAAA,IAAiBT,EAAG,SAC7BK,IAASI,EAAAA,IAAiBT,EAAG,SAC7BK,IAASI,EAAAA,IAAiBT,EAAG,SAC7BK,IAASI,EAAAA,IAAkBT,EAAG,SAC9BK,IAASI,EAAAA,IAAoBT,EAAG,YAChCK,IAASI,EAAAA,IAAkBT,EAAG,OAIvC,MAMLuG,IACCzG,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKC,UAAW,iCACdD,EAAAA,cAACI,EAAAA,GAAS,CACRH,UAAW8B,IAAW,yBAA0B,CAC9C,mCAAoCkF,KAEtC5G,MAAOH,EAAG,2CACVK,KAAK,SACLD,KAAK,WACLI,WAEyB,OAArBuF,IACAA,KAAqBtF,EAAAA,IACrBsF,KAAqBtF,EAAAA,IACrBuF,KAAoBvF,EAAAA,IACpBuF,KAAoBvF,EAAAA,IAGxBmB,MAAOmF,IAAiBtG,EAAAA,GAAAA,IACxBC,SAAU,SAACsB,GAAC,OACVhB,GAAa,CACXW,IAAKlB,EAAAA,GACLmB,MAAOI,EAAEC,OAAOL,OAChB,GAGHnB,EAAAA,GAAAA,KAAsB,SAACwI,GAAG,OACzBnJ,EAAAA,cAAA,UAAQ6B,IAAKuH,OAAOD,GAAMrH,MAAOqH,GAE9BA,IAAQxI,EAAAA,GAAAA,OAAqBT,EAAG,uBAChCiJ,IAAQxI,EAAAA,GAAAA,MAAoBT,EAAG,mBAC/BiJ,IAAQxI,EAAAA,GAAAA,KAAmBT,EAAG,OAC9BiJ,IAAQxI,EAAAA,GAAAA,QAAsBT,EAAG,UAC3B,MAId+G,KAAkBtG,EAAAA,GAAAA,QACjBX,EAAAA,cAAA,OAAKC,UAAU,2CACbD,EAAAA,cAAA,OAAKC,UAAU,iCACbD,EAAAA,cAACI,EAAAA,GAAS,CACRC,MAAOH,EAAG,eACVK,KAAK,SACLD,KAAK,wBACLwB,MAAO0F,GACP5G,SAAU,SAACsB,GACTuF,GAAcvF,EAAEC,OAAOL,OACvB+F,GAA+B3F,EAAEC,OAAOL,MAC1C,KAGJ9B,EAAAA,cAAA,OAAKC,UAAU,iCACbD,EAAAA,cAACI,EAAAA,GAAS,CACRC,MAAOH,EAAG,eACVK,KAAK,SACLD,KAAK,wBACLwB,MAAO6F,GACP/G,SAAU,SAACsB,GACT0F,GAAc1F,EAAEC,OAAOL,OACvBiG,GAA+B7F,EAAEC,OAAOL,MAC1C,QASX,EAqCD9B,EAAAA,cAAA,OAAKC,UAAW,iCACdD,EAAAA,cAACI,EAAAA,GAAS,CACRH,UAAW8B,IAAW,yBAA0B,CAC9C,mCACEyE,KAAmB7F,EAAAA,GAA2B6F,KAAmB7F,EAAAA,KAErEN,MAAOH,EAAG,SACVK,KAAK,SACLD,KAAK,cACLwB,MAAO0E,GACP5F,SAAU,SAACsB,GAAC,OACVhB,GAAa,CACXW,IAAKlB,EAAAA,GACLmB,MAAOI,EAAEC,OAAOL,OAChB,GAGJ9B,EAAAA,cAAA,UAAQ8B,MAAOnB,EAAAA,IAAoBT,EAAG,QACtCF,EAAAA,cAAA,UAAQ8B,MAAOnB,EAAAA,GAA0BT,EAAG,SAC5CF,EAAAA,cAAA,UAAQ8B,MAAOnB,EAAAA,IAA0BT,EAAG,SAAiB,QAMhE8H,KAAerH,EAAAA,IACdX,EAAAA,cAAA,OAAKC,UAAW,iCACdD,EAAAA,cAACI,EAAAA,GAAS,CACRH,UAAW8B,IAAW,yBAA0B,CAC9C,mCAAoCqE,KAEtC/F,MAAOH,EAAG,WACVK,KAAK,SACLD,KAAK,UACLwB,MAAOsE,IAAezF,EAAAA,GAAAA,OAAAA,IACtBC,SAAU,SAACsB,GAAC,OAAKhB,GAAa,CAAEW,IAAKlB,EAAAA,GAAgBmB,MAAOI,EAAEC,OAAOL,OAAQ,GAE5EuH,OAAOC,QAAQ3I,EAAAA,IAAYuI,KAAI,SAAAK,GAAkB,IAAAC,EAAAlI,EAAAiI,EAAA,GAAXzH,GAAF0H,EAAA,GAAOA,EAAA,IAC1C,OAEExJ,EAAAA,cAAA,UAAQ6B,IAAKC,EAAMD,IAAKC,MAAOA,EAAMD,KAElC3B,EAAG4B,EAAM2H,KAGhB,MAKLpD,IACCrG,EAAAA,cAAA,OAAKC,UAAW,iCACdD,EAAAA,cAAA,aAAQE,EAAG,8BACXF,EAAAA,cAACuC,EAAAA,QAAM,CACLC,OAAO,MACPvC,UAAU,8BACVI,MAAOH,EAAG,SACVuC,QA5alB,WACE,IAAM2F,EAAe,IAAIrC,gBAAgBH,GACzCwC,EAAY,OAAQ,cACpBA,EAAY,OAAQ,eACpB,IAAMsB,EAAY,IAAHtG,OAAOgF,EAAaG,YAEnC5C,EAAK+D,EACP,MA0aU1J,EAAAA,cAAA,OAAKC,UAAU,uBACZL,EAAUE,QACTE,EAAAA,cAAA,OAAKC,UAAU,iCACbD,EAAAA,cAAC2J,EAAiB,CAAC/J,UAAWA,EAAWC,YAAaoG,MAG1DjG,EAAAA,cAAA,OAAKC,UAAU,mCACXL,SAAAA,EAAWkJ,kBAAmB9I,EAAAA,cAAC+I,EAAS,CAAC9H,UAAWA,GAAWC,aAAcA,SAKtFgE,GAAQM,GAAYxF,EAAAA,cAAA,OAAKC,UAAU,+BAA+BiF,IAGpEL,GAAiBC,EAGxB,ECxlBA,IAOM8E,GAAU,CACd3E,mBAAAA,EAAAA,IAGF,UAAe4E,EAAAA,EAAAA,KAXA,SAACC,GAAK,MAAM,CACzBC,SAASC,EAAAA,EAAAA,IAA0BF,GACnCG,UAAUC,EAAAA,EAAAA,IAAwBJ,GAClCzE,kBAAkB8E,EAAAA,EAAAA,IAAoBL,EAAOlB,EAAAA,IAC7CrD,iBAAiB6E,EAAAA,EAAAA,IAAeN,GACjC,GAM8BF,GAA/B,CAAwCS,G,0pFC40BxC,UAAeC,EAAAA,EAAAA,KAruBf,SAA2B3K,GACzB,IAogB4B4K,EAAmBC,EAngB7CC,EA4EE9K,EA5EF8K,cACAC,EA2EE/K,EA3EF+K,mBAAkBC,EA2EhBhL,EA1EFiL,WAAAA,OAAU,IAAAD,GAAOA,EACjBpK,EAyEEZ,EAzEFY,KACAsK,EAwEElL,EAxEFkL,SACAC,EAuEEnL,EAvEFmL,kCACAC,EAsEEpL,EAtEFoL,KACAC,EAqEErL,EArEFqL,QACA/G,EAoEEtE,EApEFsE,YACA8F,EAmEEpK,EAnEFoK,QACA7E,EAkEEvF,EAlEFuF,KACA+F,EAiEEtL,EAjEFsL,WACAlG,EAgEEpF,EAhEFoF,WACAmG,EA+DEvL,EA/DFuL,mBACAjB,EA8DEtK,EA9DFsK,SACAxJ,EA6DEd,EA7DFc,YACA0K,EA4DExL,EA5DFwL,eACAC,EA2DEzL,EA3DFyL,QACAnI,EA0DEtD,EA1DFsD,SACA6B,EAyDEnF,EAzDFmF,kBACAJ,EAwDE/E,EAxDF+E,eACAF,EAuDE7E,EAvDF6E,OACAC,EAsDE9E,EAtDF8E,QACA4G,EAqDE1L,EArDF0L,YACAC,EAoDE3L,EApDF2L,OACAhL,EAmDEX,EAnDFW,KACA8D,EAkDEzE,EAlDFyE,UACAmH,EAiDE5L,EAjDF4L,iBACAlH,EAgDE1E,EAhDF0E,WACAC,EA+CE3E,EA/CF2E,kBACAzE,EA8CEF,EA9CFE,YACAqE,EA6CEvE,EA7CFuE,UAASsH,EA6CP7L,EA5CFwE,iBAAAA,QAAgB,IAAAqH,EAAG7K,EAAAA,GAAa6K,EAChCC,GA2CE9L,EA3CF8L,iBACAC,GA0CE/L,EA1CF+L,cACAC,GAyCEhM,EAzCFgM,qBACAC,GAwCEjM,EAxCFiM,gBACAjH,GAuCEhF,EAvCFgF,mBACA5D,GAsCEpB,EAtCFoB,gBAAe8K,GAsCblM,EArCFmM,eAAAA,QAAc,IAAAD,IAAOA,GACrBE,GAoCEpM,EApCFoM,aAEAxH,GAkCE5E,EAlCF4E,UACAyH,GAiCErM,EAjCFqM,KACAC,GAgCEtM,EAhCFsM,WACAC,GA+BEvM,EA/BFuM,KACAlH,GA8BErF,EA9BFqF,WAAUmH,GA8BRxM,EA7BFyF,YAAAA,QAAW,IAAA+G,IAAQA,GACnBC,GA4BEzM,EA5BFyM,SACAC,GA2BE1M,EA3BF0M,SACAC,GA0BE3M,EA1BF2M,oBACA/G,GAyBE5F,EAzBF4F,gBACAgH,GAwBE5M,EAxBF4M,gBACAlH,GAuBE1F,EAvBF0F,iBACAmH,GAsBE7M,EAtBF6M,uBACAC,GAqBE9M,EArBF8M,0BACAC,GAoBE/M,EApBF+M,sBACAC,GAmBEhN,EAnBFgN,YACArH,GAkBE3F,EAlBF2F,aAAYsH,GAkBVjN,EAjBFkN,iBAAAA,QAAgB,IAAAD,IAAQA,GACxBE,GAgBEnN,EAhBFmN,UACAC,GAeEpN,EAfFoN,YAAWC,GAeTrN,EAdFsN,UAAAA,QAAS,IAAAD,IAAQA,GACjBE,GAaEvN,EAbFuN,mBACAC,GAYExN,EAZFwN,MACAC,GAWEzN,EAXFyN,YACAC,GAUE1N,EAVF0N,WAAUC,GAUR3N,EATFiF,iBAAAA,QAAgB,IAAA0I,IAAQA,GACxBC,GAQE5N,EARF4N,eACAC,GAOE7N,EAPF6N,eAAcC,GAOZ9N,EANF+N,kBAAAA,QAAiB,IAAAD,IAAOA,GAAAE,GAMtBhO,EALFiO,YAAAA,QAAW,IAAAD,GAAG,GAAEA,GAChBE,GAIElO,EAJFkO,qCACAC,GAGEnO,EAHFmO,uCACAC,GAEEpO,EAFFoO,cACAC,GACErO,EADFqO,kBAGIC,GAAU/B,KAASA,GAAKE,UAAYF,GAAKgC,MACzCC,GAAkBnO,EAAAA,SAAc,WACpC,GAAKiO,GAAL,CAEA,IAAIE,EAAkB,GAiBtB,OAfIjC,IAAQA,GAAKE,UACfF,GAAKE,SAASgC,MAAK,SAACC,GAClB,IAAMC,EAAQjB,GAAWgB,GACzB,IAAKC,EAEH,OADAH,OAAkBxF,GACX,EAGT,IAAM4F,EAAMD,EAAME,eAAiBF,EAAME,cAGzCL,EAAgBxI,KAAK4I,EACvB,IAGKJ,CAnBuB,CAoBhC,GAAG,CAACd,GAAYY,GAAS/B,KAEnBuC,GAAwC,SAAnBrD,EAAQpI,OAC3B4C,GAAW3C,EAAX2C,OACF8I,GAAW1O,EAAAA,SACwBqB,GAAAC,GAAjBtB,EAAAA,SAAe,GAAE,GAAlC2O,GAAItN,GAAA,GAAE8D,GAAO9D,GAAA,GACoCqG,GAAApG,GAAhBtB,EAAAA,WAAgB,GAAjD4O,GAAYlH,GAAA,GAAEmH,GAAenH,GAAA,GAC9BoH,IAAgBC,EAAAA,EAAAA,MAChBC,GAAYjD,IAAgBA,GAAa7C,KAAI,SAAC+F,GAAC,OAAKA,EAAE3O,IAAI,KAAM,GAChEW,GAAY,IAAI8E,gBAAgBH,IAChCsJ,GACHnE,GAAQoE,GAAiBpE,IACM,OAA/B9J,GAAUM,IAAIZ,EAAAA,KAAyBM,GAAUM,IAAIZ,EAAAA,KACrDsD,GAAekL,GAAiBlL,GAC7B+B,GAAiB9B,GAAajD,GAAUM,IAAIZ,EAAAA,KAAiBwD,GAC7DiC,GAAc5B,GAAUvD,GAAUM,IAAIZ,EAAAA,KAAmBA,EAAAA,GAAAA,OAAAA,IACzDyO,IA+YsB7E,EA/YoB9J,EAgZ1C+J,OADyCA,EA/Yc8B,IAiZlD/B,EAEAC,GAjZuC6E,GAAA/N,GAAhBtB,EAAAA,WAAgB,GAA3CsP,GAASD,GAAA,GAAEE,GAAYF,GAAA,GAExBG,GAAYvO,GAAUM,IAAIZ,EAAAA,KAAoB,KAC9C8O,GAAuBpK,KAAqBmH,GAC5CkD,IAAiBC,EAAAA,EAAAA,IAA0BpK,GAAiBkK,GAAsBlD,GAAiBiD,IAErGI,GAAiBxL,GAAamH,GAAoB,KAClDrF,GAAkB7B,GAAcC,GAAqB,KAEnD2B,GAAmBpG,GAAeoB,GAAUM,IAAIZ,EAAAA,IACtD,GAAIsF,GACF,OAAQA,IACN,KAAKtF,EAAAA,GACHiP,GAAiB3J,GACjBC,QAAkByC,EAClB,MACF,KAAKhI,EAAAA,GACHiP,GAAiB3J,GACjB,MAEF,KAAKtF,EAAAA,GACHiP,GAAiBjP,EAAAA,GACjBuF,QAAkByC,EAClB,MAEF,KAAKhI,EAAAA,GACL,KAAKA,EAAAA,GACL,KAAKA,EAAAA,GACL,KAAKA,EAAAA,GACL,KAAKA,EAAAA,GACL,KAAKA,EAAAA,GACHuF,GAAkBD,GAClB,MAEF,KAAKtF,EAAAA,GACHiP,QAAiBjH,EACjBzC,QAAkByC,EAClB,MAEF,QACEkH,IAAO,EAAO,oCAAqC5J,IAKzD,IAAMgB,GAAgBvE,EAAuB,CAACzB,GAAUM,IAAIZ,EAAAA,KAAoBA,EAAAA,GAAAA,KAAkB,UAAW,MACtGwG,GAAuF7F,IAAjE6B,EAAAA,EAAAA,GAAkB,qBAADC,OAAsBH,EAASI,UAAY,MAAK,GAArE,GAClBiE,GAAuFhG,IAAjE6B,EAAAA,EAAAA,GAAkB,qBAADC,OAAsBH,EAASI,UAAY,MAAK,GAArE,GAClB0D,GAA+EzF,IAA9D6B,EAAAA,EAAAA,GAAkB,iBAADC,OAAkBH,EAASI,WAAY,GAAM,GAAlE,GACdgD,GAAkBpF,GAAUM,IAAIZ,EAAAA,IAChC2F,GAAkBD,GAAkBA,GAAgBE,MAAM,KAAOxB,EACjE+K,GAAmB5E,EACnB1E,GAAiBvF,GAAUM,IAAI,eAAiBgD,GAEhDwL,GAAkBjB,GAAgBkB,KAAKC,KAAMC,IAA6BF,KAAKC,KAAMC,IACrFC,GAA2B,CAAEnF,QAAAA,EAASf,SAAAA,EAAUlJ,gBAAAA,IAChDiH,GAAatF,EACjB,CAAC+B,EAASxD,GAAUM,IAAIZ,EAAAA,IAAkB+D,GAC1C,YACA/D,EAAAA,IAEIyP,GAAiBC,EAAAA,EAAAA,SACrBpK,GACAgB,GACA4D,EACA1D,GACAG,IAGEgJ,GAA2BC,GAAA,CAC7BC,UAAWT,GACXpB,KAAAA,GACArO,KAAAA,EACAmQ,WAAYrM,GAAa,CAAC,SAAU,SAAU,WAG9CsM,WAAW,EACXC,gBAAiB1D,QAAYtE,EAAY8D,GACzCmE,SAAUP,EAAAA,EAAAA,SAAqBF,IAC/BU,SAsUF,SAA8BpM,EAAiCD,GAC7D,IAAIqM,EAEJ,OAAQpM,GACN,KAAK9D,EAAAA,GACHkQ,EAAWlQ,EAAAA,GACX,MACF,KAAKA,EAAAA,GACHkQ,EAAWlQ,EAAAA,GACX,MACF,KAAKA,EAAAA,GACHkQ,EAAWlQ,EAAAA,GACX,MACF,KAAKA,EAAAA,GACHkQ,EAAWlQ,EAAAA,GACX,MACF,QACEkQ,EAAWlQ,EAAAA,GAGf,GAAI8D,IAAY9D,EAAAA,IAAmB6D,IAAW7D,EAAAA,GAAAA,OAAAA,IAC5C,OAAOkQ,EAAS3H,KAAI,SAACrF,GAAC,SAAAT,OAAQzC,EAAAA,GAAAA,OAAAA,KAAqByC,OAAGS,EAAC,IAGzD,OAAOgN,CACT,CA/VYC,CAAqB9I,GAAY5B,IAC3C2K,mBAAmB9D,SAAYtE,GAC3ByH,GAAiB,CAAEvF,SAAUuF,IAAmB,CAAC,GAGnDY,EAAAA,yBAA2BjE,GAC7BuD,GAAQW,eAAgB,GACfnE,KAAekE,EAAAA,yBAA6B5M,GAA2B,WAAdA,KAClEkM,GAAQY,YAAa,GAGnBxE,KACF4D,GAAQa,yBAA2BzE,IAGjClG,IAAkBpC,IAAczD,EAAAA,KAClC2P,GAAQc,WAAa5K,IAGnB4F,KACFkE,GAAQe,UAAYjF,IAGlB9F,KACFgK,GAAQgB,YAAchL,IAGpBwJ,KACFQ,GAAQK,iBAAmBL,GAAQK,iBAAmB,IAAIvN,OAAO0M,KAG/DZ,IACEA,KAAcvO,EAAAA,IAA6B,KAAduO,KAC3BA,KAAcvO,EAAAA,GAChB2P,GAAQiB,SAAWvC,GACVwC,MAAMC,QAAQvC,IACvBoB,GAAQiB,SAAWrC,GAEnBoB,GAAQiB,SAAWrC,GAAU3I,MAAM,MAKrCqF,KAEF0E,GAAQoB,kBAAoB9F,IAG1Be,IAAeiD,KAAmBjP,EAAAA,GACpC2P,GAAQqB,aAAehF,GACdiD,KAAmBjP,EAAAA,KACxBqH,KAAerH,EAAAA,IAAmBqF,KAAmBrF,EAAAA,GACvD2P,GAAQqB,aAAe,IAAHvO,OAAO4M,KAAK4B,MAAMC,MAASC,SAAS,EAAG9L,IAAgB+L,QAAQ,QAAQC,SAClFhK,KAAerH,EAAAA,IAAmBqH,KAAerH,EAAAA,KAOvD2P,GAAQgB,aAAehB,GAAQgB,YAAYW,OAAS,IACpD3B,GAAQiB,UAAYjB,GAAQiB,SAASU,OAAS,GAE/C3B,GAAQqB,aAAe,IAAHvO,OAAO4M,KAAK4B,MAAMC,MAASC,SAAS,EAAGnR,EAAAA,IAAgBoR,QAAQ,QAAQC,SAE1F1B,GAAQgB,aAAehB,GAAQgB,YAAYW,OAAS,IACpD3B,GAAQiB,UAAYjB,GAAQiB,SAASU,OAAS,GAE/C3B,GAAQqB,aAAe,IAAHvO,OAAO4M,KAAK4B,MAAMC,MAASC,SAAS,EAAGnR,EAAAA,IAAeoR,QAAQ,QAAQC,SAG1F1B,GAAQqB,aAAe,IAAHvO,OAAO4M,KAAK4B,MAAMC,MAASE,QAAQ,UAAUC,WAKnEjL,KACFuJ,GAAQ4B,uBAAwB,EAChC5B,GAAQ6B,yBAA0B,GAGhCjM,IAAmBA,KAAoBvF,EAAAA,IAAkByD,IAAczD,EAAAA,KACzE2P,GAAQ8B,aAA0C,iBAApBlM,GAA+B,CAACA,IAAmBA,IAG/E0J,IACEA,KAAmBjP,EAAAA,KACjB6Q,MAAMC,QAAQ7B,IAChBU,GAAQG,WAAab,GAErBU,GAAQG,WAAa,CAACb,KAKxBF,IACEA,KAAmB/O,EAAAA,KACrB2P,GAAQ+B,cAAgB3C,GAAenJ,MAAM,MAI7C2I,IACEA,KAAcvO,EAAAA,IAA6B,KAAduO,KAC3BA,KAAcvO,EAAAA,GAChB2P,GAAQiB,SAAWvC,GACVwC,MAAMC,QAAQvC,IACvBoB,GAAQiB,SAAWrC,GAEnBoB,GAAQiB,SAAWrC,GAAU3I,MAAM,MAKrC6I,KAAyBkB,GAAQoB,oBAC/BF,MAAMC,QAAQnB,GAAQG,YACpBH,GAAQG,WAAWwB,OAAS,IAC9B3B,GAAQG,WAAaH,GAAQG,WAAW6B,QAAO,SAAClO,GAAS,MAAmB,WAAdA,CAAsB,KAGtFkM,GAAQG,WAAa,CAAC,SAAU,YAIhC/E,KACF4E,GAAU5E,GAAc4E,KAG1B,IAAMzL,GAAgBqK,IAAaA,GAAU3I,MAAM,KAAK6H,MAAK,SAACa,GAAC,OAAKsD,EAAAA,GAAAA,SAAqBtD,EAAE,IAErFuD,IAAYC,EAAAA,EAAAA,IAA+BnC,IAC3CoC,GAAoBhI,EAAmB8H,IACvCG,GAAmC7H,EAAkC0H,IACrEI,QAA+CjK,IAAtB+J,GAkB2BG,GAAAvR,GAApBtB,EAAAA,SAAe,MAAK,GAAnD8S,GAAWD,GAAA,GAAEE,GAAcF,GAAA,IAiIlC,SAAkCC,EAAaxC,GAC7C,IAAKwC,EAEH,OAAO,EAKT,IAAIE,EAAczC,GAAA,GAAQuC,GAC1BE,EAAerE,MAAQ,EACvBqE,EAAerB,aAAe,GAE9B,IAAIsB,EAAU1C,GAAA,GAAQD,GAItB,OAHA2C,EAAWtE,MAAQ,EACnBsE,EAAWtB,aAAe,GAEnBuB,KAAKC,UAAUF,KAAgBC,KAAKC,UAAUH,EACvD,EAhJKI,CAAyBN,GAAaxC,MAEzCyC,GAAezC,IAEX7B,IAEF6B,GAAQ3B,KAAO,EACfxJ,GAAQmL,GAAQ3B,OACP+D,KAETpC,GAAQ3B,KAAOqB,KAAKC,KAAKyC,GAAkBT,OAASlC,IAChDO,GAAQ3B,OAASA,IACnBxJ,GAAQmL,GAAQ3B,QAKtB,IAAM0E,KAEJpF,KAAY3H,OAEP0F,UACsBrD,IAAtB+J,IACCjE,KACE1E,IACC4I,IACDD,IACAA,GAAkBT,QAElBS,GAAkBT,OAASlC,GAAkBO,GAAQ3B,MACrD+D,GAAkBT,OAASlC,IAAoB,IAGnDuD,GAAyBJ,KAAKC,UAAU7C,IAExCiD,GACJvT,EAAAA,cAAA,WACEA,EAAAA,cAAA,SACEA,EAAAA,cAACwT,EAAAA,EAAW,CACVC,OAAQ,CACNC,MACE1T,EAAAA,cAACuC,EAAAA,QAAM,CACLC,OAAO,OACPnC,MAAOH,GAAG,+BACVuC,QAAS,kBAAMoM,GAAgB8E,KAAKC,MAAM,MAIjD,kEAIH5T,EAAAA,cAAA,SACEA,EAAAA,cAACwT,EAAAA,EAAW,CACVC,OAAQ,CACNI,gBAAiB7T,EAAAA,cAACuC,EAAAA,QAAM,CAACC,OAAO,OAAOnC,MAAOH,GAAG,mBAAoB4T,KAAK,8BAE7E,+DAUP9T,EAAAA,WAAgB,WACTiO,KAGD/B,GAAKE,SACP4B,GAAkB9B,GAAKE,UAEdF,GAAKgC,MACdH,GAAc7B,GAAKgC,MAAM,GAE7B,GAAG,CAAChC,GAAM6B,GAAeC,GAAmBC,KAE5C,IAAM8F,GAAiBb,KAAKC,UAAUvF,IAmEtC,SAASuB,GAAiBF,GACxB,OAAIA,IAAMtO,EAAAA,IAAesO,IAAMtO,EAAAA,GACtBsO,EACEuC,MAAMC,QAAQxC,GAChBA,EAAE+E,KAAK,UADT,CAGT,CAEA,SAASC,UACUtL,IAAb0D,IAA0BsC,KAAStC,KAIlCtC,GAAW+B,IACV4G,KAAsBC,IACxBxN,GAAQwJ,GAAO,EAGrB,CAqCA,SAASuF,GAAclI,EAAMmI,EAAOjI,EAAMiC,GAUxC,OAAKjC,IAASF,GAASE,EAAKkI,iBAAmBlI,EAAKkI,kBAAoBD,EAC/DnI,EAGLmC,EACEnC,EAAKiG,OAAS9D,EAAgB8D,OACzBjG,EAAK5I,OAAO+K,IAGrBA,EAAgBkG,SAAQ,SAACC,GACnBtI,EAAKrF,SAAS2N,IAEhBtI,EAAKuI,OAAOvI,EAAKwI,QAAQF,GAAM,EAEnC,IAGAtI,EAAKuI,OAAME,MAAXzI,EAAI,CAAQ,EAAG,GAAC5I,OAAAsR,GAAKvG,KAEdnC,GAGFA,CACT,CAEA,SAAS2I,GAAmB3I,EAAM4B,GAChC,OAAI5B,GAAQ4B,GAAeA,EAAYqE,OAC9BjG,EAAKsG,QAAO,SAAC/D,GAAG,OAAMX,EAAYjH,SAAS4H,EAAI,IAEjDvC,CACT,CAhKAhM,EAAAA,WAAgB,WACd,IAAM4N,EAAcsF,KAAK0B,MAAMb,IAE/B,GAAI/H,GAAM,CAER,IAAM6I,EAAU7I,IAAQwF,MAAMsD,KAAK,IAAIC,IAAI/I,KAC3CkI,GAAcW,EAAS7M,GAAYkE,GAAMiC,IACzC,IAAM6G,EAAeL,GAAmBE,EAASjH,GAEjD2B,GAAayF,EACf,MAAO,GAAItC,GAET,GAAIE,IAA0BlE,GAASuG,QACrC1F,GAAab,GAASuG,cACjB,GAAKhH,GAGL,CACL,IAEMiH,EAAeP,GADJT,GADD1C,MAAMsD,KAAK,IAAIC,IAAIrC,KACK1K,GAAYkE,GAAMiC,IACRP,GAElD2B,GAAa2F,GACbxG,GAASuG,QAAUC,CACrB,MATE3F,GAAamD,IACbhE,GAASuG,QAAUvC,QASZvE,KAAoB7H,IAC7BiJ,GAAapB,GAEjB,GAAG,CACD7H,GACAoM,GACAqB,GACA9F,GACA2E,GACA5K,GACAkE,GACAiC,GACAnC,KAgIFhM,EAAAA,WAAgB,WACV+E,GACF8I,GAAqC9I,EAEzC,GAAG,CAACA,EAAY8I,KAEhB7N,EAAAA,WAAgB,WACd,GAAI0S,IAAqBtO,GAAaA,EAAUuC,SAAS,cAAe,CACtE,IAAMwO,EAAWzC,GAAkBxJ,KAAI,SAACqF,GAAG,IAAA6G,EAAA,OAAqB,QAArBA,EAAKhI,GAAYmB,UAAI,IAAA6G,OAAA,EAAhBA,EAAkBC,QAAQ,IAC1EvH,GAAuC,CAAEwH,cAAeH,GAC1D,CAEF,GAAG,CAACzC,GAAmBtO,EAAW0J,KAElC9N,EAAAA,WAAgB,WACd,GAAIqT,GAAqB,CACvB,IAAMkC,EAAgBrC,KAAK0B,MAAMtB,IAC3BkC,EAAcjF,GAAA,GACdpF,EAAiB,CAAEsK,MAAO,CAAEC,WAAW,IAAW,CAAC,GAEzDjL,EAAc8K,EAAeC,EAC/B,CACF,GAAG,CAAC/K,EAAe4I,GAAqBC,GAAwB1E,GAAczD,IAE9E,IAAMwK,GAAcrK,GAClBtL,EAAAA,cAACqK,GAAe,CACdtF,WAAYA,EACZd,YAAaA,EACb8G,KAAMA,EACN7G,UAAWA,EACXC,iBAAkBA,GAClBC,UAAWA,EACXC,WAAYA,EACZC,kBAAmBA,EACnBC,UAAWA,GACXE,QAASA,EACTC,eAAgBA,EAChBC,mBAAoBA,GACpBE,cAAeA,GACfC,kBAAmBA,EACnBK,QAASA,GACTH,WAAYA,GACZJ,iBAAkBA,GAClBQ,YAAaA,GACbE,aAAcA,GACdzF,YAAaA,EACbqF,KAAMA,IAIJ0Q,GACJ7L,GAAYzD,IAAmBA,GAAgB2L,OAAS,QAA2BtJ,IAAtB+J,GAE/D,OACE1S,EAAAA,cAACA,EAAAA,SAAc,KACZqL,GAAeA,EACfrG,GACChF,EAAAA,cAAA,YACI4L,IAAmBhB,GACnB5K,EAAAA,cAAA,OAAKC,UAAU,4BACbD,EAAAA,cAAA,OAAKC,UAAU,0CACZ0V,GACAlG,IAAwBzP,EAAAA,cAAC6V,EAAAA,EAAmB,QAIlD5K,GAAcjL,EAAAA,cAAA,WAAMiL,GACrBjL,EAAAA,cAAC8V,EAAAA,EAAS,CACR9Q,YAAU,EACV+E,QAAS6L,GACT5J,KAAMsD,GACNrD,WAAYA,GACZ8J,eAAgB9B,GAChBtF,KAAMA,GACNqH,SAAUjG,GACVwD,gBAAiBA,GACjB9H,iBAAkBA,GAClBE,qBAAsBA,GAEtBkB,iBAAkBA,GAClB0I,cAAejF,GACfpD,mBAAoBA,GACpBC,MAAOA,GACPK,eAAgBA,GAChBD,eAAgBA,KAGjBqI,IAAoBlI,IACnB1N,EAAAA,cAAA,OAAKC,UAAU,cACZ,IAAIuR,MAAMzB,IAAiBkG,KAAK,GAAG/M,KAAI,SAACrF,EAAGqS,GAAC,OAC3ClW,EAAAA,cAACmW,EAAAA,QAAgB,CAACtU,IAAKqU,EAAGjU,YAAY,UAAUmU,OAAK,GAAG,MAMhEpW,EAAAA,cAAA,WACG4K,GACC5K,EAAAA,cAAA,OAAKC,UAAU,4BACbD,EAAAA,cAAA,OAAKC,UAAU,oBACZ0V,GACAlG,IAAwBzP,EAAAA,cAAC6V,EAAAA,EAAmB,QAIlD5K,GAAcjL,EAAAA,cAAA,WAAMiL,GACrBjL,EAAAA,cAAC8V,EAAAA,EAAS,CACRvV,KAAMA,EACNwJ,QAAS6L,GACT5J,KAAMsD,GACNrD,WAAYA,GACZ8J,eAAgB9B,GAChBtF,KAAMA,GACNqH,SAAUjG,GACVwD,gBAAiBA,GACjB9H,iBAAkBA,GAClBE,qBAAsBA,GAEtBkB,iBAAkBA,GAClB0I,cAAejF,GACfpD,mBAAoBH,IAAeG,GACnCC,MAAOA,GACPK,eAAgBA,GAChBD,eAAgBA,KAGjBqI,IACClI,IACA,IAAI8D,MAAMzB,IACPkG,KAAK,GACL/M,KAAI,SAACrF,EAAGqS,GAAC,OACRlW,EAAAA,cAACqW,EAAAA,QAAY,CACXnJ,mBAAoBH,IAAeG,GACnCrL,IAAKqU,EACLjU,YAAY,UACZ1B,KAAMA,GACN,KAMlB,ICr0BA,IAeMqJ,GAAU,CACda,cAAAA,EAAAA,GACAoD,qCAAAA,EAAAA,GACAG,kBAAAA,EAAAA,GACAD,cAAAA,EAAAA,GACAD,uCAAAA,EAAAA,IAGF,UAAejE,EAAAA,EAAAA,KAvBA,SAACC,EAAOnK,GAAK,MAAM,CAChCoM,cAAcuK,EAAAA,EAAAA,IAAmBxM,GACjCY,oBAAoB6L,EAAAA,EAAAA,IAAyBzM,GAC7CgB,mCAAmC0L,EAAAA,EAAAA,IAAwC1M,GAC3EsD,aAAaqJ,EAAAA,EAAAA,IAAkB3M,GAC/BuD,YAAYqJ,EAAAA,EAAAA,IAAW5M,GACvBC,aAA2BpB,IAAlBhJ,EAAMoK,QAAwBpK,EAAMoK,SAAUC,EAAAA,EAAAA,IAA0BF,GACjFG,UAAUC,EAAAA,EAAAA,IAAwBJ,GAClC/I,iBAb8B4V,GAaUxM,EAAAA,EAAAA,IAAoBL,EAAOlB,EAAAA,IAb7BgO,EAakEjX,EAAMoB,gBAZvG6V,QAA8CD,EAASC,GAa9DnW,aAAa0J,EAAAA,EAAAA,IAAoBL,EAAOlB,EAAAA,IACxCrD,iBAAiB6E,EAAAA,EAAAA,IAAeN,GAChCzE,kBAAkB8E,EAAAA,EAAAA,IAAoBL,EAAOlB,EAAAA,IAC7C6D,2BAA2BoK,EAAAA,EAAAA,IAAgC/M,IAjB7D,IAAgC6M,EAAQC,CAkBvC,GAU8BhN,GAA/B,CAAwCkN,G,2GC7CxC,QCMe,WACb,OACE9W,EAAAA,cAACuC,EAAAA,QAAM,CACLtC,UAAU,mBACVoC,KAAMC,EAAAA,iBACNoG,SAAU,GACVqO,YAAa7W,EAAG,oFAChB8W,SAAQ,MAAA5T,OAAQwD,EAAAA,SAAc,KAAAxD,OAAI6T,EAAAA,IAGxC,C,kCCjBO,IAAMA,EAAqB,kB,6DCGrBvR,EAA2B1F,EAAAA,cAAoB,CAC1DiJ,aAActI,EAAAA,GACdmI,iBAAiB,G","sources":["webpack://odysee.com/../ui/component/claimListHeader/internal/additionalFilters/view.jsx","webpack://odysee.com/../ui/component/claimListHeader/internal/additionalFilters/index.js","webpack://odysee.com/../ui/component/claimListHeader/internal/tagSearch/tagSearch.jsx","webpack://odysee.com/../ui/effects/use-persistent-user-param.js","webpack://odysee.com/../ui/constants/searchable_languages.js","webpack://odysee.com/../ui/component/claimListHeader/view.jsx","webpack://odysee.com/../ui/component/claimListHeader/index.js","webpack://odysee.com/../ui/component/claimListDiscover/view.jsx","webpack://odysee.com/../ui/component/claimListDiscover/index.js","webpack://odysee.com/../ui/component/langFilterIndicator/index.js","webpack://odysee.com/../ui/component/langFilterIndicator/view.jsx","webpack://odysee.com/../ui/constants/hashes.js","webpack://odysee.com/../ui/contexts/claimSearchFilterContext.jsx"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { FormField } from 'component/common/form';\nimport * as CS from 'constants/claim_search';\n\ntype Props = {\n  filterCtx: any,\n  contentType: string,\n};\n\nfunction AdditionalFilters(props: Props) {\n  const { filterCtx, contentType } = props;\n\n  if (!filterCtx?.repost && !filterCtx?.membersOnly) {\n    return null;\n  }\n\n  return (\n    <div className=\"additional-filters\">\n      <fieldset>\n        <label>{__('Additional Filters')}</label>\n        <div className=\"filer-checkbox-wrapper\">\n          {filterCtx?.repost && (\n            <div title={__('Hide reposts')}>\n              <FormField\n                label={__('Hide reposts')}\n                name=\"hide_reposts\"\n                type=\"checkbox\"\n                checked={filterCtx.repost.hideReposts}\n                disabled={contentType === CS.CLAIM_REPOST}\n                onChange={() => filterCtx.repost.setHideReposts((prev) => !prev)}\n              />\n            </div>\n          )}\n\n          {filterCtx?.membersOnly && (\n            <div title={__('Hide members-only content')}>\n              <FormField\n                label={__('Hide members-only content')}\n                name=\"hide_members_only\"\n                type=\"checkbox\"\n                checked={filterCtx.membersOnly.hideMembersOnly}\n                onChange={() => filterCtx.membersOnly.setHideMembersOnly((prev) => !prev)}\n              />\n            </div>\n          )}\n        </div>\n      </fieldset>\n    </div>\n  );\n}\n\nexport default AdditionalFilters;\n","import AdditionalFilters from './view';\n\n// Placeholder: anticipating redux map in the future\n\nexport default AdditionalFilters;\n","// @flow\nimport React from 'react';\nimport type { ElementRef } from 'react';\n\nimport { FormField } from 'component/common/form';\nimport * as CS from 'constants/claim_search';\nimport Button from 'component/button';\nimport Icon from 'component/common/icon';\nimport * as ICONS from 'constants/icons';\nimport classnames from 'classnames';\nimport debounce from 'util/debounce';\n\ntype Props = {\n  urlParams: any,\n  handleChange: any,\n  standalone?: boolean, // Used outside of the collapsible Advanced Filter cluster.\n};\n\nfunction TagSearch(props: Props) {\n  const { urlParams, handleChange, standalone } = props;\n\n  const inputRef: ElementRef<any> = React.useRef();\n  const [tagSearchQuery, setTagSearchQuery] = React.useState(urlParams.get(CS.TAGS_KEY) || '');\n  const handleChangeDebounced = React.useCallback(\n    debounce((v) => handleChange({ key: CS.TAGS_KEY, value: v }), 500),\n    []\n  );\n\n  return (\n    <div\n      className={classnames('clh-tag-search', {\n        'clh-tag-search--standalone': standalone,\n      })}\n      title={__('Multiple tags can be added by separating them with a comma.\\nExample: sports,news,tv')}\n    >\n      {!standalone && <label>{__('Tags')}</label>}\n      <div className=\"clh-tag-search__input_group\">\n        <FormField\n          ref={inputRef}\n          placeholder={__('Search tags')}\n          type=\"text\"\n          className=\"clh-tag-search__input\"\n          name=\"tag_query\"\n          value={tagSearchQuery}\n          onChange={(e) => {\n            setTagSearchQuery(e.target.value);\n            handleChangeDebounced(e.target.value);\n          }}\n        />\n        <Icon icon={ICONS.TAG} />\n        <Button\n          icon={ICONS.REMOVE}\n          aria-label={__('Clear')}\n          button=\"alt\"\n          className=\"clh-tag-search__clear\"\n          onClick={() => {\n            setTagSearchQuery('');\n            handleChange({ key: CS.TAGS_KEY, value: '' });\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TagSearch;\n","// @flow\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport usePersistedState from 'effects/use-persisted-state';\n\n/**\n * Resolves and provides persistence for a user param.\n *\n * The double-state solution is to address this corner-case:\n *   1. Enter /$/popculture from sidebar.\n *      Assuming the current order is \"Trending\" as an example...\n *   2. Click \"New\"\n *   3. Click \"Top\"\n *   4. Click Back -- order must be \"New\"\n *   5. Click Back -- order must be \"Trending\"\n *\n * @param precedenceList\n * @param keyBase\n * @param keyDefaultValue\n * @returns {boolean}\n */\nexport default function usePersistentUserParam(precedenceList: Array<?any>, keyBase: string, keyDefaultValue: ?string) {\n  const { action, location } = useHistory();\n\n  const [stashed, setStashed] = usePersistedState(`${keyBase}-${location.pathname}`, keyDefaultValue);\n  const [stashedOnEntry, setStashedOnEntry] = usePersistedState(\n    `${keyBase}-entry-${location.pathname}`,\n    keyDefaultValue\n  );\n\n  // Find the first non-null value in the precedence list:\n  let param = precedenceList.find((x) => x);\n\n  // If nothing was resolved, grab the stashed value, depending on the navigation action:\n  if (!param) {\n    if (action === 'POP') {\n      // Reaching here means user have popped back to the page's entry point (e.g. '/$/tags' without any '?order=').\n      param = stashedOnEntry;\n    } else {\n      // This is the direct entry into the page, so we load the user's previous value.\n      param = stashed;\n    }\n  }\n\n  React.useEffect(() => {\n    setStashed(param);\n  }, [param, setStashed]);\n\n  React.useEffect(() => {\n    if (action !== 'POP') {\n      setStashedOnEntry(param);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- on mount only\n  }, []);\n\n  return param;\n}\n","import { getLanguageName } from './languages';\n\nconst SEARCHABLE_LANGUAGES = {\n  en: getLanguageName('en'),\n  hr: getLanguageName('hr'),\n  nl: getLanguageName('nl'),\n  fr: getLanguageName('fr'),\n  de: getLanguageName('de'),\n  it: getLanguageName('it'),\n  pl: getLanguageName('pl'),\n  pt: getLanguageName('pt'),\n  ru: getLanguageName('ru'),\n  es: getLanguageName('es'),\n  tr: getLanguageName('tr'),\n  cs: getLanguageName('cs'),\n};\n\n// Properties: language code (e.g. 'ja')\n// Values: name of the language in native form (e.g. '日本語')\nexport default SEARCHABLE_LANGUAGES;\n","// @flow\nimport AdditionalFilters from './internal/additionalFilters';\nimport TagSearch from './internal/tagSearch/tagSearch';\nimport * as CS from 'constants/claim_search';\nimport * as ICONS from 'constants/icons';\nimport * as SETTINGS from 'constants/settings';\nimport * as PAGES from 'constants/pages';\nimport type { Node } from 'react';\nimport classnames from 'classnames';\nimport React from 'react';\nimport usePersistedState from 'effects/use-persisted-state';\nimport usePersistentUserParam from 'effects/use-persistent-user-param';\nimport { useHistory } from 'react-router';\nimport { FormField } from 'component/common/form';\nimport Button from 'component/button';\nimport { toCapitalCase } from 'util/string';\nimport SEARCHABLE_LANGUAGES from 'constants/searchable_languages';\nimport { ClaimSearchFilterContext } from 'contexts/claimSearchFilterContext';\nimport { useIsMobile } from 'effects/use-screensize';\nimport debounce from 'util/debounce';\n\ntype Props = {\n  defaultTags: string,\n  freshness?: string,\n  defaultFreshness?: string,\n  claimType?: Array<string>,\n  streamType?: string | Array<string>,\n  defaultStreamType?: string | Array<string>,\n  feeAmount: string,\n  sortBy?: string,\n  orderBy?: Array<string>,\n  defaultOrderBy?: string,\n  hideAdvancedFilter: boolean,\n  hideFilters: boolean,\n  hideLayoutButton: boolean,\n  hasMatureTags: boolean,\n  hiddenNsfwMessage?: Node,\n  channelIds?: Array<string>,\n  tileLayout: boolean,\n  scrollAnchor?: string,\n  contentType: string,\n  meta?: Node,\n  setPage: (number) => void,\n  // --- redux ---\n  doSetClientSetting: (string, boolean, ?boolean) => void,\n  searchInLanguage: boolean,\n  languageSetting: string,\n};\n\nfunction ClaimListHeader(props: Props) {\n  const {\n    defaultTags,\n    freshness,\n    defaultFreshness,\n    claimType,\n    streamType,\n    defaultStreamType,\n    feeAmount,\n    sortBy,\n    orderBy,\n    defaultOrderBy,\n    hideAdvancedFilter,\n    hideLayoutButton,\n    hasMatureTags,\n    hiddenNsfwMessage,\n    channelIds,\n    tileLayout,\n    doSetClientSetting,\n    contentType,\n    meta,\n    setPage,\n    hideFilters,\n    searchInLanguage,\n    languageSetting,\n    scrollAnchor,\n  } = props;\n\n  const isMobile = useIsMobile();\n  const filterCtx = React.useContext(ClaimSearchFilterContext);\n  const { push, location } = useHistory();\n  const { search, pathname } = location;\n  const [expanded, setExpanded] = usePersistedState(`expanded-${location.pathname}`, false);\n  const urlParams = new URLSearchParams(search);\n  const freshnessParam = freshness || urlParams.get(CS.FRESH_KEY) || defaultFreshness;\n  const contentTypeParam = contentType || urlParams.get(CS.CONTENT_KEY);\n  const streamTypeParam =\n    streamType || (CS.FILE_TYPES.includes(contentTypeParam) && contentTypeParam) || defaultStreamType || null;\n  const languageParam = urlParams.get(CS.LANGUAGE_KEY) || null;\n  const sortByParam = sortBy || urlParams.get(CS.SORT_BY_KEY) || null;\n  const channelIdsInUrl = urlParams.get(CS.CHANNEL_IDS_KEY);\n  const channelIdsParam = channelIdsInUrl ? channelIdsInUrl.split(',') : channelIds;\n  const feeAmountParam = urlParams.get('fee_amount') || feeAmount || CS.FEE_AMOUNT_ANY;\n  const showDuration = !(claimType && claimType === CS.CLAIM_CHANNEL && claimType === CS.CLAIM_COLLECTION);\n  const isDiscoverPage = pathname.includes(PAGES.DISCOVER);\n  const isRabbitHolePage = pathname.includes(PAGES.RABBIT_HOLE) || pathname.includes(PAGES.WILD_WEST);\n  const showHideAnonymous = isDiscoverPage || isRabbitHolePage;\n  const [hideAnonymous, setHideAnonymous] = usePersistedState(`hideAnonymous-${location.pathname}`, false);\n\n  const durationParam = usePersistentUserParam([urlParams.get(CS.DURATION_KEY) || CS.DURATION.ALL], 'durUser', null);\n  const [minDurationMinutes, setMinDurationMinutes] = usePersistedState(`minDurUserMinutes-${location.pathname}`, null);\n  const [maxDurationMinutes, setMaxDurationMinutes] = usePersistedState(`maxDurUserMinutes-${location.pathname}`, null);\n  const [minMinutes, setMinMinutes] = React.useState(minDurationMinutes);\n  const [maxMinutes, setMaxMinutes] = React.useState(maxDurationMinutes);\n  const setMinDurationMinutesDebounced = React.useCallback(\n    debounce((m) => setMinDurationMinutes(m), 750),\n    []\n  );\n  const setMaxDurationMinutesDebounced = React.useCallback(\n    debounce((m) => setMaxDurationMinutes(m), 750),\n    []\n  );\n\n  const isFiltered = () =>\n    Boolean(\n      contentType ||\n        urlParams.get(CS.FRESH_KEY) ||\n        urlParams.get(CS.CONTENT_KEY) ||\n        (!filterCtx?.liftUpTagSearch && urlParams.get(CS.TAGS_KEY)) ||\n        urlParams.get(CS.DURATION_KEY) ||\n        urlParams.get(CS.FEE_AMOUNT_KEY) ||\n        urlParams.get(CS.LANGUAGE_KEY) ||\n        filterCtx?.repost?.hideReposts ||\n        filterCtx?.membersOnly?.hideMembersOnly\n    );\n\n  const languageValue = searchInLanguage\n    ? languageParam === null\n      ? languageSetting\n      : languageParam\n    : languageParam === null\n    ? CS.LANGUAGES_ALL\n    : languageParam;\n\n  const shouldHighlight = searchInLanguage\n    ? languageParam !== languageSetting && languageParam !== null\n    : languageParam !== CS.LANGUAGES_ALL && languageParam !== null;\n\n  const orderParam = usePersistentUserParam(\n    [orderBy, urlParams.get(CS.ORDER_BY_KEY), defaultOrderBy],\n    'orderUser',\n    CS.ORDER_BY_TRENDING\n  );\n\n  React.useEffect(() => {\n    if (hideAdvancedFilter) {\n      setExpanded(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function handleChange(change) {\n    const url = buildUrl(change);\n    setPage(1);\n    push(url);\n  }\n\n  function handleAdvancedReset() {\n    const newUrlParams = new URLSearchParams(search);\n    newUrlParams.delete('claim_type');\n    newUrlParams.delete('channel_ids');\n    const newSearch = `?${newUrlParams.toString()}`;\n\n    push(newSearch);\n  }\n\n  function buildUrl(delta) {\n    const newUrlParams = new URLSearchParams(location.search);\n    CS.KEYS.forEach((k) => {\n      // $FlowFixMe get() can return null\n      if (urlParams.get(k) !== null) newUrlParams.set(k, urlParams.get(k));\n    });\n\n    switch (delta.key) {\n      case CS.ORDER_BY_KEY:\n        newUrlParams.set(CS.ORDER_BY_KEY, delta.value);\n        break;\n      case CS.SORT_BY_KEY:\n        if (delta.value === CS.SORT_BY.NEWEST.key) {\n          newUrlParams.delete(CS.SORT_BY_KEY);\n        } else {\n          newUrlParams.set(CS.SORT_BY_KEY, delta.value);\n        }\n        break;\n      case CS.FRESH_KEY:\n        if (delta.value === defaultFreshness || delta.value === CS.FRESH_DEFAULT) {\n          newUrlParams.delete(CS.FRESH_KEY);\n        } else {\n          newUrlParams.set(CS.FRESH_KEY, delta.value);\n        }\n        break;\n      case CS.CONTENT_KEY:\n        if (\n          delta.value === CS.CLAIM_CHANNEL ||\n          delta.value === CS.CLAIM_REPOST ||\n          delta.value === CS.CLAIM_COLLECTION\n        ) {\n          newUrlParams.delete(CS.DURATION_KEY);\n          newUrlParams.set(CS.CONTENT_KEY, delta.value);\n        } else if (delta.value === CS.CONTENT_ALL) {\n          newUrlParams.delete(CS.CONTENT_KEY);\n        } else {\n          newUrlParams.set(CS.CONTENT_KEY, delta.value);\n        }\n        break;\n      case CS.DURATION_KEY:\n        if (delta.value === CS.DURATION.ALL) {\n          newUrlParams.delete(CS.DURATION_KEY);\n        } else {\n          newUrlParams.set(CS.DURATION_KEY, delta.value);\n        }\n        break;\n      case CS.LANGUAGE_KEY:\n        newUrlParams.set(CS.LANGUAGE_KEY, delta.value);\n        break;\n      case CS.TAGS_KEY:\n        if (delta.value === CS.TAGS_ALL) {\n          if (defaultTags === CS.TAGS_ALL) {\n            newUrlParams.delete(CS.TAGS_KEY);\n          } else {\n            newUrlParams.set(CS.TAGS_KEY, delta.value);\n          }\n        } else if (delta.value === CS.TAGS_FOLLOWED) {\n          if (defaultTags === CS.TAGS_FOLLOWED) {\n            newUrlParams.delete(CS.TAGS_KEY);\n          } else {\n            newUrlParams.set(CS.TAGS_KEY, delta.value); // redundant but special\n          }\n        } else {\n          newUrlParams.set(CS.TAGS_KEY, delta.value);\n        }\n        break;\n      case CS.FEE_AMOUNT_KEY:\n        if (delta.value === CS.FEE_AMOUNT_ANY) {\n          newUrlParams.delete(CS.FEE_AMOUNT_KEY);\n        } else {\n          newUrlParams.set(CS.FEE_AMOUNT_KEY, delta.value);\n        }\n        break;\n    }\n    return `?${newUrlParams.toString()}` + (scrollAnchor ? '#' + scrollAnchor : '');\n  }\n\n  return (\n    <>\n      <div className=\"claim-search__wrapper clh__wrapper\">\n        <div className=\"claim-search__header\">\n          <div className=\"claim-search__top\">\n            {!hideFilters && (\n              <div className=\"claim-search__menu-group\">\n                {CS.ORDER_BY_TYPES.map((type) => (\n                  <Button\n                    key={type}\n                    button=\"alt\"\n                    onClick={(e) =>\n                      handleChange({\n                        key: CS.ORDER_BY_KEY,\n                        value: type,\n                      })\n                    }\n                    className={classnames(`button-toggle button-toggle--${type}`, {\n                      'button-toggle--active': orderParam === type,\n                    })}\n                    disabled={orderBy}\n                    icon={toCapitalCase(type)}\n                    iconSize={toCapitalCase(type) === ICONS.NEW ? 20 : undefined}\n                    label={__(toCapitalCase(type))}\n                  />\n                ))}\n              </div>\n            )}\n            <div className=\"claim-search__menu-group\">\n              {tileLayout !== undefined && !hideLayoutButton && (\n                <>\n                  <Button\n                    onClick={() => {\n                      doSetClientSetting(SETTINGS.TILE_LAYOUT, true);\n                    }}\n                    button=\"alt\"\n                    className={classnames(`button-toggle button-toggle--top`, {\n                      'button-toggle--active': tileLayout,\n                    })}\n                    aria-label={__('Change to tile layout')}\n                    icon={ICONS.VIEW_TILES}\n                  />\n                  <Button\n                    onClick={() => {\n                      doSetClientSetting(SETTINGS.TILE_LAYOUT, false);\n                    }}\n                    button=\"alt\"\n                    className={classnames(`button-toggle button-toggle--top`, {\n                      'button-toggle--active': !tileLayout,\n                    })}\n                    aria-label={__('Change to list layout')}\n                    icon={ICONS.VIEW_LIST}\n                  />\n                </>\n              )}\n            </div>\n            <>\n              {showHideAnonymous && (\n                <div className=\"claim-search__menu-group hide-anonymous-checkbox\">\n                  <FormField\n                    label={__('Hide anonymous')}\n                    name=\"hide_anonymous\"\n                    type=\"checkbox\"\n                    checked={hideAnonymous}\n                    onChange={() => setHideAnonymous(!hideAnonymous)}\n                  />\n                </div>\n              )}\n            </>\n            <div className=\"claim-search__menu-group stretch\">\n              {!hideAdvancedFilter && (\n                <Button\n                  button=\"alt\"\n                  aria-label={__('More')}\n                  className={classnames(`button-toggle button-toggle--top button-toggle--more`, {\n                    'button-toggle--custom': isFiltered(),\n                    'button-toggle--active button-toggle--bottom-arrow': expanded,\n                  })}\n                  icon={ICONS.SLIDERS}\n                  onClick={() => setExpanded(!expanded)}\n                />\n              )}\n\n              {filterCtx?.liftUpTagSearch && <TagSearch standalone urlParams={urlParams} handleChange={handleChange} />}\n            </div>\n          </div>\n          {meta && !isMobile && <div className=\"section__actions--no-margin\">{meta}</div>}\n        </div>\n\n        <div\n          className={classnames('claim-search__filters-wrapper', {\n            'claim-search__filters-wrapper-expanded': expanded,\n          })}\n        >\n          <div className=\"claim-search__filters\">\n            <div className=\"claim-search__menus\">\n              {/* FRESHNESS FIELD */}\n              {orderParam === CS.ORDER_BY_TOP && (\n                <div className=\"claim-search__input-container\">\n                  <FormField\n                    className={classnames('claim-search__dropdown', {\n                      'claim-search__dropdown--selected': freshnessParam !== defaultFreshness,\n                    })}\n                    type=\"select\"\n                    name=\"trending_time\"\n                    label={__('How Fresh')}\n                    value={freshnessParam}\n                    onChange={(e) =>\n                      handleChange({\n                        key: CS.FRESH_KEY,\n                        value: e.target.value,\n                      })\n                    }\n                  >\n                    {CS.FRESH_TYPES.map((time) => (\n                      <option key={time} value={time}>\n                        {/* i18fixme */}\n                        {time === CS.FRESH_DAY && __('Today')}\n                        {\n                          time !== CS.FRESH_ALL &&\n                            time !== CS.FRESH_DEFAULT &&\n                            time !== CS.FRESH_DAY &&\n                            __('This ' + toCapitalCase(time)) /* yes, concat before i18n, since it is read from const */\n                        }\n                        {time === CS.FRESH_ALL && __('All time')}\n                        {time === CS.FRESH_DEFAULT && __('Default')}\n                      </option>\n                    ))}\n                  </FormField>\n                </div>\n              )}\n\n              {/* CONTENT_TYPES FIELD - display using same logic as showDuration */}\n              {showDuration && (\n                <div\n                  className={classnames('claim-search__input-container', {\n                    'claim-search__input-container--selected': contentTypeParam,\n                  })}\n                >\n                  <FormField\n                    className={classnames('claim-search__dropdown', {\n                      'claim-search__dropdown--selected': contentTypeParam,\n                    })}\n                    type=\"select\"\n                    name=\"claimType\"\n                    label={__('Content Type')}\n                    value={contentTypeParam || CS.CONTENT_ALL}\n                    onChange={(e) =>\n                      handleChange({\n                        key: CS.CONTENT_KEY,\n                        value: e.target.value,\n                      })\n                    }\n                  >\n                    {filterCtx.contentTypes.map((type) => {\n                      if (type !== CS.CLAIM_CHANNEL || (type === CS.CLAIM_CHANNEL && !channelIdsParam)) {\n                        return (\n                          <option key={type} value={type}>\n                            {/* i18fixme */}\n                            {type === CS.CLAIM_COLLECTION && __('Playlist')}\n                            {type === CS.CLAIM_CHANNEL && __('Channel')}\n                            {type === CS.CLAIM_REPOST && __('Repost')}\n                            {type === CS.FILE_VIDEO && __('Video')}\n                            {type === CS.FILE_AUDIO && __('Audio')}\n                            {type === CS.FILE_IMAGE && __('Image')}\n                            {type === CS.FILE_MODEL && __('Model')}\n                            {type === CS.FILE_BINARY && __('Other')}\n                            {type === CS.FILE_DOCUMENT && __('Document')}\n                            {type === CS.CONTENT_ALL && __('Any')}\n                          </option>\n                        );\n                      }\n                    })}\n                  </FormField>\n                </div>\n              )}\n\n              {/* DURATIONS FIELD */}\n              {showDuration && (\n                <>\n                  <div className={'claim-search__input-container'}>\n                    <FormField\n                      className={classnames('claim-search__dropdown', {\n                        'claim-search__dropdown--selected': durationParam,\n                      })}\n                      label={__('Duration --[length of audio or video]--')}\n                      type=\"select\"\n                      name=\"duration\"\n                      disabled={\n                        !(\n                          contentTypeParam === null ||\n                          contentTypeParam === CS.FILE_AUDIO ||\n                          contentTypeParam === CS.FILE_VIDEO ||\n                          streamTypeParam === CS.FILE_AUDIO ||\n                          streamTypeParam === CS.FILE_VIDEO\n                        )\n                      }\n                      value={durationParam || CS.DURATION.ALL}\n                      onChange={(e) =>\n                        handleChange({\n                          key: CS.DURATION_KEY,\n                          value: e.target.value,\n                        })\n                      }\n                    >\n                      {CS.DURATION_TYPES.map((dur) => (\n                        <option key={String(dur)} value={dur}>\n                          {/* i18fixme */}\n                          {dur === CS.DURATION.SHORT && __('Short (< 4 minutes)')}\n                          {dur === CS.DURATION.LONG && __('Long (> 20 min)')}\n                          {dur === CS.DURATION.ALL && __('Any')}\n                          {dur === CS.DURATION.CUSTOM && __('Custom')}\n                        </option>\n                      ))}\n                    </FormField>\n                  </div>\n                  {durationParam === CS.DURATION.CUSTOM && (\n                    <div className=\"claim-search__duration-inputs-container\">\n                      <div className=\"claim-search__input-container\">\n                        <FormField\n                          label={__('Min Minutes')}\n                          type=\"number\"\n                          name=\"min_duration__minutes\"\n                          value={minMinutes}\n                          onChange={(e) => {\n                            setMinMinutes(e.target.value);\n                            setMinDurationMinutesDebounced(e.target.value);\n                          }}\n                        />\n                      </div>\n                      <div className=\"claim-search__input-container\">\n                        <FormField\n                          label={__('Max Minutes')}\n                          type=\"number\"\n                          name=\"max_duration__minutes\"\n                          value={maxMinutes}\n                          onChange={(e) => {\n                            setMaxMinutes(e.target.value);\n                            setMaxDurationMinutesDebounced(e.target.value);\n                          }}\n                        />\n                      </div>\n                    </div>\n                  )}\n                </>\n              )}\n\n              {/* LANGUAGE FIELD - hidden for now */}\n              {false && !claimType && (\n                <div\n                  className={classnames('claim-search__input-container', {\n                    'claim-search__input-container--selected': shouldHighlight,\n                  })}\n                >\n                  <FormField\n                    className={classnames('claim-search__dropdown', {\n                      'claim-search__dropdown--selected': shouldHighlight,\n                    })}\n                    type=\"select\"\n                    name=\"claimType\"\n                    label={__('Language')}\n                    value={languageValue || CS.LANGUAGES_ALL}\n                    onChange={(e) =>\n                      handleChange({\n                        key: CS.LANGUAGE_KEY,\n                        value: e.target.value,\n                      })\n                    }\n                  >\n                    <option key={CS.LANGUAGES_ALL} value={CS.LANGUAGES_ALL}>\n                      {__('Any')}\n                      {/* i18fixme */}\n                    </option>\n                    {Object.entries(SEARCHABLE_LANGUAGES).map(([code, label]) => {\n                      return (\n                        <option key={code} value={code}>\n                          {String(label)}\n                        </option>\n                      );\n                    })}\n                  </FormField>\n                </div>\n              )}\n\n              {/* PAID FIELD */}\n              <div className={'claim-search__input-container'}>\n                <FormField\n                  className={classnames('claim-search__dropdown', {\n                    'claim-search__dropdown--selected':\n                      feeAmountParam === CS.FEE_AMOUNT_ONLY_FREE || feeAmountParam === CS.FEE_AMOUNT_ONLY_PAID,\n                  })}\n                  label={__('Price')}\n                  type=\"select\"\n                  name=\"paidcontent\"\n                  value={feeAmountParam}\n                  onChange={(e) =>\n                    handleChange({\n                      key: CS.FEE_AMOUNT_KEY,\n                      value: e.target.value,\n                    })\n                  }\n                >\n                  <option value={CS.FEE_AMOUNT_ANY}>{__('Any')}</option>\n                  <option value={CS.FEE_AMOUNT_ONLY_FREE}>{__('Free')}</option>\n                  <option value={CS.FEE_AMOUNT_ONLY_PAID}>{__('Paid')}</option>\n                  ))}\n                </FormField>\n              </div>\n\n              {/* SORT FIELD */}\n              {orderParam === CS.ORDER_BY_NEW && (\n                <div className={'claim-search__input-container'}>\n                  <FormField\n                    className={classnames('claim-search__dropdown', {\n                      'claim-search__dropdown--selected': sortByParam,\n                    })}\n                    label={__('Sort By')}\n                    type=\"select\"\n                    name=\"sort_by\"\n                    value={sortByParam || CS.SORT_BY.NEWEST.key}\n                    onChange={(e) => handleChange({ key: CS.SORT_BY_KEY, value: e.target.value })}\n                  >\n                    {Object.entries(CS.SORT_BY).map(([key, value]) => {\n                      return (\n                        // $FlowFixMe https://github.com/facebook/flow/issues/2221\n                        <option key={value.key} value={value.key}>\n                          {/* $FlowFixMe */}\n                          {__(value.str)}\n                        </option>\n                      );\n                    })}\n                  </FormField>\n                </div>\n              )}\n\n              {channelIdsInUrl && (\n                <div className={'claim-search__input-container'}>\n                  <label>{__('Advanced Filters from URL')}</label>\n                  <Button\n                    button=\"alt\"\n                    className=\"claim-search__filter-button\"\n                    label={__('Clear')}\n                    onClick={handleAdvancedReset}\n                  />\n                </div>\n              )}\n            </div>\n            <div className=\"claim-search__menus\">\n              {filterCtx.repost && (\n                <div className=\"claim-search__input-container\">\n                  <AdditionalFilters filterCtx={filterCtx} contentType={contentTypeParam} />\n                </div>\n              )}\n              <div className=\"claim-search__input-container\">\n                {!filterCtx?.liftUpTagSearch && <TagSearch urlParams={urlParams} handleChange={handleChange} />}\n              </div>\n            </div>\n          </div>\n        </div>\n        {meta && isMobile && <div className=\"section__actions--no-margin\">{meta}</div>}\n      </div>\n\n      {hasMatureTags && hiddenNsfwMessage}\n    </>\n  );\n}\n\nexport default ClaimListHeader;\n","import { connect } from 'react-redux';\nimport { selectFetchingClaimSearch } from 'redux/selectors/claims';\nimport { selectClientSetting, selectShowMatureContent, selectLanguage } from 'redux/selectors/settings';\nimport { doSetClientSetting } from 'redux/actions/settings';\nimport * as SETTINGS from 'constants/settings';\nimport ClaimListHeader from './view';\n\nconst select = (state) => ({\n  loading: selectFetchingClaimSearch(state),\n  showNsfw: selectShowMatureContent(state),\n  searchInLanguage: selectClientSetting(state, SETTINGS.SEARCH_IN_LANGUAGE),\n  languageSetting: selectLanguage(state),\n});\n\nconst perform = {\n  doSetClientSetting,\n};\n\nexport default connect(select, perform)(ClaimListHeader);\n","// @flow\nimport { ENABLE_NO_SOURCE_CLAIMS } from 'config';\nimport type { Node } from 'react';\nimport * as CS from 'constants/claim_search';\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { MATURE_TAGS } from 'constants/tags';\nimport { resolveLangForClaimSearch } from 'util/default-languages';\nimport { createNormalizedClaimSearchKey } from 'util/claim';\nimport { CsOptHelper } from 'util/claim-search';\nimport Button from 'component/button';\nimport moment from 'moment';\nimport ClaimList from 'component/claimList';\nimport ClaimPreview from 'component/claimPreview';\nimport ClaimPreviewTile from 'component/claimPreviewTile';\nimport I18nMessage from 'component/i18nMessage';\nimport LangFilterIndicator from 'component/langFilterIndicator';\nimport ClaimListHeader from 'component/claimListHeader';\nimport { useIsLargeScreen } from 'effects/use-screensize';\nimport usePersistentUserParam from 'effects/use-persistent-user-param';\nimport usePersistedState from 'effects/use-persisted-state';\n\ntype Props = {\n  uris: Array<string>,\n  prefixUris?: Array<string>,\n  pins?: { urls?: Array<string>, claimIds?: Array<string>, onlyPinForOrder?: string },\n  name?: string,\n  type: string,\n  pageSize?: number,\n  duration?: string,\n\n  fetchViewCount?: boolean,\n  hideMembersOnly?: boolean, // undefined = use SETTING.HIDE_MEMBERS_ONLY_CONTENT; true/false: use this override.\n  hideRepostsOverride?: boolean, // undefined = use SETTINGS.HIDE_REPOSTS; true/false: use this override.\n  hasNoSource?: boolean,\n  hasSource?: boolean,\n  hideAdvancedFilter?: boolean,\n  hideFilters?: boolean,\n  includeSupportAction?: boolean,\n  infiniteScroll?: Boolean,\n  isChannel?: boolean,\n  personalView: boolean,\n  showHeader: boolean,\n  showHiddenByUser?: boolean,\n  showNoSourceClaims?: boolean,\n  tileLayout: boolean,\n  searchLanguages?: Array<string>,\n  ignoreSearchInLanguage?: boolean, // Negate the redux setting where it doesn't make sense.\n\n  orderBy?: Array<string>, // Trending, New, Top\n  defaultOrderBy?: string,\n  sortBy?: Array<string>, // Newest First, Oldest First\n  freshness?: string,\n  defaultFreshness?: string,\n\n  tags: string, // these are just going to be string. pass a CSV if you want multi\n  notTags?: Array<string>,\n  defaultTags: string,\n\n  claimType?: string | Array<string>,\n  defaultClaimType?: Array<string>,\n\n  streamType?: string | Array<string>,\n  defaultStreamType?: string | Array<string>,\n\n  contentType?: string,\n\n  empty?: string,\n  feeAmount?: string,\n  releaseTime?: string,\n  repostedClaimId?: string,\n  scrollAnchor?: string,\n  maxPages?: number,\n  limitClaimsPerChannel?: number,\n\n  channelIds?: Array<string>,\n  excludedChannelIds?: Array<string>,\n  claimIds?: Array<string>,\n  subscribedChannels: Array<Subscription>,\n\n  header?: Node,\n  headerLabel?: string | Node,\n  hiddenNsfwMessage?: Node,\n  // injectedItem?: ListInjectedItem,\n  meta?: Node,\n  subSection?: Node, // Additional section below [Header|Meta]\n  renderProperties?: (Claim) => Node,\n  csOptionsHook?: (options: any) => any, // Final client-side tweak of Claim Search options.\n\n  history: { action: string, push: (string) => void, replace: (string) => void },\n  location: { search: string, pathname: string },\n\n  expandFilters: boolean,\n\n  // --- select ---\n  followedTags?: Array<Tag>,\n  claimSearchByQuery: { [string]: Array<string> },\n  claimSearchByQueryLastPageReached: { [string]: boolean },\n  claimsByUri: { [string]: any },\n  claimsById: { [string]: any },\n  loading: boolean,\n  showNsfw: boolean,\n  hideReposts: boolean,\n  languageSetting: string,\n  searchInLanguage: boolean,\n  mutedAndBlockedChannelIds: Array<ClaimId>,\n\n  // --- perform ---\n  doFetchThumbnailClaimsForCollectionIds: (params: { collectionIds: Array<string> }) => void,\n  doClaimSearch: (ClaimSearchOptions, ?DoClaimSearchSettings) => void,\n  doFetchOdyseeMembershipForChannelIds: (claimIds: ClaimIds) => void,\n  doResolveClaimIds: (Array<string>) => Promise<any>,\n  doResolveUris: (Array<string>, boolean) => Promise<any>,\n\n  hideLayoutButton?: boolean,\n  loadedCallback?: (number) => void,\n  maxClaimRender?: number,\n  useSkeletonScreen?: boolean,\n  excludeUris?: Array<string>,\n};\n\nfunction ClaimListDiscover(props: Props) {\n  const {\n    doClaimSearch,\n    claimSearchByQuery,\n    showHeader = true,\n    type,\n    duration,\n    claimSearchByQueryLastPageReached,\n    tags,\n    notTags,\n    defaultTags,\n    loading,\n    meta,\n    subSection,\n    channelIds,\n    excludedChannelIds,\n    showNsfw,\n    hideReposts,\n    fetchViewCount,\n    history,\n    location,\n    hiddenNsfwMessage,\n    defaultOrderBy,\n    sortBy,\n    orderBy,\n    headerLabel,\n    header,\n    name,\n    claimType,\n    defaultClaimType,\n    streamType,\n    defaultStreamType,\n    contentType,\n    freshness,\n    defaultFreshness = CS.FRESH_WEEK,\n    renderProperties,\n    csOptionsHook,\n    includeSupportAction,\n    repostedClaimId,\n    hideAdvancedFilter,\n    hideMembersOnly,\n    infiniteScroll = true,\n    followedTags,\n    // injectedItem,\n    feeAmount,\n    uris,\n    prefixUris,\n    pins,\n    tileLayout,\n    hideFilters = false,\n    claimIds,\n    maxPages,\n    hideRepostsOverride,\n    languageSetting,\n    searchLanguages,\n    searchInLanguage,\n    ignoreSearchInLanguage,\n    mutedAndBlockedChannelIds,\n    limitClaimsPerChannel,\n    releaseTime,\n    scrollAnchor,\n    showHiddenByUser = false,\n    hasSource,\n    hasNoSource,\n    isChannel = false,\n    showNoSourceClaims,\n    empty,\n    claimsByUri,\n    claimsById,\n    hideLayoutButton = false,\n    loadedCallback,\n    maxClaimRender,\n    useSkeletonScreen = true,\n    excludeUris = [],\n    doFetchOdyseeMembershipForChannelIds,\n    doFetchThumbnailClaimsForCollectionIds,\n    doResolveUris,\n    doResolveClaimIds,\n  } = props;\n\n  const hasPins = pins && (pins.claimIds || pins.urls);\n  const resolvedPinUris = React.useMemo(() => {\n    if (!hasPins) return undefined;\n\n    let resolvedPinUris = [];\n\n    if (pins && pins.claimIds) {\n      pins.claimIds.some((id) => {\n        const claim = claimsById[id];\n        if (!claim) {\n          resolvedPinUris = undefined;\n          return true;\n        }\n\n        const uri = claim.canonical_url || claim.canonical_url;\n        // looks wrong ---^----------------------^\n        // $FlowFixMe\n        resolvedPinUris.push(uri);\n      });\n    }\n\n    return resolvedPinUris;\n  }, [claimsById, hasPins, pins]);\n\n  const didNavigateForward = history.action === 'PUSH';\n  const { search } = location;\n  const prevUris = React.useRef();\n  const [page, setPage] = React.useState(1);\n  const [forceRefresh, setForceRefresh] = React.useState();\n  const isLargeScreen = useIsLargeScreen();\n  const followed = (followedTags && followedTags.map((t) => t.name)) || [];\n  const urlParams = new URLSearchParams(search);\n  const tagsParam = // can be 'x,y,z' or 'x' or ['x','y'] or CS.CONSTANT\n    (tags && getParamFromTags(tags)) ||\n    (urlParams.get(CS.TAGS_KEY) !== null && urlParams.get(CS.TAGS_KEY)) ||\n    (defaultTags && getParamFromTags(defaultTags));\n  const freshnessParam = freshness || urlParams.get(CS.FRESH_KEY) || defaultFreshness;\n  const sortByParam = sortBy || urlParams.get(CS.SORT_BY_KEY) || CS.SORT_BY.NEWEST.key;\n  const hideRepostsEffective = resolveHideReposts(hideReposts, hideRepostsOverride);\n\n  const [finalUris, setFinalUris] = React.useState();\n\n  const langParam = urlParams.get(CS.LANGUAGE_KEY) || null;\n  const searchInSelectedLang = searchInLanguage && !ignoreSearchInLanguage;\n  const languageParams = resolveLangForClaimSearch(languageSetting, searchInSelectedLang, searchLanguages, langParam);\n\n  let claimTypeParam = claimType || defaultClaimType || null;\n  let streamTypeParam = streamType || defaultStreamType || null;\n\n  const contentTypeParam = contentType || urlParams.get(CS.CONTENT_KEY);\n  if (contentTypeParam) {\n    switch (contentTypeParam) {\n      case CS.CLAIM_COLLECTION:\n        claimTypeParam = contentTypeParam;\n        streamTypeParam = undefined;\n        break;\n      case CS.CLAIM_REPOST:\n        claimTypeParam = contentTypeParam;\n        break;\n\n      case CS.CLAIM_CHANNEL:\n        claimTypeParam = CS.CLAIM_CHANNEL;\n        streamTypeParam = undefined;\n        break;\n\n      case CS.FILE_VIDEO:\n      case CS.FILE_AUDIO:\n      case CS.FILE_IMAGE:\n      case CS.FILE_MODEL:\n      case CS.FILE_BINARY:\n      case CS.FILE_DOCUMENT:\n        streamTypeParam = contentTypeParam;\n        break;\n\n      case CS.CONTENT_ALL:\n        claimTypeParam = undefined;\n        streamTypeParam = undefined;\n        break;\n\n      default:\n        assert(false, 'Invalid or unhandled CONTENT_KEY:', contentTypeParam);\n        break;\n    }\n  }\n\n  const durationParam = usePersistentUserParam([urlParams.get(CS.DURATION_KEY) || CS.DURATION.ALL], 'durUser', null);\n  const [minDurationMinutes] = usePersistedState(`minDurUserMinutes-${location.pathname}`, null);\n  const [maxDurationMinutes] = usePersistedState(`maxDurUserMinutes-${location.pathname}`, null);\n  const [hideAnonymous] = usePersistedState(`hideAnonymous-${location.pathname}`, false);\n  const channelIdsInUrl = urlParams.get(CS.CHANNEL_IDS_KEY);\n  const channelIdsParam = channelIdsInUrl ? channelIdsInUrl.split(',') : channelIds;\n  const excludedIdsParam = excludedChannelIds;\n  const feeAmountParam = urlParams.get('fee_amount') || feeAmount;\n  const originalPageSize = 12;\n  const dynamicPageSize = isLargeScreen ? Math.ceil((originalPageSize / 2) * 6) : Math.ceil((originalPageSize / 2) * 4);\n  const notTagInput: NotTagInput = { notTags, showNsfw, hideMembersOnly };\n  const orderParam = usePersistentUserParam(\n    [orderBy, urlParams.get(CS.ORDER_BY_KEY), defaultOrderBy],\n    'orderUser',\n    CS.ORDER_BY_TRENDING\n  );\n  const durationOption = CsOptHelper.duration(\n    contentTypeParam,\n    durationParam,\n    duration,\n    minDurationMinutes,\n    maxDurationMinutes\n  );\n\n  let options: ClaimSearchOptions = {\n    page_size: dynamicPageSize,\n    page,\n    name,\n    claim_type: claimType || ['stream', 'repost', 'channel'],\n    // no_totals makes it so the sdk doesn't have to calculate total number pages for pagination\n    // it's faster, but we will need to remove it if we start using total_pages\n    no_totals: true,\n    not_channel_ids: isChannel ? undefined : mutedAndBlockedChannelIds,\n    not_tags: CsOptHelper.not_tags(notTagInput),\n    order_by: resolveOrderByOption(orderParam, sortByParam),\n    remove_duplicates: isChannel ? undefined : true,\n    ...(durationOption ? { duration: durationOption } : {}),\n  };\n\n  if (ENABLE_NO_SOURCE_CLAIMS && hasNoSource) {\n    options.has_no_source = true;\n  } else if (hasSource || (!ENABLE_NO_SOURCE_CLAIMS && (!claimType || claimType === 'stream'))) {\n    options.has_source = true;\n  }\n\n  if (limitClaimsPerChannel) {\n    options.limit_claims_per_channel = limitClaimsPerChannel;\n  }\n\n  if (feeAmountParam && claimType !== CS.CLAIM_CHANNEL) {\n    options.fee_amount = feeAmountParam;\n  }\n\n  if (claimIds) {\n    options.claim_ids = claimIds;\n  }\n\n  if (channelIdsParam) {\n    options.channel_ids = channelIdsParam;\n  }\n\n  if (excludedIdsParam) {\n    options.not_channel_ids = (options.not_channel_ids || []).concat(excludedIdsParam);\n  }\n\n  if (tagsParam) {\n    if (tagsParam !== CS.TAGS_ALL && tagsParam !== '') {\n      if (tagsParam === CS.TAGS_FOLLOWED) {\n        options.any_tags = followed;\n      } else if (Array.isArray(tagsParam)) {\n        options.any_tags = tagsParam;\n      } else {\n        options.any_tags = tagsParam.split(',');\n      }\n    }\n  }\n\n  if (repostedClaimId) {\n    // SDK chokes on reposted_claim_id of null or false, needs to not be present if no value\n    options.reposted_claim_id = repostedClaimId;\n  }\n  // IF release time, set it, else set fallback release times using the hack below.\n  if (releaseTime && claimTypeParam !== CS.CLAIM_CHANNEL) {\n    options.release_time = releaseTime;\n  } else if (claimTypeParam !== CS.CLAIM_CHANNEL) {\n    if (orderParam === CS.ORDER_BY_TOP && freshnessParam !== CS.FRESH_ALL) {\n      options.release_time = `>${Math.floor(moment().subtract(1, freshnessParam).startOf('hour').unix())}`;\n    } else if (orderParam === CS.ORDER_BY_NEW || orderParam === CS.ORDER_BY_TRENDING) {\n      // Warning - hack below\n      // If users are following more than 10 channels or tags, limit results to stuff less than a year old\n      // For more than 20, drop it down to 6 months\n      // This helps with timeout issues for users that are following a ton of stuff\n      // https://github.com/lbryio/lbry-sdk/issues/2420\n      if (\n        (options.channel_ids && options.channel_ids.length > 20) ||\n        (options.any_tags && options.any_tags.length > 20)\n      ) {\n        options.release_time = `>${Math.floor(moment().subtract(3, CS.FRESH_MONTH).startOf('week').unix())}`;\n      } else if (\n        (options.channel_ids && options.channel_ids.length > 10) ||\n        (options.any_tags && options.any_tags.length > 10)\n      ) {\n        options.release_time = `>${Math.floor(moment().subtract(1, CS.FRESH_YEAR).startOf('week').unix())}`;\n      } else {\n        // Hack for at least the New page until https://github.com/lbryio/lbry-sdk/issues/2591 is fixed\n        options.release_time = `<${Math.floor(moment().startOf('minute').unix())}`;\n      }\n    }\n  }\n\n  if (hideAnonymous) {\n    options.has_channel_signature = true;\n    options.valid_channel_signature = true;\n  }\n\n  if (streamTypeParam && streamTypeParam !== CS.CONTENT_ALL && claimType !== CS.CLAIM_CHANNEL) {\n    options.stream_types = typeof streamTypeParam === 'string' ? [streamTypeParam] : streamTypeParam;\n  }\n\n  if (claimTypeParam) {\n    if (claimTypeParam !== CS.CONTENT_ALL) {\n      if (Array.isArray(claimTypeParam)) {\n        options.claim_type = claimTypeParam;\n      } else {\n        options.claim_type = [claimTypeParam];\n      }\n    }\n  }\n\n  if (languageParams) {\n    if (languageParams !== CS.LANGUAGES_ALL) {\n      options.any_languages = languageParams.split(',');\n    }\n  }\n\n  if (tagsParam) {\n    if (tagsParam !== CS.TAGS_ALL && tagsParam !== '') {\n      if (tagsParam === CS.TAGS_FOLLOWED) {\n        options.any_tags = followed;\n      } else if (Array.isArray(tagsParam)) {\n        options.any_tags = tagsParam;\n      } else {\n        options.any_tags = tagsParam.split(',');\n      }\n    }\n  }\n\n  if (hideRepostsEffective && !options.reposted_claim_id) {\n    if (Array.isArray(options.claim_type)) {\n      if (options.claim_type.length > 1) {\n        options.claim_type = options.claim_type.filter((claimType) => claimType !== 'repost');\n      }\n    } else {\n      options.claim_type = ['stream', 'channel'];\n    }\n  }\n\n  if (csOptionsHook) {\n    options = csOptionsHook(options);\n  }\n\n  const hasMatureTags = tagsParam && tagsParam.split(',').some((t) => MATURE_TAGS.includes(t));\n\n  const searchKey = createNormalizedClaimSearchKey(options);\n  const claimSearchResult = claimSearchByQuery[searchKey];\n  const claimSearchResultLastPageReached = claimSearchByQueryLastPageReached[searchKey];\n  const isUnfetchedClaimSearch = claimSearchResult === undefined;\n\n  // uncomment to fix an item on a page\n  //   const fixUri = 'lbry://@corbettreport#0/lbryodysee#5';\n  //   if (\n  //     orderParam === CS.ORDER_BY_NEW &&\n  //     claimSearchResult &&\n  //     claimSearchResult.length > 2 &&\n  //     window.location.pathname === '/$/rabbithole'\n  //   ) {\n  //     if (claimSearchResult.indexOf(fixUri) !== -1) {\n  //       claimSearchResult.splice(claimSearchResult.indexOf(fixUri), 1);\n  //     } else {\n  //       claimSearchResult.pop();\n  //     }\n  //     claimSearchResult.splice(2, 0, fixUri);\n  //   }\n\n  const [prevOptions, setPrevOptions] = React.useState(null);\n\n  if (!isJustScrollingToNewPage(prevOptions, options)) {\n    // --- New search, or search options changed.\n    setPrevOptions(options);\n\n    if (didNavigateForward) {\n      // --- Reset the page.\n      options.page = 1;\n      setPage(options.page);\n    } else if (claimSearchResult) {\n      // --- Update 'page' based on retrieved 'claimSearchResult'.\n      options.page = Math.ceil(claimSearchResult.length / dynamicPageSize);\n      if (options.page !== page) {\n        setPage(options.page);\n      }\n    }\n  }\n\n  const shouldPerformSearch =\n    // -- pins alone will be resolved by the doResolveUris/doResolveClaimIds call\n    hasPins && !channelIdsParam\n      ? false\n      : !uris &&\n        (claimSearchResult === undefined ||\n          didNavigateForward ||\n          (!loading &&\n            !claimSearchResultLastPageReached &&\n            claimSearchResult &&\n            claimSearchResult.length &&\n            // $FlowIgnore: page is always defined in this component\n            claimSearchResult.length < dynamicPageSize * options.page &&\n            claimSearchResult.length % dynamicPageSize === 0));\n\n  // Don't use the query from createNormalizedClaimSearchKey for the effect since that doesn't include page & release_time\n  const optionsStringForEffect = JSON.stringify(options);\n\n  const timedOutMessage = (\n    <div>\n      <p>\n        <I18nMessage\n          tokens={{\n            again: (\n              <Button\n                button=\"link\"\n                label={__('try again in a few seconds.')}\n                onClick={() => setForceRefresh(Date.now())}\n              />\n            ),\n          }}\n        >\n          Sorry, your request timed out. Modify your options or %again%\n        </I18nMessage>\n      </p>\n      <p>\n        <I18nMessage\n          tokens={{\n            contact_support: <Button button=\"link\" label={__('contact support')} href=\"https://help.odysee.tv/\" />,\n          }}\n        >\n          If you continue to have issues, please %contact_support%.\n        </I18nMessage>\n      </p>\n    </div>\n  );\n\n  // **************************************************************************\n  // **************************************************************************\n\n  React.useEffect(() => {\n    if (!hasPins) return;\n\n    // $FlowFixMe\n    if (pins.claimIds) {\n      doResolveClaimIds(pins.claimIds);\n      // $FlowFixMe\n    } else if (pins.urls) {\n      doResolveUris(pins.urls, true);\n    }\n  }, [pins, doResolveUris, doResolveClaimIds, hasPins]);\n\n  const excludeUrisStr = JSON.stringify(excludeUris);\n\n  React.useEffect(() => {\n    const excludeUris = JSON.parse(excludeUrisStr);\n\n    if (uris) {\n      // --- direct uris\n      const newUris = uris && Array.from(new Set(uris));\n      injectPinUrls(newUris, orderParam, pins, resolvedPinUris);\n      const newFinalUris = filterExcludedUris(newUris, excludeUris);\n\n      setFinalUris(newFinalUris);\n    } else if (claimSearchResult) {\n      // --- searched uris\n      if (isUnfetchedClaimSearch && prevUris.current) {\n        setFinalUris(prevUris.current);\n      } else if (!hasPins) {\n        setFinalUris(claimSearchResult);\n        prevUris.current = claimSearchResult;\n      } else {\n        const newUris = Array.from(new Set(claimSearchResult));\n        const injected = injectPinUrls(newUris, orderParam, pins, resolvedPinUris);\n        const newFinalUris = filterExcludedUris(injected, excludeUris);\n\n        setFinalUris(newFinalUris);\n        prevUris.current = newFinalUris;\n      }\n    } else if (resolvedPinUris && !channelIdsParam) {\n      setFinalUris(resolvedPinUris);\n    }\n  }, [\n    channelIdsParam,\n    claimSearchResult,\n    excludeUrisStr,\n    hasPins,\n    isUnfetchedClaimSearch,\n    orderParam,\n    pins,\n    resolvedPinUris,\n    uris,\n  ]);\n\n  // **************************************************************************\n  // Helpers\n  // **************************************************************************\n\n  // Returns true if the change in 'options' indicate that we are simply scrolling\n  // down to a new page; false otherwise.\n  function isJustScrollingToNewPage(prevOptions, options) {\n    if (!prevOptions) {\n      // It's a new search, or we just popped back from a different view.\n      return false;\n    }\n\n    // Compare every field except for 'page' and 'release_time'.\n    // There might be better ways to achieve this.\n    let tmpPrevOptions = { ...prevOptions };\n    tmpPrevOptions.page = -1;\n    tmpPrevOptions.release_time = '';\n\n    let tmpOptions = { ...options };\n    tmpOptions.page = -1;\n    tmpOptions.release_time = '';\n\n    return JSON.stringify(tmpOptions) === JSON.stringify(tmpPrevOptions);\n  }\n\n  function getParamFromTags(t) {\n    if (t === CS.TAGS_ALL || t === CS.TAGS_FOLLOWED) {\n      return t;\n    } else if (Array.isArray(t)) {\n      return t.join(',');\n    }\n  }\n\n  function handleScrollBottom() {\n    if (maxPages !== undefined && page === maxPages) {\n      return;\n    }\n\n    if (!loading && infiniteScroll) {\n      if (claimSearchResult && !claimSearchResultLastPageReached) {\n        setPage(page + 1);\n      }\n    }\n  }\n\n  function resolveHideReposts(hideRepostSetting, hideRepostOverride) {\n    if (hideRepostOverride === undefined || hideRepostOverride === null) {\n      return hideRepostSetting;\n    } else {\n      return hideRepostOverride;\n    }\n  }\n\n  function resolveOrderByOption(orderBy: string | Array<string>, sortBy: string | Array<string>) {\n    let order_by;\n\n    switch (orderBy) {\n      case CS.ORDER_BY_TRENDING:\n        order_by = CS.ORDER_BY_TRENDING_VALUE;\n        break;\n      case CS.ORDER_BY_NEW:\n        order_by = CS.ORDER_BY_NEW_VALUE;\n        break;\n      case CS.ORDER_BY_NEW_ASC:\n        order_by = CS.ORDER_BY_NEW_ASC_VALUE;\n        break;\n      case CS.ORDER_BY_NAME_ASC:\n        order_by = CS.ORDER_BY_NAME_ASC_VALUE;\n        break;\n      default:\n        order_by = CS.ORDER_BY_TOP_VALUE;\n    }\n\n    if (orderBy === CS.ORDER_BY_NEW && sortBy === CS.SORT_BY.OLDEST.key) {\n      return order_by.map((x) => `${CS.SORT_BY.OLDEST.opt}${x}`);\n    }\n\n    return order_by;\n  }\n\n  function injectPinUrls(uris, order, pins, resolvedPinUris) {\n    // TODO/BEWARE if you are editing this function.\n    //\n    // This function probably does not handle all clients correctly. It's mixing\n    // mutable and immutable changes, AND there are both clients that take the\n    // return value and ones that don't.\n    //\n    // It needs to sync up with ClaimTilesDiscover, or wait until the\n    // consolidation task.\n\n    if (!pins || !uris || (pins.onlyPinForOrder && pins.onlyPinForOrder !== order)) {\n      return uris;\n    }\n\n    if (resolvedPinUris) {\n      if (uris.length < resolvedPinUris.length) {\n        return uris.concat(resolvedPinUris);\n      }\n\n      resolvedPinUris.forEach((pin) => {\n        if (uris.includes(pin)) {\n          // remove the pin from the resolved/searched uris\n          uris.splice(uris.indexOf(pin), 1);\n        }\n      });\n\n      // add the pins on uris starting from the 2nd index\n      uris.splice(2, 0, ...resolvedPinUris);\n\n      return uris;\n    }\n\n    return uris;\n  }\n\n  function filterExcludedUris(uris, excludeUris) {\n    if (uris && excludeUris && excludeUris.length) {\n      return uris.filter((uri) => !excludeUris.includes(uri));\n    }\n    return uris;\n  }\n\n  // **************************************************************************\n  // **************************************************************************\n\n  React.useEffect(() => {\n    if (channelIds) {\n      doFetchOdyseeMembershipForChannelIds(channelIds);\n    }\n  }, [channelIds, doFetchOdyseeMembershipForChannelIds]);\n\n  React.useEffect(() => {\n    if (claimSearchResult && claimType && claimType.includes('collection')) {\n      const claimIds = claimSearchResult.map((uri) => claimsByUri[uri]?.claim_id);\n      doFetchThumbnailClaimsForCollectionIds({ collectionIds: claimIds });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [claimSearchResult, claimType, doFetchThumbnailClaimsForCollectionIds]);\n\n  React.useEffect(() => {\n    if (shouldPerformSearch) {\n      const searchOptions = JSON.parse(optionsStringForEffect);\n      const searchSettings = {\n        ...(fetchViewCount ? { fetch: { viewCount: true } } : {}),\n      };\n      doClaimSearch(searchOptions, searchSettings);\n    }\n  }, [doClaimSearch, shouldPerformSearch, optionsStringForEffect, forceRefresh, fetchViewCount]);\n\n  const headerToUse = header || (\n    <ClaimListHeader\n      channelIds={channelIds}\n      defaultTags={defaultTags}\n      tags={tags}\n      freshness={freshness}\n      defaultFreshness={defaultFreshness}\n      claimType={claimType}\n      streamType={streamType}\n      defaultStreamType={defaultStreamType}\n      feeAmount={feeAmount} // ENABLE_PAID_CONTENT_DISCOVER or something\n      orderBy={orderBy}\n      defaultOrderBy={defaultOrderBy}\n      hideAdvancedFilter={hideAdvancedFilter}\n      hasMatureTags={hasMatureTags}\n      hiddenNsfwMessage={hiddenNsfwMessage}\n      setPage={setPage}\n      tileLayout={tileLayout}\n      hideLayoutButton={hideLayoutButton}\n      hideFilters={hideFilters}\n      scrollAnchor={scrollAnchor}\n      contentType={contentType}\n      meta={meta}\n    />\n  );\n\n  const claimListLoading =\n    loading || (channelIdsParam && channelIdsParam.length > 0 && claimSearchResult === undefined);\n\n  return (\n    <React.Fragment>\n      {headerLabel && headerLabel}\n      {tileLayout ? (\n        <div>\n          {!repostedClaimId && showHeader && (\n            <div className=\"section__header--actions\">\n              <div className=\"section__actions section__actions-span\">\n                {headerToUse}\n                {searchInSelectedLang && <LangFilterIndicator />}\n              </div>\n            </div>\n          )}\n          {subSection && <div>{subSection}</div>}\n          <ClaimList\n            tileLayout\n            loading={claimListLoading}\n            uris={finalUris}\n            prefixUris={prefixUris}\n            onScrollBottom={handleScrollBottom}\n            page={page}\n            pageSize={dynamicPageSize}\n            timedOutMessage={timedOutMessage}\n            renderProperties={renderProperties}\n            includeSupportAction={includeSupportAction}\n            // injectedItem={injectedItem}\n            showHiddenByUser={showHiddenByUser}\n            searchOptions={options}\n            showNoSourceClaims={showNoSourceClaims}\n            empty={empty}\n            maxClaimRender={maxClaimRender}\n            loadedCallback={loadedCallback}\n          />\n\n          {claimListLoading && useSkeletonScreen && (\n            <div className=\"claim-grid\">\n              {new Array(dynamicPageSize).fill(1).map((x, i) => (\n                <ClaimPreviewTile key={i} placeholder=\"loading\" pulse />\n              ))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          {showHeader && (\n            <div className=\"section__header--actions\">\n              <div className=\"section__actions\">\n                {headerToUse}\n                {searchInSelectedLang && <LangFilterIndicator />}\n              </div>\n            </div>\n          )}\n          {subSection && <div>{subSection}</div>}\n          <ClaimList\n            type={type}\n            loading={claimListLoading}\n            uris={finalUris}\n            prefixUris={prefixUris}\n            onScrollBottom={handleScrollBottom}\n            page={page}\n            pageSize={dynamicPageSize}\n            timedOutMessage={timedOutMessage}\n            renderProperties={renderProperties}\n            includeSupportAction={includeSupportAction}\n            // injectedItem={injectedItem}\n            showHiddenByUser={showHiddenByUser}\n            searchOptions={options}\n            showNoSourceClaims={hasNoSource || showNoSourceClaims}\n            empty={empty}\n            maxClaimRender={maxClaimRender}\n            loadedCallback={loadedCallback}\n          />\n\n          {claimListLoading &&\n            useSkeletonScreen &&\n            new Array(dynamicPageSize)\n              .fill(1)\n              .map((x, i) => (\n                <ClaimPreview\n                  showNoSourceClaims={hasNoSource || showNoSourceClaims}\n                  key={i}\n                  placeholder=\"loading\"\n                  type={type}\n                />\n              ))}\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default withRouter(ClaimListDiscover);\n","import { connect } from 'react-redux';\nimport {\n  selectById,\n  selectClaimsByUri,\n  selectClaimSearchByQuery,\n  selectClaimSearchByQueryLastPageReached,\n  selectFetchingClaimSearch,\n} from 'redux/selectors/claims';\nimport { doClaimSearch, doResolveClaimIds, doResolveUris } from 'redux/actions/claims';\nimport { doFetchThumbnailClaimsForCollectionIds } from 'redux/actions/collections';\nimport * as SETTINGS from 'constants/settings';\nimport { selectFollowedTags } from 'redux/selectors/tags';\nimport { selectMutedAndBlockedChannelIds } from 'redux/selectors/blocked';\nimport { doFetchOdyseeMembershipForChannelIds } from 'redux/actions/memberships';\nimport { selectClientSetting, selectShowMatureContent, selectLanguage } from 'redux/selectors/settings';\n\nimport ClaimListDiscover from './view';\n\nfunction resolveHideMembersOnly(global, override) {\n  return override === undefined || override === null ? global : override;\n}\n\n// prettier-ignore\nconst select = (state, props) => ({\n  followedTags: selectFollowedTags(state),\n  claimSearchByQuery: selectClaimSearchByQuery(state),\n  claimSearchByQueryLastPageReached: selectClaimSearchByQueryLastPageReached(state),\n  claimsByUri: selectClaimsByUri(state),\n  claimsById: selectById(state),\n  loading: props.loading !== undefined ? props.loading : selectFetchingClaimSearch(state),\n  showNsfw: selectShowMatureContent(state),\n  hideMembersOnly: resolveHideMembersOnly(selectClientSetting(state, SETTINGS.HIDE_MEMBERS_ONLY_CONTENT), props.hideMembersOnly),\n  hideReposts: selectClientSetting(state, SETTINGS.HIDE_REPOSTS),\n  languageSetting: selectLanguage(state),\n  searchInLanguage: selectClientSetting(state, SETTINGS.SEARCH_IN_LANGUAGE),\n  mutedAndBlockedChannelIds: selectMutedAndBlockedChannelIds(state),\n});\n\nconst perform = {\n  doClaimSearch,\n  doFetchOdyseeMembershipForChannelIds,\n  doResolveClaimIds,\n  doResolveUris,\n  doFetchThumbnailClaimsForCollectionIds,\n};\n\nexport default connect(select, perform)(ClaimListDiscover);\n","import LangFilterIndicator from './view';\nexport default LangFilterIndicator;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport { SEARCH_IN_LANGUAGE } from 'constants/hashes';\n\nexport default function LangFilterIndicator() {\n  return (\n    <Button\n      className=\"icon--langFilter\"\n      icon={ICONS.FILTERED_BY_LANG}\n      iconSize={20}\n      description={__('Search results are being filtered by language. Click here to change the setting.')}\n      navigate={`/$/${PAGES.SETTINGS}#${SEARCH_IN_LANGUAGE}`}\n    />\n  );\n}\n","export const SEARCH_IN_LANGUAGE = 'searchInLanguage';\n","import React from 'react';\nimport * as CS from 'constants/claim_search';\n\nexport const ClaimSearchFilterContext = React.createContext({\n  contentTypes: CS.CONTENT_TYPES,\n  liftUpTagSearch: false,\n  // --Future expansion:\n  // durationTypes: CS.DURATION_TYPES,\n  // ...\n});\n"],"names":["props","filterCtx","contentType","repost","membersOnly","React","className","__","title","FormField","label","name","type","checked","hideReposts","disabled","CS","onChange","setHideReposts","prev","hideMembersOnly","setHideMembersOnly","urlParams","handleChange","standalone","inputRef","_React$useState2","_slicedToArray","get","tagSearchQuery","setTagSearchQuery","handleChangeDebounced","debounce","v","key","value","classnames","ref","placeholder","e","target","Icon","icon","ICONS","Button","button","onClick","usePersistentUserParam","precedenceList","keyBase","keyDefaultValue","_useHistory","useHistory","action","location","_usePersistedState2","usePersistedState","concat","pathname","stashed","setStashed","_usePersistedState4","stashedOnEntry","setStashedOnEntry","param","find","x","getLanguageName","_filterCtx$repost","_filterCtx$membersOnl","defaultTags","freshness","defaultFreshness","claimType","streamType","defaultStreamType","feeAmount","sortBy","orderBy","defaultOrderBy","hideAdvancedFilter","hideLayoutButton","hasMatureTags","hiddenNsfwMessage","channelIds","tileLayout","doSetClientSetting","meta","setPage","hideFilters","searchInLanguage","scrollAnchor","languageSetting","isMobile","useIsMobile","ClaimSearchFilterContext","push","search","expanded","setExpanded","URLSearchParams","freshnessParam","contentTypeParam","streamTypeParam","languageParam","sortByParam","channelIdsInUrl","channelIdsParam","split","feeAmountParam","showDuration","isDiscoverPage","includes","PAGES","isRabbitHolePage","showHideAnonymous","hideAnonymous","setHideAnonymous","durationParam","_usePersistedState6","minDurationMinutes","setMinDurationMinutes","_usePersistedState8","maxDurationMinutes","setMaxDurationMinutes","minMinutes","setMinMinutes","_React$useState4","maxMinutes","setMaxMinutes","setMinDurationMinutesDebounced","m","setMaxDurationMinutesDebounced","orderParam","change","url","delta","newUrlParams","k","set","toString","buildUrl","toCapitalCase","iconSize","undefined","SETTINGS","Boolean","liftUpTagSearch","TagSearch","time","contentTypes","map","dur","String","Object","entries","_ref3","_ref4","str","newSearch","AdditionalFilters","perform","connect","state","loading","selectFetchingClaimSearch","showNsfw","selectShowMatureContent","selectClientSetting","selectLanguage","ClaimListHeader","withRouter","hideRepostSetting","hideRepostOverride","doClaimSearch","claimSearchByQuery","_props$showHeader","showHeader","duration","claimSearchByQueryLastPageReached","tags","notTags","subSection","excludedChannelIds","fetchViewCount","history","headerLabel","header","defaultClaimType","_props$defaultFreshne","renderProperties","csOptionsHook","includeSupportAction","repostedClaimId","_props$infiniteScroll","infiniteScroll","followedTags","uris","prefixUris","pins","_props$hideFilters","claimIds","maxPages","hideRepostsOverride","searchLanguages","ignoreSearchInLanguage","mutedAndBlockedChannelIds","limitClaimsPerChannel","releaseTime","_props$showHiddenByUs","showHiddenByUser","hasSource","hasNoSource","_props$isChannel","isChannel","showNoSourceClaims","empty","claimsByUri","claimsById","_props$hideLayoutButt","loadedCallback","maxClaimRender","_props$useSkeletonScr","useSkeletonScreen","_props$excludeUris","excludeUris","doFetchOdyseeMembershipForChannelIds","doFetchThumbnailClaimsForCollectionIds","doResolveUris","doResolveClaimIds","hasPins","urls","resolvedPinUris","some","id","claim","uri","canonical_url","didNavigateForward","prevUris","page","forceRefresh","setForceRefresh","isLargeScreen","useIsLargeScreen","followed","t","tagsParam","getParamFromTags","hideRepostsEffective","_React$useState6","finalUris","setFinalUris","langParam","searchInSelectedLang","languageParams","resolveLangForClaimSearch","claimTypeParam","assert","excludedIdsParam","dynamicPageSize","Math","ceil","originalPageSize","notTagInput","durationOption","CsOptHelper","options","_objectSpread","page_size","claim_type","no_totals","not_channel_ids","not_tags","order_by","resolveOrderByOption","remove_duplicates","ENABLE_NO_SOURCE_CLAIMS","has_no_source","has_source","limit_claims_per_channel","fee_amount","claim_ids","channel_ids","any_tags","Array","isArray","reposted_claim_id","release_time","floor","moment","subtract","startOf","unix","length","has_channel_signature","valid_channel_signature","stream_types","any_languages","filter","MATURE_TAGS","searchKey","createNormalizedClaimSearchKey","claimSearchResult","claimSearchResultLastPageReached","isUnfetchedClaimSearch","_React$useState8","prevOptions","setPrevOptions","tmpPrevOptions","tmpOptions","JSON","stringify","isJustScrollingToNewPage","shouldPerformSearch","optionsStringForEffect","timedOutMessage","I18nMessage","tokens","again","Date","now","contact_support","href","excludeUrisStr","join","handleScrollBottom","injectPinUrls","order","onlyPinForOrder","forEach","pin","splice","indexOf","apply","_toConsumableArray","filterExcludedUris","parse","newUris","from","Set","newFinalUris","current","_newFinalUris","_claimIds","_claimsByUri$uri","claim_id","collectionIds","searchOptions","searchSettings","fetch","viewCount","headerToUse","claimListLoading","LangFilterIndicator","ClaimList","onScrollBottom","pageSize","fill","i","ClaimPreviewTile","pulse","ClaimPreview","selectFollowedTags","selectClaimSearchByQuery","selectClaimSearchByQueryLastPageReached","selectClaimsByUri","selectById","global","override","selectMutedAndBlockedChannelIds","ClaimListDiscover","description","navigate","SEARCH_IN_LANGUAGE"],"sourceRoot":""}