{"version":3,"file":"selectThumbnail-520a3d207bf9f3556a29.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/file-selector.jsx","webpack://odysee.com/../ui/component/selectThumbnail/view.jsx","webpack://odysee.com/../ui/component/selectThumbnail/index.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { remote } from 'electron';\nimport Button from 'component/button';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  type: string,\n  currentPath?: ?string,\n  onFileChosen: (WebFile) => void,\n  label?: string,\n  placeholder?: string,\n  accept?: string,\n  error?: string,\n  disabled?: boolean,\n  autoFocus?: boolean,\n};\n\nclass FileSelector extends React.PureComponent<Props> {\n  static defaultProps = {\n    autoFocus: false,\n    type: 'file',\n  };\n\n  fileInput: React.ElementRef<any>;\n\n  constructor() {\n    super();\n    this.fileInput = React.createRef();\n    this.handleFileInputSelection = this.handleFileInputSelection.bind(this);\n    this.handleDirectoryInputSelection = this.handleDirectoryInputSelection.bind(this);\n    this.fileInputButton = this.fileInputButton.bind(this);\n  }\n\n  handleFileInputSelection = () => {\n    const { files } = this.fileInput.current;\n    if (!files) {\n      return;\n    }\n\n    const file = files[0];\n\n    if (this.props.onFileChosen) {\n      this.props.onFileChosen(file);\n    }\n    this.fileInput.current.value = null; // clear the file input\n  };\n\n  handleDirectoryInputSelection = () => {\n    remote.dialog.showOpenDialog({ properties: ['openDirectory'] }).then((result) => {\n      const path = result && result.filePaths[0];\n      if (path) {\n        // $FlowFixMe\n        this.props.onFileChosen({ path });\n      }\n    });\n  };\n\n  fileInputButton = () => {\n    this.fileInput.current.click();\n  };\n\n  input: ?HTMLInputElement;\n\n  render() {\n    const { type, currentPath, label, placeholder, accept, error, disabled, autoFocus = false } = this.props;\n    const placeHolder = currentPath || placeholder;\n\n    return (\n      <React.Fragment>\n        <FormField\n          label={label}\n          webkitdirectory=\"true\"\n          className=\"form-field--copyable\"\n          error={error}\n          disabled={disabled}\n          type=\"text\"\n          readOnly=\"readonly\"\n          value={placeHolder || __('Choose a file')}\n          inputButton={\n            <Button\n              autoFocus={autoFocus}\n              button=\"primary\"\n              disabled={disabled}\n              onClick={type === 'openDirectory' ? this.handleDirectoryInputSelection : this.fileInputButton}\n              label={__('Browse')}\n            />\n          }\n        />\n        <input\n          type={'file'}\n          style={{ display: 'none' }}\n          accept={accept}\n          ref={this.fileInput}\n          onChange={() => (type === 'openDirectory' ? () => {} : this.handleFileInputSelection())}\n          webkitdirectory={type === 'openDirectory' ? 'True' : null}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default FileSelector;\n","// @flow\nimport * as MODALS from 'constants/modal_types';\nimport * as THUMBNAIL_STATUSES from 'constants/thumbnail_upload_statuses';\nimport Lbry from 'lbry';\nimport { DOMAIN, THUMBNAIL_CDN_SIZE_LIMIT_BYTES } from 'config';\nimport * as React from 'react';\nimport { FormField } from 'component/common/form';\nimport FileSelector from 'component/common/file-selector';\nimport Button from 'component/button';\nimport ThumbnailMissingImage from './thumbnail-missing.png';\nimport ThumbnailBrokenImage from './thumbnail-broken.png';\nimport './style.lazy.scss';\n\ntype Props = {\n  filePath: ?string,\n  fileInfos: { [string]: FileListItem },\n  myClaimForUri: ?StreamClaim,\n  thumbnail: ?string,\n  formDisabled: boolean,\n  uploadThumbnailStatus: string,\n  thumbnailPath: ?string,\n  thumbnailError: ?string,\n  thumbnailParam: ?string,\n  thumbnailParamError: boolean,\n  thumbnailParamStatus: string,\n  optional?: boolean,\n  openModal: (id: string, {}) => void,\n  updatePublishForm: (UpdatePublishState) => void,\n  updateThumbnailParams: ({}) => void,\n  resetThumbnailStatus: () => void,\n};\n\nfunction SelectThumbnail(props: Props) {\n  const {\n    filePath,\n    fileInfos,\n    myClaimForUri,\n    formDisabled,\n    uploadThumbnailStatus: status,\n    openModal,\n    updatePublishForm,\n    thumbnailParam,\n    thumbnailParamStatus,\n    updateThumbnailParams,\n    thumbnailPath,\n    resetThumbnailStatus,\n    optional,\n  } = props;\n\n  const publishForm = !updateThumbnailParams;\n  const thumbnail = publishForm ? props.thumbnail : thumbnailParam;\n  const thumbnailError = publishForm ? props.thumbnailError : props.thumbnailParamError;\n\n  var accept = '.png, .jpg, .jpeg, .gif';\n  if (window.cordova) accept = 'image/*';\n  const manualInput = status === THUMBNAIL_STATUSES.MANUAL;\n  const thumbUploaded = status === THUMBNAIL_STATUSES.COMPLETE && thumbnail;\n  const isUrlInput = thumbnail !== ThumbnailMissingImage && thumbnail !== ThumbnailBrokenImage;\n\n  const outpoint = myClaimForUri ? `${myClaimForUri.txid}:${myClaimForUri.nout}` : undefined;\n  const fileInfo = outpoint ? fileInfos[outpoint] : undefined;\n  const downloadPath = fileInfo ? fileInfo.download_path : undefined;\n\n  const actualFilePath = filePath || downloadPath;\n  let isSupportedVideo = false;\n  if (typeof actualFilePath === 'string') {\n    isSupportedVideo = Lbry.getMediaType(null, actualFilePath) === 'video';\n  } else if (actualFilePath && actualFilePath.type) {\n    isSupportedVideo = actualFilePath.type.split('/')[0] === 'video';\n  }\n\n  function handleThumbnailChange(e: SyntheticInputEvent<*>) {\n    const newThumbnail = e.target.value.replace(' ', '');\n\n    if (updateThumbnailParams) {\n      updateThumbnailParams({ thumbnail_url: newThumbnail });\n    } else {\n      updatePublishForm({\n        thumbnail: newThumbnail,\n        thumbnailError: newThumbnail.startsWith('data:image'),\n      });\n    }\n  }\n\n  React.useEffect(() => {\n    if (updateThumbnailParams && status !== thumbnailParamStatus) {\n      updateThumbnailParams({ thumbnail_status: status });\n    }\n  }, [status, thumbnailParamStatus, updateThumbnailParams]);\n\n  let thumbnailSrc;\n  if (!thumbnail) {\n    thumbnailSrc = ThumbnailMissingImage;\n  } else if (thumbnailError) {\n    thumbnailSrc =\n      (manualInput && ThumbnailBrokenImage) || (status !== THUMBNAIL_STATUSES.COMPLETE && ThumbnailMissingImage);\n  } else {\n    thumbnailSrc = thumbnail;\n  }\n\n  /*\n    Note:\n    We are using backgroundImage instead of an <img /> to zoom if the selected thumbnail isn't\n    the proper aspect ratio. This is to avoid blackbars on the side of images and inconsistent thumbnails\n    We still need to render the image to see if there is an error loading the url\n  */\n  const thumbPreview = (\n    <div className=\"column__item thumbnail-picker__preview\" style={{ backgroundImage: `url(${String(thumbnailSrc)})` }}>\n      {thumbUploaded &&\n        thumbnailError !== false &&\n        __('This will be visible in a few minutes after you submit this form.')}\n      <img\n        style={{ display: 'none' }}\n        src={thumbnail}\n        alt={__('Thumbnail Preview')}\n        onError={() =>\n          publishForm\n            ? updatePublishForm({ thumbnailError: true })\n            : updateThumbnailParams({ thumbnail_error: Boolean(thumbnail) })\n        }\n        onLoad={() =>\n          publishForm\n            ? updatePublishForm({\n                thumbnailError: !isUrlInput || (thumbnail ? thumbnail.startsWith('data:image') : false),\n              })\n            : updateThumbnailParams({ thumbnail_error: !isUrlInput })\n        }\n      />\n    </div>\n  );\n\n  return (\n    <>\n      {optional && <h2 className=\"card__title\">{__('Thumbnail (Optional)')}</h2>}\n      {status !== THUMBNAIL_STATUSES.IN_PROGRESS && (\n        <div className=\"column card--thumbnail\">\n          {thumbPreview}\n          {publishForm && thumbUploaded ? (\n            <div className=\"column__item\">\n              <p>{__('Upload complete.')}</p>\n              <div className=\"section__actions\">\n                <Button button=\"link\" label={__('New thumbnail')} onClick={resetThumbnailStatus} />\n              </div>\n            </div>\n          ) : (\n            <div className=\"column__item\">\n              {manualInput ? (\n                <>\n                  <FormField\n                    type=\"text\"\n                    name=\"content_thumbnail\"\n                    placeholder=\"https://images.fbi.gov/alien\"\n                    value={thumbnail}\n                    disabled={formDisabled}\n                    onChange={handleThumbnailChange}\n                  />\n                  {!thumbUploaded && <p className=\"help\">{__('Enter a URL for your thumbnail.')}</p>}\n                </>\n              ) : (\n                <>\n                  <FileSelector\n                    currentPath={thumbnailPath}\n                    placeholder={__('Choose an enticing thumbnail')}\n                    accept={accept}\n                    onFileChosen={(file) =>\n                      openModal(MODALS.CONFIRM_THUMBNAIL_UPLOAD, {\n                        file,\n                        cb: (url) => !publishForm && updateThumbnailParams({ thumbnail_url: url }),\n                      })\n                    }\n                  />\n                  {!thumbUploaded && (\n                    <p className=\"help\">\n                      {__('Upload your thumbnail to %domain%. Recommended ratio is 16:9, %max_size%MB max.', {\n                        domain: DOMAIN,\n                        max_size: THUMBNAIL_CDN_SIZE_LIMIT_BYTES / (1024 * 1024),\n                      })}\n                    </p>\n                  )}\n                </>\n              )}\n              <div className=\"card__actions\">\n                <Button\n                  button=\"link\"\n                  label={manualInput ? __('Use thumbnail upload tool') : __('Enter a thumbnail URL')}\n                  onClick={() =>\n                    updatePublishForm({\n                      uploadThumbnailStatus: manualInput ? THUMBNAIL_STATUSES.READY : THUMBNAIL_STATUSES.MANUAL,\n                    })\n                  }\n                />\n                {status === THUMBNAIL_STATUSES.READY && isSupportedVideo && IS_WEB && (\n                  // Disabled on desktop until this is resolved\n                  // https://github.com/electron/electron/issues/20750#issuecomment-709505902\n                  <Button\n                    button=\"link\"\n                    label={__('Take a snapshot from your video')}\n                    onClick={() => openModal(MODALS.AUTO_GENERATE_THUMBNAIL, { filePath: actualFilePath })}\n                  />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {status === THUMBNAIL_STATUSES.IN_PROGRESS && (\n        <div className=\"column card--thumbnail\">\n          <p>{__('Uploading thumbnail')}...</p>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default SelectThumbnail;\n","import { connect } from 'react-redux';\nimport { selectPublishFormValues, selectMyClaimForUri } from 'redux/selectors/publish';\nimport { selectFileInfosByOutpoint } from 'redux/selectors/file_info';\nimport { doUpdatePublishForm, doResetThumbnailStatus } from 'redux/actions/publish';\nimport { doOpenModal } from 'redux/actions/app';\nimport SelectThumbnail from './view';\n\nconst select = (state) => ({\n  ...selectPublishFormValues(state),\n  fileInfos: selectFileInfosByOutpoint(state),\n  myClaimForUri: selectMyClaimForUri(state),\n});\n\nconst perform = (dispatch) => ({\n  updatePublishForm: (value) => dispatch(doUpdatePublishForm(value)),\n  resetThumbnailStatus: () => dispatch(doResetThumbnailStatus()),\n  openModal: (modal, props) => dispatch(doOpenModal(modal, props)),\n});\n\nexport default connect(select, perform)(SelectThumbnail);\n"],"names":["FileSelector","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","_defineProperty","_assertThisInitialized","call","files","fileInput","current","file","props","onFileChosen","value","remote","properties","then","result","path","filePaths","click","React","handleFileInputSelection","bind","handleDirectoryInputSelection","fileInputButton","key","_this2","_this$props","this","type","currentPath","label","placeholder","accept","error","disabled","_this$props$autoFocus","autoFocus","placeHolder","FormField","webkitdirectory","className","readOnly","__","inputButton","Button","button","onClick","style","display","ref","onChange","filePath","fileInfos","myClaimForUri","formDisabled","status","uploadThumbnailStatus","openModal","updatePublishForm","thumbnailParam","thumbnailParamStatus","updateThumbnailParams","thumbnailPath","resetThumbnailStatus","optional","publishForm","thumbnail","thumbnailError","thumbnailParamError","window","cordova","thumbnailSrc","manualInput","THUMBNAIL_STATUSES","thumbUploaded","isUrlInput","ThumbnailMissingImage","ThumbnailBrokenImage","outpoint","concat","txid","nout","undefined","fileInfo","downloadPath","download_path","actualFilePath","isSupportedVideo","Lbry","split","thumbnail_status","thumbPreview","backgroundImage","String","src","alt","onError","thumbnail_error","Boolean","onLoad","startsWith","name","e","newThumbnail","target","replace","thumbnail_url","MODALS","cb","url","domain","DOMAIN","max_size","THUMBNAIL_CDN_SIZE_LIMIT_BYTES","connect","state","_objectSpread","selectPublishFormValues","selectFileInfosByOutpoint","selectMyClaimForUri","dispatch","doUpdatePublishForm","doResetThumbnailStatus","modal","doOpenModal","SelectThumbnail"],"sourceRoot":""}