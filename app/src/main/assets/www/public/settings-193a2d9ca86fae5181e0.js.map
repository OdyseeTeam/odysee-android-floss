{"version":3,"file":"settings-193a2d9ca86fae5181e0.js","mappings":"svCA+KA,IAAMA,EAAmB,SAACC,GACxB,IAAQC,EAAyBD,EAAzBC,WAAYC,EAAaF,EAAbE,SAEpB,OAAOD,EAAaC,EAAWC,EAAAA,cAAA,OAAKC,UAAU,oBAAoBF,EACpE,EAUMG,EAAe,SAACL,GACpB,IAAQM,EAAoDN,EAApDM,YAAaC,EAAuCP,EAAvCO,WAAYL,EAA2BF,EAA3BE,SAAUM,EAAiBR,EAAjBQ,aAerCC,EAAkB,SAACC,GACvB,OACEP,EAAAA,cAACQ,EAAAA,EAAO,CAACC,MAAOC,EAAG,mCACjBV,EAAAA,cAAA,OACEC,UAAWU,IAAW,2BAA4B,CAChDC,OAAuB,WAAfL,EAAIM,OACZC,SAAyB,aAAfP,EAAIM,OACdE,UAA0B,cAAfR,EAAIM,UAGjBb,EAAAA,cAACgB,EAAAA,QAAI,CAACC,KAAqB,WAAfV,EAAIM,OAAsBK,EAAAA,KAAaA,EAAAA,UAI3D,EAqBA,OAAOf,EACLH,EAAAA,cAAA,MAAIC,UAAU,eACXI,GAAgBL,EAAAA,cAACM,EAAe,CAACO,OAAQR,IAC1CL,EAAAA,cAAA,QAAMmB,wBAAyB,CAAEC,OAZrC,SAAqBrB,GACnB,IAAK,IAAIsB,KAAStB,SAAe,QAAPuB,EAARvB,EAAUF,aAAK,IAAAyB,OAAP,EAARA,EAAiBvB,SAAU,KAAAuB,EAAAC,EACeC,EAA1D,GAAgD,iBAArCzB,SAAe,QAAPwB,EAARxB,EAAUF,aAAK,IAAA0B,OAAP,EAARA,EAAiBxB,SAASsB,IACnC,OAAOtB,SAAe,QAAPyB,EAARzB,EAAUF,aAAK,IAAA2B,OAAP,EAARA,EAAiBzB,SAASsB,EAErC,CACA,OAAOtB,CACT,CAK6C0B,CAAY1B,OAGvDC,EAAAA,cAAA,MAAIC,UAAWU,IAAW,cAAe,CAAE,qBAAsBP,KAAgBL,EAErF,EAEA,QArNA,SAAcF,GACZ,IACEY,EAwBEZ,EAxBFY,MACAiB,EAuBE7B,EAvBF6B,SACAC,EAsBE9B,EAtBF8B,aACAC,EAqBE/B,EArBF+B,GACAC,EAoBEhC,EApBFgC,KACAC,EAmBEjC,EAnBFiC,QACAb,EAkBEpB,EAlBFoB,KACAhB,EAiBEJ,EAjBFI,UAAS8B,EAiBPlC,EAhBFM,YAAAA,OAAW,IAAA4B,GAAQA,EAAAC,EAgBjBnC,EAfFoC,WAAAA,OAAU,IAAAD,GAAQA,EAAAE,EAehBrC,EAbFO,WAAAA,OAAU,IAAA8B,GAAQA,EAClBC,EAYEtC,EAZFsC,cACAC,EAWEvC,EAXFuC,IACAC,EAUExC,EAVFyC,QACAvC,EASEF,EATFE,SACAwC,EAQE1C,EARF0C,WACAC,EAOE3C,EAPF2C,WACAC,EAME5C,EANF4C,WACAC,EAKE7C,EALF6C,gBACA5C,EAIED,EAJFC,WACA6C,EAGE9C,EAHF8C,cACAtC,EAEER,EAFFQ,aACAuC,EACE/C,EADF+C,WAGqDC,EAAAC,GAAvBC,EAAAA,EAAAA,UAASZ,GAAc,GAAhDa,EAAQH,EAAA,GAAEI,EAAWJ,EAAA,GACtBK,OAA+BC,IAAlBhB,EAEnB,OACEnC,EAAAA,cAAA,WACEoD,KAAMf,EAAU,cAAWc,EAC3BlD,UAAWU,IAAWV,EAAW,OAAQ,CACvC,mBAAoBoD,QAAQd,GAC5B,mBAAoBE,IAEtBb,GAAIA,EACJU,QAAS,SAACgB,GACJjB,IACFA,IACAiB,EAAEC,kBAEN,GAECb,GACC1C,EAAAA,cAAA,OACEC,UAAU,aACVuD,MAAO,CACLd,gBACE,uEAAyEA,EAAkB,OAInG1C,EAAAA,cAACJ,EAAgB,CAACE,WAAYA,IAC1BW,GAASiB,IACT1B,EAAAA,cAAA,OACEC,UAAWU,IAAW,wBAAyB,CAC7C,qBAAsB6B,EACtB,qBAAsBI,KAGxB5C,EAAAA,cAAA,OAAKC,UAAWU,IAAW,sBAAuB,CAAE,iCAAkCsB,KACnFhB,GAAQjB,EAAAA,cAACgB,EAAAA,QAAI,CAACyC,aAAW,EAACxC,KAAMA,IAEjCjB,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAACE,EAAY,CAACC,YAAaA,EAAaC,WAAYA,EAAYC,aAAcA,GAC3EI,GAGFiB,GACC1B,EAAAA,cAAA,OAAKC,UAAWU,IAAW,iBAAkB,CAAE,wBAAyBP,KACrEsB,MAMPC,GAAgBuB,IAChBlD,EAAAA,cAAA,OAAKC,UAAU,iCACZ0B,GACC3B,EAAAA,cAAA,OACEC,UAAWU,IAAW,sBAAuB,CAC3C,6BAA8BP,KAG/BuB,GAGJuB,GACClD,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,MACP,gBAAeX,EACf,aAAuBtC,EAAXsC,EAAc,OAAa,QACvC/B,KAAM+B,EAAW9B,EAAAA,SAAiBA,EAAAA,IAClCoB,QAAS,kBAAMW,GAAaD,EAAS,MAO9CL,KAIFO,GAAeA,GAAcF,IAC9BhD,EAAAA,cAAAA,EAAAA,SAAA,KACG6B,GACC7B,EAAAA,cAAA,OACEC,UAAWU,IAAW,aAAc,CAClC,wBAAyBF,IAAUiB,EACnC,mBAAoBO,KAGrBJ,GAGJC,GAAW9B,EAAAA,cAAA,OAAKC,UAAU,sBAAsB6B,GAChD/B,GAAYC,EAAAA,cAAA,OAAKC,UAAU,sBAAsBF,IAIrDqC,GAGFG,GAAcvC,EAAAA,cAAA,OAAKC,UAAU,qBAAqBsC,GAGzD,C,o4DCpKkD,IAc5CqB,EAAY,SAAAC,I,qRAAAC,CAAAF,EAAAC,GAAA,I,MAAAE,EAAAC,EAAAJ,GAQhB,SAAAA,IAAc,IAAAK,EAK2C,O,4FAL3CC,CAAA,KAAAN,GACJO,EAAAC,EAARH,EAAAF,EAAAM,KAAA,OAAQ,oBAAAF,EAAAC,EAAAH,GAAA,4BAOiB,WACzB,IAAQK,EAAUL,EAAKM,UAAUC,QAAzBF,MACR,GAAKA,EAAL,CAIA,IAAMG,EAAOH,EAAM,GAEfL,EAAKpE,MAAM6E,cACbT,EAAKpE,MAAM6E,aAAaD,GAE1BR,EAAKM,UAAUC,QAAQG,MAAQ,IAP/B,CAQF,IAACR,EAAAC,EAAAH,GAAA,iCAE+B,WAC9BW,EAAAA,GAAAA,OAAAA,eAA6B,CAAEC,WAAY,CAAC,mBAAoBC,MAAK,SAACC,GACpE,IAAMC,EAAOD,GAAUA,EAAOE,UAAU,GACpCD,GAEFf,EAAKpE,MAAM6E,aAAa,CAAEM,KAAAA,GAE9B,GACF,IAACb,EAAAC,EAAAH,GAAA,mBAEiB,WAChBA,EAAKM,UAAUC,QAAQU,OACzB,IAACf,EAAAC,EAAAH,GAAA,gBAhCCA,EAAKM,UAAYvE,EAAAA,YACjBiE,EAAKkB,yBAA2BlB,EAAKkB,yBAAyBC,KAAIhB,EAAAH,IAClEA,EAAKoB,8BAAgCpB,EAAKoB,8BAA8BD,KAAIhB,EAAAH,IAC5EA,EAAKqB,gBAAkBrB,EAAKqB,gBAAgBF,KAAIhB,EAAAH,IAAOA,CACzD,CAmEC,O,EAnEAL,G,EAAA,EAAA2B,IAAA,SAAAZ,MAgCD,WAAS,IAAAa,EAAA,KACPC,EAA8FC,KAAK7F,MAA3F8F,EAAIF,EAAJE,KAAMC,EAAWH,EAAXG,YAAaC,EAAKJ,EAALI,MAAOC,EAAWL,EAAXK,YAAaC,EAAMN,EAANM,OAAQC,EAAKP,EAALO,MAAOC,EAAQR,EAARQ,SAAQC,EAAAT,EAAEU,UAAAA,OAAS,IAAAD,GAAQA,EACnFE,EAAcR,GAAeE,EAEnC,OACE9F,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAACqG,EAAAA,GAAS,CACRR,MAAOA,EACPS,gBAAgB,OAChBrG,UAAU,uBACV+F,MAAOA,EACPC,SAAUA,EACVN,KAAK,OACLY,SAAS,WACT5B,MAAOyB,GAAe1F,EAAG,iBACzB8F,YACExG,EAAAA,cAAC0D,EAAAA,QAAM,CACLyC,UAAWA,EACXxC,OAAO,UACPsC,SAAUA,EACV3D,QAAkB,kBAATqD,EAA2BD,KAAKL,8BAAgCK,KAAKJ,gBAC9EO,MAAOnF,EAAG,cAIhBV,EAAAA,cAAA,SACE2F,KAAM,OACNnC,MAAO,CAAEiD,QAAS,QAClBV,OAAQA,EACRW,IAAKhB,KAAKnB,UACVoC,SAAU,iBAAgB,kBAAThB,EAA2B,WAAO,EAAIH,EAAKL,0BAA0B,EACtFmB,gBAA0B,kBAATX,EAA2B,OAAS,OAI7D,M,8EAAC/B,CAAA,CAjFe,CAAS5D,EAAAA,eAAmBmE,EAAxCP,EAAY,eACM,CACpBuC,WAAW,EACXR,KAAM,SAiFV,S,2FCrGA,QCgBe,SAAqB9F,GAClC,IAAQY,EAAkGZ,EAAlGY,MAAOiB,EAA2F7B,EAA3F6B,SAAUkF,EAAiF/G,EAAjF+G,SAAUC,EAAuEhH,EAAvEgH,qBAAsBZ,EAAiDpG,EAAjDoG,SAAUa,EAAuCjH,EAAvCiH,YAAaC,EAA0BlH,EAA1BkH,YAAahH,EAAaF,EAAbE,SAC7F,OACEC,EAAAA,cAAA,OACEC,UAAWU,IAAW,kCAAmC,CACvD,6BAA8BiG,EAC9B,aAAcX,EACd,0BAA2Ba,KAG7B9G,EAAAA,cAAA,OAAKC,UAAU,uBACbD,EAAAA,cAAA,YACGS,EACAsG,GACC/G,EAAAA,cAAC0D,EAAAA,QAAM,CAACzD,UAAU,6BAA6B+G,SAAQ,MAAAC,OAAQC,EAAAA,oBAC5D,YAINxF,GAAY1B,EAAAA,cAAA,KAAGC,UAAU,0BAA0ByB,IAEtD1B,EAAAA,cAAA,OACEC,UAAWU,IAAW,sBAAuB,CAC3C,gCAAiCiG,EACjC,mCAAoCC,EACpC,gBAAiBZ,KAGlBlG,GAAYA,GAIrB,C,kCCjDO,IAAMoH,EAAqB,kB,8SCkDlC,SAAeC,EAAAA,EAAAA,KA/Bf,SAAoBvH,GAClB,IAAQwH,EAAoDxH,EAApDwH,cAAeC,EAAqCzH,EAArCyH,UAAWC,EAA0B1H,EAA1B0H,YAAatB,EAAapG,EAAboG,SAE/C,OACEjG,EAAAA,cAACwH,EAAAA,EAAW,CACV/G,MAAOC,EAAG,QACVgB,SAAUuE,IAAaoB,EAAgB,GAAK3G,EAAG,sDAE/CV,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,cACL5B,MAAOI,IAAaoB,EAAgB3G,EAAG,0DAAuDyC,EAC9FuE,QAASH,GAAeF,EACxBV,SAAU,kBAAMW,EAAUK,EAAAA,GAAoB,CAAEC,KAAML,EAAc,UAAY,UAAW,EAC3FtB,SAAUA,IAAaoB,EACvBQ,OACE5B,EACIvF,EAAG,6FACH,QAGN2G,GACArH,EAAAA,cAAA,WACEA,EAAAA,cAAA,KAAGC,UAAU,QAAQS,EAAG,uDACxBV,EAAAA,cAAC0D,EAAAA,QAAM,CAACoE,cAAY,EAACnE,OAAO,UAAUkC,MAAOnF,EAAG,gBAK1D,KC5BeqH,EAAAA,EAAAA,KAXA,SAACC,GAAK,MAAM,CACzBT,aAAaU,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACxCb,eAAec,EAAAA,EAAAA,IAAwBH,GACvCI,cAAcC,EAAAA,EAAAA,IAA0BL,GACzC,IAEe,SAACM,GAAQ,MAAM,CAC7BC,eAAgB,SAAC5D,GAAK,OAAK2D,GAASE,EAAAA,EAAAA,IAA0B7D,GAAO,EACrE2C,UAAW,SAAC1F,EAAI/B,GAAK,OAAKyI,GAASG,EAAAA,EAAAA,IAAY7G,EAAI/B,GAAO,EAC3D,GAED,CAAwC6I,G,ukCCDxC,SAAeX,EAAAA,EAAAA,KAXA,SAACC,GAAK,MAAM,CACzBW,iBAAiBR,EAAAA,EAAAA,IAAwBH,GACzCY,iBAAiBC,EAAAA,EAAAA,IAAwBb,GACzCc,MAAMC,EAAAA,EAAAA,IAAWf,GACjBgB,aAAaC,EAAAA,EAAAA,IAAkBjB,GAChC,IAEe,SAACM,GAAQ,MAAM,CAC7BY,eAAgB,kBAAMZ,GAASa,EAAAA,EAAAA,MAAiB,EACjD,GAED,ECEe,SAAwBtJ,GACrC,IAAQ8I,EAAwE9I,EAAxE8I,gBAAkCG,GAAsCjJ,EAAvD+I,gBAAuD/I,EAAtCiJ,MAAME,EAAgCnJ,EAAhCmJ,YAAaE,EAAmBrJ,EAAnBqJ,eACIE,EAAAtG,EAArB9C,EAAAA,UAAe,GAAM,GAA1CqJ,GAAFD,EAAA,GAAmBA,EAAA,IAcxC,SAASE,EAAaC,GACfC,OAAOC,OAAOC,MAAMC,WAGvBH,OAAOC,OAAOG,UAAUC,YAAYN,EAAK,YAFzCC,OAAOC,OAAOG,UAAUE,QAAQC,KAAKR,EAIzC,CAEA,OAnBAvJ,EAAAA,WAAgB,WACV2I,IACFO,KACAc,EAAAA,EAAAA,yBAAwBlF,MAAK,SAACmF,GACX,iBAANA,GACTZ,GAAkB,EAEtB,IAEJ,GAAG,IAWDrJ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACkK,EAAAA,EAAI,CACHtI,GAAIuI,EAAAA,GAAAA,QACJ1J,MAAOC,EAAG,WACV+B,YAAU,EACVR,YAAU,EACVJ,KACE7B,EAAAA,cAAAA,EAAAA,SAAA,KACG2I,GACC3I,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,aACrBV,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,UACPkC,MAAOnF,EAAG,UACVO,KAAMC,EAAAA,YACN8F,SAAQ,MAAAC,OAAQC,EAAAA,yBAQpBsC,OAAOC,OAAOC,MAAMC,YAAcb,IAAQsB,EAAAA,EAAAA,OAC1CpK,EAAAA,cAACwH,EAAAA,EAAW,CACV/G,MAAOC,EAAG,iBACVgB,SAAUhB,EAAG,oFAEbV,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,UACPkC,MAAOnF,EAAG,UACVO,KAAMC,EAAAA,YACNoB,QAAS,kBAAMgH,EAAa,MAADrC,OAAOC,EAAAA,yBAAgC,MAQtEsC,OAAOC,OAAOC,MAAMC,YAAchB,IAAmByB,EAAAA,EAAAA,OACrDpK,EAAAA,cAACwH,EAAAA,EAAW,CACV/G,MAAOC,EAAG,mBACVgB,SAAUhB,EAAG,+DAEbV,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,UACPkC,MAAOnF,EAAG,UACVO,KAAMC,EAAAA,YACNoB,QAAS,kBAAMgH,EAAa,MAADrC,OAAOC,EAAAA,sBAA6B,KAOpE8B,GACChJ,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,YAAagB,SAAUhB,EAAG,6BAC/CV,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,UACPkC,MAAOnF,EAAG,UACVO,KAAMC,EAAAA,YACN8F,SAAQ,MAAAC,OAAQC,EAAAA,0BAKtBlH,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,aAAcgB,SAAUhB,EAAG,iCAChDV,EAAAA,cAAC0D,EAAAA,QAAM,CAACC,OAAO,UAAUkC,MAAOnF,EAAG,UAAWO,KAAMC,EAAAA,YAAmB8F,SAAQ,MAAAC,OAAQC,EAAAA,eAOrG,I,oCChFA,QA5BA,SAAwBrH,GACtB,IAAQwK,EAAwCxK,EAAxCwK,SAAUC,EAA8BzK,EAA9ByK,aAAcC,EAAgB1K,EAAhB0K,YAG1B5F,EAAqB,OAAb0F,GAAoBG,EAAAA,EAAAA,MAAuBH,EAOzD,OAAIC,EAAaG,QAAU,EAClB,KAIPzK,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAACqG,EAAAA,GAAS,CAACoB,KAAK,kBAAkB9B,KAAK,SAASgB,SAXpD,SAA2BrD,GACzB,IAAQqB,EAAUrB,EAAEoH,OAAZ/F,MACR4F,EAAY5F,EACd,EAQiFA,MAAOA,GACjF2F,EAAaK,KAAI,SAACC,GAAE,OACnB5K,EAAAA,cAAA,UAAQuF,IAAK,KAAOqF,EAAIjG,MAAOiG,IAC5BC,EAAAA,EAAAA,IAAgBD,GACV,KAKnB,EC/BA,IAKME,EAAU,CACdP,YAAaQ,EAAAA,IAGf,SAAehD,EAAAA,EAAAA,KATA,SAACC,GAAK,MAAM,CACzBqC,UAAUpC,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACrCoC,cAAcU,EAAAA,EAAAA,IAAmBhD,GAClC,GAM8B8C,EAA/B,CAAwCG,G,wjCCqCxC,QAvCA,SAAyBpL,GACvB,IAAQqL,EAA0BrL,EAA1BqL,SAAUC,EAAgBtL,EAAhBsL,YAC6CtI,EAAAC,GAAfC,EAAAA,EAAAA,WAAS,GAAM,GAAxDqI,EAAgBvI,EAAA,GAAEwI,EAAmBxI,EAAA,GAe5C,OACE7C,EAAAA,cAACA,EAAAA,SAAc,MACXoL,GACApL,EAAAA,cAACqG,EAAAA,GAAS,CACRoB,KAAK,kBACL9B,KAAK,SACLgB,SAnBR,SAA0BrD,GACxB,IAAQqB,EAAUrB,EAAEoH,OAAZ/F,MACR0G,GAAoB,GACpBF,EAAYxG,GAAM,SAAS,kBAAM0G,GAAoB,EAAM,IACvDC,UAAYA,SAASC,kBACnBC,EAAAA,GAAU7G,GAAO8F,QAAU,EAC7Ba,SAASC,gBAAgBE,IAAMD,EAAAA,GAAU7G,GAAO,GAEhD2G,SAASC,gBAAgBE,IAAM,MAGrC,EASQ9G,MAAOuG,IAAYV,EAAAA,EAAAA,QAElBkB,EAAAA,EAAAA,IAAgBC,EAAAA,GAAqBhB,KAAI,SAAAiB,GAAA,IAAAC,EAAA/I,EAAA8I,EAAA,GAAEE,EAAOD,EAAA,GAAEE,EAAQF,EAAA,UAC3D7L,EAAAA,cAAA,UAAQuF,IAAKuG,EAASnH,MAAOmH,GAC1BC,EACM,KAKdX,GAAoBpL,EAAAA,cAACgM,EAAAA,EAAO,CAACrG,KAAK,UAGzC,ECtCA,SAAeoC,EAAAA,EAAAA,KARA,SAACC,GAAK,MAAM,CACzBkD,UAAUe,EAAAA,EAAAA,IAAejE,GAC1B,IAEe,SAACM,GAAQ,MAAM,CAC7B6C,YAAa,SAACxG,GAAK,OAAK2D,GAAS4D,EAAAA,EAAAA,IAAcvH,GAAO,EACvD,GAED,CAAwCwH,G,kBCMxC,SAAepE,EAAAA,EAAAA,KAbA,SAACC,GAAK,MAAM,CACzBoE,cAAcnE,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACzCmE,QAAQpE,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACnCoE,0BAA0BrE,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACrDqE,eAAetE,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAC1CsE,UAAUvE,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACtC,IAEe,SAACI,GAAQ,MAAM,CAC7BmE,iBAAkB,SAAClH,EAAKZ,GAAK,OAAK2D,GAASoE,EAAAA,EAAAA,IAAmBnH,EAAKZ,GAAO,EAC1EgI,YAAa,SAACC,EAAMC,GAAO,OAAKvE,GAASwE,EAAAA,EAAAA,GAAcF,EAAMC,GAAS,EACvE,GAED,ECQe,SAAuBhN,GACpC,IAAQuM,EACNvM,EADMuM,aAAcC,EACpBxM,EADoBwM,OAAQC,EAC5BzM,EAD4ByM,yBAA0BC,EACtD1M,EADsD0M,cAAeC,EACrE3M,EADqE2M,SAAUC,EAC/E5M,EAD+E4M,iBAAkBE,EACjG9M,EADiG8M,YAcnG,SAASI,EAA0BpI,GACjC8H,EAAiBvE,EAAAA,GAAsCvD,EACzD,CAEA,SAASqI,EAAaC,EAA+BJ,GACnDF,EAAYM,EAAMvC,OAAO/F,MAAOkI,EAClC,CAEA,SAASK,EAAWN,EAAcJ,GAChC,OAAIA,EACK,GAAPvF,OAAU2F,EAAI,OAGJ,IAAIO,KAAK,EAAG,EAAG,EAAGC,OAAOR,IAC1BS,mBAAmB,QAAS,CAAEC,QAAQ,EAAMC,KAAM,WAC/D,CAEA,OACEvN,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,wBACEA,EAAAA,cAACqG,EAAAA,GAAS,CACRoB,KAAK,eACL9B,KAAK,SACLgB,SA/BR,SAAuBsG,GACrB,IAAQtI,EAAUsI,EAAMvC,OAAhB/F,MACM,SAAVA,GACFoI,GAA0B,GAE5BN,EAAiBvE,EAAAA,GAAgBvD,EACnC,EA0BQA,MAAOyH,EACPnG,SAAUqG,GAETD,EAAO1B,KAAI,SAAC6C,GAAK,OAChBxN,EAAAA,cAAA,UAAQuF,IAAKiI,EAAO7I,MAAO6I,GACJ9M,EAAV,UAAV8M,EAAuB,QAAc,QAC/B,MAKfxN,EAAAA,cAAA,oBAAkByN,MAAM,kBACtBzN,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,sBACLd,SAAU,kBAAMoG,GAA2BT,EAAyB,EACpE5E,QAAS4E,EACTzG,MAAOnF,EAAG,yBAGX4L,GACCtM,EAAAA,cAAA,kBAAgByN,MAAM,2BACpBzN,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,SACL8B,KAAK,kCACLd,SAAU,SAAChC,GAAK,OAAKqI,EAAarI,EAAO,CAAE+I,OAAQ,OAAQd,KAAM,QAAS,EAC1EjI,MAAO4H,EAAcoB,KAAKJ,KAC1B1H,MAAOnF,EAAG,4BA9DH,CAAC,KAAM,KAAM,KAAM,MAgEdiK,KAAI,SAACiC,GAAI,OACnB5M,EAAAA,cAAA,UAAQuF,IAAKqH,EAAMjI,MAAOiI,GACvBM,EAAWN,EAAMJ,GACX,KAIbxM,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,SACL8B,KAAK,gCACL5B,MAAOnF,EAAG,uBACViG,SAAU,SAAChC,GAAK,OAAKqI,EAAarI,EAAO,CAAE+I,OAAQ,KAAMd,KAAM,QAAS,EACxEjI,MAAO4H,EAAcqB,GAAGL,MA3EnB,CAAC,IAAK,IAAK,IAAK,KA6EX5C,KAAI,SAACiC,GAAI,OACjB5M,EAAAA,cAAA,UAAQuF,IAAKqH,EAAMjI,MAAOiI,GACvBM,EAAWN,EAAMJ,GACX,OAQzB,I,kBCTA,IAAMqB,EAAO,CACXC,SAAU,oKC3FZ,SAAe/F,EAAAA,EAAAA,KAdA,SAACC,GAAK,MAAM,CACzBwE,UAAUvE,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACrC6F,kBAAkB9F,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAC7CoC,cAAcU,EAAAA,EAAAA,IAAmBhD,GACjCW,iBAAiBR,EAAAA,EAAAA,IAAwBH,GACzCgG,aAAa/F,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACxC+F,4BAA4BhG,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACxD,IAEe,SAACI,GAAQ,MAAM,CAC7BmE,iBAAkB,SAAClH,EAAKZ,GAAK,OAAK2D,GAASoE,EAAAA,EAAAA,IAAmBnH,EAAKZ,GAAO,EAC1EuJ,oBAAqB,SAACvJ,GAAK,OAAK2D,GAASoE,EAAAA,EAAAA,IAAmBxE,EAAAA,GAA6BvD,GAAO,EACjG,GAED,EDGe,SAA2B9E,GACxC,IACE2M,EAQE3M,EARF2M,SACAuB,EAOElO,EAPFkO,iBACAzD,EAMEzK,EANFyK,aACA3B,EAKE9I,EALF8I,gBACAqF,EAIEnO,EAJFmO,YACAC,EAGEpO,EAHFoO,2BACAxB,EAEE5M,EAFF4M,iBACAyB,EACErO,EADFqO,oBAKIC,GADFC,EAAAA,EAAAA,MADFC,SAAYC,OAE6B,IAALrH,OAASE,EAAAA,GAE/C,OACEnH,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACkK,EAAAA,EAAI,CACHtI,GAAIuI,EAAAA,GAAAA,WACJ1J,MAAOC,EAAG,cACV+B,YAAU,EACVR,YAAU,EACVJ,KACE7B,EAAAA,cAAAA,EAAAA,SAAA,KACGsK,EAAaG,OAAS,GACrBzK,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,YAAagB,SAAUhB,EAAG,4BAC/CV,EAAAA,cAACuO,EAAgB,OAIrBvO,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,YAAagB,SAAUhB,EAAGmN,EAAKC,WACpD9N,EAAAA,cAACmM,EAAe,OAGlBnM,EAAAA,cAACwH,EAAAA,EAAW,CACV/G,MAAOC,EAAG,mDACVoG,YAAaqH,GAEbnO,EAAAA,cAACqG,EAAAA,GAAS,CACRoB,KAAK,qBACL9B,KAAK,WACL+B,QAASqG,EACTpH,SAAU,kBAAMuH,GAAqBH,EAAiB,KAI1D/N,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,UACrBV,EAAAA,cAACwO,EAAa,OAGhBxO,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,kBACrBV,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,WACLd,SAAU,kBAAM8F,EAAiBvE,EAAAA,IAAqBsE,EAAS,EAC/D9E,QAAS8E,OAIX7D,GACA3I,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,kCACrBV,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,eACLd,SAAU,kBAAM8F,EAAiBvE,EAAAA,IAAwB8F,EAAY,EACrEtG,QAASsG,KAKfhO,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,yCACrBV,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,gCACLd,SAAU,kBAAM8F,EAAiBvE,EAAAA,IAAyC+F,EAA2B,EACrGvG,QAASuG,QAQzB,I,yCEhGelG,EAAAA,EAAAA,KAPA,SAACC,GAAK,MAAM,CACzByG,gBAAgBC,EAAAA,EAAAA,IAAqB1G,GACtC,IACe,SAACM,GAAQ,MAAM,CAC7BqG,iBAAkB,SAACpJ,EAAKZ,GAAK,OAAK2D,GAASsG,EAAAA,EAAAA,IAAmBrJ,EAAKZ,GAAO,EAC3E,GAED,ECce,SAA0B9E,GACvC,IAAQ4O,EAAqC5O,EAArC4O,eAAgBE,EAAqB9O,EAArB8O,iBAElBE,EAAmB,CAAEC,SAAU,MAAOC,OAAQ,IAC9CC,IAAqBP,GAAkBA,EAAeQ,aAE5D,SAASC,EAAsBC,GACzBA,GACFR,EAAiB,cAErB,CAEA,SAASS,EAAeC,GACtBV,EAAiB,cAAeU,EAClC,CAEA,OACErP,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,2BACLC,QAASsH,EACTnJ,MAAOnF,EAAG,YACViG,SAAU,kBAAMuI,GAAsB,EAAK,IAE7ClP,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,qBACLC,SAAUsH,EACVrI,SAAU,WACRuI,GAAsB,GACtBE,EAAeP,EACjB,EACAhJ,MAAOnF,EAAG,kBAGZV,EAAAA,cAACsP,EAAAA,GAAc,CACb7H,KAAK,cACL8H,IAAK,EACL5I,SAAUyI,EACVI,MAAOf,EAAeQ,YAAcR,EAAeQ,YAAcJ,EACjE5I,SAAU+I,IAIlB,I,kBC6FA,IAAMnB,GAAO,CACX4B,0BAA2B,oEAC3BC,aAAc,uFACdC,SAAU,iEACVC,YAAa,0NACbC,mBAAoB,8FACpBC,yBAA0B,GAC1BC,gBAAiB,mECnJnB,UAAehI,EAAAA,EAAAA,KAfA,SAACC,EAAOnI,GAAK,MAAM,CAChC8I,iBAAiBR,EAAAA,EAAAA,IAAwBH,GACzCgI,wBAAwB/H,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACnD+H,aAAahI,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACxCgI,UAAUC,EAAAA,EAAAA,IAAwBnI,GAClCoI,wBAAwBnI,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACnDmI,oBAAoBpI,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAC/CoI,sBAAsBrI,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAClD,IAEe,SAACI,GAAQ,MAAM,CAC7BmE,iBAAkB,SAAClH,EAAKZ,GAAK,OAAK2D,GAASoE,EAAAA,EAAAA,IAAmBnH,EAAKZ,GAAO,EAC1E2C,UAAW,SAAC1F,EAAI2O,GAAM,OAAKjI,GAASG,EAAAA,EAAAA,IAAY7G,EAAI2O,GAAQ,EAC7D,GAED,EDUe,SAAwB1Q,GACrC,IACE8I,EASE9I,EATF8I,gBACAqH,EAQEnQ,EARFmQ,uBACAC,EAOEpQ,EAPFoQ,YACAC,EAMErQ,EANFqQ,SACAE,EAKEvQ,EALFuQ,uBACAC,EAIExQ,EAJFwQ,mBACAC,EAGEzQ,EAHFyQ,qBACA7D,EAEE5M,EAFF4M,iBACAnF,EACEzH,EADFyH,UAGF,OACEtH,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACkK,EAAAA,EAAI,CACHtI,GAAIuI,EAAAA,GAAAA,QACJ1H,YAAU,EACVR,YAAU,EACVxB,MAAOC,EAAG,oBACVmB,KACE7B,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,6BAA8BgB,SAAUhB,EAAGmN,GAAK4B,4BACrEzP,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,4BACLC,QAASsI,EACTrJ,SAAU,SAACrD,GAAC,OAAKmJ,EAAiBvE,EAAAA,IAAqC8H,EAAuB,KAIlGhQ,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,gBAAiBgB,SAAUhB,EAAGmN,GAAK6B,eACxD1P,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,eACLC,QAASuI,EACTtJ,SAAU,SAACrD,GACT,GAAIqF,EAAiB,CACnB,IAAI6H,EAAQlN,EAAEoH,OAAOhD,QAAU,CAAE+I,IAAK,aAAgB,CAAEC,OAAQ,aAChEC,EAAAA,OAAAA,KAAY,WAAY,OAAQH,EAClC,CACA/D,EAAiBvE,EAAAA,IAAwB+H,EAC3C,MAIFW,EAAAA,aACA5Q,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,uBAAwBgB,SAAUhB,EAAGmN,GAAK+B,cAC/D5P,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,YACLC,QAASwI,EACTvJ,SAAU,kBACGuJ,EACPzD,EAAiBvE,EAAAA,IAAuBgI,GACxC5I,EAAUK,EAAAA,GAAmB,QAOzCgB,GACA3I,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,kBACrBV,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,UACPkC,MAAOnF,EAAG,UACVO,KAAMC,EAAAA,YACN8F,SAAQ,MAAAC,OAAQC,EAAAA,2BAIpBlH,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,+BACrBV,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,UACPkC,MAAOnF,EAAG,UACVO,KAAMC,EAAAA,YACN8F,SAAQ,MAAAC,OAAQC,EAAAA,4BAMxBlH,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,wBAAyBgB,SAAUhB,EAAGmN,GAAKkC,kBAChE/P,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,cACL5B,MAAOnF,EAAG,IACVgH,QAAS4I,EACT3J,SAAU,kBAAM8F,EAAiBvE,EAAAA,IAAkCoI,EAAqB,KAM5FtQ,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,EAAG,kCAAmCkG,UAAQ,GAChE5G,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,wBACLC,SAAU0I,EACVvK,MAAOnF,EAAG,uDACViG,SAAU,kBAAM8F,EAAiBvE,EAAAA,IAAmC,EAAM,IAE5ElI,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,oBACLC,QAAS0I,EACTvK,MAAOnF,EAAG,wDACVmH,OAAQnH,EAAGmN,GAAKiC,0BAChBnJ,SAAU,kBAAM8F,EAAiBvE,EAAAA,IAAmC,EAAK,IAE1EkI,GACCpQ,EAAAA,cAACsP,EAAAA,GAAc,CACb7H,KAAK,qBACL8H,IAAK,GACL5I,SAAU,SAAC0I,GAAQ,OAAK5C,EAAiBvE,EAAAA,GAA+BmH,EAAS,EACjFG,MAAOa,QASzB,I,q0BE3JA,IAAMQ,GAAkB,WCAxB,IAIM/F,GAAU,CACdgG,yBAAAA,EAAAA,IAGF,UAAe/I,EAAAA,EAAAA,KARA,SAACC,GAAK,MAAM,CACzB+I,gBAAgB9I,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAC5C,GAM8B4C,GAA/B,EDDe,SAA+BjL,GAC5C,IAAQkR,EAA6ClR,EAA7CkR,eAAgBD,EAA6BjR,EAA7BiR,yBAElBE,EAAWhR,EAAAA,SACXiR,EAAkB,CAACJ,IAAe5J,OAAAiK,GAAKC,GAAAA,KAS7C,OACEnR,EAAAA,cAACqG,EAAAA,GAAS,CACRoB,KAAK,wBACL9B,KAAK,SACLgB,SAXJ,SAA0BrD,GACxB,IAAQqB,EAAUrB,EAAEoH,OAAZ/F,MAERmM,EAAyBnM,IAAUkM,GAAkB,KAAOlM,GAC5DqM,EAASxM,QAAUG,CACrB,EAOIA,MAAOoM,GAAkBC,EAASxM,SAEjCyM,EAAgBtG,KAAI,SAACyG,GACpB,OACEpR,EAAAA,cAAA,UAAQuF,IAAK8L,OAAOD,GAASzM,MAAOyM,GACf,iBAAXA,EAAsB,GAAHnK,OAAMmK,EAAM,KAAM1Q,IAAG4Q,EAAAA,GAAAA,IAAcF,IAGpE,IAGN,I,mBE+BA,IAAMvD,GAAO,CACX0D,gBAAiB,0EACjBC,eAAgB,4DAChBC,cAAe,gFACfC,sBAAuB,wICxDzB,UAAe3J,EAAAA,EAAAA,KAZA,SAACC,EAAOnI,GAAK,MAAM,CAChC8R,gBAAgB1J,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAC3C0J,eAAe3J,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,GAC1C2J,cAAc5J,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACzC4J,YAAYC,EAAAA,GAAAA,IAAuB/J,GACpC,IAEe,SAACM,GAAQ,MAAM,CAC7BmE,iBAAkB,SAAClH,EAAKZ,GAAK,OAAK2D,GAASoE,EAAAA,EAAAA,IAAmBnH,EAAKZ,GAAO,EAC1EqN,gBAAiB,kBAAM1J,GAAS2J,EAAAA,GAAAA,MAAoB,EACrD,GAED,EDDe,SAAuBpS,GACpC,IAAQ8R,EAA+F9R,EAA/F8R,eAAgBC,EAA+E/R,EAA/E+R,cAAeC,EAAgEhS,EAAhEgS,aAAcC,EAAkDjS,EAAlDiS,WAAYrF,EAAsC5M,EAAtC4M,iBAAkBuF,EAAoBnS,EAApBmS,gBAEnF,OACEhS,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACkK,EAAAA,EAAI,CACHtI,GAAIuI,EAAAA,GAAAA,OACJ1H,YAAU,EACVR,YAAU,EACVxB,MAAOC,GAAG,mBACVmB,KACE7B,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,GAAG,yBAA0BgB,SAAUhB,GAAGmN,GAAK0D,kBACjEvR,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,kBACLd,SAAU,WACR8F,EAAiBvE,EAAAA,IAA2ByJ,GACxCG,IAAkC,IAAnBH,GAA0BK,GAC/C,EACAtK,QAASiK,KAIb3R,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,GAAG,wBAAyBgB,SAAUhB,GAAGmN,GAAK2D,iBAChExR,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,iBACLd,SAAU,kBAAM8F,EAAiBvE,EAAAA,GAA0B0J,EAAc,EACzElK,QAASkK,KAIb5R,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,GAAG,qCAAsCgB,SAAUhB,GAAGmN,GAAK4D,gBAC7EzR,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,gBACLd,SAAU,kBAAM8F,EAAiBvE,EAAAA,IAAyB2J,EAAa,EACvEnK,QAASmK,KAIb7R,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,GAAG,yBAA0BgB,SAAUhB,GAAGmN,GAAK6D,wBACjE1R,EAAAA,cAACkS,GAAqB,UAOpC,I,kEEnCA,SAvBA,SAA2BrS,GACzB,IAAQsS,EAAwCtS,EAAxCsS,WAAYC,EAA4BvS,EAA5BuS,cAAeC,EAAaxS,EAAbwS,SAEnC,OACErS,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,aACLd,SAAU,SAACrD,GACT8O,EAAc9O,EAAEoH,OAAOhD,QACzB,EACAA,QAASyK,EACTtM,MAAOwM,EAAW,GAAK3R,GAAG,mBAC1BmH,OACEwK,EACI,GACA3R,GAAG,wGAKjB,GCjBeqH,EAAAA,EAAAA,KATA,SAACC,GAAK,MAAM,CACzBmK,YAAYlK,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IACxC,IAEe,SAACI,GAAQ,MAAM,CAC7BgK,UAAW,SAACzF,GAAO,OAAKvE,GAASiK,EAAAA,GAAAA,IAAQ1F,GAAS,EAClDuF,cAAe,SAACzN,GAAK,OAAK2D,GAASkK,EAAAA,EAAAA,IAAgB7N,GAAO,EAC3D,GAED,CAAwC8N,I,mBCaxC,SAlBA,SAAgC5S,GAC9B,IAAQ6S,EAAoD7S,EAApD6S,iBAAkBC,EAAkC9S,EAAlC8S,oBAAqBN,EAAaxS,EAAbwS,SAE/C,OACErS,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,WACL8B,KAAK,mBACLd,SAAU,SAACrD,GACTqP,EAAoBrP,EAAEoH,OAAOhD,QAC/B,EACAA,QAASgL,EACT7M,MAAOwM,EAAW,GAAK3R,GAAG,sEAIlC,GCbeqH,EAAAA,EAAAA,KARA,SAACC,GAAK,MAAM,CACzB0K,kBAAkBzK,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAC9C,IAEe,SAACI,GAAQ,MAAM,CAC7BqK,oBAAqB,SAAChO,GAAK,OAAK2D,GAASsK,EAAAA,EAAAA,IAAyBjO,GAAO,EAC1E,GAED,CAAwCkO,I,kkCCLxC,IAAMC,GAAwB,IAAIC,OAChC,gHAEIC,GAAuB,IAAID,OAC/B,mGAEIE,GAAmB,IAAIF,OAAO,kBAgDpC,SA9CA,SAAwBlT,GACtB,IAAQqT,EAAWrT,EAAXqT,OACwCrQ,EAAAC,IAAZC,EAAAA,EAAAA,UAAS,IAAG,GAAzCoQ,EAAUtQ,EAAA,GAAEuQ,EAAavQ,EAAA,GACgBwQ,EAAAvQ,IAAZC,EAAAA,EAAAA,UAAS,IAAG,GAAzCuQ,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GACiCG,EAAA1Q,IAAfC,EAAAA,EAAAA,WAAS,GAAM,GAA1D0Q,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAe9C,OAbAG,EAAAA,EAAAA,YAAU,WACRD,GACGZ,GAAsBc,KAAKT,IAAeH,GAAqBY,KAAKT,KACnEF,GAAiBW,KAAKN,GAE5B,GAAG,CAACH,EAAYG,EAAYG,EAAmBC,IAS7C1T,EAAAA,cAAC6T,EAAAA,GAAI,CAACC,SAPR,WACEZ,EAAO,CAACC,EAAYG,IACpBF,EAAc,IACdG,EAAc,GAChB,GAIIvT,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,OACLE,MAAOnF,GAAG,QACVoF,YAAa,uBACbnB,MAAOwO,EACPxM,SAAU,SAAArD,GAAC,OAAI8P,EAAc9P,EAAEoH,OAAO/F,MAAM,IAE9C3E,EAAAA,cAAA,QAAMC,UAAU,0BAAyB,KACzCD,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,SACLE,MAAOnF,GAAG,QACVoF,YAAa,QACbnB,MAAO2O,EACP3M,SAAU,SAAArD,GAAC,OAAIiQ,EAAclC,OAAO/N,EAAEoH,OAAO/F,OAAO,KAIxD3E,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAAC0D,EAAAA,QAAM,CAACiC,KAAK,SAAShC,OAAO,UAAUkC,MAAOnF,GAAG,OAAQuF,UAAWwN,KAI5E,E,kkCC+HA,SAzJA,SAA6B5T,GAC3B,IACEkU,EAQElU,EARFkU,aACAC,EAOEnU,EAPFmU,uBACAC,EAMEpU,EANFoU,gBACAC,EAKErU,EALFqU,mBACAC,EAIEtU,EAJFsU,iBACAC,EAGEvU,EAHFuU,oBACAC,EAEExU,EAFFwU,qBACAC,EACEzU,EADFyU,mBAGqDzR,EAAAC,IAAfC,EAAAA,EAAAA,WAAS,GAAM,GAAhDwR,EAAY1R,EAAA,GAAE2R,EAAe3R,EAAA,GAE9B4R,EAAeV,GAAgBA,EAAaW,OAC5CC,EAAqCF,GAAgBA,EAAaG,SAAY,GAC9EC,EAAmBJ,GAAgBA,EAAaK,kBAChDC,EAA6BX,EAK7BY,GAAkBC,EAAAA,EAAAA,UAiCxB,SAASC,IACPV,GAAgB,GAChBN,GACF,CAcA,SAASiB,EAAcC,GACrBjB,EAAiBiB,GACjBpB,GAAuBqB,EAAAA,GAAAA,IAAqBD,GAC9C,CAEA,OAtDAzB,EAAAA,EAAAA,YACE,kBAAM,WACJqB,EAAgBxQ,QAAUqQ,CAC5B,CAAC,GACD,CAACA,KAGHlB,EAAAA,EAAAA,YACE,kBAAM,WACCqB,EAAgBxQ,SACnB0Q,GAEJ,CAAC,GAED,KAGFvB,EAAAA,EAAAA,YAAU,WACJU,GACFG,GAAgB,EAGpB,GAAG,KAEHb,EAAAA,EAAAA,YAAU,WACR,IAAM2B,EAAWC,aAAY,WAC3BtB,GACF,GAhCsB,KAiCtB,OAAO,kBAAMuB,cAAcF,EAAS,CAEtC,GAAG,IAyBDtV,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAAA,wBACEA,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,yBACLC,SAAU6M,EACV1O,MAAOnF,GAAG,uCACViG,SAAU,SAACrD,GACLA,EAAEoH,OAAOhD,SACXwN,GAEJ,IAEFlV,EAAAA,cAACqG,EAAAA,GAAS,CACRV,KAAK,QACL8B,KAAK,wBACLC,QAAS6M,EACT5N,SAAU,SAACrD,GACTkR,EAAgBlR,EAAEoH,OAAOhD,SACrBpE,EAAEoH,OAAOhD,SAAW0M,EAAoB3J,QAC1CuJ,GAAuBqB,EAAAA,GAAAA,IAAqBjB,GAEhD,EACAvO,MAAOnF,GAAG,+BAEZV,EAAAA,cAAA,KAAGC,UAAU,QACXD,EAAAA,cAACyV,GAAAA,EAAW,CACVC,OAAQ,CACNC,WAAY3V,EAAAA,cAAC0D,EAAAA,QAAM,CAACC,OAAO,OAAOiS,KAAK,qCAAqC/P,MAAOnF,GAAG,kBAEzF,0JAMF6T,GACCvU,EAAAA,cAAA,WACG+U,GACCA,EAAapK,KAAI,SAACkL,EAAOC,GACvB,IAAAC,EAAAjT,GAAqB+S,EAAK,GAAnBG,EAAID,EAAA,GAAEE,EAAIF,EAAA,GACXG,EAAYvB,EAAoBwB,MACpC,SAACC,GAAC,OAAKA,EAAEJ,OAASH,EAAM,IAAMxE,OAAO+E,EAAEH,QAAUJ,EAAM,IAAMO,EAAEC,YAAY,IAG7E,OACErW,EAAAA,cAAA,OACEuF,IAAG,GAAA0B,OAAK+O,EAAI,KAAA/O,OAAIgP,GAChBhW,UAAU,oEAEVD,EAAAA,cAAA,UACGgW,EAAK,IAAEC,GAEVjW,EAAAA,cAAA,QAAMC,UAAU,QACDS,GAAZwV,EAAe,YAAe5B,EAAwB,gBAAsB,kBAE/EtU,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,QACPlD,MAAOC,GAAG,+BACVO,KAAMC,EAAAA,OACNoB,QAAS,kBAxEXgU,EAwE0BR,GAvEpCS,EAAkBxB,EAAa9N,UACrBuP,OAAOF,EAAG,QAC1BnB,EAAcoB,GAHhB,IAAkBD,EACVC,CAuE0C,IAItC,IACFvW,EAAAA,cAAA,OAAKC,UAAU,+BACbD,EAAAA,cAACyW,GAAc,CAACvD,OApF5B,SAAewD,GACb,IAAIH,EAAkBxB,EAAa9N,SACnCsP,EAAgBxM,KAAK2M,GACrBvB,EAAcoB,EAChB,OAuFF,GChKexO,EAAAA,EAAAA,KAdA,SAACC,GAAK,MAAM,CACzB+L,cAAc4C,EAAAA,EAAAA,IAAmB3O,GACjCoM,qBAAqBwC,EAAAA,EAAAA,IAAyB5O,GAC9CqM,sBAAsBwC,EAAAA,EAAAA,IAA2B7O,GACjDsM,oBAAoBwC,EAAAA,EAAAA,IAA2B9O,GAChD,IAEe,SAACM,GAAQ,MAAM,CAC7B0L,uBAAwB,SAACrP,GAAK,OAAK2D,GAASsG,EAAAA,EAAAA,IAAmBmI,GAAAA,GAAgCpS,GAAO,EACtGuP,mBAAoB,kBAAM5L,GAAS0O,EAAAA,EAAAA,IAAqBD,GAAAA,IAAgC,EACxF9C,gBAAiB,kBAAM3L,GAAS2O,EAAAA,EAAAA,MAAoB,EACpD9C,iBAAkB,SAACS,GAAO,OAAKtM,GAAS4O,EAAAA,EAAAA,IAA0BtC,GAAS,EAC5E,GAED,CAAwCuC,I,sjCCYxC,UAAepP,EAAAA,EAAAA,KArBA,SAACC,GAAK,MAAM,CACzByG,gBAAgBC,EAAAA,EAAAA,IAAqB1G,GACrCoP,cAAcC,EAAAA,EAAAA,IAAmBrP,GACjCsP,eAAeC,EAAAA,EAAAA,IAAoBvP,GACnCY,iBAAiBC,EAAAA,EAAAA,IAAwBb,GACzCW,iBAAiBR,EAAAA,EAAAA,IAAwBH,GACzCwP,gBAAgBC,EAAAA,GAAAA,IAAqBzP,GACtC,IAEe,SAACM,GAAQ,MAAM,CAC7BqG,iBAAkB,SAACpJ,EAAKZ,GAAK,OAAK2D,GAASsG,EAAAA,EAAAA,IAAmBrJ,EAAKZ,GAAO,EAC1E+S,mBAAoB,SAACnS,GAAG,OAAK+C,GAAS0O,EAAAA,EAAAA,IAAqBzR,GAAK,EAChEoS,WAAY,kBAAMrP,GAASsP,EAAAA,EAAAA,MAAe,EAC1CC,WAAY,kBAAMvP,GAASwP,EAAAA,EAAAA,MAAe,EAC1CC,cAAe,kBAAMzP,GAAS0P,EAAAA,EAAAA,MAAwB,EACtDC,cAAe,kBAAM3P,GAAS4P,EAAAA,EAAAA,MAAwB,EACtDC,mBAAoB,kBAAM7P,GAASY,EAAAA,EAAAA,MAAiB,EACpDkP,sBAAuB,SAACC,GAAU,OAAK/P,GAASgQ,EAAAA,EAAAA,IAAuBD,GAAY,EACnFE,kBAAmB,SAACC,GAAK,OAAKlQ,GAASmQ,EAAAA,EAAAA,IAAoBD,GAAO,EACnE,GAED,ECgBe,SAAuB3Y,GAiBhCA,EAfF4O,eAeE5O,EAdFuX,aAcEvX,EAbFyX,cAaEzX,EAZF+I,gBAJF,IAKED,EAWE9I,EAXF8I,gBAIAgP,GAOE9X,EAVF2X,eAUE3X,EATF8O,iBASE9O,EARF6X,mBAQE7X,EAPF8X,YAIAQ,GAGEtY,EANFgY,WAMEhY,EALFkY,cAKElY,EAJFoY,cAIEpY,EAHFsY,oBAK6D/O,GAF3DvJ,EAFFuY,sBAEEvY,EADF0Y,kBAG6DzV,GAArB9C,EAAAA,UAAe,GAAM,IAAxD0Y,EAAatP,EAAA,GAAEuP,EAAgBvP,EAAA,GAC2BwP,EAAA9V,GAArB9C,EAAAA,UAAe,GAAM,GAA1CqJ,GAAFuP,EAAA,GAAmBA,EAAA,IA+BxC,OAfA5Y,EAAAA,WAAgB,WAChB,GAAG,IAGHA,EAAAA,WAAgB,WACV2I,IACFwP,KACAnO,EAAAA,EAAAA,yBAAwBlF,MAAK,SAACmF,GACX,iBAANA,GACTZ,GAAkB,EAEtB,IAEJ,GAAG,IAGDrJ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACkK,EAAAA,EAAI,CACHtI,GAAIuI,EAAAA,GAAAA,OACJ1H,YAAU,EACVR,YAAU,EACVxB,MAAOC,GAAG,UACVmB,KACE7B,EAAAA,cAAAA,EAAAA,SAAA,KAiBEA,EAAAA,cAACwH,EAAAA,EAAW,CACV/G,MAAOC,GAAG,2BACVgB,SAAUhB,GAAG,iFAEbV,EAAAA,cAAC0D,EAAAA,QAAM,CACLC,OAAO,YACP1C,KAAM4X,EAAAA,MACNhT,MAAuBnF,GAAhBgY,EAAmB,WAAiB,eAC3CpW,QAAS,WACPqW,GAAiB,GACjBhB,GACF,EACA1R,SAAUyS,QAQ1B,I,mBCnGA,IAAMI,GAAgB,mKCnCtB,UAAe/Q,EAAAA,EAAAA,KATA,SAACC,GAAK,MAAM,CACzB+F,kBAAkB9F,EAAAA,EAAAA,IAAoBD,EAAOE,EAAAA,IAC7CoC,cAAcU,EAAAA,EAAAA,IAAmBhD,GAClC,IAEe,SAACM,GAAQ,MAAM,CAC7B4F,oBAAqB,SAACvJ,GAAK,OAAK2D,GAASoE,EAAAA,EAAAA,IAAmBxE,EAAAA,GAA6BvD,GAAO,EACjG,GAED,EDEe,SAAgC9E,GAC7C,IAAQkO,EAAwDlO,EAAxDkO,iBAAkBzD,EAAsCzK,EAAtCyK,aAAc4D,EAAwBrO,EAAxBqO,oBAExC,OACElO,EAAAA,cAACkK,EAAAA,EAAI,CACHjI,YAAU,EACVJ,KACE7B,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,GAAG,YAAagB,SAAUhB,GAAGoY,KAC/C9Y,EAAAA,cAACmM,EAAe,OAGlBnM,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,GAAG,oDACrBV,EAAAA,cAACqG,EAAAA,GAAS,CACRoB,KAAK,qBACL9B,KAAK,WACL+B,QAASqG,EACTpH,SAAU,kBAAMuH,GAAqBH,EAAiB,KAIzDzD,EAAaG,OAAS,GACrBzK,EAAAA,cAACwH,EAAAA,EAAW,CAAC/G,MAAOC,GAAG,YAAagB,SAAUhB,GAAG,4BAC/CV,EAAAA,cAACuO,EAAgB,SAO/B,I,4sDE0DA,SA5EkB,SAAA1K,I,sRAAAC,CAAAiV,EAAAlV,GAAA,I,MAAAE,EAAAC,GAAA+U,GAAA,SAAAA,IAAA,O,4FAAA7U,CAAA,KAAA6U,GAAAhV,EAAAiV,MAAA,KAAAC,UAAA,CAyEf,O,EAzEeF,G,EAAA,EAAAxT,IAAA,oBAAAZ,MAChB,YAEEuU,EAD0BxT,KAAK7F,MAAvBqZ,gBAEV,GAAC,CAAA3T,IAAA,uBAAAZ,MAED,YAEEwU,EADyBzT,KAAK7F,MAAtBsZ,eAEV,GAAC,CAAA5T,IAAA,SAAAZ,MAED,WACE,IAAAc,EAAkEC,KAAK7F,MAA/D4O,EAAchJ,EAAdgJ,eAAgB9F,EAAelD,EAAfkD,gBAAiByQ,EAAU3T,EAAV2T,WAAYlO,EAAQzF,EAARyF,SAGrD,OAF0BuD,GAAkB4K,OAAOC,KAAK7K,GAAgBhE,OAEpE9B,IAAoByQ,EAEpBpZ,EAAAA,cAACuZ,EAAAA,EAAI,CACHC,UAAQ,EACRC,cAAY,EACZC,kBAAgB,EAChBC,QAAS,CAAElZ,MAAOC,GAAG,YAAakZ,UAAWlZ,GAAG,SAChDT,UAAU,cAEVD,EAAAA,cAAA,OAAKC,UAAU,eACbD,EAAAA,cAACgM,EAAAA,EAAO,CAAC6N,KAAMnZ,GAAG,mEAOxBV,EAAAA,cAACuZ,EAAAA,EAAI,CACHC,UAAQ,EACRC,cAAY,EACZC,kBAAgB,EAChBC,QAAS,CAAElZ,MAAOC,GAAG,YAAakZ,UAAWlZ,GAAG,SAChDT,UAAU,aACVsF,IAAK2F,IAEHvC,GACA3I,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC8Z,GAAsB,MACvB9Z,EAAAA,cAAA,OAAKC,UAAU,eACbD,EAAAA,cAAC+Z,GAAAA,EAAI,CACHpU,KAAK,QACLlF,MAAOC,GAAG,4BACVgB,SAAUhB,GAAG,0CACboB,QACE9B,EAAAA,cAAA,OAAKC,UAAU,oBACbD,EAAAA,cAAC0D,EAAAA,QAAM,CAACC,OAAO,UAAU1C,KAAMC,EAAAA,QAAe2E,MAAOnF,GAAG,WAAYsG,SAAQ,MAAAC,OAAQC,EAAAA,aAa9FlH,EAAAA,cAAA,OAAKC,UAAWU,IAAW,aAAc,CAAE,kBAA6BgI,KACtE3I,EAAAA,cAACga,EAAiB,MAClBha,EAAAA,cAACia,EAAc,MACfja,EAAAA,cAACka,GAAc,MACfla,EAAAA,cAACma,GAAa,MACdna,EAAAA,cAACoa,GAAa,OAKxB,M,gFAACrB,CAAA,CAzEe,CAAS/Y,EAAAA,eCV3B,UAAe+H,EAAAA,EAAAA,KAZA,SAACC,GAAK,MAAM,CACzByG,gBAAgBC,EAAAA,EAAAA,IAAqB1G,GACrCW,iBAAiBR,EAAAA,EAAAA,IAAwBH,GACzCoR,YAAYiB,EAAAA,EAAAA,IAAiBrS,GAC7BkD,UAAUe,EAAAA,EAAAA,IAAejE,GAC1B,IAEe,SAACM,GAAQ,MAAM,CAC7B4Q,cAAe,kBAAM5Q,GAASgS,EAAAA,EAAAA,MAAsB,EACpDnB,aAAc,kBAAM7Q,GAASiS,EAAAA,EAAAA,MAAqB,EACnD,GAED,CAAwCxB,G","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/component/common/file-selector.jsx","webpack://odysee.com/../ui/component/settingsRow/index.js","webpack://odysee.com/../ui/component/settingsRow/view.jsx","webpack://odysee.com/../ui/constants/hashes.js","webpack://odysee.com/../ui/component/syncToggle/view.jsx","webpack://odysee.com/../ui/component/syncToggle/index.js","webpack://odysee.com/../ui/component/settingAccount/index.js","webpack://odysee.com/../ui/component/settingAccount/view.jsx","webpack://odysee.com/../ui/component/homepageSelector/view.jsx","webpack://odysee.com/../ui/component/homepageSelector/index.js","webpack://odysee.com/../ui/component/settingLanguage/view.jsx","webpack://odysee.com/../ui/component/settingLanguage/index.js","webpack://odysee.com/../ui/component/themeSelector/index.js","webpack://odysee.com/../ui/component/themeSelector/view.jsx","webpack://odysee.com/../ui/component/settingAppearance/view.jsx","webpack://odysee.com/../ui/component/settingAppearance/index.js","webpack://odysee.com/../ui/component/maxPurchasePrice/index.js","webpack://odysee.com/../ui/component/maxPurchasePrice/view.jsx","webpack://odysee.com/../ui/component/settingContent/view.jsx","webpack://odysee.com/../ui/component/settingContent/index.js","webpack://odysee.com/../ui/component/settingDefaultQuality/view.jsx","webpack://odysee.com/../ui/component/settingDefaultQuality/index.js","webpack://odysee.com/../ui/component/settingPlayer/view.jsx","webpack://odysee.com/../ui/component/settingPlayer/index.js","webpack://odysee.com/../ui/component/settingAutoLaunch/view.jsx","webpack://odysee.com/../ui/component/settingAutoLaunch/index.js","webpack://odysee.com/../ui/component/settingClosingBehavior/view.jsx","webpack://odysee.com/../ui/component/settingClosingBehavior/index.js","webpack://odysee.com/../ui/component/settingWalletServer/internal/inputRow.jsx","webpack://odysee.com/../ui/component/settingWalletServer/view.jsx","webpack://odysee.com/../ui/component/settingWalletServer/index.js","webpack://odysee.com/../ui/component/settingSystem/index.js","webpack://odysee.com/../ui/component/settingSystem/view.jsx","webpack://odysee.com/../ui/component/settingUnauthenticated/view.jsx","webpack://odysee.com/../ui/component/settingUnauthenticated/index.js","webpack://odysee.com/../ui/page/settings/view.jsx","webpack://odysee.com/../ui/page/settings/index.js"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport * as React from 'react';\nimport { remote } from 'electron';\nimport Button from 'component/button';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  type: string,\n  currentPath?: ?string,\n  onFileChosen: (WebFile) => void,\n  label?: string,\n  placeholder?: string,\n  accept?: string,\n  error?: string,\n  disabled?: boolean,\n  autoFocus?: boolean,\n};\n\nclass FileSelector extends React.PureComponent<Props> {\n  static defaultProps = {\n    autoFocus: false,\n    type: 'file',\n  };\n\n  fileInput: React.ElementRef<any>;\n\n  constructor() {\n    super();\n    this.fileInput = React.createRef();\n    this.handleFileInputSelection = this.handleFileInputSelection.bind(this);\n    this.handleDirectoryInputSelection = this.handleDirectoryInputSelection.bind(this);\n    this.fileInputButton = this.fileInputButton.bind(this);\n  }\n\n  handleFileInputSelection = () => {\n    const { files } = this.fileInput.current;\n    if (!files) {\n      return;\n    }\n\n    const file = files[0];\n\n    if (this.props.onFileChosen) {\n      this.props.onFileChosen(file);\n    }\n    this.fileInput.current.value = null; // clear the file input\n  };\n\n  handleDirectoryInputSelection = () => {\n    remote.dialog.showOpenDialog({ properties: ['openDirectory'] }).then((result) => {\n      const path = result && result.filePaths[0];\n      if (path) {\n        // $FlowFixMe\n        this.props.onFileChosen({ path });\n      }\n    });\n  };\n\n  fileInputButton = () => {\n    this.fileInput.current.click();\n  };\n\n  input: ?HTMLInputElement;\n\n  render() {\n    const { type, currentPath, label, placeholder, accept, error, disabled, autoFocus = false } = this.props;\n    const placeHolder = currentPath || placeholder;\n\n    return (\n      <React.Fragment>\n        <FormField\n          label={label}\n          webkitdirectory=\"true\"\n          className=\"form-field--copyable\"\n          error={error}\n          disabled={disabled}\n          type=\"text\"\n          readOnly=\"readonly\"\n          value={placeHolder || __('Choose a file')}\n          inputButton={\n            <Button\n              autoFocus={autoFocus}\n              button=\"primary\"\n              disabled={disabled}\n              onClick={type === 'openDirectory' ? this.handleDirectoryInputSelection : this.fileInputButton}\n              label={__('Browse')}\n            />\n          }\n        />\n        <input\n          type={'file'}\n          style={{ display: 'none' }}\n          accept={accept}\n          ref={this.fileInput}\n          onChange={() => (type === 'openDirectory' ? () => {} : this.handleFileInputSelection())}\n          webkitdirectory={type === 'openDirectory' ? 'True' : null}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default FileSelector;\n","import SettingsRow from './view';\nexport default SettingsRow;\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport * as PAGES from 'constants/pages';\nimport classnames from 'classnames';\n\ntype Props = {\n  title: string,\n  subtitle?: string,\n  multirow?: boolean, // Displays the Value widget(s) below the Label instead of on the right.\n  useVerticalSeparator?: boolean, // Show a separator line between Label and Value. Useful when there are multiple Values.\n  disabled?: boolean,\n  highlighted?: boolean,\n  membersOnly?: boolean,\n  children?: React$Node,\n};\n\nexport default function SettingsRow(props: Props) {\n  const { title, subtitle, multirow, useVerticalSeparator, disabled, highlighted, membersOnly, children } = props;\n  return (\n    <div\n      className={classnames('card__main-actions settings-row', {\n        'section__actions--between': !multirow,\n        'opacity-40': disabled,\n        'card--highlightedActive': highlighted,\n      })}\n    >\n      <div className=\"settings-row__title\">\n        <span>\n          {title}\n          {membersOnly && (\n            <Button className=\"settings-row__members-only\" navigate={`/$/${PAGES.ODYSEE_MEMBERSHIP}`}>\n              {'PREMIUM'}\n            </Button>\n          )}\n        </span>\n        {subtitle && <p className=\"settings-row__subtitle\">{subtitle}</p>}\n      </div>\n      <div\n        className={classnames('settings-row__value', {\n          'settings-row__value--multirow': multirow,\n          'settings-row__vertical-separator': useVerticalSeparator,\n          'non-clickable': disabled,\n        })}\n      >\n        {children && children}\n      </div>\n    </div>\n  );\n}\n","export const SEARCH_IN_LANGUAGE = 'searchInLanguage';\n","// @flow\nimport * as MODALS from 'constants/modal_types';\nimport React from 'react';\nimport Button from 'component/button';\nimport SettingsRow from 'component/settingsRow';\nimport { withRouter } from 'react-router';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  setSyncEnabled: (boolean) => void,\n  syncEnabled: boolean,\n  verifiedEmail: ?string,\n  history: { push: (string) => void },\n  location: UrlLocation,\n  getSyncError: ?string,\n  disabled: boolean,\n  openModal: (string, any) => void,\n};\n\nfunction SyncToggle(props: Props) {\n  const { verifiedEmail, openModal, syncEnabled, disabled } = props;\n\n  return (\n    <SettingsRow\n      title={__('Sync')}\n      subtitle={disabled || !verifiedEmail ? '' : __('Sync your balance and preferences across devices.')}\n    >\n      <FormField\n        type=\"checkbox\"\n        name=\"sync_toggle\"\n        label={disabled || !verifiedEmail ? __('Sync your balance and preferences across devices.') : undefined}\n        checked={syncEnabled && verifiedEmail}\n        onChange={() => openModal(MODALS.SYNC_ENABLE, { mode: syncEnabled ? 'disable' : 'enable' })}\n        disabled={disabled || !verifiedEmail}\n        helper={\n          disabled\n            ? __(\"To enable Sync, close LBRY completely and check 'Remember Password' during wallet unlock.\")\n            : null\n        }\n      />\n      {!verifiedEmail && (\n        <div>\n          <p className=\"help\">{__('An email address is required to sync your account.')}</p>\n          <Button requiresAuth button=\"primary\" label={__('Add Email')} />\n        </div>\n      )}\n    </SettingsRow>\n  );\n}\n\nexport default withRouter(SyncToggle);\n","import * as SETTINGS from 'constants/settings';\nimport { connect } from 'react-redux';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\nimport { selectGetSyncErrorMessage } from 'redux/selectors/sync';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport { doSetWalletSyncPreference } from 'redux/actions/settings';\nimport { doOpenModal } from 'redux/actions/app';\nimport SyncToggle from './view';\n\nconst select = (state) => ({\n  syncEnabled: selectClientSetting(state, SETTINGS.ENABLE_SYNC),\n  verifiedEmail: selectUserVerifiedEmail(state),\n  getSyncError: selectGetSyncErrorMessage(state),\n});\n\nconst perform = (dispatch) => ({\n  setSyncEnabled: (value) => dispatch(doSetWalletSyncPreference(value)),\n  openModal: (id, props) => dispatch(doOpenModal(id, props)),\n});\n\nexport default connect(select, perform)(SyncToggle);\n","import { connect } from 'react-redux';\nimport { selectHasChannels } from 'redux/selectors/claims';\nimport { selectWalletIsEncrypted } from 'redux/selectors/wallet';\nimport { doWalletStatus } from 'redux/actions/wallet';\nimport { selectUser, selectUserVerifiedEmail } from 'redux/selectors/user';\n\nimport SettingAccount from './view';\n\nconst select = (state) => ({\n  isAuthenticated: selectUserVerifiedEmail(state),\n  walletEncrypted: selectWalletIsEncrypted(state),\n  user: selectUser(state),\n  hasChannels: selectHasChannels(state),\n});\n\nconst perform = (dispatch) => ({\n  doWalletStatus: () => dispatch(doWalletStatus()),\n});\n\nexport default connect(select, perform)(SettingAccount);\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport { SETTINGS_GRP } from 'constants/settings';\nimport React from 'react';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport SettingsRow from 'component/settingsRow';\nimport SyncToggle from 'component/syncToggle';\nimport { getPasswordFromCookie } from 'util/saved-passwords';\nimport { getStripeEnvironment } from 'util/stripe';\n\ntype Props = {\n  // --- redux ---\n  isAuthenticated: boolean,\n  walletEncrypted: boolean,\n  user: User,\n  hasChannels: boolean,\n  doWalletStatus: () => void,\n};\n\nexport default function SettingAccount(props: Props) {\n  const { isAuthenticated, walletEncrypted, user, hasChannels, doWalletStatus } = props;\n  const [storedPassword, setStoredPassword] = React.useState(false);\n\n  // Determine if password is stored.\n  React.useEffect(() => {\n    if (isAuthenticated || !IS_WEB) {\n      doWalletStatus();\n      getPasswordFromCookie().then((p) => {\n        if (typeof p === 'string') {\n          setStoredPassword(true);\n        }\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  function openExternal(uri) {\n    if (!window.odysee.build.googlePlay) {\n      window.odysee.functions.history.push(uri);\n    } else {\n      window.odysee.functions.initBrowser(uri, 'external');\n    }\n  }\n\n  return (\n    <>\n      <Card\n        id={SETTINGS_GRP.ACCOUNT}\n        title={__('Account')}\n        background\n        isBodyList\n        body={\n          <>\n            {isAuthenticated && (\n              <SettingsRow title={__('Password')}>\n                <Button\n                  button=\"inverse\"\n                  label={__('Manage')}\n                  icon={ICONS.ARROW_RIGHT}\n                  navigate={`/$/${PAGES.SETTINGS_UPDATE_PWD}`}\n                />\n              </SettingsRow>\n            )}\n\n            {}\n\n            {}\n            {!window.odysee.build.googlePlay && user && getStripeEnvironment() && (\n              <SettingsRow\n                title={__('Bank Accounts')}\n                subtitle={__('Connect a bank account to receive tips and compensation in your local currency.')}\n              >\n                <Button\n                  button=\"inverse\"\n                  label={__('Manage')}\n                  icon={ICONS.ARROW_RIGHT}\n                  onClick={() => openExternal(`/$/${PAGES.SETTINGS_STRIPE_ACCOUNT}`)}\n                  // navigate={`/$/${PAGES.SETTINGS_STRIPE_ACCOUNT}`}\n                />\n              </SettingsRow>\n            )}\n            {}\n\n            {}\n            {!window.odysee.build.googlePlay && isAuthenticated && getStripeEnvironment() && (\n              <SettingsRow\n                title={__('Payment Methods')}\n                subtitle={__('Add a credit card to tip creators in their local currency.')}\n              >\n                <Button\n                  button=\"inverse\"\n                  label={__('Manage')}\n                  icon={ICONS.ARROW_RIGHT}\n                  onClick={() => openExternal(`/$/${PAGES.SETTINGS_STRIPE_CARD}`)}\n                  // navigate={`/$/${PAGES.SETTINGS_STRIPE_CARD}`}\n                />\n              </SettingsRow>\n            )}\n            {}\n\n            {hasChannels && (\n              <SettingsRow title={__('Comments')} subtitle={__('View your past comments.')}>\n                <Button\n                  button=\"inverse\"\n                  label={__('Manage')}\n                  icon={ICONS.ARROW_RIGHT}\n                  navigate={`/$/${PAGES.SETTINGS_OWN_COMMENTS}`}\n                />\n              </SettingsRow>\n            )}\n\n            <SettingsRow title={__('Purchases')} subtitle={__('View your purchased content.')}>\n              <Button button=\"inverse\" label={__('Manage')} icon={ICONS.ARROW_RIGHT} navigate={`/$/${PAGES.LIBRARY}`} />\n            </SettingsRow>\n          </>\n        }\n      />\n    </>\n  );\n}\n","// @flow\nimport React from 'react';\nimport { getLanguageName } from 'constants/languages';\nimport { FormField } from 'component/common/form';\nimport { getDefaultLanguage } from 'util/default-languages';\n\ntype Props = {\n  homepage: string,\n  homepageKeys: Array<string>,\n  setHomepage: (string) => void,\n};\n\nfunction SelectHomepage(props: Props) {\n  const { homepage, homepageKeys, setHomepage } = props;\n\n  // Don't know why bc3c56b8 resets the code to null when in English.\n  const value = homepage === null ? getDefaultLanguage() : homepage;\n\n  function handleSetHomepage(e) {\n    const { value } = e.target;\n    setHomepage(value);\n  }\n\n  if (homepageKeys.length <= 1) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <FormField name=\"homepage_select\" type=\"select\" onChange={handleSetHomepage} value={value}>\n        {homepageKeys.map((hp) => (\n          <option key={'hp' + hp} value={hp}>\n            {getLanguageName(hp)}\n          </option>\n        ))}\n      </FormField>\n    </React.Fragment>\n  );\n}\n\nexport default SelectHomepage;\n","import { connect } from 'react-redux';\nimport SelectHomepage from './view';\n\nimport * as SETTINGS from 'constants/settings';\nimport { doSetHomepage } from 'redux/actions/settings';\nimport { selectClientSetting, selectHomepageKeys } from 'redux/selectors/settings';\n\nconst select = (state) => ({\n  homepage: selectClientSetting(state, SETTINGS.HOMEPAGE),\n  homepageKeys: selectHomepageKeys(state),\n});\n\nconst perform = {\n  setHomepage: doSetHomepage,\n};\n\nexport default connect(select, perform)(SelectHomepage);\n","// @flow\n\nimport React, { useState } from 'react';\nimport { FormField } from 'component/common/form';\nimport Spinner from 'component/spinner';\nimport SUPPORTED_LANGUAGES from 'constants/supported_languages';\nimport LANGUAGES from 'constants/languages';\nimport { getDefaultLanguage, sortLanguageMap } from 'util/default-languages';\n\ntype Props = {\n  language: string,\n  setLanguage: (string) => Promise<any>,\n};\n\nfunction SettingLanguage(props: Props) {\n  const { language, setLanguage } = props;\n  const [changingLanguage, setChangingLanguage] = useState(false);\n\n  function onLanguageChange(e) {\n    const { value } = e.target;\n    setChangingLanguage(true);\n    setLanguage(value).finally(() => setChangingLanguage(false));\n    if (document && document.documentElement) {\n      if (LANGUAGES[value].length >= 3) {\n        document.documentElement.dir = LANGUAGES[value][2];\n      } else {\n        document.documentElement.dir = 'ltr';\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {!changingLanguage && (\n        <FormField\n          name=\"language_select\"\n          type=\"select\"\n          onChange={onLanguageChange}\n          value={language || getDefaultLanguage()}\n        >\n          {sortLanguageMap(SUPPORTED_LANGUAGES).map(([langKey, langName]) => (\n            <option key={langKey} value={langKey}>\n              {langName}\n            </option>\n          ))}\n        </FormField>\n      )}\n\n      {changingLanguage && <Spinner type=\"small\" />}\n    </React.Fragment>\n  );\n}\n\nexport default SettingLanguage;\n","import { connect } from 'react-redux';\nimport { doSetLanguage } from 'redux/actions/settings';\nimport { selectLanguage } from 'redux/selectors/settings';\nimport SettingLanguage from './view';\n\nconst select = (state) => ({\n  language: selectLanguage(state),\n});\n\nconst perform = (dispatch) => ({\n  setLanguage: (value) => dispatch(doSetLanguage(value)),\n});\n\nexport default connect(select, perform)(SettingLanguage);\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doSetClientSetting, doSetDarkTime } from 'redux/actions/settings';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport ThemeSelector from './view';\n\nconst select = (state) => ({\n  currentTheme: selectClientSetting(state, SETTINGS.THEME),\n  themes: selectClientSetting(state, SETTINGS.THEMES),\n  automaticDarkModeEnabled: selectClientSetting(state, SETTINGS.AUTOMATIC_DARK_MODE_ENABLED),\n  darkModeTimes: selectClientSetting(state, SETTINGS.DARK_MODE_TIMES),\n  clock24h: selectClientSetting(state, SETTINGS.CLOCK_24H),\n});\n\nconst perform = (dispatch) => ({\n  setClientSetting: (key, value) => dispatch(doSetClientSetting(key, value)),\n  setDarkTime: (time, options) => dispatch(doSetDarkTime(time, options)),\n});\n\nexport default connect(select, perform)(ThemeSelector);\n","// @flow\nimport React from 'react';\nimport * as SETTINGS from 'constants/settings';\nimport { FormField } from 'component/common/form';\n\ntype SetDaemonSettingArg = boolean | string | number;\n\ntype DarkModeTimes = {\n  from: { hour: string, min: string, formattedTime: string },\n  to: { hour: string, min: string, formattedTime: string },\n};\n\ntype OptionTimes = {\n  fromTo: string,\n  time: string,\n};\n\ntype Props = {\n  currentTheme: string,\n  themes: Array<string>,\n  automaticDarkModeEnabled: boolean,\n  darkModeTimes: DarkModeTimes,\n  clock24h: boolean,\n  setClientSetting: (string, SetDaemonSettingArg) => void,\n  setDarkTime: (string, {}) => void,\n};\n\nexport default function ThemeSelector(props: Props) {\n  const { currentTheme, themes, automaticDarkModeEnabled, darkModeTimes, clock24h, setClientSetting, setDarkTime } =\n    props;\n\n  const startHours = ['18', '19', '20', '21'];\n  const endHours = ['5', '6', '7', '8'];\n\n  function onThemeChange(event: SyntheticInputEvent<*>) {\n    const { value } = event.target;\n    if (value === 'dark') {\n      onAutomaticDarkModeChange(false);\n    }\n    setClientSetting(SETTINGS.THEME, value);\n  }\n\n  function onAutomaticDarkModeChange(value: boolean) {\n    setClientSetting(SETTINGS.AUTOMATIC_DARK_MODE_ENABLED, value);\n  }\n\n  function onChangeTime(event: SyntheticInputEvent<*>, options: OptionTimes) {\n    setDarkTime(event.target.value, options);\n  }\n\n  function formatHour(time: string, clock24h: boolean) {\n    if (clock24h) {\n      return `${time}:00`;\n    }\n\n    const now = new Date(0, 0, 0, Number(time));\n    return now.toLocaleTimeString('en-US', { hour12: true, hour: '2-digit' });\n  }\n\n  return (\n    <>\n      <fieldset-section>\n        <FormField\n          name=\"theme_select\"\n          type=\"select\"\n          onChange={onThemeChange}\n          value={currentTheme}\n          disabled={automaticDarkModeEnabled}\n        >\n          {themes.map((theme) => (\n            <option key={theme} value={theme}>\n              {theme === 'light' ? __('Light') : __('Dark')}\n            </option>\n          ))}\n        </FormField>\n      </fieldset-section>\n\n      <fieldset-section class=\"theme-checkbox\">\n        <FormField\n          type=\"checkbox\"\n          name=\"automatic_dark_mode\"\n          onChange={() => onAutomaticDarkModeChange(!automaticDarkModeEnabled)}\n          checked={automaticDarkModeEnabled}\n          label={__('Automatic dark mode')}\n        />\n\n        {automaticDarkModeEnabled && (\n          <fieldset-group class=\"fieldset-group--smushed\">\n            <FormField\n              type=\"select\"\n              name=\"automatic_dark_mode_range_start\"\n              onChange={(value) => onChangeTime(value, { fromTo: 'from', time: 'hour' })}\n              value={darkModeTimes.from.hour}\n              label={__('From --[initial time]--')}\n            >\n              {startHours.map((time) => (\n                <option key={time} value={time}>\n                  {formatHour(time, clock24h)}\n                </option>\n              ))}\n            </FormField>\n\n            <FormField\n              type=\"select\"\n              name=\"automatic_dark_mode_range_end\"\n              label={__('To --[final time]--')}\n              onChange={(value) => onChangeTime(value, { fromTo: 'to', time: 'hour' })}\n              value={darkModeTimes.to.hour}\n            >\n              {endHours.map((time) => (\n                <option key={time} value={time}>\n                  {formatHour(time, clock24h)}\n                </option>\n              ))}\n            </FormField>\n          </fieldset-group>\n        )}\n      </fieldset-section>\n    </>\n  );\n}\n","// @flow\nimport { useHistory } from 'react-router-dom';\nimport { SEARCH_IN_LANGUAGE } from 'constants/hashes';\nimport { SETTINGS_GRP } from 'constants/settings';\nimport React from 'react';\nimport * as SETTINGS from 'constants/settings';\nimport Card from 'component/common/card';\nimport { FormField } from 'component/common/form';\nimport HomepageSelector from 'component/homepageSelector';\nimport SettingLanguage from 'component/settingLanguage';\nimport SettingsRow from 'component/settingsRow';\nimport ThemeSelector from 'component/themeSelector';\n\ntype Props = {\n  clock24h: boolean,\n  searchInLanguage: boolean,\n  homepageKeys: Array<string>,\n  isAuthenticated: boolean,\n  hideBalance: boolean,\n  hideTitleNotificationCount: boolean,\n  setClientSetting: (string, boolean | string | number) => void,\n  setSearchInLanguage: (boolean) => void,\n};\n\nexport default function SettingAppearance(props: Props) {\n  const {\n    clock24h,\n    searchInLanguage,\n    homepageKeys,\n    isAuthenticated,\n    hideBalance,\n    hideTitleNotificationCount,\n    setClientSetting,\n    setSearchInLanguage,\n  } = props;\n  const {\n    location: { hash },\n  } = useHistory();\n  const highlightSearchInLanguage = hash === `#${SEARCH_IN_LANGUAGE}`;\n\n  return (\n    <>\n      <Card\n        id={SETTINGS_GRP.APPEARANCE}\n        title={__('Appearance')}\n        background\n        isBodyList\n        body={\n          <>\n            {homepageKeys.length > 1 && (\n              <SettingsRow title={__('Homepage')} subtitle={__('Tailor your experience.')}>\n                <HomepageSelector />\n              </SettingsRow>\n            )}\n\n            <SettingsRow title={__('Language')} subtitle={__(HELP.LANGUAGE)}>\n              <SettingLanguage />\n            </SettingsRow>\n\n            <SettingsRow\n              title={__('Search only in the selected language by default')}\n              highlighted={highlightSearchInLanguage}\n            >\n              <FormField\n                name=\"search-in-language\"\n                type=\"checkbox\"\n                checked={searchInLanguage}\n                onChange={() => setSearchInLanguage(!searchInLanguage)}\n              />\n            </SettingsRow>\n\n            <SettingsRow title={__('Theme')}>\n              <ThemeSelector />\n            </SettingsRow>\n\n            <SettingsRow title={__('24-hour clock')}>\n              <FormField\n                type=\"checkbox\"\n                name=\"clock24h\"\n                onChange={() => setClientSetting(SETTINGS.CLOCK_24H, !clock24h)}\n                checked={clock24h}\n              />\n            </SettingsRow>\n\n            {(isAuthenticated || !IS_WEB) && (\n              <SettingsRow title={__('Hide wallet balance in header')}>\n                <FormField\n                  type=\"checkbox\"\n                  name=\"hide_balance\"\n                  onChange={() => setClientSetting(SETTINGS.HIDE_BALANCE, !hideBalance)}\n                  checked={hideBalance}\n                />\n              </SettingsRow>\n            )}\n\n            <SettingsRow title={__('Hide notification count in title bar')}>\n              <FormField\n                type=\"checkbox\"\n                name=\"hide_title_notification_count\"\n                onChange={() => setClientSetting(SETTINGS.HIDE_TITLE_NOTIFICATION_COUNT, !hideTitleNotificationCount)}\n                checked={hideTitleNotificationCount}\n              />\n            </SettingsRow>\n          </>\n        }\n      />\n    </>\n  );\n}\n\n// prettier-ignore\nconst HELP = {\n  LANGUAGE: 'Multi-language support is community-driven and may be incomplete for some languages. Switching your language may have unintended consequences, like glossolalia.',\n};\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doSetClientSetting } from 'redux/actions/settings';\nimport { selectClientSetting, selectHomepageKeys } from 'redux/selectors/settings';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\nimport SettingAppearance from './view';\n\nconst select = (state) => ({\n  clock24h: selectClientSetting(state, SETTINGS.CLOCK_24H),\n  searchInLanguage: selectClientSetting(state, SETTINGS.SEARCH_IN_LANGUAGE),\n  homepageKeys: selectHomepageKeys(state),\n  isAuthenticated: selectUserVerifiedEmail(state),\n  hideBalance: selectClientSetting(state, SETTINGS.HIDE_BALANCE),\n  hideTitleNotificationCount: selectClientSetting(state, SETTINGS.HIDE_TITLE_NOTIFICATION_COUNT),\n});\n\nconst perform = (dispatch) => ({\n  setClientSetting: (key, value) => dispatch(doSetClientSetting(key, value)),\n  setSearchInLanguage: (value) => dispatch(doSetClientSetting(SETTINGS.SEARCH_IN_LANGUAGE, value)),\n});\n\nexport default connect(select, perform)(SettingAppearance);\n","import { connect } from 'react-redux';\nimport { doSetDaemonSetting } from 'redux/actions/settings';\nimport { selectDaemonSettings } from 'redux/selectors/settings';\nimport MaxPurchasePrice from './view';\n\nconst select = (state) => ({\n  daemonSettings: selectDaemonSettings(state),\n});\nconst perform = (dispatch) => ({\n  setDaemonSetting: (key, value) => dispatch(doSetDaemonSetting(key, value)),\n});\n\nexport default connect(select, perform)(MaxPurchasePrice);\n","// @flow\nimport React from 'react';\nimport { FormField, FormFieldPrice } from 'component/common/form';\n\ntype Price = {\n  currency: string,\n  amount: number,\n};\n\ntype DaemonSettings = {\n  download_dir: string,\n  share_usage_data: boolean,\n  max_key_fee?: Price,\n  max_connections_per_download?: number,\n  save_files: boolean,\n  save_blobs: boolean,\n  ffmpeg_path: string,\n};\n\ntype SetDaemonSettingArg = boolean | string | number | Price;\n\ntype Props = {\n  daemonSettings: DaemonSettings,\n  setDaemonSetting: (string, ?SetDaemonSettingArg) => void,\n};\n\nexport default function MaxPurchasePrice(props: Props) {\n  const { daemonSettings, setDaemonSetting } = props;\n\n  const defaultMaxKeyFee = { currency: 'USD', amount: 50 };\n  const disableMaxKeyFee = !(daemonSettings && daemonSettings.max_key_fee);\n\n  function onKeyFeeDisableChange(isDisabled: boolean) {\n    if (isDisabled) {\n      setDaemonSetting('max_key_fee');\n    }\n  }\n\n  function onKeyFeeChange(newValue: Price) {\n    setDaemonSetting('max_key_fee', newValue);\n  }\n\n  return (\n    <>\n      <FormField\n        type=\"radio\"\n        name=\"no_max_purchase_no_limit\"\n        checked={disableMaxKeyFee}\n        label={__('No Limit')}\n        onChange={() => onKeyFeeDisableChange(true)}\n      />\n      <FormField\n        type=\"radio\"\n        name=\"max_purchase_limit\"\n        checked={!disableMaxKeyFee}\n        onChange={() => {\n          onKeyFeeDisableChange(false);\n          onKeyFeeChange(defaultMaxKeyFee);\n        }}\n        label={__('Choose limit')}\n      />\n\n      <FormFieldPrice\n        name=\"max_key_fee\"\n        min={0}\n        onChange={onKeyFeeChange}\n        price={daemonSettings.max_key_fee ? daemonSettings.max_key_fee : defaultMaxKeyFee}\n        disabled={disableMaxKeyFee}\n      />\n    </>\n  );\n}\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport * as SETTINGS from 'constants/settings';\nimport { Lbryio } from 'lbryinc';\nimport { SIMPLE_SITE } from 'config';\nimport * as MODALS from 'constants/modal_types';\nimport { SETTINGS_GRP } from 'constants/settings';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport { FormField, FormFieldPrice } from 'component/common/form';\nimport MaxPurchasePrice from 'component/maxPurchasePrice';\nimport SettingsRow from 'component/settingsRow';\n\ntype Price = {\n  currency: string,\n  amount: number,\n};\n\ntype Props = {\n  // --- select ---\n  isAuthenticated: boolean,\n  hideMembersOnlyContent: boolean,\n  hideReposts: ?boolean,\n  showNsfw: boolean,\n  instantPurchaseEnabled: boolean,\n  instantPurchaseMax: Price,\n  enablePublishPreview: boolean,\n  // --- perform ---\n  setClientSetting: (string, boolean | string | number) => void,\n  openModal: (string) => void,\n};\n\nexport default function SettingContent(props: Props) {\n  const {\n    isAuthenticated,\n    hideMembersOnlyContent,\n    hideReposts,\n    showNsfw,\n    instantPurchaseEnabled,\n    instantPurchaseMax,\n    enablePublishPreview,\n    setClientSetting,\n    openModal,\n  } = props;\n\n  return (\n    <>\n      <Card\n        id={SETTINGS_GRP.CONTENT}\n        background\n        isBodyList\n        title={__('Content settings')}\n        body={\n          <>\n            <SettingsRow title={__('Hide members-only content')} subtitle={__(HELP.HIDE_MEMBERS_ONLY_CONTENT)}>\n              <FormField\n                type=\"checkbox\"\n                name=\"hide_members_only_content\"\n                checked={hideMembersOnlyContent}\n                onChange={(e) => setClientSetting(SETTINGS.HIDE_MEMBERS_ONLY_CONTENT, !hideMembersOnlyContent)}\n              />\n            </SettingsRow>\n\n            <SettingsRow title={__('Hide reposts')} subtitle={__(HELP.HIDE_REPOSTS)}>\n              <FormField\n                type=\"checkbox\"\n                name=\"hide_reposts\"\n                checked={hideReposts}\n                onChange={(e) => {\n                  if (isAuthenticated) {\n                    let param = e.target.checked ? { add: 'noreposts' } : { remove: 'noreposts' };\n                    Lbryio.call('user_tag', 'edit', param);\n                  }\n                  setClientSetting(SETTINGS.HIDE_REPOSTS, !hideReposts);\n                }}\n              />\n            </SettingsRow>\n\n            {!SIMPLE_SITE && (\n              <>\n                <SettingsRow title={__('Show mature content')} subtitle={__(HELP.SHOW_MATURE)}>\n                  <FormField\n                    type=\"checkbox\"\n                    name=\"show_nsfw\"\n                    checked={showNsfw}\n                    onChange={() =>\n                      !IS_WEB || showNsfw\n                        ? setClientSetting(SETTINGS.SHOW_MATURE, !showNsfw)\n                        : openModal(MODALS.CONFIRM_AGE)\n                    }\n                  />\n                </SettingsRow>\n              </>\n            )}\n\n            {(isAuthenticated || !IS_WEB) && (\n              <>\n                <SettingsRow title={__('Notifications')}>\n                  <Button\n                    button=\"inverse\"\n                    label={__('Manage')}\n                    icon={ICONS.ARROW_RIGHT}\n                    navigate={`/$/${PAGES.SETTINGS_NOTIFICATIONS}`}\n                  />\n                </SettingsRow>\n\n                <SettingsRow title={__('Blocked and muted channels')}>\n                  <Button\n                    button=\"inverse\"\n                    label={__('Manage')}\n                    icon={ICONS.ARROW_RIGHT}\n                    navigate={`/$/${PAGES.SETTINGS_BLOCKED_MUTED}`}\n                  />\n                </SettingsRow>\n              </>\n            )}\n\n            <SettingsRow title={__('Publish confirmation')} subtitle={__(HELP.PUBLISH_PREVIEW)}>\n              <FormField\n                type=\"checkbox\"\n                name=\"sync_toggle\"\n                label={__('')}\n                checked={enablePublishPreview}\n                onChange={() => setClientSetting(SETTINGS.ENABLE_PUBLISH_PREVIEW, !enablePublishPreview)}\n              />\n            </SettingsRow>\n\n            {}\n\n            <SettingsRow title={__('Purchase and tip confirmations')} multirow>\n              <FormField\n                type=\"radio\"\n                name=\"confirm_all_purchases\"\n                checked={!instantPurchaseEnabled}\n                label={__('Always confirm before purchasing content or tipping')}\n                onChange={() => setClientSetting(SETTINGS.INSTANT_PURCHASE_ENABLED, false)}\n              />\n              <FormField\n                type=\"radio\"\n                name=\"instant_purchases\"\n                checked={instantPurchaseEnabled}\n                label={__('Only confirm purchases or tips over a certain amount')}\n                helper={__(HELP.ONLY_CONFIRM_OVER_AMOUNT)}\n                onChange={() => setClientSetting(SETTINGS.INSTANT_PURCHASE_ENABLED, true)}\n              />\n              {instantPurchaseEnabled && (\n                <FormFieldPrice\n                  name=\"confirmation_price\"\n                  min={0.1}\n                  onChange={(newValue) => setClientSetting(SETTINGS.INSTANT_PURCHASE_MAX, newValue)}\n                  price={instantPurchaseMax}\n                />\n              )}\n            </SettingsRow>\n          </>\n        }\n      />\n    </>\n  );\n}\n\n// prettier-ignore\nconst HELP = {\n  HIDE_MEMBERS_ONLY_CONTENT: 'You will not see content that requires a membership subscription.',\n  HIDE_REPOSTS: 'You will not see reposts by people you follow or receive email notifying about them.',\n  HIDE_FYP: 'You will not see the personal recommendations in the homepage.',\n  SHOW_MATURE: 'Mature content may include nudity, intense sexuality, profanity, or other adult content. By displaying mature content, you are affirming you are of legal age to view mature content in your country or jurisdiction.  ',\n  MAX_PURCHASE_PRICE: 'This will prevent you from purchasing any content over a certain cost, as a safety measure.',\n  ONLY_CONFIRM_OVER_AMOUNT: '', // [feel redundant. Disable for now] \"When this option is chosen, LBRY won't ask you to confirm purchases or tips below your chosen amount.\",\n  PUBLISH_PREVIEW: 'Show preview and confirmation dialog before publishing content.',\n};\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doOpenModal } from 'redux/actions/app';\nimport { doSetClientSetting } from 'redux/actions/settings';\nimport { selectShowMatureContent, selectClientSetting } from 'redux/selectors/settings';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\n\nimport SettingContent from './view';\n\nconst select = (state, props) => ({\n  isAuthenticated: selectUserVerifiedEmail(state),\n  hideMembersOnlyContent: selectClientSetting(state, SETTINGS.HIDE_MEMBERS_ONLY_CONTENT),\n  hideReposts: selectClientSetting(state, SETTINGS.HIDE_REPOSTS),\n  showNsfw: selectShowMatureContent(state),\n  instantPurchaseEnabled: selectClientSetting(state, SETTINGS.INSTANT_PURCHASE_ENABLED),\n  instantPurchaseMax: selectClientSetting(state, SETTINGS.INSTANT_PURCHASE_MAX),\n  enablePublishPreview: selectClientSetting(state, SETTINGS.ENABLE_PUBLISH_PREVIEW),\n});\n\nconst perform = (dispatch) => ({\n  setClientSetting: (key, value) => dispatch(doSetClientSetting(key, value)),\n  openModal: (id, params) => dispatch(doOpenModal(id, params)),\n});\n\nexport default connect(select, perform)(SettingContent);\n","// @flow\nimport React from 'react';\nimport { FormField } from 'component/common/form';\nimport { VIDEO_QUALITY_OPTIONS } from 'constants/player';\nimport { toCapitalCase } from 'util/string';\n\nconst OPTION_DISABLED = 'Disabled';\n\ntype Props = {\n  defaultQuality: ?string,\n  doSetDefaultVideoQuality: (value: ?string) => void,\n};\n\nexport default function SettingDefaultQuality(props: Props) {\n  const { defaultQuality, doSetDefaultVideoQuality } = props;\n\n  const valueRef = React.useRef();\n  const dropdownOptions = [OPTION_DISABLED, ...VIDEO_QUALITY_OPTIONS];\n\n  function handleSetQuality(e) {\n    const { value } = e.target;\n\n    doSetDefaultVideoQuality(value === OPTION_DISABLED ? null : value);\n    valueRef.current = value;\n  }\n\n  return (\n    <FormField\n      name=\"default_video_quality\"\n      type=\"select\"\n      onChange={handleSetQuality}\n      value={defaultQuality || valueRef.current}\n    >\n      {dropdownOptions.map((option) => {\n        return (\n          <option key={String(option)} value={option}>\n            {typeof option === 'number' ? `${option}p` : __(toCapitalCase(option))}\n          </option>\n        );\n      })}\n    </FormField>\n  );\n}\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doSetDefaultVideoQuality } from 'redux/actions/settings';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport SettingDefaultQuality from './view';\n\nconst select = (state) => ({\n  defaultQuality: selectClientSetting(state, SETTINGS.DEFAULT_VIDEO_QUALITY),\n});\n\nconst perform = {\n  doSetDefaultVideoQuality,\n};\n\nexport default connect(select, perform)(SettingDefaultQuality);\n","// @flow\nimport React from 'react';\nimport * as SETTINGS from 'constants/settings';\nimport { SETTINGS_GRP } from 'constants/settings';\nimport Card from 'component/common/card';\nimport { FormField } from 'component/common/form';\nimport SettingsRow from 'component/settingsRow';\nimport SettingDefaultQuality from 'component/settingDefaultQuality';\n\ntype Props = {\n  // --- select ---\n  floatingPlayer: boolean,\n  autoplayMedia: boolean,\n  autoplayNext: boolean,\n  isFloating: boolean,\n  // --- perform ---\n  setClientSetting: (string, boolean | string | number) => void,\n  clearPlayingUri: () => void,\n};\n\nexport default function SettingPlayer(props: Props) {\n  const { floatingPlayer, autoplayMedia, autoplayNext, isFloating, setClientSetting, clearPlayingUri } = props;\n\n  return (\n    <>\n      <Card\n        id={SETTINGS_GRP.PLAYER}\n        background\n        isBodyList\n        title={__('Player settings')}\n        body={\n          <>\n            <SettingsRow title={__('Floating video player')} subtitle={__(HELP.FLOATING_PLAYER)}>\n              <FormField\n                type=\"checkbox\"\n                name=\"floating_player\"\n                onChange={() => {\n                  setClientSetting(SETTINGS.FLOATING_PLAYER, !floatingPlayer);\n                  if (isFloating && !floatingPlayer === false) clearPlayingUri();\n                }}\n                checked={floatingPlayer}\n              />\n            </SettingsRow>\n\n            <SettingsRow title={__('Autoplay media files')} subtitle={__(HELP.AUTOPLAY_MEDIA)}>\n              <FormField\n                type=\"checkbox\"\n                name=\"autoplay media\"\n                onChange={() => setClientSetting(SETTINGS.AUTOPLAY_MEDIA, !autoplayMedia)}\n                checked={autoplayMedia}\n              />\n            </SettingsRow>\n\n            <SettingsRow title={__('Autoplay next recommended content')} subtitle={__(HELP.AUTOPLAY_NEXT)}>\n              <FormField\n                type=\"checkbox\"\n                name=\"autoplay next\"\n                onChange={() => setClientSetting(SETTINGS.AUTOPLAY_NEXT, !autoplayNext)}\n                checked={autoplayNext}\n              />\n            </SettingsRow>\n\n            <SettingsRow title={__('Default Video Quality')} subtitle={__(HELP.DEFAULT_VIDEO_QUALITY)}>\n              <SettingDefaultQuality />\n            </SettingsRow>\n          </>\n        }\n      />\n    </>\n  );\n}\n\n// prettier-ignore\nconst HELP = {\n  FLOATING_PLAYER: 'Keep content playing in the corner when navigating to a different page.',\n  AUTOPLAY_MEDIA: 'Autoplay video and audio files when navigating to a file.',\n  AUTOPLAY_NEXT: 'Autoplay the next related item when a file (video or audio) finishes playing.',\n  DEFAULT_VIDEO_QUALITY: 'Set a default quality for video playback. If the default choice is not available, the next lowest will be used when playback starts.',\n};\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doClearPlayingUri } from 'redux/actions/content';\nimport { doSetClientSetting } from 'redux/actions/settings';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport { selectIsPlayerFloating } from 'redux/selectors/content';\n\nimport SettingPlayer from './view';\n\nconst select = (state, props) => ({\n  floatingPlayer: selectClientSetting(state, SETTINGS.FLOATING_PLAYER),\n  autoplayMedia: selectClientSetting(state, SETTINGS.AUTOPLAY_MEDIA),\n  autoplayNext: selectClientSetting(state, SETTINGS.AUTOPLAY_NEXT),\n  isFloating: selectIsPlayerFloating(state),\n});\n\nconst perform = (dispatch) => ({\n  setClientSetting: (key, value) => dispatch(doSetClientSetting(key, value)),\n  clearPlayingUri: () => dispatch(doClearPlayingUri()),\n});\n\nexport default connect(select, perform)(SettingPlayer);\n","// @flow\n\nimport React from 'react';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  autoLaunch: string,\n  showToast: ({}) => void,\n  setAutoLaunch: (boolean) => void,\n  noLabels?: boolean,\n};\n\nfunction SettingAutoLaunch(props: Props) {\n  const { autoLaunch, setAutoLaunch, noLabels } = props;\n\n  return (\n    <React.Fragment>\n      <FormField\n        type=\"checkbox\"\n        name=\"autolaunch\"\n        onChange={(e) => {\n          setAutoLaunch(e.target.checked);\n        }}\n        checked={autoLaunch}\n        label={noLabels ? '' : __('Start minimized')}\n        helper={\n          noLabels\n            ? ''\n            : __('Improve view speed and help the LBRY network by allowing the app to cuddle up in your system tray.')\n        }\n      />\n    </React.Fragment>\n  );\n}\n\nexport default SettingAutoLaunch;\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doSetAutoLaunch } from 'redux/actions/settings';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport { doToast } from 'redux/actions/notifications';\nimport SettingAutoLaunch from './view';\n\nconst select = (state) => ({\n  autoLaunch: selectClientSetting(state, SETTINGS.AUTO_LAUNCH),\n});\n\nconst perform = (dispatch) => ({\n  showToast: (options) => dispatch(doToast(options)),\n  setAutoLaunch: (value) => dispatch(doSetAutoLaunch(value)),\n});\n\nexport default connect(select, perform)(SettingAutoLaunch);\n","// @flow\n\nimport React from 'react';\nimport { FormField } from 'component/common/form';\n\ntype Props = {\n  toTrayWhenClosed: boolean,\n  setToTrayWhenClosed: (boolean) => void,\n  noLabels?: boolean,\n};\n\nfunction SettingClosingBehavior(props: Props) {\n  const { toTrayWhenClosed, setToTrayWhenClosed, noLabels } = props;\n\n  return (\n    <React.Fragment>\n      <FormField\n        type=\"checkbox\"\n        name=\"totraywhenclosed\"\n        onChange={(e) => {\n          setToTrayWhenClosed(e.target.checked);\n        }}\n        checked={toTrayWhenClosed}\n        label={noLabels ? '' : __('Leave app running in notification area when the window is closed')}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default SettingClosingBehavior;\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doSetAppToTrayWhenClosed } from 'redux/actions/settings';\nimport { selectClientSetting } from 'redux/selectors/settings';\nimport SettingClosingBehavior from './view';\n\nconst select = (state) => ({\n  toTrayWhenClosed: selectClientSetting(state, SETTINGS.TO_TRAY_WHEN_CLOSED),\n});\n\nconst perform = (dispatch) => ({\n  setToTrayWhenClosed: (value) => dispatch(doSetAppToTrayWhenClosed(value)),\n});\n\nexport default connect(select, perform)(SettingClosingBehavior);\n","// @flow\nimport React, { useState, useEffect } from 'react';\nimport Button from 'component/button';\nimport { Form, FormField } from 'component/common/form';\n\ntype Props = {\n  update: ([string, string]) => void,\n};\n\nconst VALID_IPADDRESS_REGEX = new RegExp(\n  '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\\\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n);\nconst VALID_HOSTNAME_REGEX = new RegExp(\n  '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])(\\\\.))+([A-Za-z]|[A-Za-z][A-Za-z]*[A-Za-z])$'\n);\nconst VALID_PORT_REGEX = new RegExp('^([0-9]){1,5}$');\n\nfunction ServerInputRow(props: Props) {\n  const { update } = props;\n  const [hostString, setHostString] = useState('');\n  const [portString, setPortString] = useState('');\n  const [validServerString, setValidServerString] = useState(false);\n\n  useEffect(() => {\n    setValidServerString(\n      (VALID_IPADDRESS_REGEX.test(hostString) || VALID_HOSTNAME_REGEX.test(hostString)) &&\n        VALID_PORT_REGEX.test(portString)\n    );\n  }, [hostString, portString, validServerString, setValidServerString]);\n\n  function onSubmit() {\n    update([hostString, portString]);\n    setHostString('');\n    setPortString('');\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <div className=\"section__actions\">\n        <FormField\n          type=\"text\"\n          label={__('Host')}\n          placeholder={'code.freezepeach.fun'}\n          value={hostString}\n          onChange={e => setHostString(e.target.value)}\n        />\n        <span className=\"form-field__conjuction\">:</span>\n        <FormField\n          type=\"number\"\n          label={__('Port')}\n          placeholder={'50001'}\n          value={portString}\n          onChange={e => setPortString(String(e.target.value))}\n        />\n      </div>\n\n      <div className=\"section__actions\">\n        <Button type=\"submit\" button=\"primary\" label={__('Add')} disabled={!validServerString} />\n      </div>\n    </Form>\n  );\n}\n\nexport default ServerInputRow;\n","// @flow\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FormField } from 'component/common/form';\nimport Button from 'component/button';\nimport I18nMessage from 'component/i18nMessage';\nimport * as ICONS from 'constants/icons';\nimport ServerInputRow from './internal/inputRow';\nimport { stringifyServerParam } from 'util/sync-settings';\n\ntype StatusOfServer = {\n  host: string,\n  port: string,\n  availability: boolean,\n  latency: number,\n};\n\ntype ServerTuple = [string, string]; // ['host', 'port']\ntype ServerStatus = Array<StatusOfServer>;\ntype ServerConfig = Array<ServerTuple>;\ntype DaemonStatus = {\n  wallet: any,\n};\n\ntype Props = {\n  getDaemonStatus: () => void,\n  setCustomWalletServers: (any) => void,\n  clearWalletServers: () => void,\n  customWalletServers: ServerConfig,\n  saveServerConfig: (Array<ServerTuple>) => void,\n  hasWalletServerPrefs: boolean,\n  daemonStatus: DaemonStatus,\n  walletReconnecting: boolean,\n};\n\nfunction SettingWalletServer(props: Props) {\n  const {\n    daemonStatus,\n    setCustomWalletServers,\n    getDaemonStatus,\n    clearWalletServers,\n    saveServerConfig,\n    customWalletServers,\n    hasWalletServerPrefs,\n    walletReconnecting,\n  } = props;\n\n  const [advancedMode, setAdvancedMode] = useState(false);\n\n  const walletStatus = daemonStatus && daemonStatus.wallet;\n  const activeWalletServers: ServerStatus = (walletStatus && walletStatus.servers) || [];\n  const availableServers = walletStatus && walletStatus.available_servers;\n  const serverConfig: ServerConfig = customWalletServers;\n  const STATUS_INTERVAL = 5000;\n\n  // onUnmount, if there are no available servers, doClear()\n  // in order to replicate componentWillUnmount, the effect needs to get the value from a ref\n  const hasAvailableRef = useRef();\n  useEffect(\n    () => () => {\n      hasAvailableRef.current = availableServers;\n    },\n    [availableServers]\n  );\n\n  useEffect(\n    () => () => {\n      if (!hasAvailableRef.current) {\n        doClear();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- on mount only\n    []\n  );\n\n  useEffect(() => {\n    if (hasWalletServerPrefs) {\n      setAdvancedMode(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- on mount only\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getDaemonStatus();\n    }, STATUS_INTERVAL);\n    return () => clearInterval(interval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- on mount only\n  }, []);\n\n  function doClear() {\n    setAdvancedMode(false);\n    clearWalletServers();\n  }\n\n  function onAdd(serverTuple: ServerTuple) {\n    let newServerConfig = serverConfig.concat();\n    newServerConfig.push(serverTuple);\n    updateServers(newServerConfig);\n  }\n\n  function onDelete(i: number) {\n    const newServerConfig = serverConfig.concat();\n    newServerConfig.splice(i, 1);\n    updateServers(newServerConfig);\n  }\n\n  function updateServers(newConfig) {\n    saveServerConfig(newConfig);\n    setCustomWalletServers(stringifyServerParam(newConfig));\n  }\n\n  return (\n    <React.Fragment>\n      <fieldset-section>\n        <FormField\n          type=\"radio\"\n          name=\"default_wallet_servers\"\n          checked={!advancedMode}\n          label={__('Use official lbry.tv wallet servers')}\n          onChange={(e) => {\n            if (e.target.checked) {\n              doClear();\n            }\n          }}\n        />\n        <FormField\n          type=\"radio\"\n          name=\"custom_wallet_servers\"\n          checked={advancedMode}\n          onChange={(e) => {\n            setAdvancedMode(e.target.checked);\n            if (e.target.checked && customWalletServers.length) {\n              setCustomWalletServers(stringifyServerParam(customWalletServers));\n            }\n          }}\n          label={__('Use custom wallet servers')}\n        />\n        <p className=\"help\">\n          <I18nMessage\n            tokens={{\n              learn_more: <Button button=\"link\" href=\"http://lbry.com/faq/wallet-servers\" label={__('Learn More')} />,\n            }}\n          >\n            Wallet servers are used to relay data to and from the LBRY blockchain. They also determine what content\n            shows in trending or is blocked. %learn_more%\n          </I18nMessage>\n        </p>\n\n        {advancedMode && (\n          <div>\n            {serverConfig &&\n              serverConfig.map((entry, index) => {\n                const [host, port] = entry;\n                const available = activeWalletServers.some(\n                  (s) => s.host === entry[0] && String(s.port) === entry[1] && s.availability\n                );\n\n                return (\n                  <div\n                    key={`${host}:${port}`}\n                    className=\"section section--padded card--inline form-field__internal-option\"\n                  >\n                    <h3>\n                      {host}:{port}\n                    </h3>\n                    <span className=\"help\">\n                      {available ? __('Connected') : walletReconnecting ? __('Connecting...') : __('Not connected')}\n                    </span>\n                    <Button\n                      button=\"close\"\n                      title={__('Remove custom wallet server')}\n                      icon={ICONS.REMOVE}\n                      onClick={() => onDelete(index)}\n                    />\n                  </div>\n                );\n              })}\n            <div className=\"form-field__internal-option\">\n              <ServerInputRow update={onAdd} />\n            </div>\n          </div>\n        )}\n      </fieldset-section>\n    </React.Fragment>\n  );\n}\n\nexport default SettingWalletServer;\n","import { connect } from 'react-redux';\nimport { selectIsWalletReconnecting } from 'redux/selectors/wallet';\nimport * as DAEMON_SETTINGS from 'constants/daemon_settings';\nimport {\n  doSetDaemonSetting,\n  doClearDaemonSetting,\n  doGetDaemonStatus,\n  doSaveCustomWalletServers,\n} from 'redux/actions/settings';\nimport { selectSavedWalletServers, selectDaemonStatus, selectHasWalletServerPrefs } from 'redux/selectors/settings';\nimport SettingWalletServer from './view';\n\nconst select = (state) => ({\n  daemonStatus: selectDaemonStatus(state),\n  customWalletServers: selectSavedWalletServers(state),\n  hasWalletServerPrefs: selectHasWalletServerPrefs(state),\n  walletReconnecting: selectIsWalletReconnecting(state),\n});\n\nconst perform = (dispatch) => ({\n  setCustomWalletServers: (value) => dispatch(doSetDaemonSetting(DAEMON_SETTINGS.LBRYUM_SERVERS, value)),\n  clearWalletServers: () => dispatch(doClearDaemonSetting(DAEMON_SETTINGS.LBRYUM_SERVERS)),\n  getDaemonStatus: () => dispatch(doGetDaemonStatus()),\n  saveServerConfig: (servers) => dispatch(doSaveCustomWalletServers(servers)),\n});\n\nexport default connect(select, perform)(SettingWalletServer);\n","import { connect } from 'react-redux';\nimport { doWalletStatus } from 'redux/actions/wallet';\nimport { selectWalletIsEncrypted } from 'redux/selectors/wallet';\nimport {\n  doClearCache,\n  doNotifyDecryptWallet,\n  doNotifyEncryptWallet,\n  doNotifyForgetPassword,\n  doToggle3PAnalytics,\n} from 'redux/actions/app';\nimport { doSetDaemonSetting, doClearDaemonSetting, doFindFFmpeg } from 'redux/actions/settings';\nimport { selectAllowAnalytics } from 'redux/selectors/app';\nimport { selectDaemonSettings, selectFfmpegStatus, selectFindingFFmpeg } from 'redux/selectors/settings';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\n\nimport SettingSystem from './view';\n\nconst select = (state) => ({\n  daemonSettings: selectDaemonSettings(state),\n  ffmpegStatus: selectFfmpegStatus(state),\n  findingFFmpeg: selectFindingFFmpeg(state),\n  walletEncrypted: selectWalletIsEncrypted(state),\n  isAuthenticated: selectUserVerifiedEmail(state),\n  allowAnalytics: selectAllowAnalytics(state),\n});\n\nconst perform = (dispatch) => ({\n  setDaemonSetting: (key, value) => dispatch(doSetDaemonSetting(key, value)),\n  clearDaemonSetting: (key) => dispatch(doClearDaemonSetting(key)),\n  clearCache: () => dispatch(doClearCache()),\n  findFFmpeg: () => dispatch(doFindFFmpeg()),\n  encryptWallet: () => dispatch(doNotifyEncryptWallet()),\n  decryptWallet: () => dispatch(doNotifyDecryptWallet()),\n  updateWalletStatus: () => dispatch(doWalletStatus()),\n  confirmForgetPassword: (modalProps) => dispatch(doNotifyForgetPassword(modalProps)),\n  toggle3PAnalytics: (allow) => dispatch(doToggle3PAnalytics(allow)),\n});\n\nexport default connect(select, perform)(SettingSystem);\n","// @flow\nimport { ALERT } from 'constants/icons';\nimport { SETTINGS_GRP } from 'constants/settings';\nimport React from 'react';\nimport Button from 'component/button';\nimport Card from 'component/common/card';\nimport { FormField } from 'component/common/form';\nimport FileSelector from 'component/common/file-selector';\nimport I18nMessage from 'component/i18nMessage';\nimport SettingAutoLaunch from 'component/settingAutoLaunch';\nimport SettingClosingBehavior from 'component/settingClosingBehavior';\nimport SettingsRow from 'component/settingsRow';\nimport SettingWalletServer from 'component/settingWalletServer';\nimport Spinner from 'component/spinner';\nimport { getPasswordFromCookie } from 'util/saved-passwords';\n\n\ntype Price = {\n  currency: string,\n  amount: number,\n};\n\ntype SetDaemonSettingArg = boolean | string | number | Price;\n\ntype DaemonSettings = {\n  download_dir: string,\n  share_usage_data: boolean,\n  max_key_fee?: Price,\n  max_connections_per_download?: number,\n  save_files: boolean,\n  save_blobs: boolean,\n  ffmpeg_path: string,\n};\n\ntype Props = {\n  // --- select ---\n  daemonSettings: DaemonSettings,\n  ffmpegStatus: { available: boolean, which: string },\n  findingFFmpeg: boolean,\n  walletEncrypted: boolean,\n  isAuthenticated: boolean,\n  allowAnalytics: boolean,\n  // --- perform ---\n  setDaemonSetting: (string, ?SetDaemonSettingArg) => void,\n  clearDaemonSetting: (string) => void,\n  clearCache: () => Promise<any>,\n  findFFmpeg: () => void,\n  encryptWallet: () => void,\n  decryptWallet: () => void,\n  updateWalletStatus: () => void,\n  confirmForgetPassword: ({}) => void,\n  toggle3PAnalytics: (boolean) => void,\n};\n\nexport default function SettingSystem(props: Props) {\n  const {\n    daemonSettings,\n    ffmpegStatus,\n    findingFFmpeg,\n    walletEncrypted,\n    isAuthenticated,\n    allowAnalytics,\n    setDaemonSetting,\n    clearDaemonSetting,\n    clearCache,\n    findFFmpeg,\n    encryptWallet,\n    decryptWallet,\n    updateWalletStatus,\n    confirmForgetPassword,\n    toggle3PAnalytics,\n  } = props;\n\n  const [clearingCache, setClearingCache] = React.useState(false);\n  const [storedPassword, setStoredPassword] = React.useState(false);\n\n\n  function onChangeEncryptWallet() {\n    if (walletEncrypted) {\n      decryptWallet();\n    } else {\n      encryptWallet();\n    }\n  }\n\n  function onConfirmForgetPassword() {\n    confirmForgetPassword({ callback: () => setStoredPassword(false) });\n  }\n\n  // Update ffmpeg variables\n  React.useEffect(() => {\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Update storedPassword state\n  React.useEffect(() => {\n    if (isAuthenticated || !IS_WEB) {\n      updateWalletStatus();\n      getPasswordFromCookie().then((p) => {\n        if (typeof p === 'string') {\n          setStoredPassword(true);\n        }\n      });\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <Card\n        id={SETTINGS_GRP.SYSTEM}\n        background\n        isBodyList\n        title={__('System')}\n        body={\n          <>\n            {}\n\n            {}\n\n            {}\n\n            {}\n\n            {}\n\n            {}\n\n            {}\n\n            {}\n\n            <SettingsRow\n              title={__('Clear application cache')}\n              subtitle={__('This might fix issues that you are having. Your wallet will not be affected.')}\n            >\n              <Button\n                button=\"secondary\"\n                icon={ALERT}\n                label={clearingCache ? __('Clearing') : __('Clear Cache')}\n                onClick={() => {\n                  setClearingCache(true);\n                  clearCache();\n                }}\n                disabled={clearingCache}\n              />\n            </SettingsRow>\n          </>\n        }\n      />\n    </>\n  );\n}\n","/**\n * Settings that we allow for unauthenticated users.\n */\n\n// @flow\nimport React from 'react';\nimport Card from 'component/common/card';\nimport { FormField } from 'component/common/form';\nimport HomepageSelector from 'component/homepageSelector';\nimport SettingLanguage from 'component/settingLanguage';\nimport SettingsRow from 'component/settingsRow';\n\ntype Props = {\n  searchInLanguage: boolean,\n  homepageKeys: Array<string>,\n  setSearchInLanguage: (boolean) => void,\n};\n\nexport default function SettingUnauthenticated(props: Props) {\n  const { searchInLanguage, homepageKeys, setSearchInLanguage } = props;\n\n  return (\n    <Card\n      isBodyList\n      body={\n        <>\n          <SettingsRow title={__('Language')} subtitle={__(HELP_LANGUAGE)}>\n            <SettingLanguage />\n          </SettingsRow>\n\n          <SettingsRow title={__('Search only in the selected language by default')}>\n            <FormField\n              name=\"search-in-language\"\n              type=\"checkbox\"\n              checked={searchInLanguage}\n              onChange={() => setSearchInLanguage(!searchInLanguage)}\n            />\n          </SettingsRow>\n\n          {homepageKeys.length > 1 && (\n            <SettingsRow title={__('Homepage')} subtitle={__('Tailor your experience.')}>\n              <HomepageSelector />\n            </SettingsRow>\n          )}\n        </>\n      }\n    />\n  );\n}\n\n// prettier-ignore\nconst HELP_LANGUAGE = 'Multi-language support is community-driven and may be incomplete for some languages. Switching your language may have unintended consequences, like glossolalia.';\n","import { connect } from 'react-redux';\nimport * as SETTINGS from 'constants/settings';\nimport { doSetClientSetting } from 'redux/actions/settings';\nimport { selectClientSetting, selectHomepageKeys } from 'redux/selectors/settings';\n\nimport SettingUnauthenticated from './view';\n\nconst select = (state) => ({\n  searchInLanguage: selectClientSetting(state, SETTINGS.SEARCH_IN_LANGUAGE),\n  homepageKeys: selectHomepageKeys(state),\n});\n\nconst perform = (dispatch) => ({\n  setSearchInLanguage: (value) => dispatch(doSetClientSetting(SETTINGS.SEARCH_IN_LANGUAGE, value)),\n});\n\nexport default connect(select, perform)(SettingUnauthenticated);\n","// @flow\nimport * as PAGES from 'constants/pages';\nimport * as ICONS from 'constants/icons';\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport Button from 'component/button';\nimport Page from 'component/page';\nimport SettingAccount from 'component/settingAccount';\nimport SettingAppearance from 'component/settingAppearance';\nimport SettingContent from 'component/settingContent';\nimport SettingPlayer from 'component/settingPlayer';\nimport SettingSystem from 'component/settingSystem';\nimport SettingUnauthenticated from 'component/settingUnauthenticated';\nimport Spinner from 'component/spinner';\nimport Yrbl from 'component/yrbl';\n\ntype DaemonSettings = {\n  download_dir: string,\n  share_usage_data: boolean,\n};\n\ntype Props = {\n  daemonSettings: DaemonSettings,\n  isAuthenticated: boolean,\n  prefsReady: boolean,\n  language: string,\n  enterSettings: () => void,\n  exitSettings: () => void,\n};\n\nclass SettingsPage extends React.PureComponent<Props> {\n  componentDidMount() {\n    const { enterSettings } = this.props;\n    enterSettings();\n  }\n\n  componentWillUnmount() {\n    const { exitSettings } = this.props;\n    exitSettings();\n  }\n\n  render() {\n    const { daemonSettings, isAuthenticated, prefsReady, language } = this.props;\n    const noDaemonSettings = !daemonSettings || Object.keys(daemonSettings).length === 0;\n\n    if (isAuthenticated && !prefsReady) {\n      return (\n        <Page\n          noFooter\n          settingsPage\n          noSideNavigation\n          backout={{ title: __('Settings'), backLabel: __('Save') }}\n          className=\"card-stack\"\n        >\n          <div className=\"main--empty\">\n            <Spinner text={__('Please wait a bit, we are still getting your account ready.')} />\n          </div>\n        </Page>\n      );\n    }\n\n    return (\n      <Page\n        noFooter\n        settingsPage\n        noSideNavigation\n        backout={{ title: __('Settings'), backLabel: __('Save') }}\n        className=\"card-stack\"\n        key={language}\n      >\n        {!isAuthenticated && IS_WEB && (\n          <>\n            <SettingUnauthenticated />\n            <div className=\"main--empty\">\n              <Yrbl\n                type=\"happy\"\n                title={__('Sign up for full control')}\n                subtitle={__('Unlock new buttons that change things.')}\n                actions={\n                  <div className=\"section__actions\">\n                    <Button button=\"primary\" icon={ICONS.SIGN_UP} label={__('Sign Up')} navigate={`/$/${PAGES.AUTH}`} />\n                  </div>\n                }\n              />\n            </div>\n          </>\n        )}\n\n        {!IS_WEB && noDaemonSettings ? (\n          <section className=\"card card--section\">\n            <div className=\"card__title card__title--deprecated\">{__('Failed to load settings.')}</div>\n          </section>\n        ) : (\n          <div className={classnames('card-stack', { 'card--disabled': IS_WEB && !isAuthenticated })}>\n            <SettingAppearance />\n            <SettingAccount />\n            <SettingContent />\n            <SettingPlayer />\n            <SettingSystem />\n          </div>\n        )}\n      </Page>\n    );\n  }\n}\n\nexport default SettingsPage;\n","import { connect } from 'react-redux';\nimport { doEnterSettingsPage, doExitSettingsPage } from 'redux/actions/settings';\nimport { selectDaemonSettings, selectLanguage } from 'redux/selectors/settings';\nimport { selectPrefsReady } from 'redux/selectors/sync';\nimport { selectUserVerifiedEmail } from 'redux/selectors/user';\n\nimport SettingsPage from './view';\n\nconst select = (state) => ({\n  daemonSettings: selectDaemonSettings(state),\n  isAuthenticated: selectUserVerifiedEmail(state),\n  prefsReady: selectPrefsReady(state),\n  language: selectLanguage(state),\n});\n\nconst perform = (dispatch) => ({\n  enterSettings: () => dispatch(doEnterSettingsPage()),\n  exitSettings: () => dispatch(doExitSettingsPage()),\n});\n\nexport default connect(select, perform)(SettingsPage);\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","FileSelector","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","_defineProperty","_assertThisInitialized","call","files","fileInput","current","file","onFileChosen","value","remote","properties","then","result","path","filePaths","click","handleFileInputSelection","bind","handleDirectoryInputSelection","fileInputButton","key","_this2","_this$props","this","type","currentPath","label","placeholder","accept","error","disabled","_this$props$autoFocus","autoFocus","placeHolder","FormField","webkitdirectory","readOnly","inputButton","display","ref","onChange","multirow","useVerticalSeparator","highlighted","membersOnly","navigate","concat","PAGES","SEARCH_IN_LANGUAGE","withRouter","verifiedEmail","openModal","syncEnabled","SettingsRow","name","checked","MODALS","mode","helper","requiresAuth","connect","state","selectClientSetting","SETTINGS","selectUserVerifiedEmail","getSyncError","selectGetSyncErrorMessage","dispatch","setSyncEnabled","doSetWalletSyncPreference","doOpenModal","SyncToggle","isAuthenticated","walletEncrypted","selectWalletIsEncrypted","user","selectUser","hasChannels","selectHasChannels","doWalletStatus","_doWalletStatus","_React$useState2","setStoredPassword","openExternal","uri","window","odysee","build","googlePlay","functions","initBrowser","history","push","getPasswordFromCookie","p","Card","SETTINGS_GRP","getStripeEnvironment","homepage","homepageKeys","setHomepage","getDefaultLanguage","length","target","map","hp","getLanguageName","perform","doSetHomepage","selectHomepageKeys","SelectHomepage","language","setLanguage","changingLanguage","setChangingLanguage","document","documentElement","LANGUAGES","dir","sortLanguageMap","SUPPORTED_LANGUAGES","_ref","_ref2","langKey","langName","Spinner","selectLanguage","doSetLanguage","SettingLanguage","currentTheme","themes","automaticDarkModeEnabled","darkModeTimes","clock24h","setClientSetting","doSetClientSetting","setDarkTime","time","options","doSetDarkTime","onAutomaticDarkModeChange","onChangeTime","event","formatHour","Date","Number","toLocaleTimeString","hour12","hour","theme","class","fromTo","from","to","HELP","LANGUAGE","searchInLanguage","hideBalance","hideTitleNotificationCount","setSearchInLanguage","highlightSearchInLanguage","useHistory","location","hash","HomepageSelector","ThemeSelector","daemonSettings","selectDaemonSettings","setDaemonSetting","doSetDaemonSetting","defaultMaxKeyFee","currency","amount","disableMaxKeyFee","max_key_fee","onKeyFeeDisableChange","isDisabled","onKeyFeeChange","newValue","FormFieldPrice","min","price","HIDE_MEMBERS_ONLY_CONTENT","HIDE_REPOSTS","HIDE_FYP","SHOW_MATURE","MAX_PURCHASE_PRICE","ONLY_CONFIRM_OVER_AMOUNT","PUBLISH_PREVIEW","hideMembersOnlyContent","hideReposts","showNsfw","selectShowMatureContent","instantPurchaseEnabled","instantPurchaseMax","enablePublishPreview","params","param","add","remove","Lbryio","SIMPLE_SITE","OPTION_DISABLED","doSetDefaultVideoQuality","defaultQuality","valueRef","dropdownOptions","_toConsumableArray","VIDEO_QUALITY_OPTIONS","option","String","toCapitalCase","FLOATING_PLAYER","AUTOPLAY_MEDIA","AUTOPLAY_NEXT","DEFAULT_VIDEO_QUALITY","floatingPlayer","autoplayMedia","autoplayNext","isFloating","selectIsPlayerFloating","clearPlayingUri","doClearPlayingUri","SettingDefaultQuality","autoLaunch","setAutoLaunch","noLabels","showToast","doToast","doSetAutoLaunch","SettingAutoLaunch","toTrayWhenClosed","setToTrayWhenClosed","doSetAppToTrayWhenClosed","SettingClosingBehavior","VALID_IPADDRESS_REGEX","RegExp","VALID_HOSTNAME_REGEX","VALID_PORT_REGEX","update","hostString","setHostString","_useState4","portString","setPortString","_useState6","validServerString","setValidServerString","useEffect","test","Form","onSubmit","daemonStatus","setCustomWalletServers","getDaemonStatus","clearWalletServers","saveServerConfig","customWalletServers","hasWalletServerPrefs","walletReconnecting","advancedMode","setAdvancedMode","walletStatus","wallet","activeWalletServers","servers","availableServers","available_servers","serverConfig","hasAvailableRef","useRef","doClear","updateServers","newConfig","stringifyServerParam","interval","setInterval","clearInterval","I18nMessage","tokens","learn_more","href","entry","index","_entry","host","port","available","some","s","availability","i","newServerConfig","splice","ServerInputRow","serverTuple","selectDaemonStatus","selectSavedWalletServers","selectHasWalletServerPrefs","selectIsWalletReconnecting","DAEMON_SETTINGS","doClearDaemonSetting","doGetDaemonStatus","doSaveCustomWalletServers","SettingWalletServer","ffmpegStatus","selectFfmpegStatus","findingFFmpeg","selectFindingFFmpeg","allowAnalytics","selectAllowAnalytics","clearDaemonSetting","clearCache","doClearCache","findFFmpeg","doFindFFmpeg","encryptWallet","doNotifyEncryptWallet","decryptWallet","doNotifyDecryptWallet","updateWalletStatus","confirmForgetPassword","modalProps","doNotifyForgetPassword","toggle3PAnalytics","allow","doToggle3PAnalytics","clearingCache","setClearingCache","_React$useState4","ALERT","HELP_LANGUAGE","SettingsPage","apply","arguments","enterSettings","exitSettings","prefsReady","Object","keys","Page","noFooter","settingsPage","noSideNavigation","backout","backLabel","text","SettingUnauthenticated","Yrbl","SettingAppearance","SettingAccount","SettingContent","SettingPlayer","SettingSystem","selectPrefsReady","doEnterSettingsPage","doExitSettingsPage"],"sourceRoot":""}