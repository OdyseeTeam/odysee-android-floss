{"version":3,"file":"notifications-9f4d1b019c0f8147c0b1.js","mappings":"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","sources":["webpack://odysee.com/../ui/page/notifications/index.js","webpack://odysee.com/../ui/page/notifications/view.jsx"],"sourcesContent":["import { connect } from 'react-redux';\nimport {\n  selectNotifications,\n  selectNotificationsFiltered,\n  selectIsFetchingNotifications,\n  selectUnreadNotificationCount,\n  selectUnseenNotificationCount,\n  selectNotificationCategories,\n} from 'redux/selectors/notifications';\nimport { doCommentReactList } from 'redux/actions/comments';\nimport { selectActiveChannelClaim } from 'redux/selectors/app';\nimport {\n  doReadNotifications,\n  doNotificationList,\n  doSeeAllNotifications,\n  doNotificationCategories,\n} from 'redux/actions/notifications';\nimport NotificationsPage from './view';\n\nconst select = (state) => ({\n  notifications: selectNotifications(state),\n  notificationsFiltered: selectNotificationsFiltered(state),\n  notificationCategories: selectNotificationCategories(state),\n  fetching: selectIsFetchingNotifications(state),\n  unreadCount: selectUnreadNotificationCount(state),\n  unseenCount: selectUnseenNotificationCount(state),\n  activeChannel: selectActiveChannelClaim(state),\n});\n\nexport default connect(select, {\n  doReadNotifications,\n  doNotificationList,\n  doNotificationCategories,\n  doSeeAllNotifications,\n  doCommentReactList,\n})(NotificationsPage);\n","// @flow\nimport Icon from 'component/common/icon';\nimport * as ICONS from 'constants/icons';\nimport React from 'react';\nimport Page from 'component/page';\nimport Spinner from 'component/spinner';\nimport { FormField } from 'component/common/form';\nimport Notification from 'component/notification';\nimport Button from 'component/button';\nimport usePersistedState from 'effects/use-persisted-state';\nimport Yrbl from 'component/yrbl';\nimport * as NOTIFICATIONS from 'constants/notifications';\nimport useFetched from 'effects/use-fetched';\nimport { RULE } from 'constants/notifications';\n\ntype Props = {\n  notifications: Array<Notification>,\n  notificationsFiltered: Array<Notification>,\n  notificationCategories: Array<NotificationCategory>,\n  fetching: boolean,\n  unreadCount: number,\n  unseenCount: number,\n  doSeeAllNotifications: () => void,\n  doReadNotifications: () => void,\n  doNotificationList: (?Array<string>, ?boolean) => void,\n  doNotificationCategories: () => void,\n  activeChannel: ?ChannelClaim,\n  doCommentReactList: (Array<string>) => Promise<any>,\n};\n\nexport default function NotificationsPage(props: Props) {\n  const {\n    notifications,\n    notificationsFiltered,\n    fetching,\n    unreadCount,\n    unseenCount,\n    doSeeAllNotifications,\n    doReadNotifications,\n    doNotificationList,\n    doNotificationCategories,\n    notificationCategories,\n    activeChannel,\n    doCommentReactList,\n  } = props;\n  const [name, setName] = usePersistedState('notifications--rule', NOTIFICATIONS.NOTIFICATION_NAME_ALL);\n  const isFiltered = name !== NOTIFICATIONS.NOTIFICATION_NAME_ALL;\n  const list = isFiltered ? notificationsFiltered : notifications;\n\n  const fetchedOnce = useFetched(fetching);\n  const categoriesReady = notificationCategories;\n  const notificationsReady = !isFiltered || fetchedOnce;\n  const ready = categoriesReady && notificationsReady;\n\n  // Fetch reacts\n  React.useEffect(() => {\n    if (ready && !fetching && activeChannel) {\n      let idsForReactionFetch = [];\n      list.map((notification) => {\n        const { notification_rule, notification_parameters } = notification;\n        const isComment =\n          notification_rule === RULE.COMMENT ||\n          notification_rule === RULE.COMMENT_REPLY ||\n          notification_rule === RULE.CREATOR_COMMENT;\n        const commentId =\n          isComment &&\n          notification_parameters &&\n          notification_parameters.dynamic &&\n          notification_parameters.dynamic.hash;\n\n        if (commentId) {\n          idsForReactionFetch.push(commentId);\n        }\n      });\n\n      if (idsForReactionFetch.length !== 0) {\n        doCommentReactList(idsForReactionFetch);\n      }\n    }\n  }, [ready, doCommentReactList, list, activeChannel, fetching]);\n\n  // Mark all as seen\n  React.useEffect(() => {\n    if (unseenCount > 0) {\n      doSeeAllNotifications();\n    }\n  }, [unseenCount, doSeeAllNotifications]);\n\n  const stringifiedNotificationCategories = notificationCategories ? JSON.stringify(notificationCategories) : '';\n\n  // Fetch filtered notifications\n  React.useEffect(() => {\n    if (stringifiedNotificationCategories) {\n      const arrayNotificationCategories = JSON.parse(stringifiedNotificationCategories);\n\n      if (name !== NOTIFICATIONS.NOTIFICATION_NAME_ALL) {\n        try {\n          const matchingCategory = arrayNotificationCategories.find((category) => category.name === name);\n          if (matchingCategory) {\n            doNotificationList(matchingCategory.types, false);\n          }\n        } catch (e) {\n          console.error(e); // eslint-disable-line no-console\n        }\n      }\n    }\n  }, [name, notifications, stringifiedNotificationCategories, doNotificationList]);\n\n  React.useEffect(() => {\n    if (!notificationCategories) {\n      doNotificationCategories();\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Page className=\"notification-page\">\n      {ready && (\n        <div className=\"claim-list__header\">\n          <h1 className=\"page__title\">\n            <Icon icon={ICONS.NOTIFICATION} />\n            <label>{__('Notifications')}</label>\n          </h1>\n          <div className=\"claim-list__alt-controls--wrap\">\n            {fetching && <Spinner type=\"small\" delayed />}\n\n            {unreadCount > 0 && (\n              <Button\n                icon={ICONS.EYE}\n                onClick={doReadNotifications}\n                button=\"secondary\"\n                label={__('Mark all as read')}\n              />\n            )}\n\n            {notificationCategories && (\n              <FormField type=\"select\" name=\"filter\" value={name} onChange={(e) => setName(e.target.value)}>\n                {notificationCategories.map((category) => {\n                  return (\n                    <option key={category.name} value={category.name}>\n                      {__(category.name)}\n                    </option>\n                  );\n                })}\n              </FormField>\n            )}\n          </div>\n        </div>\n      )}\n\n      {!ready ? (\n        <div className=\"main--empty\">\n          <Spinner />\n        </div>\n      ) : list && list.length > 0 && !(isFiltered && fetching) ? (\n        <div className=\"card\">\n          <div className=\"notification_list\">\n            {list.map((notification) => {\n              return <Notification key={notification.id} notification={notification} />;\n            })}\n          </div>\n        </div>\n      ) : (\n        <div className=\"main--empty\">\n          {!fetching && (\n            <Yrbl\n              title={__('No notifications')}\n              subtitle={\n                isFiltered\n                  ? __('Try selecting another filter.')\n                  : __(\"You don't have any notifications yet, but they will be here when you do!\")\n              }\n              actions={\n                <div className=\"section__actions\">\n                  <Button button=\"primary\" icon={ICONS.HOME} label={__('Go Home')} navigate=\"/\" />\n                </div>\n              }\n            />\n          )}\n        </div>\n      )}\n    </Page>\n  );\n}\n"],"names":["connect","state","notifications","selectNotifications","notificationsFiltered","selectNotificationsFiltered","notificationCategories","selectNotificationCategories","fetching","selectIsFetchingNotifications","unreadCount","selectUnreadNotificationCount","unseenCount","selectUnseenNotificationCount","activeChannel","selectActiveChannelClaim","doReadNotifications","doNotificationList","doNotificationCategories","doSeeAllNotifications","doCommentReactList","props","_usePersistedState2","_slicedToArray","usePersistedState","NOTIFICATIONS","name","setName","isFiltered","list","fetchedOnce","useFetched","ready","React","idsForReactionFetch","map","notification","notification_rule","notification_parameters","commentId","RULE","dynamic","hash","push","length","stringifiedNotificationCategories","JSON","stringify","arrayNotificationCategories","parse","matchingCategory","find","category","types","e","console","error","Page","className","Icon","icon","ICONS","__","Spinner","type","delayed","Button","onClick","button","label","FormField","value","onChange","target","key","Yrbl","title","subtitle","actions","navigate","Notification","id"],"sourceRoot":""}