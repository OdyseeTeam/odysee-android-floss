{"version":3,"file":"invited-dbbcfcdc1e4e4338c954.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/card.jsx","webpack://odysee.com/../ui/page/invited/internal/invited/view.jsx","webpack://odysee.com/../ui/page/invited/internal/invited/index.js","webpack://odysee.com/../ui/page/invited/index.js","webpack://odysee.com/../ui/page/invited/view.jsx"],"sourcesContent":["// @flow\nimport type { Node } from 'react';\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Icon from 'component/common/icon';\nimport Button from 'component/button';\nimport * as ICONS from 'constants/icons';\n// import twemoji from 'twemoji';\nimport Tooltip from 'component/common/tooltip';\n\ntype Props = {\n  title?: string | Node,\n  subtitle?: string | Node,\n  titleActions?: string | Node,\n  id?: string,\n  body?: string | Node,\n  actions?: string | Node,\n  icon?: string,\n  className?: string,\n  isPageTitle?: boolean,\n  noTitleWrap?: boolean,\n  isBodyList?: boolean,\n  defaultExpand?: boolean,\n  nag?: Node,\n  smallTitle?: boolean,\n  onClick?: () => void,\n  children?: Node,\n  secondPane?: Node,\n  slimHeader?: boolean,\n  background?: boolean,\n  backgroundImage?: string,\n  singlePane?: boolean,\n  headerActions?: Node,\n  gridHeader?: boolean,\n  accessStatus?: string,\n};\n\nfunction Card(props: Props) {\n  const {\n    title,\n    subtitle,\n    titleActions,\n    id,\n    body,\n    actions,\n    icon,\n    className,\n    isPageTitle = false,\n    isBodyList = false,\n    // noTitleWrap = false,\n    smallTitle = false,\n    defaultExpand,\n    nag,\n    onClick,\n    children,\n    secondPane,\n    slimHeader,\n    background,\n    backgroundImage,\n    singlePane,\n    headerActions,\n    accessStatus,\n    gridHeader,\n  } = props;\n\n  const [expanded, setExpanded] = useState(defaultExpand);\n  const expandable = defaultExpand !== undefined;\n\n  return (\n    <section\n      role={onClick ? 'button' : undefined}\n      className={classnames(className, 'card', {\n        'card__multi-pane': Boolean(secondPane),\n        'card--background': background,\n      })}\n      id={id}\n      onClick={(e) => {\n        if (onClick) {\n          onClick();\n          e.stopPropagation();\n        }\n      }}\n    >\n      {backgroundImage && (\n        <div\n          className=\"background\"\n          style={{\n            backgroundImage:\n              'url(https://thumbnails.odycdn.com/optimize/s:390:0/quality:85/plain/' + backgroundImage + ')',\n          }}\n        />\n      )}\n      <FirstPaneWrapper singlePane={singlePane}>\n        {(title || subtitle) && (\n          <div\n            className={classnames('card__header--between', {\n              'card__header--slim': slimHeader,\n              'card__header--grid': gridHeader,\n            })}\n          >\n            <div className={classnames('card__title-section', { 'card__title-section--body-list': isBodyList })}>\n              {icon && <Icon sectionIcon icon={icon} />}\n\n              <div className=\"card__title-text\">\n                <TitleWrapper isPageTitle={isPageTitle} smallTitle={smallTitle} accessStatus={accessStatus}>\n                  {title}\n                </TitleWrapper>\n\n                {subtitle && (\n                  <div className={classnames('card__subtitle', { 'card__subtitle--small': smallTitle })}>\n                    {subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {(titleActions || expandable) && (\n              <div className=\"card__title-actions-container\">\n                {titleActions && (\n                  <div\n                    className={classnames('card__title-actions', {\n                      'card__title-actions--small': smallTitle,\n                    })}\n                  >\n                    {titleActions}\n                  </div>\n                )}\n                {expandable && (\n                  <div className=\"card__title-actions\">\n                    <Button\n                      button=\"alt\"\n                      aria-expanded={expanded}\n                      aria-label={expanded ? __('Less') : __('More')}\n                      icon={expanded ? ICONS.SUBTRACT : ICONS.ADD}\n                      onClick={() => setExpanded(!expanded)}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {headerActions}\n          </div>\n        )}\n\n        {(!expandable || (expandable && expanded)) && (\n          <>\n            {body && (\n              <div\n                className={classnames('card__body', {\n                  'card__body--no-title': !title && !subtitle,\n                  'card__body--list': isBodyList,\n                })}\n              >\n                {body}\n              </div>\n            )}\n            {actions && <div className=\"card__main-actions\">{actions}</div>}\n            {children && <div className=\"card__main-actions\">{children}</div>}\n          </>\n        )}\n\n        {nag}\n      </FirstPaneWrapper>\n\n      {secondPane && <div className=\"card__second-pane\">{secondPane}</div>}\n    </section>\n  );\n}\n\ntype FirstPaneProps = {\n  singlePane?: boolean,\n  children: any,\n};\n\nconst FirstPaneWrapper = (props: FirstPaneProps) => {\n  const { singlePane, children } = props;\n\n  return singlePane ? children : <div className=\"card__first-pane\">{children}</div>;\n};\n\ntype TitleProps = {\n  isPageTitle?: boolean,\n  smallTitle?: boolean,\n  children?: any,\n  emoji?: any,\n  accessStatus?: string,\n};\n\nconst TitleWrapper = (props: TitleProps) => {\n  const { isPageTitle, smallTitle, children, accessStatus } = props;\n\n  /*\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n  */\n\n  const AccessIndicator = (par: any) => {\n    return (\n      <Tooltip title={__('This is a members-only content')}>\n        <div\n          className={classnames('content-access-indicator', {\n            locked: par.status === 'locked',\n            unlocked: par.status === 'unlocked',\n            purchased: par.status === 'purchased',\n          })}\n        >\n          <Icon icon={par.status === 'locked' ? ICONS.LOCK : ICONS.UNLOCK} />\n        </div>\n      </Tooltip>\n    );\n  };\n\n  /*\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return <Twemoji emoji={children?.props?.children[child]} />;\n      }\n    }\n    return children;\n  }\n  */\n  function transformer(children) {\n    for (let child in children?.props?.children) {\n      if (typeof children?.props?.children[child] === 'string') {\n        return children?.props?.children[child];\n      }\n    }\n    return children;\n  }\n\n  return isPageTitle ? (\n    <h1 className=\"card__title\">\n      {accessStatus && <AccessIndicator status={accessStatus} />}\n      <font dangerouslySetInnerHTML={{ __html: transformer(children) }} />\n    </h1>\n  ) : (\n    <h2 className={classnames('card__title', { 'card__title--small': smallTitle })}>{children}</h2>\n  );\n};\n\nexport default Card;\n","// @flow\nimport { SITE_NAME } from 'config';\nimport * as PAGES from 'constants/pages';\nimport React from 'react';\nimport Button from 'component/button';\nimport ClaimPreview from 'component/claimPreview';\nimport Card from 'component/common/card';\nimport { buildURI, parseURI } from 'util/lbryURI';\nimport { ERRORS } from 'lbryinc';\nimport { formatLbryUrlForWeb } from 'util/url';\nimport ContentTab from 'page/claim/internal/claimPageComponent/internal/channelPage/tabs/contentTab';\nimport I18nMessage from 'component/i18nMessage';\nimport Spinner from 'component/spinner';\n\ntype Props = {\n  userHasVerifiedEmail: ?boolean,\n  doClaimRefereeReward: () => void,\n  doUserSetReferrerForUri: (referrerUri: string) => void,\n  referrerSet: ?string,\n  referrerSetError: string,\n  doChannelSubscribe: (sub: Subscription) => void,\n  history: { push: (string) => void, location: { pathname: string } },\n  hasUnclaimedRefereeReward: boolean,\n  referrerUri: ?string,\n  isSubscribed: boolean,\n  channelTitle: string,\n};\n\nfunction Invited(props: Props) {\n  const {\n    userHasVerifiedEmail,\n    doClaimRefereeReward,\n    doUserSetReferrerForUri,\n    referrerSet,\n    referrerSetError,\n    doChannelSubscribe,\n    history,\n    hasUnclaimedRefereeReward,\n    referrerUri,\n    isSubscribed,\n    channelTitle,\n  } = props;\n\n  const {\n    isChannel: referrerIsChannel,\n    channelName: referrerChannelName,\n    channelClaimId: referrerChannelClaimId,\n    streamName: referrerStreamName,\n    streamClaimId: referrerStreamClaimId,\n  } = referrerUri ? parseURI(referrerUri) : {};\n\n  const redirectPath =\n    formatLbryUrlForWeb(\n      buildURI({\n        channelName: referrerChannelName,\n        channelClaimId: referrerChannelClaimId,\n        streamName: referrerStreamName,\n        streamClaimId: referrerStreamClaimId,\n      })\n    ) || '/';\n\n  const referrerCode = getReferrerCodeFromCurrentPath();\n\n  function handleDone() {\n    history.push(redirectPath);\n  }\n\n  function getReferrerCodeFromCurrentPath() {\n    const splitUriArray = history.location.pathname.split('/');\n    return splitUriArray[splitUriArray.length - 1];\n  }\n\n  // always follow if it's a channel\n  React.useEffect(() => {\n    if (referrerIsChannel && !isSubscribed && userHasVerifiedEmail && referrerUri) {\n      let channelName;\n      try {\n        const { claimName } = parseURI(referrerUri);\n        channelName = claimName;\n      } catch (e) {}\n      if (channelName) {\n        doChannelSubscribe({\n          channelName: channelName,\n          uri: referrerUri,\n        });\n      }\n    }\n  }, [referrerUri, isSubscribed, doChannelSubscribe, userHasVerifiedEmail, referrerIsChannel]);\n\n  React.useEffect(() => {\n    if (referrerSet === undefined && userHasVerifiedEmail) {\n      doClaimRefereeReward();\n    }\n  }, [doClaimRefereeReward, userHasVerifiedEmail, referrerSet]);\n\n  React.useEffect(() => {\n    const referrer = referrerUri || referrerCode;\n    if (referrerSet === undefined && referrer) {\n      doUserSetReferrerForUri(referrer);\n    }\n  }, [referrerUri, referrerCode, doUserSetReferrerForUri, referrerSet]);\n\n  const cardProps = React.useMemo(() => ({ body: <ClaimPreview uri={referrerUri} type=\"small\" /> }), [referrerUri]);\n  const cardChildren = React.useMemo(\n    () =>\n      referrerIsChannel && (\n        <div className=\"claim-preview--channel\">\n          <div className=\"section\">\n            <ContentTab uri={referrerUri} defaultPageSize={3} defaultInfiniteScroll={false} />\n          </div>\n        </div>\n      ),\n    [referrerIsChannel, referrerUri]\n  );\n\n  // Case 1: Loading\n  if (referrerSet === undefined && referrerUri) {\n    return (\n      <div className=\"main--empty\">\n        <Spinner />\n      </div>\n    );\n  }\n\n  // Case 2: Already claimed reward\n  if (referrerSetError === ERRORS.ALREADY_CLAIMED) {\n    return (\n      <Card\n        {...cardProps}\n        title={__('Whoa!')}\n        subtitle={\n          referrerIsChannel\n            ? __(\"You've already claimed your referrer, but we've followed this channel for you.\")\n            : __('You already claimed your reward.')\n        }\n        actions={<Button button=\"primary\" label={__('Done!')} onClick={handleDone} />}\n      >\n        {cardChildren}\n      </Card>\n    );\n  }\n\n  // Case 3: No reward to claim (referrer claim is null/deleted, or invite is invalid)\n  if (!referrerSet || (referrerSetError && hasUnclaimedRefereeReward)) {\n    return (\n      <Card\n        {...cardProps}\n        title={__('Welcome!')}\n        subtitle={__(\n          'Something went wrong with your invite link. You can set and claim your invite reward after signing in.'\n        )}\n        actions={\n          <>\n            <p className=\"error__text\">{__('Not a valid invite')}</p>\n\n            <div className=\"section__actions\">\n              <Button\n                button=\"primary\"\n                label={userHasVerifiedEmail ? __('Verify') : __('Sign up')}\n                navigate={\n                  userHasVerifiedEmail ? `/$/${PAGES.REWARDS_VERIFY}` : `/$/${PAGES.AUTH}?redirect=/$/${PAGES.REWARDS}`\n                }\n              />\n              <Button button=\"link\" label={__('Explore')} onClick={handleDone} />\n            </div>\n          </>\n        }\n      >\n        {cardChildren}\n      </Card>\n    );\n  }\n\n  const SignUpButton = (buttonProps: any) => (\n    <Button\n      button=\"link\"\n      label={userHasVerifiedEmail ? __('Finish verification') : __('Sign up')}\n      navigate={\n        userHasVerifiedEmail\n          ? `/$/${PAGES.REWARDS_VERIFY}?redirect=/$/${PAGES.INVITE}${redirectPath}`\n          : `/$/${PAGES.AUTH}?redirect=/$/${PAGES.INVITE}${redirectPath}`\n      }\n      {...buttonProps}\n    />\n  );\n\n  // Case 4: Reward can be claimed\n  return (\n    <Card\n      {...cardProps}\n      title={\n        referrerIsChannel\n          ? __('%channel_name% invites you to the party!', { channel_name: channelTitle })\n          : __(\"You're invited!\")\n      }\n      subtitle={\n        referrerIsChannel ? (\n          <I18nMessage tokens={{ channel_name: channelTitle, signup_link: <SignUpButton />, site_name: SITE_NAME }}>\n            %channel_name% is waiting for you on %site_name%. %signup_link% to follow them.\n          </I18nMessage>\n        ) : (\n          <I18nMessage tokens={{ signup_link: <SignUpButton /> }}>\n            Content freedom and a present are waiting for you. %signup_link% to claim it.\n          </I18nMessage>\n        )\n      }\n      actions={\n        <div className=\"section__actions\">\n          <SignUpButton button=\"primary\" />\n          <Button button=\"link\" label={__('Skip')} onClick={handleDone} />\n        </div>\n      }\n    >\n      {cardChildren}\n    </Card>\n  );\n}\n\nexport default Invited;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { selectUserVerifiedEmail, selectReferrer, selectSetReferrerError } from 'redux/selectors/user';\nimport { doClaimRefereeReward } from 'redux/actions/rewards';\nimport { selectHasUnclaimedRefereeReward } from 'redux/selectors/rewards';\nimport { doUserSetReferrerForUri } from 'redux/actions/user';\nimport { selectIsSubscribedForUri } from 'redux/selectors/subscriptions';\nimport { selectChannelTitleForUri } from 'redux/selectors/claims';\nimport { doChannelSubscribe } from 'redux/actions/subscriptions';\nimport Invited from './view';\n\nconst select = (state, props) => {\n  const { referrerUri } = props;\n\n  return {\n    userHasVerifiedEmail: selectUserVerifiedEmail(state),\n    referrerSet: selectReferrer(state),\n    referrerSetError: selectSetReferrerError(state),\n    hasUnclaimedRefereeReward: selectHasUnclaimedRefereeReward(state),\n    isSubscribed: selectIsSubscribedForUri(state, referrerUri),\n    channelTitle: selectChannelTitleForUri(state, referrerUri),\n  };\n};\n\nconst perform = {\n  doClaimRefereeReward,\n  doUserSetReferrerForUri,\n  doChannelSubscribe,\n};\n\nexport default withRouter(connect(select, perform)(Invited));\n","import { connect } from 'react-redux';\nimport InvitedPage from './view';\nimport { selectPermanentUrlForUri } from 'redux/selectors/claims';\nimport { withRouter } from 'react-router';\nimport { doResolveUri } from 'redux/actions/claims';\n\nconst select = (state, props) => {\n  const { match } = props;\n  const { params } = match;\n  const { referrer } = params;\n  const uri = `lbry://${referrer}`;\n\n  return {\n    uri,\n    referrerUri: selectPermanentUrlForUri(state, uri),\n  };\n};\n\nconst perform = {\n  doResolveUri,\n};\n\nexport default withRouter(connect(select, perform)(InvitedPage));\n","// @flow\nimport React from 'react';\nimport Page from 'component/page';\nimport Invited from './internal/invited';\nimport Spinner from 'component/spinner';\n\ntype Props = {\n  uri: string,\n  referrerUri: ?string,\n  doResolveUri: (uri: string) => void,\n};\nexport default function ReferredPage(props: Props) {\n  const { uri, referrerUri, doResolveUri } = props;\n\n  React.useEffect(() => {\n    if (referrerUri === undefined) {\n      doResolveUri(uri);\n    }\n  }, [doResolveUri, referrerUri, uri]);\n\n  return (\n    <Page authPage>\n      {referrerUri === undefined ? (\n        <div className=\"main--empty\">\n          <Spinner />\n        </div>\n      ) : (\n        <Invited referrerUri={referrerUri} />\n      )}\n    </Page>\n  );\n}\n"],"names":["FirstPaneWrapper","props","singlePane","children","React","className","TitleWrapper","isPageTitle","smallTitle","accessStatus","AccessIndicator","par","Tooltip","title","__","classnames","locked","status","unlocked","purchased","Icon","icon","ICONS","dangerouslySetInnerHTML","__html","child","_children$props","_children$props2","_children$props3","transformer","subtitle","titleActions","id","body","actions","_props$isPageTitle","_props$isBodyList","isBodyList","_props$smallTitle","defaultExpand","nag","_onClick","onClick","secondPane","slimHeader","background","backgroundImage","headerActions","gridHeader","_useState2","_slicedToArray","useState","expanded","setExpanded","expandable","undefined","role","Boolean","e","stopPropagation","style","sectionIcon","Button","button","splitUriArray","userHasVerifiedEmail","doClaimRefereeReward","doUserSetReferrerForUri","referrerSet","referrerSetError","doChannelSubscribe","history","hasUnclaimedRefereeReward","referrerUri","isSubscribed","channelTitle","_ref","parseURI","referrerIsChannel","isChannel","referrerChannelName","channelName","referrerChannelClaimId","channelClaimId","referrerStreamName","streamName","referrerStreamClaimId","streamClaimId","redirectPath","formatLbryUrlForWeb","buildURI","referrerCode","location","pathname","split","length","handleDone","push","claimName","uri","referrer","cardProps","ClaimPreview","type","cardChildren","ContentTab","defaultPageSize","defaultInfiniteScroll","Spinner","ERRORS","Card","_extends","label","navigate","concat","PAGES","SignUpButton","buttonProps","channel_name","I18nMessage","tokens","signup_link","site_name","SITE_NAME","perform","withRouter","connect","state","selectUserVerifiedEmail","selectReferrer","selectSetReferrerError","selectHasUnclaimedRefereeReward","selectIsSubscribedForUri","selectChannelTitleForUri","Invited","doResolveUri","match","params","selectPermanentUrlForUri","Page","authPage"],"sourceRoot":""}