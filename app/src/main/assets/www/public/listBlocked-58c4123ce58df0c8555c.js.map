{"version":3,"file":"listBlocked-58c4123ce58df0c8555c.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/channelBlockButton/view.jsx","webpack://odysee.com/../ui/component/channelBlockButton/index.js","webpack://odysee.com/../ui/component/channelMuteButton/view.jsx","webpack://odysee.com/../ui/component/channelMuteButton/index.js","webpack://odysee.com/../ui/component/common/paginate.jsx","webpack://odysee.com/../ui/effects/use-throttle.js","webpack://odysee.com/../ui/component/blockList/view.jsx","webpack://odysee.com/../ui/component/blockList/index.js","webpack://odysee.com/../ui/page/listBlocked/view.jsx","webpack://odysee.com/../ui/page/listBlocked/index.js"],"sourcesContent":["// @flow\nimport React from 'react';\nimport Button from 'component/button';\nimport { BLOCK_LEVEL } from 'constants/comment';\n\ntype Props = {\n  uri: string,\n  blockLevel?: string,\n  creatorUri?: string,\n  isBlocked: boolean,\n  isBlockingOrUnBlocking: boolean,\n  isToggling: boolean,\n  doCommentModUnBlock: (string, boolean) => void,\n  doCommentModBlock: (string, ?string, ?Number, boolean) => void,\n  doCommentModUnBlockAsAdmin: (string, string) => void,\n  doCommentModBlockAsAdmin: (string, ?string, ?string) => void,\n  doCommentModUnBlockAsModerator: (string, string, string) => void,\n  doCommentModBlockAsModerator: (string, ?string, string, ?string) => void,\n};\n\nfunction ChannelBlockButton(props: Props) {\n  const {\n    uri,\n    blockLevel,\n    creatorUri,\n    doCommentModUnBlock,\n    doCommentModBlock,\n    doCommentModUnBlockAsAdmin,\n    doCommentModBlockAsAdmin,\n    doCommentModUnBlockAsModerator,\n    doCommentModBlockAsModerator,\n    isBlocked,\n    isBlockingOrUnBlocking,\n    isToggling,\n  } = props;\n\n  function handleClick() {\n    switch (blockLevel) {\n      default:\n      case BLOCK_LEVEL.SELF:\n        if (isBlocked) {\n          doCommentModUnBlock(uri, false);\n        } else {\n          doCommentModBlock(uri, undefined, undefined, false);\n        }\n        break;\n\n      case BLOCK_LEVEL.MODERATOR:\n        if (creatorUri) {\n          if (isBlocked) {\n            doCommentModUnBlockAsModerator(uri, creatorUri, '');\n          } else {\n            doCommentModBlockAsModerator(uri, undefined, creatorUri, undefined);\n          }\n        }\n        break;\n\n      case BLOCK_LEVEL.ADMIN:\n        if (isBlocked) {\n          doCommentModUnBlockAsAdmin(uri, '');\n        } else {\n          doCommentModBlockAsAdmin(uri, undefined, undefined);\n        }\n        break;\n    }\n  }\n\n  function getButtonText(blockLevel) {\n    switch (blockLevel) {\n      default:\n      case BLOCK_LEVEL.SELF:\n      case BLOCK_LEVEL.ADMIN:\n        return isBlocked\n          ? isBlockingOrUnBlocking\n            ? __('Unblocking...')\n            : __('Unblock')\n          : isBlockingOrUnBlocking\n          ? __('Blocking...')\n          : __('Block');\n\n      case BLOCK_LEVEL.MODERATOR:\n        if (isToggling) {\n          return isBlocked ? __('Unblocking...') : __('Blocking...');\n        } else {\n          return isBlocked ? __('Unblock') : __('Block');\n        }\n    }\n  }\n\n  return <Button button=\"alt\" label={getButtonText(blockLevel)} onClick={handleClick} />;\n}\n\nexport default ChannelBlockButton;\n","import { connect } from 'react-redux';\nimport { selectClaimIdForUri } from 'redux/selectors/claims';\nimport {\n  doCommentModUnBlock,\n  doCommentModBlock,\n  doCommentModBlockAsAdmin,\n  doCommentModUnBlockAsAdmin,\n  doCommentModUnBlockAsModerator,\n  doCommentModBlockAsModerator,\n} from 'redux/actions/comments';\nimport {\n  makeSelectChannelIsBlocked,\n  makeSelectChannelIsAdminBlocked,\n  makeSelectChannelIsModeratorBlockedForCreator,\n  makeSelectUriIsBlockingOrUnBlocking,\n  makeSelectIsTogglingForDelegator,\n} from 'redux/selectors/comments';\n\nimport { BLOCK_LEVEL } from 'constants/comment';\nimport ChannelBlockButton from './view';\n\nconst select = (state, props) => {\n  let isBlocked;\n  let isToggling;\n\n  switch (props.blockLevel) {\n    default:\n    case BLOCK_LEVEL.SELF:\n      isBlocked = makeSelectChannelIsBlocked(props.uri)(state);\n      break;\n\n    case BLOCK_LEVEL.MODERATOR:\n      isBlocked = makeSelectChannelIsModeratorBlockedForCreator(props.uri, props.creatorUri)(state);\n      isToggling = makeSelectIsTogglingForDelegator(props.uri, props.creatorUri)(state);\n      break;\n\n    case BLOCK_LEVEL.ADMIN:\n      isBlocked = makeSelectChannelIsAdminBlocked(props.uri)(state);\n      break;\n  }\n\n  return {\n    isBlocked,\n    isToggling,\n    isBlockingOrUnBlocking: makeSelectUriIsBlockingOrUnBlocking(props.uri)(state),\n    creatorId: selectClaimIdForUri(state, props.creatorUri),\n  };\n};\n\nexport default connect(select, {\n  doCommentModUnBlock,\n  doCommentModBlock,\n  doCommentModUnBlockAsAdmin,\n  doCommentModBlockAsAdmin,\n  doCommentModUnBlockAsModerator,\n  doCommentModBlockAsModerator,\n})(ChannelBlockButton);\n","// @flow\nimport React from 'react';\nimport Button from 'component/button';\n\ntype Props = {\n  uri: string,\n  isMuted: boolean,\n  channelClaim: ?ChannelClaim,\n  doChannelMute: (string, boolean) => void,\n  doChannelUnmute: (string, boolean) => void,\n};\n\nfunction ChannelMuteButton(props: Props) {\n  const { uri, doChannelMute, doChannelUnmute, isMuted } = props;\n\n  function handleClick() {\n    if (isMuted) {\n      doChannelUnmute(uri, false);\n    } else {\n      doChannelMute(uri, false);\n    }\n  }\n\n  return <Button button=\"alt\" label={isMuted ? __('Unmute') : __('Mute')} onClick={handleClick} />;\n}\n\nexport default ChannelMuteButton;\n","import { connect } from 'react-redux';\nimport { doChannelMute, doChannelUnmute } from 'redux/actions/blocked';\nimport { makeSelectChannelIsMuted } from 'redux/selectors/blocked';\nimport ChannelMuteButton from './view';\n\nconst select = (state, props) => ({\n  isMuted: makeSelectChannelIsMuted(props.uri)(state),\n});\n\nexport default connect(select, {\n  doChannelMute,\n  doChannelUnmute,\n})(ChannelMuteButton);\n","// @flow\nimport React from 'react';\nimport { withRouter } from 'react-router';\nimport { Form, FormField } from 'component/common/form';\nimport ReactPaginate from 'react-paginate';\nimport { useIsMobile } from 'effects/use-screensize';\n\nconst PAGINATE_PARAM = 'page';\n\ntype Props = {\n  totalPages: number,\n  shouldResetPageNumber?: boolean,\n  location: { search: string },\n  history: { push: (string) => void },\n  onPageChange?: (number) => void,\n  disableHistory?: boolean, // Disables the use of '&page=' param and history stack.\n};\n\nfunction Paginate(props: Props) {\n  const { totalPages = 1, shouldResetPageNumber, location, history, onPageChange, disableHistory } = props;\n  const { search } = location;\n  const [textValue, setTextValue] = React.useState('');\n  const urlParams = new URLSearchParams(search);\n  const urlParamPage = Number(urlParams.get(PAGINATE_PARAM));\n  const initialPage = disableHistory ? 1 : urlParamPage || 1;\n  const [currentPage, setCurrentPage] = React.useState(initialPage);\n  const isMobile = useIsMobile();\n  const firstPage = 1;\n\n  function handleChangePage(newPageNumber: number) {\n    if (onPageChange) {\n      onPageChange(newPageNumber);\n    }\n\n    if (currentPage !== newPageNumber) {\n      setCurrentPage(newPageNumber);\n\n      if (!disableHistory) {\n        const params = new URLSearchParams(search);\n        params.set(PAGINATE_PARAM, newPageNumber.toString());\n        history.push('?' + params.toString());\n      }\n    }\n  }\n\n  function handlePaginateKeyUp() {\n    const newPage = Number(textValue);\n    if (newPage && newPage > 0 && newPage <= totalPages) {\n      handleChangePage(newPage);\n    }\n    setTextValue('');\n  }\n\n  if (shouldResetPageNumber && currentPage !== firstPage) {\n    handleChangePage(firstPage);\n  }\n\n  React.useEffect(() => {\n    if (urlParamPage) {\n      setCurrentPage(urlParamPage);\n    }\n  }, [urlParamPage, setCurrentPage]);\n\n  return (\n    // Hide the paginate controls if we are loading or there is only one page\n    // It should still be rendered to trigger the onPageChange callback\n    <Form style={totalPages <= 1 ? { display: 'none' } : null} onSubmit={handlePaginateKeyUp}>\n      <fieldset-group class=\"fieldset-group--smushed fieldgroup--paginate\">\n        <fieldset-section>\n          <ReactPaginate\n            pageCount={totalPages}\n            pageRangeDisplayed={2}\n            previousLabel=\"‹\"\n            nextLabel=\"›\"\n            activeClassName=\"pagination__item--selected\"\n            pageClassName=\"pagination__item\"\n            previousClassName=\"pagination__item pagination__item--previous\"\n            nextClassName=\"pagination__item pagination__item--next\"\n            breakClassName=\"pagination__item pagination__item--break\"\n            marginPagesDisplayed={2}\n            onPageChange={(e) => handleChangePage(e.selected + 1)}\n            forcePage={currentPage - 1}\n            initialPage={currentPage - 1}\n            containerClassName=\"pagination\"\n          />\n        </fieldset-section>\n        {!isMobile && (\n          <FormField\n            value={textValue}\n            onChange={(e) => setTextValue(e.target.value)}\n            className=\"paginate-channel\"\n            label={__('Go to page:')}\n            type=\"text\"\n            name=\"paginate-file\"\n          />\n        )}\n      </fieldset-group>\n    </Form>\n  );\n}\n\nexport default withRouter(Paginate);\n","// @flow\nimport React from 'react';\n\nconst useEffectOnce = (effect) => {\n  React.useEffect(effect, []);\n};\n\nfunction useUnmount(fn: () => any): void {\n  const fnRef = React.useRef(fn);\n\n  // update the ref each render so if it change the newest callback will be invoked\n  fnRef.current = fn;\n\n  useEffectOnce(() => () => fnRef.current());\n}\n\nexport default function useThrottle(value: string, ms: number = 200) {\n  const [state, setState] = React.useState(value);\n  const timeout = React.useRef();\n  const nextValue = React.useRef(null);\n  const hasNextValue = React.useRef(0);\n\n  React.useEffect(() => {\n    if (!timeout.current) {\n      setState(value);\n      const timeoutCallback = () => {\n        if (hasNextValue.current) {\n          hasNextValue.current = false;\n          setState(nextValue.current);\n          timeout.current = setTimeout(timeoutCallback, ms);\n        } else {\n          timeout.current = undefined;\n        }\n      };\n      timeout.current = setTimeout(timeoutCallback, ms);\n    } else {\n      nextValue.current = value;\n      hasNextValue.current = true;\n    }\n  }, [ms, value]);\n\n  useUnmount(() => {\n    timeout.current && clearTimeout(timeout.current);\n  });\n\n  return state;\n}\n","// @flow\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from '@reach/combobox';\n// import '@reach/combobox/styles.css'; --> 'scss/third-party.scss'\nimport { matchSorter } from 'match-sorter';\nimport React from 'react';\nimport classnames from 'classnames';\nimport Button from 'component/button';\nimport ClaimList from 'component/claimList';\nimport Icon from 'component/common/icon';\nimport * as ICONS from 'constants/icons';\nimport Paginate from 'component/common/paginate';\nimport Yrbl from 'component/yrbl';\nimport useThrottle from 'effects/use-throttle';\n\nconst PAGE_SIZE = 10;\n\nfunction reduceUriToChannelName(uri: string) {\n  // 'parseURI' is too slow to handle a large list. Since our list should be\n  // kosher in the first place, just do a quick substring call. Add a\n  // try-catch just in case.\n  try {\n    return uri.substring(uri.indexOf('@') + 1, uri.indexOf('#'));\n  } catch {\n    return uri;\n  }\n}\n\n// ****************************************************************************\n// BlockList\n// ****************************************************************************\n\ntype Props = {\n  uris: Array<string>,\n  help: string,\n  titleEmptyList: string,\n  subtitleEmptyList: string,\n  getActionButtons?: (url: string) => React$Node,\n  className: ?string,\n};\n\nexport default function BlockList(props: Props) {\n  const { uris: list, help, titleEmptyList, subtitleEmptyList, getActionButtons, className } = props;\n\n  // Keep a local list to allow for undoing actions in this component\n  const [localList, setLocalList] = React.useState(undefined);\n  const stringifiedList = JSON.stringify(list);\n  const hasLocalList = localList && localList.length > 0;\n  const justBlocked = list && localList && localList.length < list.length;\n\n  const [page, setPage] = React.useState(1);\n  const [searchList, setSearchList] = React.useState(null); // null: not searching; []: no results;\n  const isShowingSearchResults = searchList !== null;\n\n  let totalPages = 0;\n  let paginatedLocalList;\n  if (localList) {\n    paginatedLocalList = localList.slice((page - 1) * PAGE_SIZE, page * PAGE_SIZE);\n    totalPages = Math.ceil(localList.length / PAGE_SIZE);\n  }\n\n  // **************************************************************************\n  // **************************************************************************\n\n  function getRenderActions() {\n    if (getActionButtons) {\n      return (claim) => <div className=\"section__actions\">{getActionButtons(claim.permanent_url)}</div>;\n    }\n    return undefined;\n  }\n\n  function formatSearchSuggestion(suggestion: string) {\n    return reduceUriToChannelName(suggestion);\n  }\n\n  function filterSearchResults(results: ?Array<string>) {\n    setSearchList(results);\n  }\n\n  // **************************************************************************\n  // **************************************************************************\n\n  React.useEffect(() => {\n    const list = stringifiedList && JSON.parse(stringifiedList);\n    if (!hasLocalList) {\n      setLocalList(list && list.length > 0 ? list : []);\n    }\n  }, [stringifiedList, hasLocalList]);\n\n  React.useEffect(() => {\n    if (justBlocked && stringifiedList) {\n      setLocalList(JSON.parse(stringifiedList));\n    }\n  }, [stringifiedList, justBlocked, setLocalList]);\n\n  // **************************************************************************\n  // **************************************************************************\n\n  if (paginatedLocalList === undefined) {\n    return null;\n  }\n\n  if (!hasLocalList) {\n    return (\n      <div className=\"main--empty\">\n        <Yrbl\n          title={titleEmptyList}\n          subtitle={subtitleEmptyList}\n          actions={\n            <div className=\"section__actions\">\n              <Button button=\"primary\" label={__('Go Home')} navigate=\"/\" />\n            </div>\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"help--notice\">{help}</div>\n      <div className=\"section\" style={{ zIndex: '4' }}>\n        <SearchList\n          list={localList}\n          placeholder={__('e.g. odysee')}\n          formatter={formatSearchSuggestion}\n          onResultsUpdated={filterSearchResults}\n        />\n      </div>\n      <div className={classnames('section block-list', className)}>\n        <ClaimList\n          uris={searchList || paginatedLocalList}\n          showUnresolvedClaims\n          showHiddenByUser\n          hideMenu\n          hideJoin\n          renderActions={getRenderActions()}\n        />\n      </div>\n      {!isShowingSearchResults && <Paginate totalPages={totalPages} disableHistory onPageChange={(p) => setPage(p)} />}\n    </>\n  );\n}\n\n// ****************************************************************************\n// SearchList\n// ****************************************************************************\n\ntype LsbProps = {\n  list: ?Array<string>,\n  placeholder?: string,\n  formatter?: (suggestion: string) => string,\n  onResultsUpdated?: (?Array<string>) => void,\n};\n\nfunction SearchList(props: LsbProps) {\n  const { list, placeholder, formatter, onResultsUpdated } = props;\n  const [term, setTerm] = React.useState('');\n  const results = useAuthorMatch(term, list);\n  const handleChange = (event) => setTerm(event.target.value);\n  const handleSelect = (e) => setTerm(e);\n\n  React.useEffect(() => {\n    if (onResultsUpdated) {\n      onResultsUpdated(results);\n    }\n  }, [results]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"wunderbar__wrapper\">\n      <label>{__('Search blocked channel name')}</label>\n      <Combobox className=\"wunderbar\" onSelect={handleSelect}>\n        <Icon icon={ICONS.SEARCH} />\n        <ComboboxInput selectOnClick className=\"wunderbar__input\" onChange={handleChange} placeholder={placeholder} />\n        {results && (\n          <ComboboxPopover className=\"wunderbar__suggestions\" portal={false}>\n            {results.length > 0 ? (\n              <ComboboxList>\n                {results.slice(0, 10).map((result, index) => (\n                  <ComboboxOption\n                    className=\"wunderbar__more-results\"\n                    key={index}\n                    value={formatter ? formatter(result) : result}\n                  />\n                ))}\n              </ComboboxList>\n            ) : (\n              <span style={{ display: 'block', margin: 8 }}>{__('No results')}</span>\n            )}\n          </ComboboxPopover>\n        )}\n      </Combobox>\n    </div>\n  );\n}\n\nfunction useAuthorMatch(term, list) {\n  const throttledTerm = useThrottle(term, 200);\n  return React.useMemo(() => {\n    return !throttledTerm || throttledTerm.trim() === ''\n      ? null\n      : matchSorter(list, throttledTerm, {\n          keys: [(item) => reduceUriToChannelName(item)],\n          threshold: matchSorter.rankings.CONTAINS,\n        });\n  }, [throttledTerm]); // eslint-disable-line react-hooks/exhaustive-deps\n}\n","import BlockList from './view';\nexport default BlockList;\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport { BLOCK_LEVEL } from 'constants/comment';\nimport React from 'react';\nimport classnames from 'classnames';\nimport moment from 'moment';\nimport humanizeDuration from 'humanize-duration';\nimport BlockList from 'component/blockList';\nimport ClaimPreview from 'component/claimPreview';\nimport Page from 'component/page';\nimport Spinner from 'component/spinner';\nimport Button from 'component/button';\nimport usePersistedState from 'effects/use-persisted-state';\nimport ChannelBlockButton from 'component/channelBlockButton';\nimport ChannelMuteButton from 'component/channelMuteButton';\n\nconst VIEW = {\n  BLOCKED: 'blocked',\n  ADMIN: 'admin',\n  MODERATOR: 'moderator',\n  MUTED: 'muted',\n};\n\ntype Props = {\n  mutedUris: ?Array<string>,\n  personalBlockList: ?Array<string>,\n  adminBlockList: ?Array<string>,\n  moderatorBlockList: ?Array<string>,\n  personalTimeoutMap: { [uri: string]: { blockedAt: string, bannedFor: number, banRemaining: number } },\n  adminTimeoutMap: { [uri: string]: { blockedAt: string, bannedFor: number, banRemaining: number } },\n  moderatorTimeoutMap: { [uri: string]: { blockedAt: string, bannedFor: number, banRemaining: number } },\n  moderatorBlockListDelegatorsMap: { [string]: Array<string> },\n  fetchingModerationBlockList: boolean,\n  appLanguage: string,\n  fetchModBlockedList: () => void,\n  fetchModAmIList: () => void,\n  delegatorsById: { [string]: { global: boolean, delegators: { name: string, claimId: string } } },\n  myChannelClaimIds: ?Array<string>,\n  doResolveUris: (uris: Array<string>) => void,\n};\n\nfunction ListBlocked(props: Props) {\n  const {\n    mutedUris,\n    personalBlockList,\n    adminBlockList,\n    moderatorBlockList,\n    personalTimeoutMap,\n    adminTimeoutMap,\n    moderatorTimeoutMap,\n    moderatorBlockListDelegatorsMap: delegatorsMap,\n    fetchingModerationBlockList,\n    fetchModBlockedList,\n    fetchModAmIList,\n    delegatorsById,\n    myChannelClaimIds,\n    doResolveUris,\n  } = props;\n  const [viewMode, setViewMode] = usePersistedState('blocked-muted:display', VIEW.BLOCKED);\n\n  const [localDelegatorsMap, setLocalDelegatorsMap] = React.useState(undefined);\n\n  const stringifiedDelegatorsMap = JSON.stringify(delegatorsMap);\n  const stringifiedLocalDelegatorsMap = JSON.stringify(localDelegatorsMap);\n\n  const isAdmin = myChannelClaimIds && myChannelClaimIds.some((id) => delegatorsById[id] && delegatorsById[id].global);\n\n  const isModerator =\n    myChannelClaimIds &&\n    myChannelClaimIds.some((id) => delegatorsById[id] && Object.keys(delegatorsById[id].delegators).length > 0);\n\n  const list = getList(viewMode);\n\n  // **************************************************************************\n\n  React.useEffect(() => {\n    doResolveUris(list || []);\n  }, [list, doResolveUris]);\n\n  function getList(view) {\n    switch (view) {\n      case VIEW.BLOCKED:\n        return personalBlockList;\n      case VIEW.ADMIN:\n        return adminBlockList;\n      case VIEW.MODERATOR:\n        return moderatorBlockList;\n      case VIEW.MUTED:\n        return mutedUris;\n    }\n  }\n\n  function getActionButtons(uri) {\n    const getDurationStr = (durationNs) => {\n      const NANO_TO_MS = 1000000;\n      return humanizeDuration(durationNs / NANO_TO_MS, { round: true });\n    };\n\n    const getBanInfoElem = (timeoutInfo) => {\n      return (\n        <div>\n          <div className=\"help\">\n            <blockquote>\n              {moment(timeoutInfo.blockedAt).format('LLL')}\n              <br />\n              {getDurationStr(timeoutInfo.bannedFor)}{' '}\n              {__('(Remaining: %duration%) --[timeout ban duration]--', {\n                duration: getDurationStr(timeoutInfo.banRemaining),\n              })}\n            </blockquote>\n          </div>\n        </div>\n      );\n    };\n\n    switch (viewMode) {\n      case VIEW.BLOCKED:\n        return (\n          <>\n            <ChannelBlockButton uri={uri} />\n            <ChannelMuteButton uri={uri} />\n            {personalTimeoutMap[uri] && getBanInfoElem(personalTimeoutMap[uri])}\n          </>\n        );\n\n      case VIEW.ADMIN:\n        return (\n          <>\n            <ChannelBlockButton uri={uri} blockLevel={BLOCK_LEVEL.ADMIN} />\n            {adminTimeoutMap[uri] && getBanInfoElem(adminTimeoutMap[uri])}\n          </>\n        );\n\n      case VIEW.MODERATOR:\n        const delegatorUrisForBlockedUri = localDelegatorsMap && localDelegatorsMap[uri];\n        if (!delegatorUrisForBlockedUri) return null;\n        return (\n          <>\n            {delegatorUrisForBlockedUri.map((delegatorUri) => {\n              return (\n                <div className=\"block-list--delegator\" key={delegatorUri}>\n                  <label>{__('Blocked on behalf of:')}</label>\n                  <ul className=\"section\">\n                    <div>\n                      <ClaimPreview uri={delegatorUri} hideMenu hideActions hideJoin type=\"inline\" properties={false} />\n                      {moderatorTimeoutMap[uri] && getBanInfoElem(moderatorTimeoutMap[uri])}\n                    </div>\n                    <ChannelBlockButton uri={uri} blockLevel={BLOCK_LEVEL.MODERATOR} creatorUri={delegatorUri} />\n                  </ul>\n                </div>\n              );\n            })}\n          </>\n        );\n\n      case VIEW.MUTED:\n        return (\n          <>\n            <ChannelMuteButton uri={uri} />\n            <ChannelBlockButton uri={uri} />\n          </>\n        );\n    }\n  }\n\n  function getHelpText(view) {\n    switch (view) {\n      case VIEW.BLOCKED:\n        return __(\n          \"Blocked channels will be invisible to you in the app. They will not be able to comment on your content, nor reply to your comments left on other channels' content.\"\n        );\n      case VIEW.ADMIN:\n        return __('This is the global block list.');\n      case VIEW.MODERATOR:\n        return __('List of channels that you have blocked as a moderator, along with the list of delegators.');\n      case VIEW.MUTED:\n        return __(\n          'Muted channels will be invisible to you in the app. They will not know they are muted and can still interact with you and your content.'\n        );\n    }\n  }\n\n  function getEmptyListTitle(view) {\n    switch (view) {\n      case VIEW.BLOCKED:\n        return __('You do not have any blocked channels');\n      case VIEW.MUTED:\n        return __('You do not have any muted channels');\n      case VIEW.ADMIN:\n        return __('You do not have any globally-blocked channels');\n      case VIEW.MODERATOR:\n        return __('You do not have any blocked channels as a moderator');\n    }\n  }\n\n  function getEmptyListSubtitle(view) {\n    switch (view) {\n      case VIEW.BLOCKED:\n      case VIEW.MUTED:\n        return getHelpText(view);\n\n      case VIEW.ADMIN:\n      case VIEW.MODERATOR:\n        return null;\n    }\n  }\n\n  function isSourceListLarger(source, local) {\n    // Comparing the length of stringified is not perfect, but what are the\n    // chances of having different lists with the exact same length?\n    return source && (!local || local.length < source.length);\n  }\n\n  function getViewElem(view, label, icon) {\n    return (\n      <Button\n        icon={icon}\n        button=\"alt\"\n        label={__(label)}\n        className={classnames(`button-toggle`, {\n          'button-toggle--active': viewMode === view,\n        })}\n        onClick={() => setViewMode(view)}\n      />\n    );\n  }\n\n  function getRefreshElem() {\n    return (\n      myChannelClaimIds && (\n        <Button\n          icon={ICONS.REFRESH}\n          button=\"alt\"\n          label={__('Refresh')}\n          onClick={() => {\n            fetchModBlockedList();\n            fetchModAmIList();\n          }}\n        />\n      )\n    );\n  }\n\n  // **************************************************************************\n\n  React.useEffect(() => {\n    if (stringifiedDelegatorsMap && isSourceListLarger(stringifiedDelegatorsMap, stringifiedLocalDelegatorsMap)) {\n      setLocalDelegatorsMap(JSON.parse(stringifiedDelegatorsMap));\n    }\n  }, [stringifiedDelegatorsMap, stringifiedLocalDelegatorsMap]);\n\n  // **************************************************************************\n\n  return (\n    <Page\n      noFooter\n      noSideNavigation\n      settingsPage\n      backout={{ title: __('Blocked and muted channels'), backLabel: __('Back') }}\n    >\n      {fetchingModerationBlockList && (\n        <div className=\"main--empty\">\n          <Spinner />\n        </div>\n      )}\n\n      {!fetchingModerationBlockList && (\n        <>\n          <div className=\"section__header--actions\">\n            <div className=\"section__actions--inline\">\n              {getViewElem(VIEW.BLOCKED, 'Blocked', ICONS.BLOCK)}\n              {isAdmin && getViewElem(VIEW.ADMIN, 'Global', ICONS.BLOCK)}\n              {isModerator && getViewElem(VIEW.MODERATOR, 'Moderator', ICONS.BLOCK)}\n              {getViewElem(VIEW.MUTED, 'Muted', ICONS.MUTE)}\n            </div>\n            <div className=\"section__actions--inline\">{getRefreshElem()}</div>\n          </div>\n\n          <BlockList\n            key={viewMode}\n            uris={list}\n            help={getHelpText(viewMode)}\n            titleEmptyList={getEmptyListTitle(viewMode)}\n            subtitle={getEmptyListSubtitle(viewMode)}\n            getActionButtons={getActionButtons}\n            className={viewMode === VIEW.MODERATOR ? 'block-list--moderator' : undefined}\n          />\n        </>\n      )}\n    </Page>\n  );\n}\n\nexport default ListBlocked;\n","import { connect } from 'react-redux';\nimport { doFetchModBlockedList, doFetchCommentModAmIList } from 'redux/actions/comments';\nimport { selectMutedChannels } from 'redux/selectors/blocked';\nimport {\n  selectModerationBlockList,\n  selectAdminBlockList,\n  selectModeratorBlockList,\n  selectModeratorBlockListDelegatorsMap,\n  selectFetchingModerationBlockList,\n  selectModerationDelegatorsById,\n  selectAdminTimeoutMap,\n  selectModeratorTimeoutMap,\n  selectPersonalTimeoutMap,\n} from 'redux/selectors/comments';\nimport { selectMyChannelClaimIds } from 'redux/selectors/claims';\nimport { doResolveClaimIds, doResolveUris } from 'redux/actions/claims';\nimport ListBlocked from './view';\n\nconst select = (state) => ({\n  mutedUris: selectMutedChannels(state),\n  personalBlockList: selectModerationBlockList(state),\n  adminBlockList: selectAdminBlockList(state),\n  moderatorBlockList: selectModeratorBlockList(state),\n  personalTimeoutMap: selectPersonalTimeoutMap(state),\n  adminTimeoutMap: selectAdminTimeoutMap(state),\n  moderatorTimeoutMap: selectModeratorTimeoutMap(state),\n  moderatorBlockListDelegatorsMap: selectModeratorBlockListDelegatorsMap(state),\n  delegatorsById: selectModerationDelegatorsById(state),\n  myChannelClaimIds: selectMyChannelClaimIds(state),\n  fetchingModerationBlockList: selectFetchingModerationBlockList(state),\n});\n\nconst perform = (dispatch) => ({\n  fetchModBlockedList: () => dispatch(doFetchModBlockedList()),\n  fetchModAmIList: () => dispatch(doFetchCommentModAmIList()),\n  doResolveClaimIds: () => dispatch(doResolveClaimIds()),\n  doResolveUris: (uris) => dispatch(doResolveUris(uris)),\n});\n\nexport default connect(select, perform)(ListBlocked);\n"],"names":["props","uri","blockLevel","creatorUri","doCommentModUnBlock","doCommentModBlock","doCommentModUnBlockAsAdmin","doCommentModBlockAsAdmin","doCommentModUnBlockAsModerator","doCommentModBlockAsModerator","isBlocked","isBlockingOrUnBlocking","isToggling","React","Button","button","label","BLOCK_LEVEL","__","getButtonText","onClick","undefined","connect","state","makeSelectChannelIsBlocked","makeSelectChannelIsModeratorBlockedForCreator","makeSelectIsTogglingForDelegator","makeSelectChannelIsAdminBlocked","makeSelectUriIsBlockingOrUnBlocking","creatorId","selectClaimIdForUri","ChannelBlockButton","doChannelMute","doChannelUnmute","isMuted","makeSelectChannelIsMuted","ChannelMuteButton","PAGINATE_PARAM","withRouter","_props$totalPages","totalPages","shouldResetPageNumber","location","history","onPageChange","disableHistory","search","_React$useState2","_slicedToArray","textValue","setTextValue","urlParams","URLSearchParams","urlParamPage","Number","get","initialPage","_React$useState4","currentPage","setCurrentPage","isMobile","useIsMobile","handleChangePage","newPageNumber","params","set","toString","push","Form","style","display","onSubmit","newPage","class","ReactPaginate","pageCount","pageRangeDisplayed","previousLabel","nextLabel","activeClassName","pageClassName","previousClassName","nextClassName","breakClassName","marginPagesDisplayed","e","selected","forcePage","containerClassName","FormField","value","onChange","target","className","type","name","useEffectOnce","effect","useThrottle","fn","fnRef","ms","arguments","length","setState","timeout","nextValue","hasNextValue","current","setTimeout","timeoutCallback","clearTimeout","PAGE_SIZE","reduceUriToChannelName","substring","indexOf","_unused","SearchList","list","placeholder","formatter","onResultsUpdated","_React$useState8","term","setTerm","results","throttledTerm","trim","matchSorter","keys","item","threshold","useAuthorMatch","Combobox","onSelect","Icon","icon","ICONS","ComboboxInput","selectOnClick","event","ComboboxPopover","portal","ComboboxList","slice","map","result","index","ComboboxOption","key","margin","paginatedLocalList","uris","help","titleEmptyList","subtitleEmptyList","getActionButtons","localList","setLocalList","stringifiedList","JSON","stringify","hasLocalList","justBlocked","page","setPage","_React$useState6","searchList","setSearchList","isShowingSearchResults","Math","ceil","parse","zIndex","suggestion","classnames","ClaimList","showUnresolvedClaims","showHiddenByUser","hideMenu","hideJoin","renderActions","claim","permanent_url","getRenderActions","Paginate","p","Yrbl","title","subtitle","actions","navigate","VIEW","BLOCKED","ADMIN","MODERATOR","MUTED","mutedUris","personalBlockList","adminBlockList","moderatorBlockList","personalTimeoutMap","adminTimeoutMap","moderatorTimeoutMap","delegatorsMap","moderatorBlockListDelegatorsMap","fetchingModerationBlockList","fetchModBlockedList","fetchModAmIList","delegatorsById","myChannelClaimIds","doResolveUris","_usePersistedState2","usePersistedState","viewMode","setViewMode","localDelegatorsMap","setLocalDelegatorsMap","stringifiedDelegatorsMap","stringifiedLocalDelegatorsMap","isAdmin","some","id","global","isModerator","Object","delegators","view","getList","getHelpText","getViewElem","source","local","Page","noFooter","noSideNavigation","settingsPage","backout","backLabel","Spinner","BlockList","getEmptyListTitle","getEmptyListSubtitle","getDurationStr","durationNs","humanizeDuration","round","getBanInfoElem","timeoutInfo","moment","blockedAt","format","bannedFor","duration","banRemaining","delegatorUrisForBlockedUri","delegatorUri","ClaimPreview","hideActions","properties","selectMutedChannels","selectModerationBlockList","selectAdminBlockList","selectModeratorBlockList","selectPersonalTimeoutMap","selectAdminTimeoutMap","selectModeratorTimeoutMap","selectModeratorBlockListDelegatorsMap","selectModerationDelegatorsById","selectMyChannelClaimIds","selectFetchingModerationBlockList","dispatch","doFetchModBlockedList","doFetchCommentModAmIList","doResolveClaimIds","_doResolveClaimIds","_doResolveUris","ListBlocked"],"sourceRoot":""}