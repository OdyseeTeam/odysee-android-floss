{"version":3,"file":"suggestions-5320a49333a3ebe9b8d6.js","mappings":"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","sources":["webpack://odysee.com/../ui/component/common/busy-indicator.jsx","webpack://odysee.com/../ui/component/textareaSuggestionsItem/index.js","webpack://odysee.com/../ui/component/textareaSuggestionsItem/view.jsx","webpack://odysee.com/../ui/component/textareaWithSuggestions/render-option.jsx","webpack://odysee.com/../ui/component/textareaWithSuggestions/render-input.jsx","webpack://odysee.com/../ui/component/textareaWithSuggestions/render-group.jsx","webpack://odysee.com/../ui/component/textareaWithSuggestions/view.jsx","webpack://odysee.com/../ui/component/textareaWithSuggestions/index.js","webpack://odysee.com/../ui/effects/use-lighthouse.js","webpack://odysee.com/../ui/effects/use-throttle.js"],"sourcesContent":["// @flow\nimport React from 'react';\n\ntype Props = {\n  message: ?string,\n};\n\nclass BusyIndicator extends React.PureComponent<Props> {\n  static defaultProps = {\n    message: '',\n  };\n\n  render() {\n    const { message } = this.props;\n\n    return (\n      <span className=\"busy-indicator\">\n        {message} <span className=\"busy-indicator__loader\" />\n      </span>\n    );\n  }\n}\n\nexport default BusyIndicator;\n","import { connect } from 'react-redux';\nimport { selectClaimForUri } from 'redux/selectors/claims';\nimport TextareaSuggestionsItem from './view';\nimport { formatLbryChannelName } from 'util/url';\nimport { getClaimTitle, getChannelIdFromClaim } from 'util/claim';\nimport { selectOdyseeMembershipForChannelId } from 'redux/selectors/memberships';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const claim = uri && selectClaimForUri(state, uri);\n\n  return {\n    odyseeMembership: selectOdyseeMembershipForChannelId(state, getChannelIdFromClaim(claim)),\n    claimLabel: claim && formatLbryChannelName(claim.canonical_url),\n    claimTitle: claim && getClaimTitle(claim),\n  };\n};\n\nexport default connect(select)(TextareaSuggestionsItem);\n","// @flow\nimport ChannelThumbnail from 'component/channelThumbnail';\nimport React from 'react';\nimport MembershipBadge from 'component/membershipBadge';\nimport twemoji from 'twemoji';\n\ntype Props = {\n  claimLabel?: string,\n  claimTitle?: string,\n  emote?: any,\n  uri?: string,\n  emoji?: string,\n  odyseeMembership: ?string,\n};\n\nexport default function TextareaSuggestionsItem(props: Props) {\n  const { claimLabel, claimTitle, emote, uri, odyseeMembership, ...autocompleteProps } = props;\n\n  const Twemoji = ({ emoji }) => (\n    <span\n      dangerouslySetInnerHTML={{\n        __html: twemoji.parse(emoji, {\n          folder: 'svg',\n          ext: '.svg',\n        }),\n      }}\n    />\n  );\n\n  if (emote) {\n    const { name: value, url, unicode } = emote;\n\n    return (\n      <div {...autocompleteProps}>\n        {unicode ? (\n          <div className=\"emote\">\n            <Twemoji emoji={unicode} />\n          </div>\n        ) : (\n          <img className=\"emote\" src={url} />\n        )}\n\n        <div className=\"textarea-suggestion__label\">\n          <span className=\"textarea-suggestion__title textarea-suggestion__value textarea-suggestion__value--emote\">\n            {value}\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  if (claimLabel) {\n    const value = claimLabel;\n\n    return (\n      <div {...autocompleteProps}>\n        <ChannelThumbnail xsmall uri={uri} />\n\n        <div className=\"textarea-suggestion__label\">\n          <span className=\"textarea-suggestion__title\">{claimTitle || value}</span>\n          <span className=\"textarea-suggestion__value\">\n            {value}\n            {odyseeMembership && <MembershipBadge membershipName={odyseeMembership} />}\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n","// @flow\nimport { EMOTES_48px as EMOTES, TWEMOTEARRAY } from 'constants/emotes';\nimport React from 'react';\nimport TextareaSuggestionsItem from 'component/textareaSuggestionsItem';\n\ntype Props = {\n  label: string,\n  isEmote?: boolean,\n  optionProps: any,\n};\n\nconst TextareaSuggestionsOption = (props: Props) => {\n  const { label, isEmote, optionProps } = props;\n\n  const emoteFound =\n    // $FlowIgnore\n    isEmote && (EMOTES.find(({ name }) => name === label) || TWEMOTEARRAY.find(({ name }) => name === label));\n  const emoteValue = emoteFound ? { name: label, url: emoteFound.url } : undefined;\n\n  return <TextareaSuggestionsItem key={label} uri={label} emote={emoteValue} {...optionProps} />;\n};\n\nexport default TextareaSuggestionsOption;\n","// @flow\nimport * as ICONS from 'constants/icons';\nimport React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Button from 'component/button';\nimport Zoom from '@mui/material/Zoom';\n\ntype Props = {\n  params: any,\n  messageValue: string,\n  inputDefaultProps: any,\n  inputRef: any,\n  submitButtonRef?: any,\n  claimIsMine?: boolean,\n  slimInput?: boolean,\n  toggleSelectors: () => any,\n  handleTip: (isLBC: boolean) => void,\n  handleSubmit: () => any,\n  handlePreventClick?: () => void,\n};\n\nconst TextareaSuggestionsInput = (props: Props) => {\n  const {\n    params,\n    messageValue,\n    inputRef,\n    inputDefaultProps,\n    submitButtonRef,\n    claimIsMine,\n    slimInput,\n    toggleSelectors,\n    handleTip,\n    handleSubmit,\n    handlePreventClick,\n  } = props;\n\n  const { InputProps, disabled, fullWidth, id, inputProps: autocompleteInputProps } = params;\n  const inputProps = { ...autocompleteInputProps, ...inputDefaultProps };\n  const autocompleteProps = { InputProps, disabled, fullWidth, id, inputProps };\n\n  if (slimInput) {\n    InputProps.startAdornment = (\n      <Button\n        icon={ICONS.STICKER}\n        onClick={() => {\n          if (handlePreventClick) handlePreventClick();\n          toggleSelectors();\n        }}\n      />\n    );\n    InputProps.endAdornment = (\n      <>\n        {!claimIsMine && (\n          <Button\n            disabled={!messageValue || messageValue.length === 0}\n            icon={ICONS.LBC}\n            onClick={() => handleTip(true)}\n          />\n        )}\n\n        {!claimIsMine && (\n          <Button\n            disabled={!messageValue || messageValue.length === 0}\n            icon={ICONS.FINANCE}\n            onClick={() => handleTip(false)}\n          />\n        )}\n\n        <Zoom in={messageValue ? messageValue.length > 0 : undefined} mountOnEnter unmountOnExit>\n          <div>\n            <Button\n              ref={submitButtonRef}\n              button=\"primary\"\n              icon={ICONS.SUBMIT}\n              iconColor=\"red\"\n              onClick={() => handleSubmit()}\n            />\n          </div>\n        </Zoom>\n      </>\n    );\n\n    return (\n      <TextField inputRef={inputRef} variant=\"outlined\" multiline minRows={1} select={false} {...autocompleteProps} />\n    );\n  }\n\n  return <TextField inputRef={inputRef} multiline select={false} {...autocompleteProps} />;\n};\n\nexport default TextareaSuggestionsInput;\n","// @flow\nimport LbcSymbol from 'component/common/lbc-symbol';\nimport React from 'react';\n\ntype Props = {\n  groupName: string,\n  suggestionTerm?: ?string,\n  searchQuery?: string,\n  children: any,\n};\n\nconst TextareaSuggestionsGroup = (props: Props) => {\n  const { groupName, suggestionTerm, searchQuery, children } = props;\n\n  return (\n    <div key={groupName} className=\"textarea-suggestions__group\">\n      <label className=\"textarea-suggestions__group-label\">\n        {groupName === 'Top' ? (\n          <LbcSymbol prefix={__('Winning Search for %matching_term%', { matching_term: searchQuery })} />\n        ) : suggestionTerm && suggestionTerm.length > 1 ? (\n          __('%group_name% matching %matching_term%', { group_name: groupName, matching_term: suggestionTerm })\n        ) : (\n          groupName\n        )}\n      </label>\n\n      {children}\n      <hr className=\"textarea-suggestions__separator\" />\n    </div>\n  );\n};\n\nexport default TextareaSuggestionsGroup;\n","// @flow\nimport { EMOTES_48px as EMOTES, TWEMOTENAMES } from 'constants/emotes';\nimport { matchSorter } from 'match-sorter';\nimport { LIGHTHOUSE_MIN_CHARACTERS, SEARCH_OPTIONS } from 'constants/search';\nimport * as KEYCODES from 'constants/keycodes';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport BusyIndicator from 'component/common/busy-indicator';\n// import EMOJIS from 'emoji-dictionary';\nimport Popper from '@mui/material/Popper';\nimport React from 'react';\nimport useLighthouse from 'effects/use-lighthouse';\nimport useThrottle from 'effects/use-throttle';\nimport { parseURI } from 'util/lbryURI';\nimport TextareaSuggestionsOption from './render-option';\nimport TextareaSuggestionsInput from './render-input';\nimport TextareaSuggestionsGroup from './render-group';\n\nconst SUGGESTION_REGEX = new RegExp(\n  '((?:^| |\\n)@[^\\\\s=&#$@%?:;/\\\\\"<>%{}|^~[]*(?::[\\\\w]+)?)|((?:^| |\\n):[\\\\w+-]*:?)',\n  'gm'\n);\n\n/** Regex Explained step-by-step:\n *\n * 1) ()|() = different capturing groups (either Mention or Emote)\n * 2) (?:^| |\\n) = only allow for: sentence beginning, space or newline before the match (no words or symbols)\n * 3) [^\\s=&#$@%?:;/\\\\\"<>%{}|^~[]* = anything, except the characters inside\n * 4) (?::[\\w]+)? = A mention can be matched with a ':' as a claim modifier with words or digits after as ID digits,\n * or else it's everything before the ':' (will then match the winning uri for the mention behind since has no canonical ID)\n * 5) :\\w*:? = the emote Regex, possible to be matched with a ':' at the end to consider previously typed emotes\n *\n */\n\nconst SEARCH_SIZE = 10;\nconst INPUT_DEBOUNCE_MS = 1000;\n\ntype Props = {\n  canonicalCommentors?: Array<string>,\n  canonicalCreatorUri?: string,\n  canonicalSearch?: Array<string>,\n  canonicalSubscriptions?: Array<string>,\n  canonicalTop?: string,\n  className?: string,\n  commentorUris?: Array<string>,\n  disabled?: boolean,\n  hasNewResolvedResults?: boolean,\n  id: string,\n  inputRef: any,\n  isLivestream?: boolean,\n  maxLength?: number,\n  placeholder?: string,\n  searchQuery?: string,\n  type?: string,\n  uri?: string,\n  value: any,\n  autoFocus?: boolean,\n  submitButtonRef?: any,\n  spellCheck?: boolean,\n  claimIsMine?: boolean,\n  slimInput?: boolean,\n  doResolveUris: (uris: Array<string>, cache: boolean) => void,\n  doSetMentionSearchResults: (query: string, uris: Array<string>) => void,\n  onBlur: (any) => any,\n  onChange: (any) => any,\n  onFocus: (any) => any,\n  toggleSelectors: () => any,\n  handleTip: (isLBC: boolean) => any,\n  handleSubmit: () => any,\n  handlePreventClick?: () => void,\n};\n\nexport default function TextareaWithSuggestions(props: Props) {\n  const {\n    canonicalCommentors,\n    canonicalCreatorUri,\n    canonicalSearch,\n    canonicalSubscriptions: canonicalSubs,\n    canonicalTop,\n    className,\n    commentorUris,\n    disabled,\n    hasNewResolvedResults,\n    id,\n    inputRef,\n    isLivestream,\n    maxLength,\n    placeholder,\n    searchQuery,\n    type,\n    value: messageValue = '',\n    autoFocus,\n    submitButtonRef,\n    spellCheck,\n    claimIsMine,\n    slimInput,\n    doResolveUris,\n    doSetMentionSearchResults,\n    onBlur,\n    onChange,\n    onFocus,\n    toggleSelectors,\n    handleTip,\n    handleSubmit,\n    handlePreventClick,\n  } = props;\n\n  const inputDefaultProps = { className, placeholder, maxLength, spellCheck, type, disabled };\n\n  const [suggestionValue, setSuggestionValue] = React.useState(undefined);\n  const [highlightedSuggestion, setHighlightedSuggestion] = React.useState('');\n  const [shouldClose, setClose] = React.useState();\n  const [debouncedTerm, setDebouncedTerm] = React.useState('');\n\n  const suggestionTerm = suggestionValue && suggestionValue.term;\n  const isEmote = Boolean(suggestionValue && suggestionValue.isEmote);\n  const isMention = suggestionValue && !suggestionValue.isEmote;\n\n  let invalidTerm = suggestionTerm && isMention && suggestionTerm.charAt(1) === ':';\n  if (isMention && suggestionTerm) {\n    try {\n      parseURI(suggestionTerm);\n    } catch (error) {\n      invalidTerm = true;\n    }\n  }\n\n  const additionalOptions = { isBackgroundSearch: false, [SEARCH_OPTIONS.CLAIM_TYPE]: SEARCH_OPTIONS.INCLUDE_CHANNELS };\n  const { results, loading } = useLighthouse(debouncedTerm, false, SEARCH_SIZE, additionalOptions, 0);\n  const stringifiedResults = JSON.stringify(results);\n\n  const hasMinLength = suggestionTerm && isMention && suggestionTerm.length >= LIGHTHOUSE_MIN_CHARACTERS;\n  const isTyping = isMention && debouncedTerm !== suggestionTerm;\n  const showPlaceholder =\n    isMention && !invalidTerm && (isTyping || loading || (results && results.length > 0 && !hasNewResolvedResults));\n\n  const shouldFilter = (uri, previous) => uri !== canonicalCreatorUri && (!previous || !previous.includes(uri));\n  const filteredCommentors = canonicalCommentors && canonicalCommentors.filter((uri) => shouldFilter(uri));\n  const filteredSubs = canonicalSubs && canonicalSubs.filter((uri) => shouldFilter(uri, filteredCommentors));\n  const filteredTop =\n    canonicalTop &&\n    shouldFilter(canonicalTop, filteredSubs) &&\n    shouldFilter(canonicalTop, filteredCommentors) &&\n    canonicalTop;\n  const filteredSearch =\n    canonicalSearch &&\n    canonicalSearch.filter(\n      (uri) => shouldFilter(uri, filteredSubs) && shouldFilter(uri, filteredCommentors) && uri !== filteredTop\n    );\n\n  let emoteNames;\n  // let emojiNames;\n  const allOptions = [];\n  if (isEmote) {\n    emoteNames = EMOTES.map(({ name }) => name);\n    const emotesAndEmojis = [...emoteNames, ...TWEMOTENAMES];\n\n    allOptions.push(...emotesAndEmojis);\n  } else {\n    if (canonicalCreatorUri) allOptions.push(canonicalCreatorUri);\n    if (filteredSubs) allOptions.push(...filteredSubs);\n    if (filteredCommentors) allOptions.push(...filteredCommentors);\n    if (filteredTop) allOptions.push(filteredTop);\n    if (filteredSearch) allOptions.push(...filteredSearch);\n  }\n\n  const allOptionsGrouped =\n    allOptions.length > 0\n      ? allOptions.map((option) => {\n          const groupName = isEmote\n            ? (emoteNames.includes(option) && __('Emotes')) || (TWEMOTENAMES.includes(option) && __('Emojis'))\n            : (canonicalCreatorUri === option && __('Creator')) ||\n              (filteredSubs && filteredSubs.includes(option) && __('Following')) ||\n              (filteredCommentors && filteredCommentors.includes(option) && __('From Comments')) ||\n              (filteredTop && filteredTop === option && 'Top') ||\n              (filteredSearch && filteredSearch.includes(option) && __('From Search'));\n\n          let emoteLabel;\n          if (isEmote) {\n            // $FlowFixMe\n            emoteLabel = `:${option.replace(/:/g, '')}:`;\n          }\n\n          return {\n            label: emoteLabel || option.replace('lbry://', '').replace('#', ':'),\n            group: groupName,\n          };\n        })\n      : [];\n\n  const allMatches =\n    useSuggestionMatch(\n      suggestionTerm || '',\n      allOptionsGrouped.map(({ label }) => label)\n    ) || [];\n\n  /** --------- **/\n  /** Functions **/\n  /** --------- **/\n\n  function handleInputChange(value: string) {\n    onChange({ target: { value } });\n\n    const cursorIndex = inputRef && inputRef.current && inputRef.current.selectionStart;\n\n    const suggestionMatches = value.match(SUGGESTION_REGEX);\n\n    if (!suggestionMatches) {\n      if (suggestionValue) setSuggestionValue(null);\n      return; // Exit here and avoid unnecessary behavior\n    }\n\n    const exec = SUGGESTION_REGEX.exec(value);\n\n    const previousLastIndexes = [];\n    let isEmote = exec && exec[2];\n    let currentSuggestionIndex = exec && exec.index;\n    let currentLastIndex = exec && SUGGESTION_REGEX.lastIndex;\n    let currentSuggestionValue =\n      cursorIndex >= currentSuggestionIndex &&\n      cursorIndex <= currentLastIndex &&\n      suggestionMatches &&\n      suggestionMatches[0];\n\n    if (suggestionMatches && suggestionMatches.length > 1) {\n      currentSuggestionValue = suggestionMatches.find((match, index) => {\n        const previousLastIndex = previousLastIndexes[index - 1] || 0;\n        const valueWithoutPrevious = value.substring(previousLastIndex);\n\n        const tempRe = new RegExp(SUGGESTION_REGEX);\n        const tempExec = tempRe.exec(valueWithoutPrevious);\n\n        if (tempExec) {\n          isEmote = tempExec && tempExec[2];\n          currentSuggestionIndex = previousLastIndex + tempExec.index;\n          currentLastIndex = previousLastIndex + tempRe.lastIndex;\n          previousLastIndexes.push(currentLastIndex);\n        }\n\n        // the current mention term will be the one on the text cursor's range,\n        // in case of there being more in the same comment message\n        if (previousLastIndexes) {\n          return cursorIndex >= currentSuggestionIndex && cursorIndex <= currentLastIndex;\n        }\n      });\n    }\n\n    if (currentSuggestionValue) {\n      const token = isEmote ? ':' : '@';\n      const tokenIndex = currentSuggestionValue.indexOf(token);\n\n      if (inputRef && inputRef.current) inputRef.current.setAttribute('typing-term', '');\n      // $FlowFixMe\n      setSuggestionValue({\n        beforeTerm: currentSuggestionValue.substring(0, tokenIndex), // in case of a space or newline\n        term: currentSuggestionValue.substring(tokenIndex),\n        index: currentSuggestionIndex,\n        lastIndex: currentLastIndex,\n        isEmote,\n      });\n    } else if (suggestionValue) {\n      inputRef.current.removeAttribute('typing-term');\n      setSuggestionValue(null);\n    }\n  }\n\n  const handleSelect = React.useCallback(\n    (selectedValue: string, key?: number) => {\n      if (!suggestionValue) return;\n      if (!selectedValue) {\n        setSuggestionValue(undefined);\n        setClose(true);\n        return;\n      }\n\n      const elem = inputRef && inputRef.current;\n      // $FlowFixMe\n      const newCursorPos =\n        suggestionValue &&\n        suggestionValue.beforeTerm &&\n        suggestionValue.beforeTerm.length + suggestionValue.index + selectedValue.length + 1;\n      // $FlowFixMe\n      const contentBegin = messageValue.substring(0, suggestionValue.index);\n      // $FlowFixMe\n      const replaceValue = suggestionValue.beforeTerm + selectedValue;\n      // $FlowFixMe\n      const endTo = messageValue.substring(suggestionValue.lastIndex, messageValue.length);\n      // $FlowFixMe\n      const contentEnd = messageValue.length > suggestionValue.lastIndex ? endTo : ' ';\n\n      const newValue = contentBegin + replaceValue + contentEnd;\n\n      onChange({ target: { value: newValue } });\n      setSuggestionValue(null);\n\n      // no keycode === was selected with TAB (function was called by effect) or on click\n      // ENTER is handled on commentCreate after attempting to send on livestream\n      if (!key && inputRef && inputRef.current) inputRef.current.removeAttribute('typing-term');\n\n      elem.focus();\n      elem.setSelectionRange(newCursorPos, newCursorPos);\n    },\n    [messageValue, inputRef, onChange, suggestionValue]\n  );\n\n  /** ------- **/\n  /** Effects **/\n  /** ------- **/\n\n  React.useEffect(() => {\n    if (!autoFocus) return;\n\n    const inputElement = inputRef && inputRef.current;\n    if (inputElement) {\n      inputElement.focus();\n      if (messageValue) inputElement.setSelectionRange(messageValue.length, messageValue.length);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- do NOT listen to messageValue, otherwise will autofocus while typing\n  }, [autoFocus, inputRef]);\n\n  React.useEffect(() => {\n    if (!isMention) return;\n\n    if (isTyping && suggestionTerm && !invalidTerm) {\n      const timer = setTimeout(() => {\n        setDebouncedTerm(!hasMinLength ? '' : suggestionTerm);\n      }, INPUT_DEBOUNCE_MS);\n\n      return () => clearTimeout(timer);\n    }\n  }, [hasMinLength, invalidTerm, isMention, isTyping, suggestionTerm]);\n\n  React.useEffect(() => {\n    if (!stringifiedResults) return;\n\n    const arrayResults = JSON.parse(stringifiedResults);\n    if (debouncedTerm && arrayResults && arrayResults.length > 0) {\n      doResolveUris([debouncedTerm, ...arrayResults], true);\n      doSetMentionSearchResults(debouncedTerm, arrayResults);\n    }\n  }, [debouncedTerm, doResolveUris, doSetMentionSearchResults, stringifiedResults, suggestionTerm]);\n\n  // Only resolve commentors on Livestreams when first trying to mention/looking for it\n  React.useEffect(() => {\n    if (isLivestream && commentorUris && suggestionTerm) doResolveUris(commentorUris, true);\n  }, [commentorUris, doResolveUris, isLivestream, suggestionTerm]);\n\n  // Allow selecting with TAB key\n  React.useEffect(() => {\n    if (!suggestionTerm) return; // only if there is a term, or else can't tab to navigate page\n\n    function handleKeyDown(e: SyntheticKeyboardEvent<*>) {\n      const { keyCode } = e;\n\n      if (highlightedSuggestion && keyCode === KEYCODES.TAB) {\n        e.preventDefault();\n        handleSelect(highlightedSuggestion.label);\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleSelect, highlightedSuggestion, suggestionTerm]);\n\n  // Prevent keyboard keys Up and Down being overriden by MUI listeners when not in use\n  React.useEffect(() => {\n    const inputElement = inputRef && inputRef.current;\n\n    function overrideKeyHandling(event) {\n      const { keyCode } = event;\n\n      if (!suggestionTerm && (keyCode === KEYCODES.UP || keyCode === KEYCODES.DOWN)) {\n        event.stopPropagation();\n      }\n    }\n\n    if (inputElement) {\n      inputElement.addEventListener('keydown', overrideKeyHandling);\n    }\n\n    return () => {\n      if (inputElement) {\n        inputElement.removeEventListener('keydown', overrideKeyHandling);\n      }\n    };\n  }, [inputRef, suggestionTerm]);\n\n  /** ------ **/\n  /** Render **/\n  /** ------ **/\n\n  return (\n    <Autocomplete\n      PopperComponent={AutocompletePopper}\n      autoHighlight\n      disableClearable\n      filterOptions={(options) => options.filter(({ label }) => allMatches.includes(label))}\n      freeSolo\n      fullWidth\n      getOptionLabel={(option) => option.label || ''}\n      groupBy={(option) => option.group}\n      id={id}\n      inputValue={messageValue}\n      loading={allMatches.length === 0 || showPlaceholder}\n      loadingText={showPlaceholder ? <BusyIndicator message={__('Searching...')} /> : __('Nothing found')}\n      onBlur={() => onBlur && onBlur()}\n      /* Different from onInputChange, onChange is only used for the selected value,\n        so here it is acting simply as a selection handler (see it as onSelect) */\n      onChange={(event, value) => handleSelect(value.label, event.keyCode)}\n      onClose={(event, reason) => reason !== 'selectOption' && setClose(true)}\n      onFocus={() => onFocus && onFocus()}\n      onHighlightChange={(event, option) => setHighlightedSuggestion(option)}\n      onInputChange={(event, value, reason) => reason === 'input' && handleInputChange(value)}\n      onOpen={() => suggestionTerm && setClose(false)}\n      /* 'open' is for the popper box component, set to check for a valid term\n        or else it will be displayed all the time as empty (no options) */\n      open={!!suggestionTerm && !shouldClose}\n      options={allOptionsGrouped}\n      renderGroup={({ group, children }) => (\n        <TextareaSuggestionsGroup groupName={group} suggestionTerm={suggestionTerm} searchQuery={searchQuery}>\n          {children}\n        </TextareaSuggestionsGroup>\n      )}\n      renderInput={(params) => (\n        <TextareaSuggestionsInput\n          params={params}\n          messageValue={messageValue}\n          inputRef={inputRef}\n          inputDefaultProps={inputDefaultProps}\n          toggleSelectors={toggleSelectors}\n          handleTip={handleTip}\n          handleSubmit={handleSubmit}\n          handlePreventClick={handlePreventClick}\n          submitButtonRef={submitButtonRef}\n          claimIsMine={claimIsMine}\n          slimInput={slimInput}\n        />\n      )}\n      renderOption={(optionProps, option) => (\n        <TextareaSuggestionsOption label={option.label} isEmote={isEmote} optionProps={optionProps} />\n      )}\n    />\n  );\n}\n\nconst AutocompletePopper = (props: any) => <Popper {...props} placement=\"top\" />;\n\nfunction useSuggestionMatch(term: string, list: Array<string>) {\n  const throttledTerm = useThrottle(term);\n\n  return React.useMemo(() => {\n    return !throttledTerm || throttledTerm.trim() === ''\n      ? undefined\n      : matchSorter(list, term, { keys: [(item) => item] });\n  }, [list, term, throttledTerm]);\n}\n","import { connect } from 'react-redux';\nimport { doResolveUris } from 'redux/actions/claims';\nimport { doSetMentionSearchResults } from 'redux/actions/search';\nimport { makeSelectWinningUriForQuery } from 'redux/selectors/search';\nimport { MAX_LIVESTREAM_COMMENTS } from 'constants/livestream';\nimport { selectChannelMentionData } from 'redux/selectors/comments';\nimport { withRouter } from 'react-router';\nimport TextareaWithSuggestions from './view';\n\nconst select = (state, props) => {\n  const { uri } = props;\n\n  const maxComments = props.isLivestream ? MAX_LIVESTREAM_COMMENTS : -1;\n  const data = selectChannelMentionData(state, uri, maxComments);\n  const {\n    canonicalCommentors,\n    canonicalCreatorUri,\n    canonicalSearch,\n    canonicalSubscriptions,\n    commentorUris,\n    hasNewResolvedResults,\n    query,\n  } = data;\n\n  return {\n    canonicalCommentors,\n    canonicalCreatorUri,\n    canonicalSearch,\n    canonicalSubscriptions,\n    canonicalTop: makeSelectWinningUriForQuery(query)(state),\n    commentorUris,\n    hasNewResolvedResults,\n    searchQuery: query,\n  };\n};\n\nconst perform = {\n  doResolveUris,\n  doSetMentionSearchResults,\n};\n\nexport default withRouter(connect(select, perform)(TextareaWithSuggestions));\n","// @flow\nimport React from 'react';\nimport { lighthouse } from 'redux/actions/search';\nimport { getSearchQueryString } from 'util/query-params';\nimport { isURIValid } from 'util/lbryURI';\nimport useThrottle from './use-throttle';\n\nexport default function useLighthouse(\n  query: string,\n  showMature: boolean,\n  size: number = 5,\n  additionalOptions: any = {},\n  throttleMs: number = 500\n) {\n  const [results, setResults] = React.useState();\n  const [loading, setLoading] = React.useState();\n  const queryString = query ? getSearchQueryString(query, { nsfw: showMature, size, ...additionalOptions }) : '';\n  const throttledQuery = useThrottle(queryString, throttleMs);\n\n  React.useEffect(() => {\n    if (throttledQuery) {\n      setLoading(true);\n      setResults(null);\n\n      let isSubscribed = true;\n      lighthouse\n        .search(throttledQuery)\n        .then(({ body: results }) => {\n          if (isSubscribed) {\n            setResults(\n              results.map((result) => `lbry://${result.name}#${result.claimId}`).filter((uri) => isURIValid(uri))\n            );\n            setLoading(false);\n          }\n        })\n        .catch(() => {\n          setLoading(false);\n        });\n\n      return () => {\n        isSubscribed = false;\n      };\n    }\n  }, [throttledQuery]);\n\n  return { results, loading };\n}\n","// @flow\nimport React from 'react';\n\nconst useEffectOnce = (effect) => {\n  React.useEffect(effect, []);\n};\n\nfunction useUnmount(fn: () => any): void {\n  const fnRef = React.useRef(fn);\n\n  // update the ref each render so if it change the newest callback will be invoked\n  fnRef.current = fn;\n\n  useEffectOnce(() => () => fnRef.current());\n}\n\nexport default function useThrottle(value: string, ms: number = 200) {\n  const [state, setState] = React.useState(value);\n  const timeout = React.useRef();\n  const nextValue = React.useRef(null);\n  const hasNextValue = React.useRef(0);\n\n  React.useEffect(() => {\n    if (!timeout.current) {\n      setState(value);\n      const timeoutCallback = () => {\n        if (hasNextValue.current) {\n          hasNextValue.current = false;\n          setState(nextValue.current);\n          timeout.current = setTimeout(timeoutCallback, ms);\n        } else {\n          timeout.current = undefined;\n        }\n      };\n      timeout.current = setTimeout(timeoutCallback, ms);\n    } else {\n      nextValue.current = value;\n      hasNextValue.current = true;\n    }\n  }, [ms, value]);\n\n  useUnmount(() => {\n    timeout.current && clearTimeout(timeout.current);\n  });\n\n  return state;\n}\n"],"names":["BusyIndicator","_React$PureComponent","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","key","value","message","this","props","React","className","connect","state","uri","claim","selectClaimForUri","odyseeMembership","selectOdyseeMembershipForChannelId","getChannelIdFromClaim","claimLabel","formatLbryChannelName","canonical_url","claimTitle","getClaimTitle","emote","autocompleteProps","_objectWithoutProperties","_excluded","Twemoji","_ref","emoji","dangerouslySetInnerHTML","__html","twemoji","folder","ext","name","url","unicode","src","_value","ChannelThumbnail","xsmall","MembershipBadge","membershipName","label","isEmote","optionProps","emoteFound","EMOTES","TWEMOTEARRAY","_ref2","emoteValue","undefined","TextareaSuggestionsItem","_extends","params","messageValue","inputRef","inputDefaultProps","submitButtonRef","claimIsMine","slimInput","toggleSelectors","handleTip","handleSubmit","handlePreventClick","InputProps","disabled","fullWidth","id","inputProps","_objectSpread","startAdornment","Button","icon","ICONS","onClick","endAdornment","length","Zoom","in","mountOnEnter","unmountOnExit","ref","button","iconColor","TextField","variant","multiline","minRows","select","groupName","suggestionTerm","searchQuery","children","LbcSymbol","prefix","__","matching_term","group_name","SUGGESTION_REGEX","RegExp","SEARCH_SIZE","INPUT_DEBOUNCE_MS","AutocompletePopper","Popper","placement","perform","doResolveUris","doSetMentionSearchResults","withRouter","maxComments","isLivestream","MAX_LIVESTREAM_COMMENTS","data","selectChannelMentionData","canonicalCommentors","canonicalCreatorUri","canonicalSearch","canonicalSubscriptions","commentorUris","hasNewResolvedResults","query","canonicalTop","makeSelectWinningUriForQuery","canonicalSubs","maxLength","placeholder","type","_props$value","autoFocus","spellCheck","_onBlur","onBlur","onChange","_onFocus","onFocus","_React$useState2","_slicedToArray","suggestionValue","setSuggestionValue","_React$useState4","highlightedSuggestion","setHighlightedSuggestion","_React$useState6","shouldClose","setClose","_React$useState8","debouncedTerm","setDebouncedTerm","term","Boolean","isMention","invalidTerm","charAt","parseURI","error","emoteNames","additionalOptions","_defineProperty","isBackgroundSearch","SEARCH_OPTIONS","_useLighthouse","useLighthouse","results","loading","stringifiedResults","JSON","stringify","hasMinLength","LIGHTHOUSE_MIN_CHARACTERS","isTyping","showPlaceholder","shouldFilter","previous","includes","filteredCommentors","filter","filteredSubs","filteredTop","filteredSearch","allOptions","emotesAndEmojis","concat","_toConsumableArray","TWEMOTENAMES","push","list","throttledTerm","allOptionsGrouped","map","option","emoteLabel","replace","group","allMatches","useThrottle","trim","matchSorter","keys","item","handleSelect","selectedValue","elem","current","newCursorPos","beforeTerm","index","contentBegin","substring","replaceValue","endTo","lastIndex","contentEnd","target","removeAttribute","focus","setSelectionRange","inputElement","timer","setTimeout","clearTimeout","arrayResults","parse","window","addEventListener","handleKeyDown","removeEventListener","e","keyCode","KEYCODES","preventDefault","overrideKeyHandling","event","stopPropagation","Autocomplete","PopperComponent","autoHighlight","disableClearable","filterOptions","options","_ref3","freeSolo","getOptionLabel","groupBy","inputValue","loadingText","onClose","reason","onHighlightChange","onInputChange","cursorIndex","selectionStart","suggestionMatches","match","exec","previousLastIndexes","currentSuggestionIndex","currentLastIndex","currentSuggestionValue","find","previousLastIndex","valueWithoutPrevious","tempRe","tempExec","token","tokenIndex","indexOf","setAttribute","handleInputChange","onOpen","open","renderGroup","_ref4","TextareaSuggestionsGroup","renderInput","TextareaSuggestionsInput","renderOption","TextareaSuggestionsOption","showMature","size","throttleMs","setResults","setLoading","queryString","getSearchQueryString","nsfw","throttledQuery","isSubscribed","lighthouse","then","body","result","claimId","isURIValid","useEffectOnce","effect","fn","fnRef","ms","setState","timeout","nextValue","hasNextValue","timeoutCallback"],"sourceRoot":""}