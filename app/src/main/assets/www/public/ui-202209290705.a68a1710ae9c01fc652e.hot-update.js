webpackHotUpdate("ui-202209290705",{

/***/ "../ui/page/channel/internal/membershipChannelTab/view.jsx":
/*!*****************************************************************!*\
  !*** ../ui/page/channel/internal/membershipChannelTab/view.jsx ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(__) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var util_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util/time */ \"../ui/util/time.js\");\n/* harmony import */ var constants_icons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! constants/icons */ \"../ui/constants/icons.js\");\n/* harmony import */ var component_common_card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! component/common/card */ \"../ui/component/common/card.jsx\");\n/* harmony import */ var component_joinMembershipCard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! component/joinMembershipCard */ \"../ui/component/joinMembershipCard/index.js\");\n/* harmony import */ var component_clearMembershipData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! component/clearMembershipData */ \"../ui/component/clearMembershipData/index.js\");\n/* harmony import */ var _reach_menu_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @reach/menu-button */ \"../node_modules/@reach/menu-button/dist/menu-button.esm.js\");\n/* harmony import */ var component_common_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! component/common/icon */ \"../ui/component/common/icon.jsx\");\n\n\n\n\n // import moment from 'moment';\n\n\n\n\n\nvar MembershipChannelTab = function MembershipChannelTab(props) {\n  var uri = props.uri,\n      membershipIndex = props.membershipIndex,\n      purchasedChannelMembership = props.purchasedChannelMembership,\n      doOpenCancelationModalForMembership = props.doOpenCancelationModalForMembership;\n\n  if (!purchasedChannelMembership) {\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(component_joinMembershipCard__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n      uri: uri\n    });\n  } else {\n    delete window.pendingMembership;\n  }\n\n  var MembershipDetails = purchasedChannelMembership.MembershipDetails,\n      Subscription = purchasedChannelMembership.Subscription,\n      Perks = purchasedChannelMembership.Perks; // const { channel_name: creatorChannel } = purchasedChannelMembership.Membership;\n\n  var membershipName = MembershipDetails.name,\n      membershipDescription = MembershipDetails.description;\n  var subscriptionEndDate = Subscription.current_period_end,\n      dateCanceled = Subscription.canceled_at;\n  var membershipIsActive = dateCanceled === 0; // const startDate = subscriptionStartDate * 1000;\n  // const endDate = subscriptionEndDate * 1000;\n  // const amountOfMonths = moment(endDate).diff(moment(startDate), 'months', true);\n  // const timeAgo = amountOfMonths === 1 ? '1 month' : amountOfMonths + ' months';\n\n  var formattedEndOfMembershipDate = Object(util_time__WEBPACK_IMPORTED_MODULE_1__[\"formatDateToMonthAndDay\"])(subscriptionEndDate * 1000);\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(component_common_card__WEBPACK_IMPORTED_MODULE_3__[\"default\"] // title={__('Your %creator_channel_name% membership', { creator_channel_name: creatorChannel })}\n  , {\n    className: \"membership membership-tab\"\n    /*\n    subtitle={\n      <>\n        <span className=\"join-membership-support-time__header\">\n          {__(\n            membershipIsActive\n              ? \"You're supporting %channel_name% for %membership_duration%.\"\n              : 'You supported %channel_name% for %membership_duration%.',\n            { channel_name: creatorChannel, membership_duration: timeAgo }\n          )}\n        </span>\n      </>\n    }\n    */\n    ,\n    body: react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n      className: 'membership__body membership-tier' + membershipIndex\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n      className: \"membership__plan-header\"\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", null, membershipName), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_reach_menu_button__WEBPACK_IMPORTED_MODULE_6__[\"Menu\"], null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_reach_menu_button__WEBPACK_IMPORTED_MODULE_6__[\"MenuButton\"], {\n      className: \"menu__button\"\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(component_common_icon__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n      size: 18,\n      icon: constants_icons__WEBPACK_IMPORTED_MODULE_2__[\"SETTINGS\"]\n    })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_reach_menu_button__WEBPACK_IMPORTED_MODULE_6__[\"MenuList\"], {\n      className: 'menu__list membership-tier' + membershipIndex\n    }, membershipIsActive && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_reach_menu_button__WEBPACK_IMPORTED_MODULE_6__[\"MenuItem\"], {\n      className: \"comment__menu-option\",\n      onSelect: function onSelect() {\n        return doOpenCancelationModalForMembership(purchasedChannelMembership);\n      }\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n      className: \"menu__link\"\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(component_common_icon__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n      size: 16,\n      icon: constants_icons__WEBPACK_IMPORTED_MODULE_2__[\"DELETE\"]\n    }), \" \", __('Cancel Membership')))))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n      className: \"membership__plan-description\"\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", null, __('Description')), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", null, membershipDescription)), Perks && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n      className: \"membership-tier__perks\"\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", null, __('Odysee Perks')), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"ul\", null, Perks.map(function (tierPerk, i) {\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"li\", {\n        key: i,\n        className: \"membership__perk-item\"\n      }, __(tierPerk.name));\n    }))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n      className: \"membership__plan-actions\"\n    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"label\", null, membershipIsActive ? __('This membership will renew on %renewal_date%', {\n      renewal_date: formattedEndOfMembershipDate\n    }) : __('Your cancelled membership will end on %end_date%', {\n      end_date: formattedEndOfMembershipDate\n    })))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(component_clearMembershipData__WEBPACK_IMPORTED_MODULE_5__[\"default\"], null))\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MembershipChannelTab);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! i18n.js */ \"../ui/i18n.js\")[\"__\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdWkvcGFnZS9jaGFubmVsL2ludGVybmFsL21lbWJlcnNoaXBDaGFubmVsVGFiL3ZpZXcuanN4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3VpL3BhZ2UvY2hhbm5lbC9pbnRlcm5hbC9tZW1iZXJzaGlwQ2hhbm5lbFRhYi92aWV3LmpzeD82NGNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZVRvTW9udGhBbmREYXkgfSBmcm9tICd1dGlsL3RpbWUnO1xuaW1wb3J0ICogYXMgSUNPTlMgZnJvbSAnY29uc3RhbnRzL2ljb25zJztcbmltcG9ydCBDYXJkIGZyb20gJ2NvbXBvbmVudC9jb21tb24vY2FyZCc7XG5pbXBvcnQgSm9pbk1lbWJlcnNoaXBDYXJkIGZyb20gJ2NvbXBvbmVudC9qb2luTWVtYmVyc2hpcENhcmQnO1xuLy8gaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IENsZWFyTWVtYmVyc2hpcERhdGFCdXR0b24gZnJvbSAnY29tcG9uZW50L2NsZWFyTWVtYmVyc2hpcERhdGEnO1xuaW1wb3J0IHsgTWVudSwgTWVudUJ1dHRvbiwgTWVudUxpc3QsIE1lbnVJdGVtIH0gZnJvbSAnQHJlYWNoL21lbnUtYnV0dG9uJztcbmltcG9ydCBJY29uIGZyb20gJ2NvbXBvbmVudC9jb21tb24vaWNvbic7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHVyaTogc3RyaW5nLFxuICBtZW1iZXJzaGlwSW5kZXg6IG51bWJlcixcbiAgLy8gLS0gcmVkdXggLS1cbiAgcHVyY2hhc2VkQ2hhbm5lbE1lbWJlcnNoaXA6IE1lbWJlcnNoaXBUaWVyLFxuICBkb09wZW5DYW5jZWxhdGlvbk1vZGFsRm9yTWVtYmVyc2hpcDogKG1lbWJlcnNoaXA6IE1lbWJlcnNoaXBUaWVyKSA9PiB2b2lkLFxuICBuYXZpZ2F0ZTogKHN0cmluZykgPT4gdm9pZCxcbn07XG5cbmNvbnN0IE1lbWJlcnNoaXBDaGFubmVsVGFiID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgdXJpLFxuICAgIG1lbWJlcnNoaXBJbmRleCxcbiAgICAvLyAtLSByZWR1eCAtLVxuICAgIHB1cmNoYXNlZENoYW5uZWxNZW1iZXJzaGlwLFxuICAgIGRvT3BlbkNhbmNlbGF0aW9uTW9kYWxGb3JNZW1iZXJzaGlwLFxuICB9ID0gcHJvcHM7XG5cbiAgaWYgKCFwdXJjaGFzZWRDaGFubmVsTWVtYmVyc2hpcCkge1xuICAgIHJldHVybiA8Sm9pbk1lbWJlcnNoaXBDYXJkIHVyaT17dXJpfSAvPjtcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgd2luZG93LnBlbmRpbmdNZW1iZXJzaGlwO1xuICB9XG5cbiAgY29uc3QgeyBNZW1iZXJzaGlwRGV0YWlscywgU3Vic2NyaXB0aW9uLCBQZXJrcyB9ID0gcHVyY2hhc2VkQ2hhbm5lbE1lbWJlcnNoaXA7XG4gIC8vIGNvbnN0IHsgY2hhbm5lbF9uYW1lOiBjcmVhdG9yQ2hhbm5lbCB9ID0gcHVyY2hhc2VkQ2hhbm5lbE1lbWJlcnNoaXAuTWVtYmVyc2hpcDtcbiAgY29uc3QgeyBuYW1lOiBtZW1iZXJzaGlwTmFtZSwgZGVzY3JpcHRpb246IG1lbWJlcnNoaXBEZXNjcmlwdGlvbiB9ID0gTWVtYmVyc2hpcERldGFpbHM7XG5cbiAgY29uc3Qge1xuICAgIC8vIGN1cnJlbnRfcGVyaW9kX3N0YXJ0OiBzdWJzY3JpcHRpb25TdGFydERhdGUsXG4gICAgY3VycmVudF9wZXJpb2RfZW5kOiBzdWJzY3JpcHRpb25FbmREYXRlLFxuICAgIGNhbmNlbGVkX2F0OiBkYXRlQ2FuY2VsZWQsXG4gIH0gPSBTdWJzY3JpcHRpb247XG5cbiAgY29uc3QgbWVtYmVyc2hpcElzQWN0aXZlID0gZGF0ZUNhbmNlbGVkID09PSAwO1xuICAvLyBjb25zdCBzdGFydERhdGUgPSBzdWJzY3JpcHRpb25TdGFydERhdGUgKiAxMDAwO1xuICAvLyBjb25zdCBlbmREYXRlID0gc3Vic2NyaXB0aW9uRW5kRGF0ZSAqIDEwMDA7XG5cbiAgLy8gY29uc3QgYW1vdW50T2ZNb250aHMgPSBtb21lbnQoZW5kRGF0ZSkuZGlmZihtb21lbnQoc3RhcnREYXRlKSwgJ21vbnRocycsIHRydWUpO1xuICAvLyBjb25zdCB0aW1lQWdvID0gYW1vdW50T2ZNb250aHMgPT09IDEgPyAnMSBtb250aCcgOiBhbW91bnRPZk1vbnRocyArICcgbW9udGhzJztcbiAgY29uc3QgZm9ybWF0dGVkRW5kT2ZNZW1iZXJzaGlwRGF0ZSA9IGZvcm1hdERhdGVUb01vbnRoQW5kRGF5KHN1YnNjcmlwdGlvbkVuZERhdGUgKiAxMDAwKTtcblxuICByZXR1cm4gKFxuICAgIDxDYXJkXG4gICAgICAvLyB0aXRsZT17X18oJ1lvdXIgJWNyZWF0b3JfY2hhbm5lbF9uYW1lJSBtZW1iZXJzaGlwJywgeyBjcmVhdG9yX2NoYW5uZWxfbmFtZTogY3JlYXRvckNoYW5uZWwgfSl9XG4gICAgICBjbGFzc05hbWU9XCJtZW1iZXJzaGlwIG1lbWJlcnNoaXAtdGFiXCJcbiAgICAgIC8qXG4gICAgICBzdWJ0aXRsZT17XG4gICAgICAgIDw+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiam9pbi1tZW1iZXJzaGlwLXN1cHBvcnQtdGltZV9faGVhZGVyXCI+XG4gICAgICAgICAgICB7X18oXG4gICAgICAgICAgICAgIG1lbWJlcnNoaXBJc0FjdGl2ZVxuICAgICAgICAgICAgICAgID8gXCJZb3UncmUgc3VwcG9ydGluZyAlY2hhbm5lbF9uYW1lJSBmb3IgJW1lbWJlcnNoaXBfZHVyYXRpb24lLlwiXG4gICAgICAgICAgICAgICAgOiAnWW91IHN1cHBvcnRlZCAlY2hhbm5lbF9uYW1lJSBmb3IgJW1lbWJlcnNoaXBfZHVyYXRpb24lLicsXG4gICAgICAgICAgICAgIHsgY2hhbm5lbF9uYW1lOiBjcmVhdG9yQ2hhbm5lbCwgbWVtYmVyc2hpcF9kdXJhdGlvbjogdGltZUFnbyB9XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgICAqL1xuICAgICAgYm9keT17XG4gICAgICAgIDw+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9eydtZW1iZXJzaGlwX19ib2R5IG1lbWJlcnNoaXAtdGllcicgKyBtZW1iZXJzaGlwSW5kZXh9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZW1iZXJzaGlwX19wbGFuLWhlYWRlclwiPlxuICAgICAgICAgICAgICA8c3Bhbj57bWVtYmVyc2hpcE5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgICA8TWVudT5cbiAgICAgICAgICAgICAgICA8TWVudUJ1dHRvbiBjbGFzc05hbWU9XCJtZW51X19idXR0b25cIj5cbiAgICAgICAgICAgICAgICAgIDxJY29uIHNpemU9ezE4fSBpY29uPXtJQ09OUy5TRVRUSU5HU30gLz5cbiAgICAgICAgICAgICAgICA8L01lbnVCdXR0b24+XG4gICAgICAgICAgICAgICAgPE1lbnVMaXN0IGNsYXNzTmFtZT17J21lbnVfX2xpc3QgbWVtYmVyc2hpcC10aWVyJyArIG1lbWJlcnNoaXBJbmRleH0+XG4gICAgICAgICAgICAgICAgICB7bWVtYmVyc2hpcElzQWN0aXZlICYmIChcbiAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29tbWVudF9fbWVudS1vcHRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0PXsoKSA9PiBkb09wZW5DYW5jZWxhdGlvbk1vZGFsRm9yTWVtYmVyc2hpcChwdXJjaGFzZWRDaGFubmVsTWVtYmVyc2hpcCl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lbnVfX2xpbmtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uIHNpemU9ezE2fSBpY29uPXtJQ09OUy5ERUxFVEV9IC8+IHtfXygnQ2FuY2VsIE1lbWJlcnNoaXAnKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9NZW51TGlzdD5cbiAgICAgICAgICAgICAgPC9NZW51PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVtYmVyc2hpcF9fcGxhbi1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICA8bGFiZWw+e19fKCdEZXNjcmlwdGlvbicpfTwvbGFiZWw+XG4gICAgICAgICAgICAgIDxzcGFuPnttZW1iZXJzaGlwRGVzY3JpcHRpb259PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIHtQZXJrcyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVtYmVyc2hpcC10aWVyX19wZXJrc1wiPlxuICAgICAgICAgICAgICAgIDxsYWJlbD57X18oJ09keXNlZSBQZXJrcycpfTwvbGFiZWw+XG5cbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICB7UGVya3MubWFwKCh0aWVyUGVyaywgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9XCJtZW1iZXJzaGlwX19wZXJrLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICB7X18odGllclBlcmsubmFtZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVtYmVyc2hpcF9fcGxhbi1hY3Rpb25zXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICB7bWVtYmVyc2hpcElzQWN0aXZlXG4gICAgICAgICAgICAgICAgICA/IF9fKCdUaGlzIG1lbWJlcnNoaXAgd2lsbCByZW5ldyBvbiAlcmVuZXdhbF9kYXRlJScsIHsgcmVuZXdhbF9kYXRlOiBmb3JtYXR0ZWRFbmRPZk1lbWJlcnNoaXBEYXRlIH0pXG4gICAgICAgICAgICAgICAgICA6IF9fKCdZb3VyIGNhbmNlbGxlZCBtZW1iZXJzaGlwIHdpbGwgZW5kIG9uICVlbmRfZGF0ZSUnLCB7IGVuZF9kYXRlOiBmb3JtYXR0ZWRFbmRPZk1lbWJlcnNoaXBEYXRlIH0pfVxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPENsZWFyTWVtYmVyc2hpcERhdGFCdXR0b24gLz5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lbWJlcnNoaXBDaGFubmVsVGFiO1xuIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBUUE7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQWRBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFBQTtBQUFBO0FBQUE7QUF5QkE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWhCQTtBQWlCQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBSUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQVFBO0FBQUE7QUFNQTtBQUFBO0FBSUE7QUFDQTtBQUFBO0FBQUE7QUFqQ0E7QUF5Q0E7QUFBQTtBQUdBO0FBQUE7QUFDQTtBQUFBO0FBaEVBO0FBbENBO0FBQ0E7QUE0R0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../ui/page/channel/internal/membershipChannelTab/view.jsx\n");

/***/ }),

/***/ "../ui/redux/actions/websocket.js":
/*!****************************************!*\
  !*** ../ui/redux/actions/websocket.js ***!
  \****************************************/
/*! exports provided: doSocketConnect, doSocketDisconnect, doNotificationSocketConnect, doCommentSocketConnect, doCommentSocketDisconnect, doCommentSocketConnectAsCommenter, doCommentSocketDisconnectAsCommenter, doSetSocketConnection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doSocketConnect\", function() { return doSocketConnect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doSocketDisconnect\", function() { return doSocketDisconnect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doNotificationSocketConnect\", function() { return doNotificationSocketConnect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doCommentSocketConnect\", function() { return doCommentSocketConnect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doCommentSocketDisconnect\", function() { return doCommentSocketDisconnect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doCommentSocketConnectAsCommenter\", function() { return doCommentSocketConnectAsCommenter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doCommentSocketDisconnectAsCommenter\", function() { return doCommentSocketDisconnectAsCommenter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"doSetSocketConnection\", function() { return doSetSocketConnection; });\n/* harmony import */ var constants_action_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! constants/action_types */ \"../ui/constants/action_types.js\");\n/* harmony import */ var util_saved_passwords__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util/saved-passwords */ \"../ui/util/saved-passwords.js\");\n/* harmony import */ var util_saved_passwords__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util_saved_passwords__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var redux_actions_notifications__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux/actions/notifications */ \"../ui/redux/actions/notifications.js\");\n/* harmony import */ var redux_actions_livestream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux/actions/livestream */ \"../ui/redux/actions/livestream.js\");\n/* harmony import */ var config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! config */ \"../config.js\");\n/* harmony import */ var config__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(config__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar NOTIFICATION_WS_URL = \"\".concat(config__WEBPACK_IMPORTED_MODULE_4__[\"SOCKETY_SERVER_API\"], \"/internal?id=\");\nvar COMMENT_WS_URL = \"\".concat(config__WEBPACK_IMPORTED_MODULE_4__[\"SOCKETY_SERVER_API\"], \"/commentron?id=\");\nvar COMMENT_WS_SUBCATEGORIES = {\n  COMMENTER: 'commenter',\n  VIEWER: 'viewer'\n};\nvar sockets = {};\nvar closingSockets = {};\nvar retryCount = 0;\n\nvar getCommentSocketUrl = function getCommentSocketUrl(claimId, channelName) {\n  return \"\".concat(COMMENT_WS_URL).concat(claimId, \"&category=\").concat(channelName, \"&sub_category=viewer\");\n};\n\nvar getCommentSocketUrlForCommenter = function getCommentSocketUrlForCommenter(claimId, channelName) {\n  return \"\".concat(COMMENT_WS_URL).concat(claimId, \"&category=\").concat(channelName, \"&sub_category=commenter\");\n};\n\nvar doSocketConnect = function doSocketConnect(url, cb, type) {\n  function connectToSocket() {\n    if (sockets[url] !== undefined && sockets[url] !== null) {\n      sockets[url].close();\n      sockets[url] = null;\n    }\n\n    var timeToWait = Math.pow(retryCount, 2) * 1000;\n    setTimeout(function () {\n      sockets[url] = new WebSocket(url);\n\n      sockets[url].onopen = function (e) {\n        retryCount = 0;\n        console.log(\"\\nConnected to \".concat(type, \" WS \\n\\n\")); // eslint-disable-line\n      };\n\n      sockets[url].onmessage = function (e) {\n        var data = JSON.parse(e.data);\n        cb(data);\n      };\n\n      sockets[url].onerror = function (e) {\n        console.log(\"\".concat(type, \" websocket onerror\"), e); // eslint-disable-line\n        // onerror and onclose will both fire, so nothing is needed here\n      };\n\n      sockets[url].onclose = function () {\n        console.log(\"\\n Disconnected from \".concat(type, \" WS \\n\\n\")); // eslint-disable-line\n\n        if (!closingSockets[url]) {\n          retryCount += 1;\n          connectToSocket();\n        } else {\n          closingSockets[url] = null;\n        }\n      };\n    }, timeToWait);\n  }\n\n  connectToSocket();\n};\nvar doSocketDisconnect = function doSocketDisconnect(url) {\n  return function (dispatch) {\n    if (sockets[url] !== undefined && sockets[url] !== null) {\n      closingSockets[url] = true;\n      sockets[url].close();\n      sockets[url] = null;\n      dispatch({\n        type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"WS_DISCONNECT\"]\n      });\n    }\n  };\n};\nvar doNotificationSocketConnect = function doNotificationSocketConnect(enableNotifications) {\n  return function (dispatch) {\n    var authToken = Object(util_saved_passwords__WEBPACK_IMPORTED_MODULE_1__[\"getAuthToken\"])();\n\n    if (!authToken) {\n      console.error('Unable to connect to web socket because auth token is missing'); // eslint-disable-line\n\n      return;\n    }\n\n    var url = \"\".concat(NOTIFICATION_WS_URL).concat(authToken);\n    doSocketConnect(url, function (data) {\n      switch (data.type) {\n        case 'pending_notification':\n          if (enableNotifications) {\n            dispatch(Object(redux_actions_notifications__WEBPACK_IMPORTED_MODULE_2__[\"doNotificationList\"])());\n          }\n\n          break;\n\n        case 'swap-status':\n          dispatch({\n            type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COIN_SWAP_STATUS_RECEIVED\"],\n            data: data.data\n          });\n          break;\n      }\n    }, 'notification');\n  };\n};\nvar doCommentSocketConnect = function doCommentSocketConnect(uri, channelName, claimId, subCategory, protectedEndpoint) {\n  return function (dispatch) {\n    var url = subCategory === COMMENT_WS_SUBCATEGORIES.COMMENTER ? getCommentSocketUrlForCommenter(claimId, channelName) : getCommentSocketUrl(claimId, channelName);\n    doSocketConnect(url, function (response) {\n      if (response.type === 'delta') {\n        var newComment = response.data.comment; // for the protected livechat endpoints endpoint\n\n        var reversedClaimId = claimId.split('').reverse().join('');\n        var claimIdToUse = protectedEndpoint ? reversedClaimId : claimId;\n        dispatch({\n          type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_RECEIVED\"],\n          data: {\n            comment: newComment,\n            claimId: claimIdToUse,\n            uri: uri\n          }\n        });\n      }\n\n      if (response.type === 'viewers') {\n        var connected = response.data.connected;\n        dispatch({\n          type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"VIEWERS_RECEIVED\"],\n          data: {\n            connected: connected,\n            claimId: claimId\n          }\n        });\n      }\n\n      if (response.type === 'pinned') {\n        var pinnedComment = response.data.comment;\n        dispatch({\n          type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_PIN_COMPLETED\"],\n          data: {\n            pinnedComment: pinnedComment,\n            claimId: claimId,\n            unpin: !pinnedComment.is_pinned\n          }\n        });\n      }\n\n      if (response.type === 'removed') {\n        var comment_id = response.data.comment.comment_id;\n        dispatch({\n          type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MARK_AS_REMOVED\"],\n          data: {\n            comment_id: comment_id\n          }\n        });\n      }\n\n      if (response.type === 'setting') {\n        // const membersOnlyChatEnabled = response.data.LivestreamChatMembersOnly;\n        // l('running here');\n        // l(membersOnlyChatEnabled);\n        dispatch({\n          type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MEMBERS_ONLY_CHAT_TOGGLED\"],\n          data: {\n            test: 'hello'\n          }\n        });\n      }\n\n      if (response.type === 'livestream') {\n        var channel_id = response.data.channel_id; // update the live status for the stream\n\n        dispatch(Object(redux_actions_livestream__WEBPACK_IMPORTED_MODULE_3__[\"doFetchChannelLiveStatus\"])(channel_id));\n      }\n    }, \"\".concat(subCategory || COMMENT_WS_SUBCATEGORIES.VIEWER, \" comment\"));\n    dispatch(doSetSocketConnection(true, claimId, subCategory || COMMENT_WS_SUBCATEGORIES.VIEWER));\n  };\n};\nvar doCommentSocketDisconnect = function doCommentSocketDisconnect(claimId, channelName, subCategory) {\n  return function (dispatch) {\n    var url = subCategory === COMMENT_WS_SUBCATEGORIES.COMMENTER ? getCommentSocketUrlForCommenter(claimId, channelName) : getCommentSocketUrl(claimId, channelName);\n    dispatch(doSocketDisconnect(url));\n    dispatch(doSetSocketConnection(false, claimId, subCategory));\n  };\n};\nvar doCommentSocketConnectAsCommenter = function doCommentSocketConnectAsCommenter(uri, channelName, claimId) {\n  return function (dispatch) {\n    return dispatch(doCommentSocketConnect(uri, channelName, claimId, COMMENT_WS_SUBCATEGORIES.COMMENTER));\n  };\n};\nvar doCommentSocketDisconnectAsCommenter = function doCommentSocketDisconnectAsCommenter(claimId, channelName) {\n  return function (dispatch) {\n    return dispatch(doCommentSocketDisconnect(claimId, channelName, COMMENT_WS_SUBCATEGORIES.COMMENTER));\n  };\n};\nvar doSetSocketConnection = function doSetSocketConnection(connected, id, subCategory) {\n  return function (dispatch) {\n    return dispatch({\n      type: constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"SOCKET_CONNECTED_BY_ID\"],\n      data: {\n        connected: connected,\n        sub_category: subCategory,\n        id: id\n      }\n    });\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vdWkvcmVkdXgvYWN0aW9ucy93ZWJzb2NrZXQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vdWkvcmVkdXgvYWN0aW9ucy93ZWJzb2NrZXQuanM/ZThlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBQ1RJT05TIGZyb20gJ2NvbnN0YW50cy9hY3Rpb25fdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QXV0aFRva2VuIH0gZnJvbSAndXRpbC9zYXZlZC1wYXNzd29yZHMnO1xuaW1wb3J0IHsgZG9Ob3RpZmljYXRpb25MaXN0IH0gZnJvbSAncmVkdXgvYWN0aW9ucy9ub3RpZmljYXRpb25zJztcbmltcG9ydCB7IGRvRmV0Y2hDaGFubmVsTGl2ZVN0YXR1cyB9IGZyb20gJ3JlZHV4L2FjdGlvbnMvbGl2ZXN0cmVhbSc7XG5pbXBvcnQgeyBTT0NLRVRZX1NFUlZFUl9BUEkgfSBmcm9tICdjb25maWcnO1xuXG5jb25zdCBOT1RJRklDQVRJT05fV1NfVVJMID0gYCR7U09DS0VUWV9TRVJWRVJfQVBJfS9pbnRlcm5hbD9pZD1gO1xuY29uc3QgQ09NTUVOVF9XU19VUkwgPSBgJHtTT0NLRVRZX1NFUlZFUl9BUEl9L2NvbW1lbnRyb24/aWQ9YDtcbmNvbnN0IENPTU1FTlRfV1NfU1VCQ0FURUdPUklFUyA9IHtcbiAgQ09NTUVOVEVSOiAnY29tbWVudGVyJyxcbiAgVklFV0VSOiAndmlld2VyJyxcbn07XG5cbmxldCBzb2NrZXRzID0ge307XG5sZXQgY2xvc2luZ1NvY2tldHMgPSB7fTtcbmxldCByZXRyeUNvdW50ID0gMDtcblxuY29uc3QgZ2V0Q29tbWVudFNvY2tldFVybCA9IChjbGFpbUlkLCBjaGFubmVsTmFtZSkgPT4ge1xuICByZXR1cm4gYCR7Q09NTUVOVF9XU19VUkx9JHtjbGFpbUlkfSZjYXRlZ29yeT0ke2NoYW5uZWxOYW1lfSZzdWJfY2F0ZWdvcnk9dmlld2VyYDtcbn07XG5cbmNvbnN0IGdldENvbW1lbnRTb2NrZXRVcmxGb3JDb21tZW50ZXIgPSAoY2xhaW1JZCwgY2hhbm5lbE5hbWUpID0+IHtcbiAgcmV0dXJuIGAke0NPTU1FTlRfV1NfVVJMfSR7Y2xhaW1JZH0mY2F0ZWdvcnk9JHtjaGFubmVsTmFtZX0mc3ViX2NhdGVnb3J5PWNvbW1lbnRlcmA7XG59O1xuXG5leHBvcnQgY29uc3QgZG9Tb2NrZXRDb25uZWN0ID0gKHVybCwgY2IsIHR5cGUpID0+IHtcbiAgZnVuY3Rpb24gY29ubmVjdFRvU29ja2V0KCkge1xuICAgIGlmIChzb2NrZXRzW3VybF0gIT09IHVuZGVmaW5lZCAmJiBzb2NrZXRzW3VybF0gIT09IG51bGwpIHtcbiAgICAgIHNvY2tldHNbdXJsXS5jbG9zZSgpO1xuICAgICAgc29ja2V0c1t1cmxdID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0aW1lVG9XYWl0ID0gcmV0cnlDb3VudCAqKiAyICogMTAwMDtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNvY2tldHNbdXJsXSA9IG5ldyBXZWJTb2NrZXQodXJsKTtcbiAgICAgIHNvY2tldHNbdXJsXS5vbm9wZW4gPSAoZSkgPT4ge1xuICAgICAgICByZXRyeUNvdW50ID0gMDtcbiAgICAgICAgY29uc29sZS5sb2coYFxcbkNvbm5lY3RlZCB0byAke3R5cGV9IFdTIFxcblxcbmApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICB9O1xuXG4gICAgICBzb2NrZXRzW3VybF0ub25tZXNzYWdlID0gKGUpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICAgICAgY2IoZGF0YSk7XG4gICAgICB9O1xuXG4gICAgICBzb2NrZXRzW3VybF0ub25lcnJvciA9IChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke3R5cGV9IHdlYnNvY2tldCBvbmVycm9yYCwgZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgLy8gb25lcnJvciBhbmQgb25jbG9zZSB3aWxsIGJvdGggZmlyZSwgc28gbm90aGluZyBpcyBuZWVkZWQgaGVyZVxuICAgICAgfTtcblxuICAgICAgc29ja2V0c1t1cmxdLm9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBcXG4gRGlzY29ubmVjdGVkIGZyb20gJHt0eXBlfSBXUyBcXG5cXG5gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICBpZiAoIWNsb3NpbmdTb2NrZXRzW3VybF0pIHtcbiAgICAgICAgICByZXRyeUNvdW50ICs9IDE7XG4gICAgICAgICAgY29ubmVjdFRvU29ja2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2luZ1NvY2tldHNbdXJsXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSwgdGltZVRvV2FpdCk7XG4gIH1cblxuICBjb25uZWN0VG9Tb2NrZXQoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkb1NvY2tldERpc2Nvbm5lY3QgPSAodXJsKSA9PiAoZGlzcGF0Y2gpID0+IHtcbiAgaWYgKHNvY2tldHNbdXJsXSAhPT0gdW5kZWZpbmVkICYmIHNvY2tldHNbdXJsXSAhPT0gbnVsbCkge1xuICAgIGNsb3NpbmdTb2NrZXRzW3VybF0gPSB0cnVlO1xuICAgIHNvY2tldHNbdXJsXS5jbG9zZSgpO1xuICAgIHNvY2tldHNbdXJsXSA9IG51bGw7XG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBQ1RJT05TLldTX0RJU0NPTk5FQ1QsXG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBkb05vdGlmaWNhdGlvblNvY2tldENvbm5lY3QgPSAoZW5hYmxlTm90aWZpY2F0aW9ucykgPT4gKGRpc3BhdGNoKSA9PiB7XG4gIGNvbnN0IGF1dGhUb2tlbiA9IGdldEF1dGhUb2tlbigpO1xuICBpZiAoIWF1dGhUb2tlbikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBjb25uZWN0IHRvIHdlYiBzb2NrZXQgYmVjYXVzZSBhdXRoIHRva2VuIGlzIG1pc3NpbmcnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHVybCA9IGAke05PVElGSUNBVElPTl9XU19VUkx9JHthdXRoVG9rZW59YDtcblxuICBkb1NvY2tldENvbm5lY3QoXG4gICAgdXJsLFxuICAgIChkYXRhKSA9PiB7XG4gICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICBjYXNlICdwZW5kaW5nX25vdGlmaWNhdGlvbic6XG4gICAgICAgICAgaWYgKGVuYWJsZU5vdGlmaWNhdGlvbnMpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGRvTm90aWZpY2F0aW9uTGlzdCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N3YXAtc3RhdHVzJzpcbiAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiBBQ1RJT05TLkNPSU5fU1dBUF9TVEFUVVNfUkVDRUlWRUQsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGEsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSxcbiAgICAnbm90aWZpY2F0aW9uJ1xuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGRvQ29tbWVudFNvY2tldENvbm5lY3QgPSAodXJpLCBjaGFubmVsTmFtZSwgY2xhaW1JZCwgc3ViQ2F0ZWdvcnksIHByb3RlY3RlZEVuZHBvaW50KSA9PiAoZGlzcGF0Y2gpID0+IHtcbiAgY29uc3QgdXJsID1cbiAgICBzdWJDYXRlZ29yeSA9PT0gQ09NTUVOVF9XU19TVUJDQVRFR09SSUVTLkNPTU1FTlRFUlxuICAgICAgPyBnZXRDb21tZW50U29ja2V0VXJsRm9yQ29tbWVudGVyKGNsYWltSWQsIGNoYW5uZWxOYW1lKVxuICAgICAgOiBnZXRDb21tZW50U29ja2V0VXJsKGNsYWltSWQsIGNoYW5uZWxOYW1lKTtcblxuICBkb1NvY2tldENvbm5lY3QoXG4gICAgdXJsLFxuICAgIChyZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICdkZWx0YScpIHtcbiAgICAgICAgY29uc3QgbmV3Q29tbWVudCA9IHJlc3BvbnNlLmRhdGEuY29tbWVudDtcblxuICAgICAgICAvLyBmb3IgdGhlIHByb3RlY3RlZCBsaXZlY2hhdCBlbmRwb2ludHMgZW5kcG9pbnRcbiAgICAgICAgY29uc3QgcmV2ZXJzZWRDbGFpbUlkID0gY2xhaW1JZC5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xuICAgICAgICBjb25zdCBjbGFpbUlkVG9Vc2UgPSBwcm90ZWN0ZWRFbmRwb2ludCA/IHJldmVyc2VkQ2xhaW1JZCA6IGNsYWltSWQ7XG5cbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6IEFDVElPTlMuQ09NTUVOVF9SRUNFSVZFRCxcbiAgICAgICAgICBkYXRhOiB7IGNvbW1lbnQ6IG5ld0NvbW1lbnQsIGNsYWltSWQ6IGNsYWltSWRUb1VzZSwgdXJpIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICd2aWV3ZXJzJykge1xuICAgICAgICBjb25zdCBjb25uZWN0ZWQgPSByZXNwb25zZS5kYXRhLmNvbm5lY3RlZDtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6IEFDVElPTlMuVklFV0VSU19SRUNFSVZFRCxcbiAgICAgICAgICBkYXRhOiB7IGNvbm5lY3RlZCwgY2xhaW1JZCB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNwb25zZS50eXBlID09PSAncGlubmVkJykge1xuICAgICAgICBjb25zdCBwaW5uZWRDb21tZW50ID0gcmVzcG9uc2UuZGF0YS5jb21tZW50O1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogQUNUSU9OUy5DT01NRU5UX1BJTl9DT01QTEVURUQsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcGlubmVkQ29tbWVudDogcGlubmVkQ29tbWVudCxcbiAgICAgICAgICAgIGNsYWltSWQsXG4gICAgICAgICAgICB1bnBpbjogIXBpbm5lZENvbW1lbnQuaXNfcGlubmVkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICdyZW1vdmVkJykge1xuICAgICAgICBjb25zdCB7IGNvbW1lbnRfaWQgfSA9IHJlc3BvbnNlLmRhdGEuY29tbWVudDtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6IEFDVElPTlMuQ09NTUVOVF9NQVJLX0FTX1JFTU9WRUQsXG4gICAgICAgICAgZGF0YTogeyBjb21tZW50X2lkIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2UudHlwZSA9PT0gJ3NldHRpbmcnKSB7XG4gICAgICAgIC8vIGNvbnN0IG1lbWJlcnNPbmx5Q2hhdEVuYWJsZWQgPSByZXNwb25zZS5kYXRhLkxpdmVzdHJlYW1DaGF0TWVtYmVyc09ubHk7XG5cbiAgICAgICAgLy8gbCgncnVubmluZyBoZXJlJyk7XG4gICAgICAgIC8vIGwobWVtYmVyc09ubHlDaGF0RW5hYmxlZCk7XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBBQ1RJT05TLkNPTU1FTlRfTUVNQkVSU19PTkxZX0NIQVRfVE9HR0xFRCxcbiAgICAgICAgICBkYXRhOiB7IHRlc3Q6ICdoZWxsbycgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZS50eXBlID09PSAnbGl2ZXN0cmVhbScpIHtcbiAgICAgICAgY29uc3QgeyBjaGFubmVsX2lkIH0gPSByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgbGl2ZSBzdGF0dXMgZm9yIHRoZSBzdHJlYW1cbiAgICAgICAgZGlzcGF0Y2goZG9GZXRjaENoYW5uZWxMaXZlU3RhdHVzKGNoYW5uZWxfaWQpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGAke3N1YkNhdGVnb3J5IHx8IENPTU1FTlRfV1NfU1VCQ0FURUdPUklFUy5WSUVXRVJ9IGNvbW1lbnRgXG4gICk7XG5cbiAgZGlzcGF0Y2goZG9TZXRTb2NrZXRDb25uZWN0aW9uKHRydWUsIGNsYWltSWQsIHN1YkNhdGVnb3J5IHx8IENPTU1FTlRfV1NfU1VCQ0FURUdPUklFUy5WSUVXRVIpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkb0NvbW1lbnRTb2NrZXREaXNjb25uZWN0ID0gKGNsYWltSWQsIGNoYW5uZWxOYW1lLCBzdWJDYXRlZ29yeSkgPT4gKGRpc3BhdGNoKSA9PiB7XG4gIGNvbnN0IHVybCA9XG4gICAgc3ViQ2F0ZWdvcnkgPT09IENPTU1FTlRfV1NfU1VCQ0FURUdPUklFUy5DT01NRU5URVJcbiAgICAgID8gZ2V0Q29tbWVudFNvY2tldFVybEZvckNvbW1lbnRlcihjbGFpbUlkLCBjaGFubmVsTmFtZSlcbiAgICAgIDogZ2V0Q29tbWVudFNvY2tldFVybChjbGFpbUlkLCBjaGFubmVsTmFtZSk7XG5cbiAgZGlzcGF0Y2goZG9Tb2NrZXREaXNjb25uZWN0KHVybCkpO1xuICBkaXNwYXRjaChkb1NldFNvY2tldENvbm5lY3Rpb24oZmFsc2UsIGNsYWltSWQsIHN1YkNhdGVnb3J5KSk7XG59O1xuXG5leHBvcnQgY29uc3QgZG9Db21tZW50U29ja2V0Q29ubmVjdEFzQ29tbWVudGVyID0gKHVyaSwgY2hhbm5lbE5hbWUsIGNsYWltSWQpID0+IChkaXNwYXRjaCkgPT5cbiAgZGlzcGF0Y2goZG9Db21tZW50U29ja2V0Q29ubmVjdCh1cmksIGNoYW5uZWxOYW1lLCBjbGFpbUlkLCBDT01NRU5UX1dTX1NVQkNBVEVHT1JJRVMuQ09NTUVOVEVSKSk7XG5cbmV4cG9ydCBjb25zdCBkb0NvbW1lbnRTb2NrZXREaXNjb25uZWN0QXNDb21tZW50ZXIgPSAoY2xhaW1JZCwgY2hhbm5lbE5hbWUpID0+IChkaXNwYXRjaCkgPT5cbiAgZGlzcGF0Y2goZG9Db21tZW50U29ja2V0RGlzY29ubmVjdChjbGFpbUlkLCBjaGFubmVsTmFtZSwgQ09NTUVOVF9XU19TVUJDQVRFR09SSUVTLkNPTU1FTlRFUikpO1xuXG5leHBvcnQgY29uc3QgZG9TZXRTb2NrZXRDb25uZWN0aW9uID0gKGNvbm5lY3RlZCwgaWQsIHN1YkNhdGVnb3J5KSA9PiAoZGlzcGF0Y2gpID0+XG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBQ1RJT05TLlNPQ0tFVF9DT05ORUNURURfQllfSUQsXG4gICAgZGF0YTogeyBjb25uZWN0ZWQsIHN1Yl9jYXRlZ29yeTogc3ViQ2F0ZWdvcnksIGlkIH0sXG4gIH0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBR0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBUEE7QUFqQkE7QUEyQkE7QUFDQTtBQUNBO0FBckNBO0FBd0NBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFEQTtBQUdBO0FBVEE7QUFBQTtBQVlBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFYQTtBQUhBO0FBVEE7QUFBQTtBQThCQTtBQUFBO0FBQ0E7QUFLQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUZBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFGQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFGQTtBQVFBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUF6REE7QUE4REE7QUFwRUE7QUFBQTtBQXVFQTtBQUFBO0FBQ0E7QUFLQTtBQUNBO0FBUEE7QUFBQTtBQVVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRkE7QUFEQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../ui/redux/actions/websocket.js\n");

/***/ }),

/***/ "../ui/redux/reducers/comments.js":
/*!****************************************!*\
  !*** ../ui/redux/reducers/comments.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var constants_action_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! constants/action_types */ \"../ui/constants/action_types.js\");\n/* harmony import */ var util_redux_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util/redux-utils */ \"../ui/util/redux-utils.js\");\n/* harmony import */ var constants_comment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! constants/comment */ \"../ui/constants/comment.js\");\n/* harmony import */ var util_lbryURI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util/lbryURI */ \"../ui/util/lbryURI.js\");\nvar _handleActions;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\n\n\n\n // See 'CommentsState' for documentation.\n\nvar defaultState = {\n  commentById: {},\n  byId: {},\n  totalCommentsById: {},\n  repliesByParentId: {},\n  repliesTotalPagesByParentId: {},\n  topLevelCommentsById: {},\n  topLevelTotalPagesById: {},\n  topLevelTotalCommentsById: {},\n  // TODO:\n  // Remove commentsByUri\n  // It is not needed and doesn't provide anything but confusion\n  commentsByUri: {},\n  // URI -> claimId\n  fetchedCommentAncestors: {},\n  superChatsByUri: {},\n  pinnedCommentsById: {},\n  isLoading: false,\n  isLoadingById: false,\n  isLoadingByParentId: {},\n  isCommenting: false,\n  myComments: undefined,\n  isFetchingReacts: false,\n  pendingCommentReactions: [],\n  typesReacting: [],\n  myReactsByCommentId: undefined,\n  othersReactsByCommentId: undefined,\n  moderationBlockList: undefined,\n  adminBlockList: undefined,\n  moderatorBlockList: undefined,\n  moderatorBlockListDelegatorsMap: {},\n  fetchingModerationBlockList: false,\n  moderationDelegatesById: {},\n  fetchingModerationDelegates: false,\n  moderationDelegatorsById: {},\n  fetchingModerationDelegators: false,\n  blockingByUri: {},\n  unBlockingByUri: {},\n  personalTimeoutMap: {},\n  adminTimeoutMap: {},\n  moderatorTimeoutMap: {},\n  togglingForDelegatorMap: {},\n  settingsByChannelId: {},\n  fetchingSettings: false,\n  fetchingBlockedWords: false,\n  myCommentedChannelIdsById: {}\n}; // ****************************************************************************\n// Immutable helpers\n// ****************************************************************************\n\nfunction immPushToArrayInObject(obj, key, valueToPush) {\n  if (!obj[key]) {\n    obj[key] = [valueToPush];\n  } else if (!obj[key].includes(valueToPush)) {\n    // Filter duplicates\n    obj[key] = obj[key].concat(valueToPush);\n  }\n}\n\nfunction immConcatToArrayInObject(obj, key, arrayToMerge) {\n  if (obj[key]) {\n    obj[key] = obj[key].concat(arrayToMerge);\n  } else {\n    obj[key] = arrayToMerge;\n  }\n}\n\nfunction immPrefixArrayInObject(obj, key, valueToInsert) {\n  if (obj[key]) {\n    obj[key] = [valueToInsert].concat(_toConsumableArray(obj[key]));\n  } else {\n    obj[key] = [valueToInsert];\n  }\n} // ****************************************************************************\n// ****************************************************************************\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(util_redux_utils__WEBPACK_IMPORTED_MODULE_1__[\"handleActions\"])((_handleActions = {}, _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_CREATE_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isCommenting: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_CREATE_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isCommenting: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_CREATE_COMPLETED\"], function (state, action) {\n  var _action$data = action.data,\n      comment = _action$data.comment,\n      claimId = _action$data.claimId,\n      uri = _action$data.uri,\n      livestream = _action$data.livestream;\n  var commentById = Object.assign({}, state.commentById);\n  var byId = Object.assign({}, state.byId);\n  var totalCommentsById = Object.assign({}, state.totalCommentsById);\n  var topLevelCommentsById = Object.assign({}, state.topLevelCommentsById); // was byId {ClaimId -> [commentIds...]}\n\n  var repliesByParentId = Object.assign({}, state.repliesByParentId); // {ParentCommentID -> [commentIds...] } list of reply comments\n\n  var commentsByUri = Object.assign({}, state.commentsByUri);\n  var comments = byId[claimId] || [];\n  var newCommentIds = comments.slice(); // If it was created during a livestream, let the websocket handler perform the state update\n\n  if (!livestream) {\n    // add the comment by its ID\n    commentById[comment.comment_id] = comment; // push the comment_id to the top of ID list\n\n    newCommentIds.unshift(comment.comment_id);\n    byId[claimId] = newCommentIds;\n\n    if (totalCommentsById.hasOwnProperty(claimId)) {\n      totalCommentsById[claimId] += 1;\n    }\n\n    if (comment['parent_id']) {\n      if (!repliesByParentId[comment.parent_id]) {\n        repliesByParentId[comment.parent_id] = [comment.comment_id];\n      } else {\n        repliesByParentId[comment.parent_id].unshift(comment.comment_id);\n      } // Update the parent's \"replies\" value\n\n\n      if (commentById[comment.parent_id]) {\n        commentById[comment.parent_id].replies = (commentById[comment.parent_id].replies || 0) + 1;\n      }\n    } else {\n      if (!topLevelCommentsById[claimId]) {\n        commentsByUri[uri] = claimId;\n        topLevelCommentsById[claimId] = [comment.comment_id];\n      } else {\n        topLevelCommentsById[claimId].unshift(comment.comment_id);\n      }\n    }\n  }\n\n  var myCommentedChannelIdsById;\n  var commentedChannelIds = (state.myCommentedChannelIdsById[claimId] || []).slice();\n\n  if (!commentedChannelIds.includes(comment.channel_id)) {\n    commentedChannelIds.push(comment.channel_id);\n    myCommentedChannelIdsById = _objectSpread({}, state.myCommentedChannelIdsById, _defineProperty({}, claimId, commentedChannelIds));\n  }\n\n  return _objectSpread({}, state, {\n    topLevelCommentsById: topLevelCommentsById,\n    repliesByParentId: repliesByParentId,\n    commentById: commentById,\n    byId: byId,\n    totalCommentsById: totalCommentsById,\n    commentsByUri: commentsByUri,\n    isLoading: false,\n    isCommenting: false,\n    myCommentedChannelIdsById: myCommentedChannelIdsById || state.myCommentedChannelIdsById\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_REACTION_LIST_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isFetchingReacts: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_REACTION_LIST_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isFetchingReacts: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_REACT_FAILED\"], function (state, action) {\n  var commentReaction = action.data; // String: reactionHash + type\n\n  var newReactingTypes = new Set(state.pendingCommentReactions);\n  newReactingTypes[\"delete\"](commentReaction);\n  return _objectSpread({}, state, {\n    pendingCommentReactions: Array.from(newReactingTypes)\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_REACT_STARTED\"], function (state, action) {\n  var commentReaction = action.data;\n  var newReactingTypes = new Set(state.pendingCommentReactions);\n  newReactingTypes.add(commentReaction);\n  return _objectSpread({}, state, {\n    pendingCommentReactions: Array.from(newReactingTypes)\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_REACT_COMPLETED\"], function (state, action) {\n  var commentReaction = action.data; // String: reactionHash + type\n\n  var newReactingTypes = new Set(state.pendingCommentReactions);\n  newReactingTypes[\"delete\"](commentReaction);\n  return _objectSpread({}, state, {\n    pendingCommentReactions: Array.from(newReactingTypes)\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_REACTION_LIST_COMPLETED\"], function (state, action) {\n  var _action$data2 = action.data,\n      myReactions = _action$data2.myReactions,\n      othersReactions = _action$data2.othersReactions,\n      channelId = _action$data2.channelId,\n      commentIds = _action$data2.commentIds;\n  var myReacts = Object.assign({}, state.myReactsByCommentId);\n  var othersReacts = Object.assign({}, state.othersReactsByCommentId);\n  var myReactionsEntries = myReactions ? Object.entries(myReactions) : [];\n  var othersReactionsEntries = othersReactions ? Object.entries(othersReactions) : [];\n\n  if (myReactionsEntries.length > 0) {\n    myReactionsEntries.forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          commentId = _ref2[0],\n          reactions = _ref2[1];\n\n      var key = channelId ? \"\".concat(commentId, \":\").concat(channelId) : commentId;\n      myReacts[key] = Object.entries(reactions).reduce(function (acc, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            name = _ref4[0],\n            count = _ref4[1];\n\n        if (count === 1) {\n          acc.push(name);\n        }\n\n        return acc;\n      }, []);\n    });\n  } else {\n    commentIds.forEach(function (commentId) {\n      var key = channelId ? \"\".concat(commentId, \":\").concat(channelId) : commentId;\n      myReacts[key] = [];\n    });\n  }\n\n  if (othersReactionsEntries.length > 0) {\n    othersReactionsEntries.forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          commentId = _ref6[0],\n          reactions = _ref6[1];\n\n      var key = channelId ? \"\".concat(commentId, \":\").concat(channelId) : commentId;\n      othersReacts[key] = reactions;\n    });\n  } else {\n    commentIds.forEach(function (commentId) {\n      var key = channelId ? \"\".concat(commentId, \":\").concat(channelId) : commentId;\n      othersReacts[key] = {};\n    });\n  }\n\n  return _objectSpread({}, state, {\n    isFetchingReacts: false,\n    myReactsByCommentId: myReacts,\n    othersReactsByCommentId: othersReacts\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_LIST_STARTED\"], function (state, action) {\n  var parentId = action.data.parentId;\n  var isLoadingByParentId = Object.assign({}, state.isLoadingByParentId);\n\n  if (parentId) {\n    isLoadingByParentId[parentId] = true;\n  }\n\n  return _objectSpread({}, state, {\n    isLoading: true,\n    isLoadingByParentId: isLoadingByParentId\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_LIST_COMPLETED\"], function (state, action) {\n  var _settingsByChannelId$;\n\n  var _action$data3 = action.data,\n      comments = _action$data3.comments,\n      parentId = _action$data3.parentId,\n      totalItems = _action$data3.totalItems,\n      totalFilteredItems = _action$data3.totalFilteredItems,\n      totalPages = _action$data3.totalPages,\n      claimId = _action$data3.claimId,\n      uri = _action$data3.uri,\n      disabled = _action$data3.disabled,\n      creatorClaimId = _action$data3.creatorClaimId;\n  var commentById = Object.assign({}, state.commentById);\n  var byId = Object.assign({}, state.byId);\n  var topLevelCommentsById = Object.assign({}, state.topLevelCommentsById); // was byId {ClaimId -> [commentIds...]}\n\n  var topLevelTotalCommentsById = Object.assign({}, state.topLevelTotalCommentsById);\n  var topLevelTotalPagesById = Object.assign({}, state.topLevelTotalPagesById);\n  var commentsByUri = Object.assign({}, state.commentsByUri);\n  var repliesByParentId = Object.assign({}, state.repliesByParentId);\n  var totalCommentsById = Object.assign({}, state.totalCommentsById);\n  var pinnedCommentsById = Object.assign({}, state.pinnedCommentsById);\n  var repliesTotalPagesByParentId = Object.assign({}, state.repliesTotalPagesByParentId);\n  var isLoadingByParentId = Object.assign({}, state.isLoadingByParentId);\n  var settingsByChannelId = Object.assign({}, state.settingsByChannelId); // save an array of claim ids of members-only chats to check during list\n\n  var membersOnlyChats = ((_settingsByChannelId$ = settingsByChannelId[creatorClaimId]) === null || _settingsByChannelId$ === void 0 ? void 0 : _settingsByChannelId$.livestream_chat_members_only) || false; // if (restrictedToMembersOnly) {\n  //   membersOnlyChats.push(claimId);\n  // }\n\n  settingsByChannelId[creatorClaimId] = _objectSpread({}, settingsByChannelId[creatorClaimId] || {}, {\n    // comments_enabled: !disabled,\n    livestream_chat_members_only: membersOnlyChats\n  });\n\n  if (parentId) {\n    isLoadingByParentId[parentId] = false;\n  }\n\n  if (!disabled) {\n    if (parentId) {\n      repliesTotalPagesByParentId[parentId] = totalPages;\n    } else {\n      totalCommentsById[claimId] = totalItems;\n      topLevelTotalCommentsById[claimId] = totalFilteredItems;\n      topLevelTotalPagesById[claimId] = totalPages;\n    }\n\n    var commonUpdateAction = function commonUpdateAction(comment, commentById, commentIds, index) {\n      // map the comment_ids to the new comments\n      commentById[comment.comment_id] = comment;\n      commentIds[index] = comment.comment_id;\n    };\n\n    if (comments) {\n      // we use an Array to preserve order of listing\n      // in reality this doesn't matter and we can just\n      // sort comments by their timestamp\n      var commentIds = Array(comments.length); // --- Top-level comments ---\n\n      if (!parentId) {\n        for (var i = 0; i < comments.length; ++i) {\n          var comment = comments[i];\n          commonUpdateAction(comment, commentById, commentIds, i);\n\n          if (comment.is_pinned) {\n            immPushToArrayInObject(pinnedCommentsById, claimId, comment.comment_id);\n          } else {\n            immPushToArrayInObject(topLevelCommentsById, claimId, comment.comment_id);\n          }\n        }\n      } // --- Replies ---\n      else {\n          for (var _i2 = 0; _i2 < comments.length; ++_i2) {\n            var _comment = comments[_i2];\n            commonUpdateAction(_comment, commentById, commentIds, _i2);\n            immPushToArrayInObject(repliesByParentId, parentId, _comment.comment_id);\n          }\n        }\n\n      immConcatToArrayInObject(byId, claimId, commentIds);\n      commentsByUri[uri] = claimId;\n    }\n  }\n\n  return _objectSpread({}, state, {\n    topLevelCommentsById: topLevelCommentsById,\n    topLevelTotalCommentsById: topLevelTotalCommentsById,\n    topLevelTotalPagesById: topLevelTotalPagesById,\n    repliesByParentId: repliesByParentId,\n    totalCommentsById: totalCommentsById,\n    pinnedCommentsById: pinnedCommentsById,\n    repliesTotalPagesByParentId: repliesTotalPagesByParentId,\n    byId: byId,\n    commentById: commentById,\n    commentsByUri: commentsByUri,\n    isLoading: false,\n    isLoadingByParentId: isLoadingByParentId,\n    settingsByChannelId: settingsByChannelId\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_BY_ID_STARTED\"], function (state) {\n  return _objectSpread({}, state, {\n    isLoadingById: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_BY_ID_COMPLETED\"], function (state, action) {\n  var _action$data4 = action.data,\n      comment = _action$data4.comment,\n      ancestors = _action$data4.ancestors;\n  var claimId = comment.claim_id;\n  var commentById = Object.assign({}, state.commentById);\n  var byId = Object.assign({}, state.byId);\n  var topLevelCommentsById = Object.assign({}, state.topLevelCommentsById); // was byId {ClaimId -> [commentIds...]}\n\n  var topLevelTotalCommentsById = Object.assign({}, state.topLevelTotalCommentsById);\n  var topLevelTotalPagesById = Object.assign({}, state.topLevelTotalPagesById);\n  var pinnedCommentsById = Object.assign({}, state.pinnedCommentsById);\n  var repliesByParentId = Object.assign({}, state.repliesByParentId);\n  var fetchedCommentAncestors = Object.assign({}, state.fetchedCommentAncestors);\n\n  var updateStore = function updateStore(comment, commentById, byId, repliesByParentId, topLevelCommentsById) {\n    commentById[comment.comment_id] = comment;\n    immPrefixArrayInObject(byId, claimId, comment.comment_id);\n    var parentId = comment.parent_id;\n\n    if (comment.parent_id) {\n      immPushToArrayInObject(repliesByParentId, parentId, comment.comment_id);\n    } else {\n      if (comment.is_pinned) {\n        immPushToArrayInObject(pinnedCommentsById, claimId, comment.comment_id);\n      } else {\n        immPushToArrayInObject(topLevelCommentsById, claimId, comment.comment_id);\n      }\n    }\n  };\n\n  updateStore(comment, commentById, byId, repliesByParentId, topLevelCommentsById);\n\n  if (ancestors) {\n    ancestors.forEach(function (ancestor) {\n      updateStore(ancestor, commentById, byId, repliesByParentId, topLevelCommentsById);\n      immPushToArrayInObject(fetchedCommentAncestors, comment.comment_id, ancestor.comment_id);\n    });\n  }\n\n  return _objectSpread({}, state, {\n    isLoadingById: false,\n    topLevelCommentsById: topLevelCommentsById,\n    topLevelTotalCommentsById: topLevelTotalCommentsById,\n    topLevelTotalPagesById: topLevelTotalPagesById,\n    pinnedCommentsById: pinnedCommentsById,\n    repliesByParentId: repliesByParentId,\n    byId: byId,\n    commentById: commentById,\n    fetchedCommentAncestors: fetchedCommentAncestors\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_MY_COMMENTED_CHANNELS_COMPLETE\"], function (state, action) {\n  var _action$data5 = action.data,\n      contentClaimId = _action$data5.contentClaimId,\n      commentedChannelIds = _action$data5.commentedChannelIds;\n  return _objectSpread({}, state, {\n    myCommentedChannelIdsById: _objectSpread({}, state.myCommentedChannelIdsById, _defineProperty({}, contentClaimId, commentedChannelIds))\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_SUPER_CHAT_LIST_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isLoading: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_SUPER_CHAT_LIST_STARTED\"], function (state) {\n  return _objectSpread({}, state, {\n    isLoading: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_SUPER_CHAT_LIST_COMPLETED\"], function (state, action) {\n  var _action$data6 = action.data,\n      comments = _action$data6.comments,\n      totalAmount = _action$data6.totalAmount,\n      uri = _action$data6.uri;\n  return _objectSpread({}, state, {\n    superChatsByUri: _objectSpread({}, state.superChatsByUri, _defineProperty({}, uri, {\n      comments: comments,\n      totalAmount: totalAmount\n    })),\n    isLoading: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_LIST_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isLoading: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_LIST_RESET\"], function (state, action) {\n  var claimId = action.data.claimId;\n  var byId = Object.assign({}, state.byId);\n  var totalCommentsById = Object.assign({}, state.totalCommentsById);\n  var topLevelCommentsById = Object.assign({}, state.topLevelCommentsById); // was byId {ClaimId -> [commentIds...]}\n\n  var topLevelTotalCommentsById = Object.assign({}, state.topLevelTotalCommentsById);\n  var topLevelTotalPagesById = Object.assign({}, state.topLevelTotalPagesById);\n  var pinnedCommentsById = Object.assign({}, state.pinnedCommentsById);\n  var myReacts = Object.assign({}, state.myReactsByCommentId);\n  var othersReacts = Object.assign({}, state.othersReactsByCommentId);\n\n  function deleteReacts(reactObj, commentIdsToRemove) {\n    if (commentIdsToRemove && commentIdsToRemove.length > 0) {\n      var reactionKeys = Object.keys(reactObj);\n      reactionKeys.forEach(function (rk) {\n        var colonIndex = rk.indexOf(':');\n        var commentId = colonIndex === -1 ? rk : rk.substring(0, colonIndex);\n\n        if (commentIdsToRemove.includes(commentId)) {\n          delete reactObj[rk];\n        }\n      });\n    }\n  }\n\n  deleteReacts(myReacts, byId[claimId]);\n  deleteReacts(othersReacts, byId[claimId]);\n  delete byId[claimId];\n  delete totalCommentsById[claimId];\n  delete topLevelCommentsById[claimId];\n  delete topLevelTotalCommentsById[claimId];\n  delete topLevelTotalPagesById[claimId];\n  delete pinnedCommentsById[claimId];\n  return _objectSpread({}, state, {\n    byId: byId,\n    totalCommentsById: totalCommentsById,\n    topLevelCommentsById: topLevelCommentsById,\n    topLevelTotalCommentsById: topLevelTotalCommentsById,\n    topLevelTotalPagesById: topLevelTotalPagesById,\n    pinnedCommentsById: pinnedCommentsById,\n    myReactsByCommentId: myReacts,\n    othersReactsByCommentId: othersReacts\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_RECEIVED\"], function (state, action) {\n  var _action$data7 = action.data,\n      uri = _action$data7.uri,\n      claimId = _action$data7.claimId,\n      comment = _action$data7.comment;\n  var commentsByUri = Object.assign({}, state.commentsByUri);\n  var commentsByClaimId = Object.assign({}, state.byId);\n  var allCommentsById = Object.assign({}, state.commentById);\n  var topLevelCommentsById = Object.assign({}, state.topLevelCommentsById);\n  var superChatsByUri = Object.assign({}, state.superChatsByUri);\n  var commentsForId = topLevelCommentsById[claimId];\n  allCommentsById[comment.comment_id] = comment;\n  commentsByUri[uri] = claimId;\n\n  if (commentsForId) {\n    var newCommentsForId = commentsForId.slice();\n    var commentExists = newCommentsForId.includes(comment.comment_id);\n\n    if (!commentExists) {\n      newCommentsForId.unshift(comment.comment_id);\n    }\n\n    topLevelCommentsById[claimId] = newCommentsForId;\n  } else {\n    topLevelCommentsById[claimId] = [comment.comment_id];\n  } // We don't care to keep existing lower level comments since this is just for livestreams\n\n\n  commentsByClaimId[claimId] = topLevelCommentsById[claimId];\n\n  if (comment.support_amount > 0) {\n    var superChatForUri = superChatsByUri[uri];\n    var superChatCommentsForUri = superChatForUri && superChatForUri.comments;\n    var sortedSuperChatComments = [];\n    var hasAddedNewComment = false;\n\n    if (superChatCommentsForUri && superChatCommentsForUri.length > 0) {\n      // Go for the entire length of superChatCommentsForUri since a comment will be added to this list\n      for (var i = 0; i < superChatCommentsForUri.length; i++) {\n        var existingSuperChat = superChatCommentsForUri[i];\n\n        if (existingSuperChat.support_amount < comment.support_amount && !hasAddedNewComment) {\n          hasAddedNewComment = true;\n          sortedSuperChatComments.push(comment);\n          sortedSuperChatComments.push(existingSuperChat);\n        } else {\n          sortedSuperChatComments.push(existingSuperChat);\n        } // If the new superchat hasn't been added yet, it must be the smallest superchat in the list\n\n\n        if (i === superChatCommentsForUri.length - 1 && sortedSuperChatComments.length === superChatCommentsForUri.length) {\n          sortedSuperChatComments.push(comment);\n        }\n      }\n\n      superChatsByUri[uri].comments = sortedSuperChatComments;\n      superChatsByUri[uri].totalAmount += comment.support_amount;\n    } else {\n      superChatsByUri[uri] = {\n        comments: [comment],\n        totalAmount: comment.support_amount\n      };\n    }\n  }\n\n  return _objectSpread({}, state, {\n    byId: commentsByClaimId,\n    commentById: allCommentsById,\n    commentsByUri: commentsByUri,\n    topLevelCommentsById: topLevelCommentsById,\n    superChatsByUri: superChatsByUri\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_ABANDON_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isLoading: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_ABANDON_COMPLETED\"], function (state, action) {\n  var comment_id = action.data.comment_id;\n  var commentById = Object.assign({}, state.commentById);\n  var byId = Object.assign({}, state.byId);\n  var repliesByParentId = Object.assign({}, state.repliesByParentId); // {ParentCommentID -> [commentIds...] } list of reply comments\n\n  var totalCommentsById = Object.assign({}, state.totalCommentsById);\n  var comment = commentById[comment_id]; // to remove the comment and its references\n\n  var claimId = comment.claim_id;\n\n  if (byId[claimId]) {\n    for (var i = 0; i < byId[claimId].length; i++) {\n      if (byId[claimId][i] === comment_id) {\n        // immutable update\n        byId[claimId] = Array.from(byId[claimId]);\n        byId[claimId].splice(i, 1);\n        break;\n      }\n    }\n  } // Update replies\n\n\n  if (comment['parent_id'] && repliesByParentId[comment.parent_id]) {\n    var index = repliesByParentId[comment.parent_id].indexOf(comment.comment_id);\n\n    if (index > -1) {\n      repliesByParentId[comment.parent_id].splice(index, 1);\n\n      if (commentById[comment.parent_id]) {\n        commentById[comment.parent_id].replies = Math.max(0, (commentById[comment.parent_id].replies || 0) - 1);\n      }\n    }\n  }\n\n  if (totalCommentsById.hasOwnProperty(claimId)) {\n    totalCommentsById[claimId] = Math.max(0, totalCommentsById[claimId] - 1);\n  }\n\n  delete commentById[comment_id];\n  return _objectSpread({}, state, {\n    commentById: commentById,\n    byId: byId,\n    totalCommentsById: totalCommentsById,\n    repliesByParentId: repliesByParentId,\n    isLoading: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_ABANDON_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isCommenting: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_UPDATE_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isCommenting: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_UPDATE_COMPLETED\"], function (state, action) {\n  var comment = action.data.comment;\n  var commentById = Object.assign({}, state.commentById);\n  commentById[comment.comment_id] = comment;\n  return _objectSpread({}, state, {\n    commentById: commentById,\n    isCommenting: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_UPDATE_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    isCmmenting: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_PIN_COMPLETED\"], function (state, action) {\n  var _action$data8 = action.data,\n      pinnedComment = _action$data8.pinnedComment,\n      claimId = _action$data8.claimId,\n      unpin = _action$data8.unpin;\n  var commentById = Object.assign({}, state.commentById);\n  var topLevelCommentsById = Object.assign({}, state.topLevelCommentsById);\n  var pinnedCommentsById = Object.assign({}, state.pinnedCommentsById);\n\n  if (pinnedComment) {\n    if (topLevelCommentsById[claimId]) {\n      var index = topLevelCommentsById[claimId].indexOf(pinnedComment.comment_id);\n\n      if (index > -1) {\n        topLevelCommentsById[claimId].splice(index, 1);\n      }\n    } else {\n      topLevelCommentsById[claimId] = [];\n    }\n\n    if (pinnedCommentsById[claimId]) {\n      var _index = pinnedCommentsById[claimId].indexOf(pinnedComment.comment_id);\n\n      if (_index > -1) {\n        pinnedCommentsById[claimId].splice(_index, 1);\n      }\n    } else {\n      pinnedCommentsById[claimId] = [];\n    }\n\n    if (unpin) {\n      // Without the sort score, I have no idea where to put it. Just\n      // dump it at the top. Users can refresh if they want it back to\n      // the correct sorted position.\n      topLevelCommentsById[claimId].unshift(pinnedComment.comment_id);\n    } else {\n      pinnedCommentsById[claimId].unshift(pinnedComment.comment_id);\n    }\n\n    if (commentById[pinnedComment.comment_id]) {\n      // Commentron's `comment.Pin` response places the creator's credentials\n      // in the 'channel_*' fields, which doesn't make sense. Maybe it is to\n      // show who signed/pinned it, but even if so, it shouldn't overload\n      // these variables which are already used by existing comment data structure.\n      // Ensure we don't override the existing/correct values, but fallback\n      // to whatever was given.\n      var _commentById$pinnedCo = commentById[pinnedComment.comment_id],\n          channel_id = _commentById$pinnedCo.channel_id,\n          channel_name = _commentById$pinnedCo.channel_name,\n          channel_url = _commentById$pinnedCo.channel_url;\n      commentById[pinnedComment.comment_id] = _objectSpread({}, pinnedComment, {\n        channel_id: channel_id || pinnedComment.channel_id,\n        channel_name: channel_name || pinnedComment.channel_name,\n        channel_url: channel_url || pinnedComment.channel_url\n      });\n    } else {\n      commentById[pinnedComment.comment_id] = pinnedComment;\n    }\n  }\n\n  return _objectSpread({}, state, {\n    commentById: commentById,\n    topLevelCommentsById: topLevelCommentsById,\n    pinnedCommentsById: pinnedCommentsById\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MARK_AS_REMOVED\"], function (state, action) {\n  var comment_id = action.data.comment_id;\n  var commentById = Object.assign({}, state.commentById);\n\n  if (!commentById[comment_id]) {\n    return state;\n  }\n\n  commentById[comment_id] = _objectSpread({}, commentById[comment_id], {\n    removed: true\n  });\n  return _objectSpread({}, state, {\n    commentById: commentById\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_BLOCK_LIST_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingModerationBlockList: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_BLOCK_LIST_COMPLETED\"], function (state, action) {\n  var _action$data9 = action.data,\n      personalBlockList = _action$data9.personalBlockList,\n      adminBlockList = _action$data9.adminBlockList,\n      moderatorBlockList = _action$data9.moderatorBlockList,\n      moderatorBlockListDelegatorsMap = _action$data9.moderatorBlockListDelegatorsMap,\n      personalTimeoutMap = _action$data9.personalTimeoutMap,\n      adminTimeoutMap = _action$data9.adminTimeoutMap,\n      moderatorTimeoutMap = _action$data9.moderatorTimeoutMap;\n  return _objectSpread({}, state, {\n    moderationBlockList: personalBlockList,\n    adminBlockList: adminBlockList,\n    moderatorBlockList: moderatorBlockList,\n    moderatorBlockListDelegatorsMap: moderatorBlockListDelegatorsMap,\n    personalTimeoutMap: personalTimeoutMap,\n    adminTimeoutMap: adminTimeoutMap,\n    moderatorTimeoutMap: moderatorTimeoutMap,\n    fetchingModerationBlockList: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_BLOCK_LIST_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingModerationBlockList: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_BLOCK_STARTED\"], function (state, action) {\n  var _action$data10 = action.data,\n      blockedUri = _action$data10.blockedUri,\n      creatorUri = _action$data10.creatorUri,\n      blockLevel = _action$data10.blockLevel;\n\n  switch (blockLevel) {\n    default:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].SELF:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].ADMIN:\n      return _objectSpread({}, state, {\n        blockingByUri: _objectSpread({}, state.blockingByUri, _defineProperty({}, blockedUri, true))\n      });\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].MODERATOR:\n      var newMap = Object.assign({}, state.togglingForDelegatorMap);\n      var togglingDelegatorsForBlockedUri = newMap[blockedUri];\n\n      if (togglingDelegatorsForBlockedUri) {\n        if (!togglingDelegatorsForBlockedUri.includes(creatorUri)) {\n          togglingDelegatorsForBlockedUri.push(creatorUri);\n        }\n      } else {\n        newMap[blockedUri] = [creatorUri];\n      }\n\n      return _objectSpread({}, state, {\n        togglingForDelegatorMap: newMap\n      });\n  }\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_UN_BLOCK_STARTED\"], function (state, action) {\n  var _action$data11 = action.data,\n      blockedUri = _action$data11.blockedUri,\n      creatorUri = _action$data11.creatorUri,\n      blockLevel = _action$data11.blockLevel;\n\n  switch (blockLevel) {\n    default:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].SELF:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].ADMIN:\n      return _objectSpread({}, state, {\n        unBlockingByUri: _objectSpread({}, state.unBlockingByUri, _defineProperty({}, blockedUri, true))\n      });\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].MODERATOR:\n      var newMap = Object.assign({}, state.togglingForDelegatorMap);\n      var togglingDelegatorsForBlockedUri = newMap[blockedUri];\n\n      if (togglingDelegatorsForBlockedUri) {\n        if (!togglingDelegatorsForBlockedUri.includes(creatorUri)) {\n          togglingDelegatorsForBlockedUri.push(creatorUri);\n        }\n      } else {\n        newMap[blockedUri] = [creatorUri];\n      }\n\n      return _objectSpread({}, state, {\n        togglingForDelegatorMap: newMap\n      });\n  }\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_BLOCK_FAILED\"], function (state, action) {\n  var _action$data12 = action.data,\n      blockedUri = _action$data12.blockedUri,\n      creatorUri = _action$data12.creatorUri,\n      blockLevel = _action$data12.blockLevel;\n\n  switch (blockLevel) {\n    default:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].SELF:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].ADMIN:\n      return _objectSpread({}, state, {\n        blockingByUri: _objectSpread({}, state.blockingByUri, _defineProperty({}, blockedUri, false))\n      });\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].MODERATOR:\n      var newMap = Object.assign({}, state.togglingForDelegatorMap);\n      var togglingDelegatorsForBlockedUri = newMap[blockedUri];\n\n      if (togglingDelegatorsForBlockedUri) {\n        newMap[blockedUri] = togglingDelegatorsForBlockedUri.filter(function (x) {\n          return x !== creatorUri;\n        });\n      }\n\n      return _objectSpread({}, state, {\n        togglingForDelegatorMap: newMap\n      });\n  }\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_UN_BLOCK_FAILED\"], function (state, action) {\n  var _action$data13 = action.data,\n      blockedUri = _action$data13.blockedUri,\n      creatorUri = _action$data13.creatorUri,\n      blockLevel = _action$data13.blockLevel;\n\n  switch (blockLevel) {\n    default:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].SELF:\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].ADMIN:\n      return _objectSpread({}, state, {\n        unBlockingByUri: _objectSpread({}, state.unBlockingByUri, _defineProperty({}, blockedUri, false))\n      });\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].MODERATOR:\n      var newMap = Object.assign({}, state.togglingForDelegatorMap);\n      var togglingDelegatorsForBlockedUri = newMap[blockedUri];\n\n      if (togglingDelegatorsForBlockedUri) {\n        newMap[blockedUri] = togglingDelegatorsForBlockedUri.filter(function (x) {\n          return x !== creatorUri;\n        });\n      }\n\n      return _objectSpread({}, state, {\n        togglingForDelegatorMap: newMap\n      });\n  }\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_BLOCK_COMPLETE\"], function (state, action) {\n  var _action$data14 = action.data,\n      blockedUri = _action$data14.blockedUri,\n      creatorUri = _action$data14.creatorUri,\n      blockLevel = _action$data14.blockLevel;\n  var commentById = Object.assign({}, state.commentById);\n  var blockingByUri = Object.assign({}, state.blockingByUri);\n\n  for (var commentId in commentById) {\n    var comment = commentById[commentId];\n\n    if (Object(util_lbryURI__WEBPACK_IMPORTED_MODULE_3__[\"isURIEqual\"])(blockedUri, comment.channel_url)) {\n      delete commentById[comment.comment_id];\n    }\n  }\n\n  switch (blockLevel) {\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].SELF:\n      {\n        var _blockList = state.moderationBlockList || [];\n\n        var _newBlockList = _blockList.slice();\n\n        _newBlockList.push(blockedUri);\n\n        delete blockingByUri[blockedUri];\n        return _objectSpread({}, state, {\n          commentById: commentById,\n          blockingByUri: blockingByUri,\n          moderationBlockList: _newBlockList\n        });\n      }\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].MODERATOR:\n      {\n        var _blockList2 = state.moderatorBlockList || [];\n\n        var _newBlockList2 = _blockList2.slice(); // Update main block list\n\n\n        if (!_newBlockList2.includes(blockedUri)) {\n          _newBlockList2.push(blockedUri);\n        } // Update list of delegators\n\n\n        var moderatorBlockListDelegatorsMap = Object.assign({}, state.moderatorBlockListDelegatorsMap);\n        var delegatorUrisForBlockedUri = moderatorBlockListDelegatorsMap[blockedUri];\n\n        if (delegatorUrisForBlockedUri) {\n          if (!delegatorUrisForBlockedUri.includes(creatorUri)) {\n            delegatorUrisForBlockedUri.push(creatorUri);\n          }\n        } else {\n          moderatorBlockListDelegatorsMap[blockedUri] = [creatorUri];\n        } // Remove \"toggling\" flag\n\n\n        var togglingMap = Object.assign({}, state.togglingForDelegatorMap);\n        var togglingDelegatorsForBlockedUri = togglingMap[blockedUri];\n\n        if (togglingDelegatorsForBlockedUri) {\n          togglingMap[blockedUri] = togglingDelegatorsForBlockedUri.filter(function (x) {\n            return x !== creatorUri;\n          });\n        }\n\n        return _objectSpread({}, state, {\n          commentById: commentById,\n          moderatorBlockList: _newBlockList2,\n          moderatorBlockListDelegatorsMap: moderatorBlockListDelegatorsMap,\n          togglingForDelegatorMap: togglingMap\n        });\n      }\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].ADMIN:\n      var blockList = state.adminBlockList || [];\n      var newBlockList = blockList.slice();\n      newBlockList.push(blockedUri);\n      delete blockingByUri[blockedUri];\n      return _objectSpread({}, state, {\n        commentById: commentById,\n        blockingByUri: blockingByUri,\n        adminBlockList: newBlockList\n      });\n  }\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_UN_BLOCK_COMPLETE\"], function (state, action) {\n  var _action$data15 = action.data,\n      blockedUri = _action$data15.blockedUri,\n      creatorUri = _action$data15.creatorUri,\n      blockLevel = _action$data15.blockLevel;\n  var unBlockingByUri = Object.assign(state.unBlockingByUri, {});\n\n  switch (blockLevel) {\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].SELF:\n      {\n        var blockList = state.moderationBlockList || [];\n        delete unBlockingByUri[blockedUri];\n        return _objectSpread({}, state, {\n          unBlockingByUri: unBlockingByUri,\n          moderationBlockList: blockList.slice().filter(function (uri) {\n            return uri !== blockedUri;\n          })\n        });\n      }\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].ADMIN:\n      {\n        var _blockList3 = state.adminBlockList || [];\n\n        delete unBlockingByUri[blockedUri];\n        return _objectSpread({}, state, {\n          unBlockingByUri: unBlockingByUri,\n          adminBlockList: _blockList3.slice().filter(function (uri) {\n            return uri !== blockedUri;\n          })\n        });\n      }\n\n    case constants_comment__WEBPACK_IMPORTED_MODULE_2__[\"BLOCK_LEVEL\"].MODERATOR:\n      {\n        var _blockList4 = state.moderatorBlockList || [];\n\n        var newBlockList = _blockList4.slice();\n\n        var togglingMap = Object.assign({}, state.togglingForDelegatorMap);\n        var moderatorBlockListDelegatorsMap = Object.assign({}, state.moderatorBlockListDelegatorsMap);\n        var delegatorUrisForBlockedUri = moderatorBlockListDelegatorsMap[blockedUri];\n\n        if (delegatorUrisForBlockedUri) {\n          var index = delegatorUrisForBlockedUri.indexOf(creatorUri);\n\n          if (index > -1) {\n            // Remove from delegators list\n            delegatorUrisForBlockedUri.splice(index, 1); // // Remove blocked entry if it was removed for all delegators\n            // if (delegatorUrisForBlockedUri.length === 0) {\n            //   delete moderatorBlockListDelegatorsMap[blockedUri];\n            //   newBlockList = newBlockList.filter((uri) => uri !== blockedUri);\n            // }\n            // Remove from \"toggling\" flag\n\n            var togglingDelegatorsForBlockedUri = togglingMap[blockedUri];\n\n            if (togglingDelegatorsForBlockedUri) {\n              togglingMap[blockedUri] = togglingDelegatorsForBlockedUri.filter(function (x) {\n                return x !== creatorUri;\n              });\n            }\n          }\n        }\n\n        return _objectSpread({}, state, {\n          moderatorBlockList: newBlockList,\n          togglingForDelegatorMap: togglingMap\n        });\n      }\n  }\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_MODERATION_DELEGATES_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingModerationDelegates: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_MODERATION_DELEGATES_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingModerationDelegates: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_MODERATION_DELEGATES_COMPLETED\"], function (state, action) {\n  var moderationDelegatesById = Object.assign({}, state.moderationDelegatesById);\n\n  if (action.data.delegates) {\n    moderationDelegatesById[action.data.id] = action.data.delegates.map(function (delegate) {\n      return {\n        channelId: delegate.channel_id,\n        channelName: delegate.channel_name\n      };\n    });\n  } else {\n    moderationDelegatesById[action.data.id] = [];\n  }\n\n  return _objectSpread({}, state, {\n    fetchingModerationDelegates: false,\n    moderationDelegatesById: moderationDelegatesById\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_AM_I_LIST_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingModerationDelegators: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_AM_I_LIST_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingModerationDelegators: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_MODERATION_AM_I_LIST_COMPLETED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingModerationDelegators: true,\n    moderationDelegatorsById: action.data\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_SETTINGS_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingSettings: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_SETTINGS_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingSettings: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_SETTINGS_COMPLETED\"], function (state, action) {\n  var _action$data16 = action.data,\n      channelId = _action$data16.channelId,\n      settings = _action$data16.settings,\n      partialUpdate = _action$data16.partialUpdate;\n  var settingsByChannelId = Object.assign({}, state.settingsByChannelId);\n\n  if (partialUpdate) {\n    settingsByChannelId[channelId] = _objectSpread({}, settingsByChannelId[channelId] || {}, {}, settings);\n  } else {\n    settingsByChannelId[channelId] = settings;\n\n    if (settings.words) {\n      settingsByChannelId[channelId].words = settings.words.split(',');\n    }\n  }\n\n  return _objectSpread({}, state, {\n    settingsByChannelId: settingsByChannelId,\n    fetchingSettings: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_BLOCKED_WORDS_STARTED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingBlockedWords: true\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_BLOCKED_WORDS_FAILED\"], function (state, action) {\n  return _objectSpread({}, state, {\n    fetchingBlockedWords: false\n  });\n}), _defineProperty(_handleActions, constants_action_types__WEBPACK_IMPORTED_MODULE_0__[\"COMMENT_FETCH_BLOCKED_WORDS_COMPLETED\"], function (state, action) {\n  var blockedWordsByChannelId = action.data;\n  var settingsByChannelId = Object.assign({}, state.settingsByChannelId); // blockedWordsByChannelId: {string: [string]}\n\n  Object.entries(blockedWordsByChannelId).forEach(function (x) {\n    var channelId = x[0];\n\n    if (!settingsByChannelId[channelId]) {\n      settingsByChannelId[channelId] = {};\n    }\n\n    settingsByChannelId[channelId].words = x[1];\n  });\n  return _objectSpread({}, state, {\n    settingsByChannelId: settingsByChannelId,\n    fetchingBlockedWords: false\n  });\n}), _handleActions), defaultState));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../ui/redux/reducers/comments.js\n");

/***/ })

})